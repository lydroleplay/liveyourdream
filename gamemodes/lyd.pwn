/***************************************************
ACHTUNG!!!!
WEBSQL ZU TESTZWECKEN VORRÜBERGEHEND DEAKTIVIERT! Unbedingt vor hochladen auf Hauptserver wieder aktivieren!
GANGFIGHT_TIME 40
Gangfight anzahl beachten
Informationen und anderes:
ROBBING_POLICE_MEN_ONLINE (in robbing inc erhöhen)
g_GangZone[index][GZ_iGangWarEnd] Zeit auf 40 Min wiedern stellen
Fraktions-IDs:

0 = Zivilist |
1. Los Santos Police Derpartment
2. Federal Bureau of Investigation
3. San Andreas Medical Department
4. San Andreas News Reporter
5. San Andreas Ordnungsamt
6. Grove Street
7. Ballas
8. Fahrschule
9. Staat
10. Yakuza
11.  V.L. Aztecas
12. La Cosa Nostra
13. Los Santos Vagos
14. Hitman Agency
15. NineDemons
16. Las Venturas Police Department
17. Wheelman Agency
18. United States Army
19. Terroristen
20. Outlawz
21. Triaden

    Staat,
    Sana,
    Samd,
    Oamt,
    Fahrschule,
    Ballas,
    Grove,
    Yakuza,
    Aztecas,
    LCN,
    Vagos,
    Hitman,
    BBikerZ,
    Wheelmenk,
    TerrorK,
    OutlawzK,
    ndgradethaK

Job-IDs:
0 = Arbeitslos |
1. Bauer
2. Busfahrer
3. Trucker
4. Pilot
5. KFZ-Mechatroniker
6. Anwalt
7. Straßenreiniger
8. Müllmann
9. Gärtner
10. Bauarbeiter
11. Schiffs-Fahrer
12. Geld-Transportfahrer
13. Eisverkäufer
14. Detektiv
15. Pizzalieferant
16. Taxifahrer
17. Drogendealer
18. Waffendealer
19. Taschendieb
20. Prostutierte
21. Wanted Hacker
22. Autodieb
23. Zugfahrer
25. HotDog Verkäufer
Admin-Ränge:
0 = Normaler User | 1 = Trial-Supporter | 2 = Supporter | 3 = Trial-Admin | 4 = Admin | 5 = Projektleiter

Skin-IDs + Zugehörige Fraktionen:

Zivilist:
    Mann: 2,3,7,18,19,20,21,22,23,24,25,26,27,28,29, 101
    Frau: 11,12, 90, 91, 93, 192
LSPD:
    Mann: 265, 266, 267, 280, 281, 282, 283, 285, 288
    Frau: 141, 148
FBI:
    Mann: 286
    Frau: 40, 150
SAMD:
    Mann: 70, 274, 275, 276
    Frau: 211
SA-NA:
    Mann: 57
    Frau: 55, 56
O-Amt:
    Mann: 50, 71
    Frau: 192
Grove:
    Mann: 105, 106, 107, 269, 270, 271
    Frau: 65
Ballas:
    Mann: 102, 103, 104
    Frau: 195
Fahrschule:
    Mann: 240
    Frau: 194

Präsident:
    Chaffeur: 171, 172
    Ausbilder: 60
    Praktikant: 170
    Bodyguard: 163, 164
    SS: 165, 166
    Präsident: 148, 17
    Bürgermeister: 150, 296

Yakuza:
    Mann: 186, 122, 123, 203, 204
    Frau: 169, 263

*****************************************************/
//#define _RUN_HAUPTTIMER_TEST_

// #define USE_NPCS
// Threads

//#define DEVELOPMENT
//#define Testserveran
#define PREIS_SCHEIDUNG 32000
#define SOUND_ALHAMBRA "http://lyd-roleplay.de/musik/disco.mp3"
#define URL_LOGINMUSIC "http://42oo.de/loginmusiklyd.mp3"

#define HAUSTIER_OFFSET 1.5

#define VW_ALL -1
#define VW_MAIN 0
#define VW_ALHAMBRAINTERIOR 41
#define VW_CASINOINTERIOR 50
#define VW_PAINTBALLGYMLS 10000

enum
{
	VW_EVIDENCEROOMINTERIOR = 2000,
	VW_ADMINPRISON,
	VW_LSPD,
	VW_SAMDINTERIOR, // Lobby
	VW_SAMDINTERIOR2, // First Floor
	VW_CITYHALLINTERIOR,
	VW_REGISTRATIONOFFICE,
	VW_POOINTERIOR,
	VW_LSPDINTERIOR,
	VW_FBIINTERIOR,
	VW_YAKUZAINTERIOR,
	VW_LCNINTERIOR,
	VW_GOVERNMENTINTERIOR,
	VW_BANKINTERIORLS,
	VW_BANKINTERIORLS2,
	VW_CLUBINTERIORLS,
	VW_BANKINTERIORLV,
    VW_TRIADSINTERIOR
}

#define INFO_STRING "* Benutze: {00CC00}"

stock _g_str[145];
#define SCMFormatted(%0,%1,%2,%3); \
    format(_g_str, sizeof(_g_str), %2, %3) && \
    SendClientMessage(%0, %1, _g_str);

new GasMax[] = {
45, //"Landstalker",
40,//"Bravura",
50,//"Buffalo",
110,//"Linerunner",
40,//"Pereniel",
45,//"Sentinel",
200,//"Dumper",
80,//"Firetruck",
75,//"Trashmaster",
60,//"Stretch",
40,//"Manana",
60,//"Infernus",
50,//"Voodoo",
90,//"Pony",
90,//"Mule",
55,//"Cheetah",
70,//"Ambulance",
60,//"Leviathan",
60,//"Moonbeam",
50,//"Esperanto",
45,//"Taxi",
40,//"Washington",
45,//"Bobcat",
64,//"Mr Whoopee",
60,//"BF Injection",
250,//"Hunter",
45,//"Premier",
80,//"Enforcer",
70,//"Securicar",
55,//"Banshee",
50,//"Predator",
80,//"Bus",
100,//"Rhino",
50,//"Barracks",
55,//"Hotknife",
100,//"Trailer",
58,//"Previon",
95,//"Coach",
48,//"Cabbie",
45,//"Stallion",
70,//"Rumpo",
100,//"RC Bandit",
50,//"Romero",
130,//"Packer",
120,//"Monster Truck",
40,//"Admiral",
50,//"Squalo",
150,//"Seasparrow",
15,//"Pizzaboy",
100,//"Tram",
100,//"Trailer",
60,//"Turismo",
55,//"Speeder",
60,//"Reefer",
60,//"Tropic",
160,//"Flatbed",
80,//"Yankee",
20,//"Caddy",
48,//"Solair",
75,//"Berkley's RC Van",
100,//"Skimmer",
30,//"PCJ-600",
15,//"Faggio",
30,//"Freeway",
100,//"RC Baron",
100,//"RC Raider",
60,//"Glendale",
55,//"Oceanic",
45,//"Sanchez",
80,//"Sparrow",
95,//"Patriot",
35,//"Quad",
50,//"Coastguard",
50,//"Dinghy",
50,//"Hermes",
55,//"Sabre",
90,//"Rustler",
60,//"ZR-350",
60,//"Walton",
58,//"Regina",
55,//"Comet",
0,//"BMX",
50,//"Burrito",
100,//"Camper",
60,//"Marquis",
35,//"Baggage",
150,//"Dozer",
300,//"Maverick",
100,//"News Chopper",
80,//"Rancher",
80,//"FBI Rancher",
50,//"Virgo",
50,//"Greenwood",
100,//"Jetmax",
70,//"Hotring",
80,//"Sandking",
50,//"Blista Compact",
80,//"Police Maverick",
80,//"Boxville",
58,//"Benson",
80,//"Mesa",
100,//"RC Goblin",
75,//"Hotring Racer",
75,//"Hotring Racer",
75,//"Bloodring Banger",
75,//"Rancher",
60,//"Super GT",
45,//"Elegant",
110,//"Journey",
0,//"Bike",
0,//"Mountain Bike",
50,//"Beagle",
50,//"Cropdust",
50,//"Stunt",
140,//"Tanker",
100,//"RoadTrain",
50,//"Nebula",
50,//"Majestic",
48,//"Buccaneer",
500,//"Shamal",
175,//"Hydra",
30,//"FCR-900",
30,//"NRG-500",
48,//"HPV1000",
135,//"Cement Truck",
75,//"Tow Truck",
60,//"Fortune",
60,//"Cadrona",
65,//"FBI Truck",
55,//"Willard",
30,//"Forklift",
35,//"Traktor",
60,//"Combine",
50,//"Feltzer",
50,//"Remington",
55,//"Slamvan",
55,//"Blade",
100,//"Freight",
100,//"Streak",
100,//"Vortex",
45,//"Vincent",
60,//"Bullet",
58,//"Clover",
60,//"Sadler",
90,//"Firetruck",
60,//"Hustler",
50,//"Intruder",
40,//"Primo",
130,//"Cargobob",
60,//"Tampa",
60,//"Sunrise",
60,//"Merit",
100,//"Utility",
50,//"Nevada",
80,//"Yosemite",
50,//"Windsor",
100,//"Monster Truck",
100,//"Monster Truck",
55,//"Uranus",
55,//"Jester",
60,//"Sultan",
60,//"Stratum",
45,//"Elegy",
150,//"Raindance",
100,//"RC Tiger",
50,//"Flash",
50,//"Tahoma",
55,//"Savanna",
60,//"Bandito",
100,//"Freight",
100,//"Trailer",
20,//"Kart",
20,//"Mower",
200,//"Duneride",
35,//"Sweeper",
50,//"Broadway",
50,//"Tornado",
200,//"AT-400",
200,//"DFT-30",
65,//"Huntley",
60,//"Stafford",
30,//"BF-400",
70,//"Newsvan",
30,//"Tug",
100,//"Trailer",
50,//"Emperor",
30,//"Wayfarer",
60,//"Euros",
90,//"Hotdog",
60,//"Club",
100,//"Trailer",
100,//"Trailer",
200,//"Andromada",
100,//"Dodo",
100,//"RC Cam",
50,//"Launch",
60,//"Streifenwagen",
60,//"Streifenwagen",
60,//"Streifenwagen",
75,//"Polizei Ranger",
50,//"Picador",
75,//"S.W.A.T. Van",
55,//"Alpha",
55,//"Phoenix",
50,//"Glendale",
50,//"Sadler",
100,//"Luggage Trailer",
100,//"Luggage Trailer",
100,//"Stair Trailer",
52,//"Boxville",
100,//"Farm Plow",
100//"Utility Trailer"
};

new gSQL;
new gWebSQL;
new MySQLConnected = 0;
new tMySQL;
new bool:g_bRegSperre = false;
new savewetterid;

// Global vars
new JAIL_TIMEOUT = 120;

//Badwords für Badwordsystem
new waffenlagerzu[25];
new word[11][]= {
	{"Hurensohn"},
	{"Bastard"},
	{"Ficker"},
	{"Hurentochter"},
	{"Wichser"},
	{"Wixxer"},
	{"acab"},
	{"Missgeburt"},
	{"Schwuchtel"},
	{"Schlampe"},
	{"Arschgeburt"}
};

enum E_SHISHA_PIPE {
    SHISHA_PIPE_NAME[30],
    SHISHA_PIPE_COST,
    SHISHA_PIPE_HEX_COLOR[9]
}

new const g_shishaPipes[][E_SHISHA_PIPE] = {
    {"Doppelapfel",     200,    "{228B22}"},
    {"Erdbeere",        300,    "{FB1C3B}"},
    {"Wassermelone",    400,    "{91A120}"},
    {"Cherry",          400,    "{932F3B}"},
    {"Cold Lime",       500,    "{D8F868}"},
    {"Traube-Minze",    600,    "{C3D038}"},
    {"Exotic Lemon",    700,    "{F8D83B}"},
    {"Minze",           800,    "{67A524}"},
    {"Granatapfel",     1000,   "{B22A44}"},
    {"Drachenfrucht",   1100,   "{E770AE}"},
    {"Blue NRG",        1200,   "{2BFFC4}"}
};

enum E_SELL_GUNS {
    SELL_GUN_NAME[20],
    SELL_GUN_ID,
    SELL_GUN_MATS,
    SELL_GUN_AMMO,
    SELL_GUN_INDEF_ARTICLE[6]
}

new const g_sellGuns[][E_SELL_GUNS] = {
    {"Schlagring",         1,  80,   1, "einen"},
    {"Baseball Schläger",  5, 100,   1, "einen"},
    {"Desert Eagle",      24, 210, 200, "eine"},
    {"MP5",               29, 230, 200, "eine"},
    {"Shotgun",           25, 230, 200, "eine"},
    {"M4",                31, 280, 200, "eine"},
    {"AK-47",             30, 280, 200, "eine"},
    {"Sniper",            34, 400, 100, "eine"}
};

new jobNames[][] = {
    "Arbeitslos",
    "Bauer",
    "Busfahrer",
    "Trucker",
    "Pilot",
    "KFZ-Mechaniker",
    "Anwalt",
    "Straßenreiniger",
    "Müllmann",
    "Gärtner",
    "Bauarbeiter",
    "Schiffs-Fahrer",
    "Geld-Transportfahrer",
    "Eisverkäufer",
    "Detektiv",
    "Pizzalieferant",
    "Taxifahrer",
    "Drogendealer",
    "Waffendealer",
    "Taschendieb",
    "Prostituierte",
    "Wanted-Hacker",
    "Autodieb",
    "Zugfahrer",
    "HotDog-Verkäufer"
};

new factionNames[][] = {
    "Zivilist",
    "LSPD",
    "FBI",
    "SAMD",
    "SA-NA",
    "Ordnungsamt",
    "Grove Street",
    "Ballas",
    "Fahrschule",
    "Regierung",
    "Yakuza",
    "Aztecas",
    "LCN",
    "Vagos",
    "Hitman",
    "Nine Demons",
    "Zollamt",
    "Wheelman",
    "Army",
    "Terroristen",
    "Outlawz",
    "Triaden"
};

enum {
    EVIDENCEROOM_STATUS_IDLE,
    EVIDENCEROOM_STATUS_ONGOING,
    EVIDENCEROOM_STATUS_COOLDOWN
}

enum E_EVIDENCEROOM_HEIST {
    EVIDENCEROOM_HEIST_STATUS,
    EVIDENCEROOM_HEIST_RAIDER,
    EVIDENCEROOM_HEIST_TIMER
}

new g_evidenceRoomHeist[E_EVIDENCEROOM_HEIST];

enum {
    WHEELMAN_STATUS_NONE,
    WHEELMAN_STATUS_HAS_OFFER,
    WHEELMAN_STATUS_ESCAPING
}

enum {
    THREAD_DUMMY,

    THREAD_CONNECTION_CHECK1,
    THREAD_CONNECTION_CHECK2,

    THREAD_COMMIT,

    THREAD_ISIPBAN,
    THREAD_ADDIPBAN,
    THREAD_ISIPBANNED,
    THREAD_ISWHITELIST,
    THREAD_ISWHITELIST_CONNECT,
    THREAD_ADDWHITELIST,
    THREAD_TBAN,
    THREAD_ISVALIDSECURECUDE,
    THREAD_SELLHOUSE,
    THREAD_HAUSRAUSALLE,
    THREAD_CREATETANKE,
    THREAD_CREATEHOUSE,
    THREAD_CREATEHOTEL,
    THREAD_CREATEAPLATZ,
    THREAD_CHECKPLAYERNAMEACCOUNT,
    THREAD_CREATEPLAYERCAR,
    THREAD_SAVEPLAYERCAR,
    THREAD_CARSELL,
    THREAD_SBAN,
    THREAD_BAN,
    THREAD_IPBAN,
    THREAD_MITGLIEDER,
    THREAD_ACCEPTMARRIAGE,
    THREAD_CHECK_SECURECODE,
    THREAD_SET_SECURECODE,
    THREAD_STARTBONUS,
    THREAD_DIALOGMEMBERS,
    THREAD_CONFIGBIZ_RAUSWERFEN,
    THREAD_CONFIGTANKE_RAUSWERFEN,
    THREAD_CONFIGHOUSE_RAUSWERFEN,
    THREAD_SAVEACCOUNT,
    THREAD_LOADPLAYER,
    THREAD_PWCHANGE,
    THREAD_DEAKTACC,
    THREAD_AKTACC,
    THREAD_BANKCHANGE,
    THREAD_BANKCHANGE2,
    THREAD_POSTCHANGE,
    THREAD_LOADPLAYERCARS,
    THREAD_CHECKACCOUNT,
    THREAD_CHECKNAME,
    THREAD_CREATEACCOUNT,
    THREAD_TANKESAVE,
    THREAD_HOUSESAVE,
    THREAD_ANGELSAVE,
    THREAD_BIZSAVE,
    THREAD_STATICBIZSAVE,
    THREAD_TANKELOADID,
    THREAD_TANKELOAD,
    THREAD_ANGELLOADID,
    THREAD_ANGELLOAD,
    THREAD_HOUSELOADID,
    THREAD_HOUSELOAD,
    THREAD_HOUSELOADMIETER,
    THREAD_HOUSEINTERIORLOAD,
    THREAD_CONVERTUNIX,
    THREAD_SCHEIDEN,
    THREAD_ENTBANNEN,
    THREAD_ENTBANNEN_IP,
    THREAD_LOADFRAKTIONSSAFEBOX,
    THREAD_ISNUMBERPLATEFREE,
    THREAD_SHOWPLAYERBAN,
    THREAD_OFFBANNEN,
    THREAD_OAFKICK,
    THREAD_OFFVERWARNEN,
    THREAD_COLLECTUNUSEDACCOUNT,
    THREAD_FINISHEDCOLLECTING,
    THREAD_DELETEACCOUNT,
    THREAD_DELETEBIZOWNER,
    THREAD_DELETEHOUSEOWNER,
    THREAD_DELETEHOTELOWNER,
    THREAD_DELETEPLAYERCAR,
    THREAD_DELETETANKEOWNER,
    THREAD_ISBLACKLISTED,
    THREAD_ISBLACKLISTED_CONNECT,
    THREAD_ADDBLACKLISTNAME,
    THREAD_SAVEFRAKTIONSSAFEBOX,
    THREAD_LEADER,
    THREAD_FRAKBLACKLIST,
    THREAD_FRAKBLACKLISTLABEL,
    THREAD_ADDFRAKBLACKLIST_COUNT,
    THREAD_FRAKBLACKLISTCHECK,
    THREAD_ADDFRAKBLACKLIST,
    THREAD_DELFRAKBLACKLIST_COUNT,
    THREAD_DELFRAKBLACKLIST,
    THREAD_BIZLOAD,
    THREAD_LOADINFOS,
    THREAD_SAVEINFOS,
    THREAD_STATICBIZLOAD,
    THREAD_GEBURTSTAG,
    THREAD_ISVALIDGEBURTSTAG,
    THREAD_WERBEBANNER,
    THREAD_SAVEWERBEBANNER,
    THREAD_HOTELLOAD,
    THREAD_HOTELLOADID,
    THREAD_HOTELSAVE,
    THREAD_WEBSQL_AKTE,
    THREAD_SAVEALL,
    THREAD_LOADFRIENDLIST,
    THREAD_ADDFRIENDLIST,
    THREAD_DELFRIENDLIST,
    THREAD_CHECKSCHEIDEN,
    THREAD_BESCHWERDEGGNMICH,
    THREAD_BESCHWERDEOFFEN,
    THREAD_TECHNIKABTEILUNG,
    THREAD_AKTENEINTRAG_EXISTS,
    THREAD_AKTENEINTRAG,
    THREAD_FRAKSPERRE,
    THREAD_OFFPRISON_EXISTS,
    THREAD_OFFPRISON,
    THREAD_LOADWAFFENLAGER,
    THREAD_WAFFENLAGERSAVE,
    THREAD_VIEWCONTRACTS,
    THREAD_LOBENSELECT,
    THREAD_LOBEN,
    THREAD_HWBAN,
    THREAD_HWBAN_CONNECT,
    THREAD_HWBAN_INSERT,
    THREAD_PIN_VERGESSEN,
    THREAD_SAVE_ACCOUNT_WEAPONS,
    THREAD_LOAD_ACCOUNT_WEAPONS,
    THREAD_WEAPON_HACK,
    THREAD_MONEY_HACK,
    THREAD_JETPACK_HACK,
    THREAD_VEHICLEPORT_HACK,
    THREAD_SAVEHOUSEUPGRADE,
    THREAD_OFFLINEARREST,
    THREAD_ANGEWORBEN,
    THREAD_LOADGANGZONES,
    THREAD_SAVEGANGZONES,
    THREAD_FREEPHONENUMBER,
    THREAD_SAVEPHONENUMBER,
    THREAD_LOADFIRMA,
    THREAD_SAVEFIRMA,
    THREAD_HAUSMIETER,
    THREAD_HAUSMIETUNGRAUS,
    THREAD_OFFHAUSRAUS,
    THREAD_DELCLUB,
    THREAD_BANKSYSTEM,
    THREAD_ADDONLINEPLAYER,
    THREAD_DELONLINEPLAYER,
    THREAD_HASHPASSWORDS,
    THREAD_HASHPASSWORDS_VOID,
    THREAD_HASHPASSWORDS_FINISHED,
    THREAD_UPDATE_PLAYER_PASSWORD,
    THREAD_LOADFACTION,
    THREAD_SAVEFACTION,
    THREAD_SPIELERINFO,
    THREAD_GEBANNT,
    THREAD_GEBECLUB,
    THREAD_WAFFENSPERRE,
    THREAD_CHECKNAMECHANGE_OLDNAME,
    THREAD_CHECKNAMECHANGE_NEWNAME,
    THREAD_NAMECHANGE,
    THREAD_NAMECHANGEFINISH,
    THREAD_ISVALIDVORNAME,
    THREAD_SETVORNAME,
    THREAD_ISVALIDEMAIL,
    THREAD_SETEMAIL,
    THREAD_LOADHAUSMOEBEL,
    THREAD_CREATEHAUSMOEBEL,
    THREAD_UPDATEHAUSMOEBEL,
    THREAD_DELETEHAUSMOEBEL,
    THREAD_HAUSVERSTAATLICHEN,
    THREAD_CREATEGUTSCHEIN,
    THREAD_CREATEGUTSCHEIN_CHECK,
    THREAD_GUTSCHEINCODE_CHECK,
    THREAD_GUTSCHEINCODE,
    THREAD_OFFTBAN,
    THREAD_OFFCPRISON
    //THREAD_SETUP_POST
}

#include <a_samp>
#include <YSI\y_hooks>

#if defined MAX_PLAYERS
    #undef MAX_PLAYERS
    #define MAX_PLAYERS 200
#endif

enum e_Faction {
    F_iPartner,
    F_iPartnerRequest
}
new g_Faction[22][e_Faction];

new g_WantedKillZone[3];
new eventitemactive;
enum e_Bots {
    Bot_sName[MAX_PLAYER_NAME],
    Bot_iSkinID,
    Bot_sScript[32],
    Bot_iVehicle,
    Text3D:Bot_t3dLabel,
    Bot_iVehicleID,
}

new g_Bots[][e_Bots] = {
    {"Jens.K",94,"altermannpnsnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Jessica.D",151,"frau1stadthallenorm",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Sibylle.R",41,"frau2ammuhauptstras",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Helly.G",190,"fraubsnlaufen",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Stefanie.B",141,"fraustadtahllenorma",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Sherin.D",92,"fraustrandinleiner",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Jorek.S",26,"mann1nsnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Lerry.I",59,"mannbilligahausnorm",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Sebastian.P",29,"manndrogenschnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Robert.G",249,"mannluxushausnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Tomke.N",22,"mannnsnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Cosmo.P",23,"mannstadthallenorma",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Roland.H",137,"pennerwaffednormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot1",61,"pilot1lsdlspdflug53",593,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot2",61,"pilot2lvflug577",577,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot3",61,"pilotlsdlspdflug577",577,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot4",61,"pilot3lvflug593",577,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID}
};

#include <a_mysql>

#if !defined INVALID_THREAD_OWNER
    #define INVALID_THREAD_OWNER -1
#endif

#define mysql_oquery(%1,%2,%3,%4) \
    mysql_tquery(%4, %1, "OnQueryFinish", "siiii", %1, %2, %3, %4, INVALID_THREAD_OWNER)

#define mysql_pquery(%1,%2,%3,%4,%5) \
    mysql_tquery(%4, %1, "OnQueryFinish", "siiii", %1, %2, %3, %4, %5[%3] )

#include <zcmd>
#include <sscanf2>
#include <streamer>
#include <a_zones>
#include <filemanager>
#include <nagelband>
//#include <debugviewer>
//#include <gate>
#include <riesenrad>
#include <a_metafixes>
new MySQLThreadOwner[MAX_PLAYERS],bankchange[MAX_PLAYERS],damagesperre[MAX_PLAYERS];
#include <ipban>
forward Float:GetVehicleSpeed(vehicleid);
#include <spikes>
#include <kraftstoff>
#include <strlib>
#include <floodcontrol>
//#include <Youtube>

native gpci(playerid, serial [], len);

//#define WEIHNACHTS_EVENT
#define GetPlayerMoney CheckMoney
#define SILVESTER_EVENT
#if defined SILVESTER_EVENT
    forward Float:frandom(Float:max, Float:min = 0.0, dp = 4);
    #include <xFireworks>
#endif

#define MAX_DEATH_ICONS 50

/*
enum e_Peilsender {
    P_sText[20],
    P_iDistance,
    P_iPrice
}

new const g_Peilsender[][e_Peilsender] = {
    {"Einfacher Sender",500,1000},
    {"Normaler Sender",800,2000},
    {"Premium Sender",1500,5000},
    {"Deluxe Sender",2500,12000}
};
*/

enum e_DeathIcon {
    DI_iPickup,
    DI_iTimer,
    Text3D:DI_t3dLabel
}

new g_DeathIcon[MAX_DEATH_ICONS][e_DeathIcon];
new miettimer[MAX_PLAYERS];
new sichervar[MAX_PLAYERS][10];
forward DestroyDeathIcon(idx);
public DestroyDeathIcon(idx) {
    DestroyDynamicPickup(g_DeathIcon[idx][DI_iPickup]);
    KillTimer(g_DeathIcon[idx][DI_iTimer]);
    DestroyDynamic3DTextLabel(g_DeathIcon[idx][DI_t3dLabel]);
    g_DeathIcon[idx][DI_iPickup] = 0;
    g_DeathIcon[idx][DI_t3dLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff= 0.0, Float:yoff= 0.0, Float:zoff= 0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
    y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
    z = zoff + z;
}

stock SetWeatherEx(wetterid)
{
    savewetterid=wetterid;
    SetWeather(wetterid);
    return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, otherPlayerid, Float:range = 5.0) {
    new Float:playerPos[3];
    GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
    return IsPlayerInRangeOfPoint(otherPlayerid, range, playerPos[0], playerPos[1], playerPos[2]);
}

stock GetWeather()
{
    return savewetterid;
}

stock AddDelimiters(integer, delimiter[] = ".") {
    new string[32];
    format(string, sizeof string, "%i", integer);
    for (new i = strlen(string) - 3, j = ((integer < 0) ? 1 : 0); i > j; i -= 3) strins(string, delimiter, i, sizeof string);
    return string;
}

stock AddDeathIcon( string[], Float:x,Float:y,Float:z,interior,virtualworld) {
    new
        index = -1;
    for(new i ; i < sizeof(g_DeathIcon) ; i++) {
        if( g_DeathIcon[i][DI_iPickup] == 0 ) {
            index = i;
            break;
        }
    }
    if(index != -1 ) {
        g_DeathIcon[index][DI_iPickup] = CreateDynamicPickup(1254,1,x,y,z,interior,virtualworld);
        g_DeathIcon[index][DI_iTimer] = SetTimerEx ("DestroyDeathIcon",3*60*1000,false,"i",index);
        g_DeathIcon[index][DI_t3dLabel] = CreateDynamic3DTextLabel(string,0xFF0000FF,x,y,z + 0.3,25.0, .worldid = virtualworld, .testlos = 1);
        return 1;
    }
    return 0;
}

enum e_BallonConfig {
    BC_iObject,
    BC_iStep,
    bool:BC_bForward
}
new g_BallonConfig[e_BallonConfig];

enum e_BallonRoute {
    Float:BR_fX,
    Float:BR_fY,
    Float:BR_fZ,
    BR_iOffset,
    Float:BR_fSpeed
}
new const g_BallonRoute[][e_BallonRoute] = {
    {331.8391,-1833.9916,3.7985,1,2.0},
    {331.8391,-1833.9916,43.7985,2,2.0},

    {387.8877,-1778.6702,55.1566,4,2.5},
    {545.7441,-1770.1678,65.3160,5,2.5},
    {665.4157,-1799.6071,61.3100,6,2.5},
    {740.4435,-1806.6146,62.5419,6,2.5},
    {832.7515,-1820.3407,61.8209,6,2.5},
    {1056.8134,-1835.8986,63.0833,6,2.5},
    {1163.5846,-1744.2234,62.9628,6,2.5},
    {1311.0282,-1733.4523,63.0594,6,2.5},
    {1462.5919,-1735.0828,62.9474,6,2.5},
    {1593.3424,-1753.9630,72.4060,6,2.5},
    {1668.2162,-1778.6447,78.5350,6,2.5},
    {1890.4823,-1829.9126,73.5487,6,2.5},
    {1990.8793,-1882.8636,70.9519,6,2.5},
    {2214.6418,-2147.9441,60.9468,5,2.5},
    {2227.7844,-2221.4304,53.1103,4,2.5},

    {2203.9453,-2248.1580,36.1201,2,2.0},
    {2203.9453,-2248.1580,13.1201,1,2.0}
};

new g_VehicleDistance[MAX_VEHICLES];
new Float:g_OldVehiclePos[MAX_VEHICLES][3];
#define MAX_PASSANGERS_TRACKER 3
new
    g_aiLastPassengers[MAX_VEHICLES][MAX_PASSANGERS_TRACKER][MAX_PLAYER_NAME char];

enum e_FraktionAbschleppen {
    Float:FA_fX,
    Float:FA_fY,
    Float:FA_fZ,
    Float:FA_fFace,
    bool:FA_bAbgeschleppt
}
new g_FraktionAbschleppen[MAX_VEHICLES][e_FraktionAbschleppen];
//new wheelmanclient[MAX_PLAYERS];//Wheelman System ob er Auftrag aufgab oder nicht

enum e_FallTurm {
    FT_ibStatus,
    FT_tTimer,
    FT_tickUpdate,
    FT_iScheibeObjekt,
    FT_aiWagonObject[4],
    //FT_aiCamera[4],
    bool:FT_abUsed[4]
}
new g_FallTurm[e_FallTurm];

enum e_Schiff {
    S_ibStatus, // 1 nach links, 2 Links , 3 nach rechts mitte,4 nach rechts,5 rechts, 6 nach links mitte
    S_iObject,
    Float:S_fSpeed,
    Float:S_fX,
    Float:S_fY,
    Float:S_fZ,

    Float:S_fOffsetX,
    Float:S_fOffsetY,
    Float:S_fOffsetZ
}
new g_Schiff[e_Schiff];

enum e_WasserScooter {
    AS_tID,
    AS_ibStatus,
    AS_tickUpdate
}

new g_WasserScooter[e_WasserScooter];

enum e_WasserScooterSlot {
    ASS_iVehicle,
    Float:ASS_fX,
    Float:ASS_fY,
    Float:ASS_fZ,
    Float:ASS_fFace,
    bool:ASS_bUsed
}
new g_WasserScooterSlot[][e_WasserScooterSlot] = {
    {INVALID_VEHICLE_ID,403.3316,-2155.7444,73.9621,270.2908,false}
};

enum e_AutoScooter {
    AS_tID,
    AS_ibStatus,
    AS_tickUpdate
}

new g_AutoScooter[e_AutoScooter];

enum e_AutoScooterSlot {
    ASS_iVehicle,
    Float:ASS_fX,
    Float:ASS_fY,
    Float:ASS_fZ,
    Float:ASS_fFace,
    bool:ASS_bUsed
}
new g_AutoScooterSlot[][e_AutoScooterSlot] = {
    {INVALID_VEHICLE_ID,400.7170,-2111.6877,7.3414,89.5101,false},
    {INVALID_VEHICLE_ID,400.7515,-2107.7605,7.3410,89.5099,false},
    {INVALID_VEHICLE_ID,400.7770,-2104.8752,7.3408,89.4789,false},
    {INVALID_VEHICLE_ID,400.8107,-2101.1377,7.3474,89.4828,false},
    {INVALID_VEHICLE_ID,400.8451,-2097.2825,7.3417,89.4828,false},
    {INVALID_VEHICLE_ID,400.8761,-2093.8740,7.3437,89.4828,false},
    {INVALID_VEHICLE_ID,400.9049,-2090.5085,7.3411,89.4876,false},
    {INVALID_VEHICLE_ID,400.8738,-2086.7273,7.3406,89.4773,false},

    {INVALID_VEHICLE_ID,400.8941,-2082.6213,7.3437,89.6164,false},
    {INVALID_VEHICLE_ID,400.9153,-2079.4050,7.3458,89.6176,false},
    {INVALID_VEHICLE_ID,400.9379,-2075.7024,7.3465,89.6393,false},
    {INVALID_VEHICLE_ID,400.9565,-2072.3015,7.3461,89.6720,false},
    {INVALID_VEHICLE_ID,400.8992,-2068.1982,7.3472,89.7514,false},
    {INVALID_VEHICLE_ID,400.9172,-2063.8892,7.3453,89.7517,false},
    {INVALID_VEHICLE_ID,400.9381,-2059.0759,7.3478,89.7517,false}
};

enum e_Kartbahn {
    AS_tID,
    AS_ibStatus,
    AS_tickUpdate
}

new g_Kartbahn[e_Kartbahn];

enum e_KartbahnSlot {
    ASS_iVehicle,
    Float:ASS_fX,
    Float:ASS_fY,
    Float:ASS_fZ,
    Float:ASS_fFace,
    bool:ASS_bUsed
}
new g_KartbahnSlot[][e_KartbahnSlot] = {
    {INVALID_VEHICLE_ID,-2079.4307,-109.0893,34.6040,178.6084,false},
    {INVALID_VEHICLE_ID,-2081.5349,-109.0485,34.6041,178.7801,false},
    {INVALID_VEHICLE_ID,-2083.5842,-108.9267,34.6079,179.4327,false},
    {INVALID_VEHICLE_ID,-2085.4165,-108.9313,34.6137,180.3376,false},
    {INVALID_VEHICLE_ID,-2087.3247,-108.8820,34.6051,180.0008,false}
};

enum e_BreakDancer {
    BD_ibStatus,
    BD_tTimer,
    BD_tickUpdate
}
new g_BreakDancer[e_BreakDancer];

enum e_BreakDancerSlot {
    BDS_iObject,
    Float:BDS_fX,
    Float:BDS_fY,
    Float:BDS_fZ,
    bool:BDS_bUsed,
    BDS_iStep
}
new g_BreakDancerSlot[][e_BreakDancerSlot] = {
    {INVALID_OBJECT_ID,355.99719, -2153.05029, 10.4,false,0},
    {INVALID_OBJECT_ID,358.37784, -2152.10815, 10.4,false,0},
    {INVALID_OBJECT_ID,360.97186, -2151.81274, 10.4,false,0},
    {INVALID_OBJECT_ID,363.17868, -2153.27148, 10.4,false,0},
    {INVALID_OBJECT_ID,364.26526, -2155.45947, 10.4,false,0},
    {INVALID_OBJECT_ID,364.21054, -2158.06372, 10.4,false,0},
    {INVALID_OBJECT_ID,362.63095, -2160.13013, 10.4,false,0},

    {INVALID_OBJECT_ID,360.36526, -2161.11035, 10.4,false,0},
    {INVALID_OBJECT_ID,357.87384, -2160.74023, 10.4,false,0},
    {INVALID_OBJECT_ID,356.06296, -2159.25684, 10.4,false,0},
    {INVALID_OBJECT_ID,355.16202, -2157.21045, 10.4,false,0},
    {INVALID_OBJECT_ID,355.09671, -2155.01904, 10.4,false,0}
};

new const aiLichtpflicht[2] = {19,6};
#define     INVALID_TIMER_ID    -1

enum e_ParkscheinAutomat {
    Float:PA_fX,
    Float:PA_fY,
    Float:PA_fZ
}
#define MAX_PARKSCHEIN_AUTOMATEN 10
new g_ParkscheinAutomat[MAX_PARKSCHEIN_AUTOMATEN][e_ParkscheinAutomat],
    g_iParkscheinAutomat;


enum e_SnackShop {
    SS_sTitle[14],
    SS_iPrice,
    SS_iHP
}
new const g_SnackShop[][e_SnackShop] = {
    {"Twix",50,100},
    {"Snickers",40,80},
    {"Bounty",30,60},
    {"Mars",10,30}
};

#define MAX_BIZ 10
enum e_Firma {
    F_iID,
    F_iJobID,
    F_sBezeichnung[32],
    F_sBesitzer[MAX_PLAYER_NAME],
    F_iKasse,
    F_iGehalt
}
new g_Firma[MAX_BIZ][e_Firma];

enum e_GELDT {
    Float:GT_fPosX,
    Float:GT_fPosY,
    Float:GT_fPosZ
}

new const GT_GELDT[][e_GELDT] = {
    {2130.10009766,-1151.19995117,23.68000031},
    {551.20001221,-1260.50000000,16.87999916},
    {1032.19995117,-1029.90002441,31.70000076},
    {491.39999390,-1734.59997559,10.86999989},
    {2072.00000000,-1834.69995117,13.17999935},
    {716.90002441,-463.10000610,15.60000038},
    {2398.00000000,1482.90002441,10.39999962},
    {1967.69995117,2166.69995117,10.39999962},
    {-95.69999695,1110.90002441,19.37999916},
    {-1424.80004883,2591.60009766,55.47999954},
    {-2419.60009766,1028.69995117,50.00000000},
    {-1900.00000000,277.20001221,40.70000076},
    {2303.60009766,79.90000153,26.10000038},
    {2475.69995117,32.09999847,26.10000038},
    {2274.69995117,-76.40000153,26.20000076},
    {1316.69995117,357.70001221,19.20000076},
    {1302.80004883,255.39999390,19.20000076},
    {211.30000305,-62.70000076,1.20000005},
    {111.09999847,-221.39999390,1.20000005},
    {242.39999390,-223.10000610,1.20000005},
    {661.29998779,-565.50000000,16.00000000},
    {811.40002441,-613.79998779,16.00000000},
    {-2094.39990234,-2477.10009766,30.29999924},
    {-2159.30004883,-2387.80004883,30.29999924},
    {-818.20001221,1547.50000000,26.79999924},
    {-860.00000000,1536.50000000,22.20000076},
    {-1515.19995117,2560.80004883,55.50000000},
    {-1486.30004883,2641.19995117,55.50000000},
    {-255.10000610,2601.30004883,62.50000000},
    {30.00000000,1187.40002441,18.70000076},
    {-173.80000305,1107.90002441,19.39999962},
    {-317.00000000,1051.69995117,20.00000000},
    {-312.89999390,1307.09997559,53.29999924},
    {-2512.00000000,2340.80004883,4.59999990},
    {-2610.39990234,2246.39990234,7.90000010},
    {-2239.00000000,2356.39990234,4.59999990},
    {-2726.30004883,-319.79998779,6.80000019},
    {-2388.30004883,-569.20001221,131.80000305},
    {1146.80004883,-1415.50000000,13.30000019},
    {1808.30004883,-1369.30004883,14.69999981},
    {2441.00000000,-1470.19995117,23.60000038},
    {2285.30004883,-2065.19995117,13.19999981},
    {1585.69995117,-2286.60009766,13.19999981},
    {396.60000610,-1543.90002441,31.89999962},
    {906.59997559,-1002.70001221,37.50000000},
    {2747.39990234,-1186.30004883,69.00000000},
    {1739.40002441,-1863.59997559,13.19999981},
    {1137.19995117,-1762.09997559,13.19999981},
    {1016.50000000,-1553.59997559,14.50000000},
    {810.50000000,-1614.59997559,13.19999981},
    {943.90002441,-1385.50000000,13.00000000},
    {-1381.69995117,-356.50000000,13.80000019},
    {-1968.00000000,512.70001221,34.79999924},
    {-2276.30004883,520.50000000,34.79999924},
    {-2438.60009766,752.59997559,34.79999924},
    {-2670.89990234,636.90002441,14.10000038},
    {-2765.30004883,366.20001221,6.00000000},
    {-2025.19995117,-102.00000000,34.79999924},
    {-2242.39990234,116.90000153,35.00000000},
    {-2417.80004883,348.89999390,34.79999924},
    {-2622.39990234,1413.19995117,6.69999981},
    {-1940.69995117,1342.09997559,6.80000019},
    {-1578.90002441,903.90002441,7.30000019},
    {-1759.69995117,963.40002441,24.50000000},
    {-1625.30004883,717.90002441,14.30000019},
    {-1830.30004883,109.50000000,14.80000019},
    {1025.00000000,1043.69995117,10.60000038},
    {1169.90002441,1363.50000000,10.50000000},
    {1703.19995117,1443.90002441,10.50000000},
    {2019.30004883,1345.90002441,10.50000000},
    {2196.89990234,1689.50000000,12.00000000},
    {2031.09997559,1936.40002441,11.80000019},
    {2137.39990234,2363.80004883,10.50000000},
    {2296.39990234,2432.39990234,10.50000000},
    {2532.30004883,1865.00000000,10.50000000},
    {2433.50000000,1670.40002441,10.50000000},
    {2578.00000000,1060.59997559,10.50000000},
    {2159.50000000,941.79998779,10.50000000},
    {2021.69995117,998.79998779,10.50000000},
    {1516.59997559,1102.59997559,10.50000000},
    {1479.69995117,2244.00000000,10.69999981},
    {1438.80004883,2616.69995117,11.00000000},
    {2159.30004883,2797.19995117,10.50000000},
    {2537.00000000,2264.00000000,10.50000000},
    {2558.19995117,2022.30004883,10.50000000},
    {2204.00000000,1295.80004883,10.50000000},
    {822.5450,-1355.8326,13.5422}
};

enum e_Muell {
    Float:M_fPosX,
    Float:M_fPosY,
    Float:M_fPosZ
}
new const g_Muell[][e_Muell] = {
    {1575.32, -1860.68, 13.33},
    {1575.31, -1794.34, 13.24},
    {1575.25, -1743.08, 13.33},
    {1372.86, -1726.57, 13.32},
    {1319.92, -1724.81, 13.33},
    {1318.34, -1673.26, 13.33},

    {1318.24, -1625.49, 13.33},
    {1318.29, -1583.30, 13.33},
    {1319.13, -1556.67, 13.32},
    {1354.74, -1476.45, 13.33},
    {1363.24, -1420.69, 13.33},
    {1291.04, -1389.49, 13.20},
    {1266.28, -1360.01, 13.26},
    {1266.27, -1308.70, 13.28},
    {1223.79, -1156.61, 23.43},
    {1268.74, -1127.32, 23.80},

    {1268.72, -1070.70, 28.36},
    {1268.90, -981.15, 36.95},
    {1254.53, -920.78, 42.56},
    {1230.39, -913.43, 42.88},
    {1143.15, -938.38, 42.80},
    {1065.78, -944.34, 42.78},
    {1004.78, -952.55, 41.96},
    {878.50, -980.15, 36.11},
    {833.05, -1021.84, 25.96},

    {787.50, -1036.63, 24.42},
    {488.16, -1276.06, 15.49},
    {436.02, -1315.29, 14.87},
    {336.44, -1375.30, 14.11},
    {230.99, -1433.80, 13.15},
    {168.37, -1514.36, 12.15},
    {168.37, -1514.36, 12.15},
    {113.44, -1694.20, 9.38},
    {181.91, -1741.32, 4.13},
    {237.01, -1738.04, 3.99},
    {289.05, -1742.17, 4.12},
    {335.57, -1747.85, 4.43},
    {459.64, -1767.67, 5.44},

    {499.18, -1732.62, 11.29},
    {563.40, -1740.97, 12.62},
    {631.54, -1752.13, 13.14},
    {713.01, -1775.15, 13.42},
    {804.34, -1789.93, 13.26},
    {938.16, -1796.69, 13.65},
    {1030.30, -1825.45, 13.64},
    {1096.22, -1858.12, 13.34},
    {1157.66, -1858.00, 13.33},
    {1234.37, -1857.95, 13.33},
    {1415.44, -1878.07, 13.33}
};

enum e_HureSkill {
    HS_iLevel,
    HS_iHP,
    HS_iPoint
}
new const g_HureSkill[][e_HureSkill] = {
    {1,10,0},
    {2,30,10},
    {3,50,25},
    {4,80,40},
    {5,100,60}
};
enum e_LayerSkills {
    LS_iJobs,
    LS_iJailTime,
    LS_iStateShare,
}
new const g_LawyerSkills[][e_LayerSkills] = {
    {0 , 1300 , 41},
    {20 , 1600 , 41},
    {80 , 2300 , 41},
    {120 , 3000 , 41},
    {250 , 4800 , 41 },
    {420 , 6000 , 41 }
};

enum e_GangFightSkills {
    GFS_iKills
}

new const g_GangFightSkills[][e_GangFightSkills] = {
    {10},
    {20},
    {60},
    {130},
    {260},
    {430},
    {560},
    {620},
    {880},
    {1000}
};

enum e_DrogenSkills {
    DS_iTour,
    DS_iPackets
}
new const g_DrogenSkills[][e_DrogenSkills] = {
    {0,5},
    {50,10},
    {100,15},
    {280,20},
    {510,25}
};

enum e_WaffenteileSkills {
    WS_iTour,
    WS_iPackets
}
new const g_WaffenteileSkills[][e_WaffenteileSkills] = {
    {0,5},
    {80,10},
    {200,15},
    {440,20},
    {710,25}
};

#define MAX_EVENTMARKER_CHECKPOINTS 50

enum e_EventMarker {
    EV_iState,
    EV_iPlayerID,
    EV_iCheckpoints,
}

new g_EventMarker[e_EventMarker];

new Float:g_EventMarkerCheckpoints[MAX_EVENTMARKER_CHECKPOINTS][4];


enum e_EventUhr {
    EU_tTimer,
    EU_iLeft
}
new g_EventUhr[e_EventUhr];

enum e_BombenDraht {
    BD_iColor,
    BD_sFarbe[10]
}
new const g_BombenDraht[][e_BombenDraht] = {
    { 0xFFFF00FF, "Gelb"},
    { 0xFF0000FF, "Rot"},
    { 0x00FF00FF, "Grün"},
    { 0x0000FFFF, "Blau"}
};

enum e_WaffenLager {
    WL_iFraktion,
    Float:WL_fX,
    Float:WL_fY,
    Float:WL_fZ,
    WL_iWaffenTeile
}

enum e_WaffenLagerConfig {
    WLC_iWaffe,
    WLC_iMuni,
    WLC_iPrice
}

new const g_WaffenLagerConfig[][e_WaffenLagerConfig] = {
    {34,25,400},
    {31,300,350},
    {30,300,320},
    {33,100,320},
    {25,100,300},
    {-1,100,220},
    {23,200,120},
    {5,1,50},
    {2,1,50}
};

new
    g_iWaffenLager,
    g_WaffenLager[20][e_WaffenLager];



enum e_Zoll {
    Z_iModel,
    Float:Z_fX,
    Float:Z_fY,
    Float:Z_fZ,
    Float:Z_fRotX,
    Float:Z_fRotY,
    Float:Z_fRotZ,
    Z_iObject,
    Z_iArea,
    Z_iStatus, // 0 Zu, 1 Öffnen , 2 Offen , 3 Schliessen
    Z_tTimer,
    Z_iPlayerID,
    bool:Z_bSperre
}
new g_Zoll[][e_Zoll] = {
    //{978,52.0,-1539.0,4.8,0.0,0.0,81.99646,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false}, LS Brücke
    //{978,110.1,-1271.6,14.7,0.0,0.0,123.9965,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false}, LS Tunnel
    {978,59.9350, -1525.4719, 4.7959, 0.0000, 0.0000, -96.2998,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,47.8982, -1538.6879, 4.9559, 0.0000, 0.0000, 85.5999,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,100.4253, -1278.6158, 14.1212, 0.0000, 0.0000, 123.1999,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,83.7634, -1258.2729, 14.2013, 0.0000, 0.0000, -57.5000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-84.1439, -908.6162, 17.3085, 0.0000, -0.3000, -25.6000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-964.7624, -329.6128, 36.0626, 0.0000, -1.7000, 169.3999,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-1260.6369, 961.2601, 44.7391, 0.0000, 0.0000, 136.5000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-1272.2734, 972.3147, 44.7391, 0.0000, 0.0000, -43.4000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-2695.0700, 1274.4583, 55.2848, 0.0000, 0.0000, 0.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-2677.1496, 1274.4583, 55.2448, 0.0000, 0.0000, -180.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-168.3067, 365.9939, 11.9073, 0.0000, 0.0000, 165.1001,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,523.0817, 469.3662, 18.7161, 0.0000, 0.0000, -145.0001,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,1732.1787, 523.8909, 27.8209, 0.0000, 0.0000, -20.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,1744.8293, 519.2871, 27.8209, 0.0000, 0.0000, 160.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false}
    //{978,55.4,-1525.3,5.0,0.0,0.0,261.9965,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false}, LS Brücke
    //{979,96.1,-1250.5,14.5,0.0,0.0,299.9965,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false} LS Tunnel
};

new tTollTimer = INVALID_TIMER_ID;

enum e_PrisonRunCheckpoint {
    Float:PRC_fX,
    Float:PRC_fY,
    Float:PRC_fZ
}
new const g_PrisonRunCheckpoint[][e_PrisonRunCheckpoint] = {
     {-1400.9767,-166.7956,1043.5408},
     {-1521.2783,-168.4242,1050.6263},
     {-1417.5217,-277.0373,1051.1920},
     {-1301.7184,-146.2196,1050.1626},
     {-1303.5171,-269.2775,1048.4304},
     {-1394.6664,-229.8659,1043.2290}
};

enum e_FahrzeugVerleihFahrzeuge {
    Float:FVF_fX,
    Float:FVF_fY,
    Float:FVF_fZ,
    Float:FVF_fRot,
    FVF_iModel,
    FVF_iPrice,
    Text3D:FVF_t3dLabel,
    FVF_iVehicleID,
    FVF_iVerleihIndex
}
new const g_FahrzeugVerleihFahrzeuge[][e_FahrzeugVerleihFahrzeuge] = {
    {2078.1169,-1776.0348,13.6396,164.5930,418,3100, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, //Stations an der Pizzaria LS
    {2080.3350,-1767.9788,13.2985,164.8727,426,2100, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, //Stations an der Pizzaria LS

    {767.0826,-1332.9882,13.1666,215.1745,565,1180, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn
    {762.3510,-1333.3093,13.3789,216.1863,540,2400, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn
    {757.3802,-1333.2279,13.2777,224.2690,436,1100, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn
    {752.2538,-1333.4092,13.2859,228.0755,426,2600, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn

    {1461.9940,-2418.8147,14.0028,270.8374,593,17800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1490.1938,-2400.0662,13.5416,181.1372,469,24800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1481.1306,-2399.7166,13.7120,180.8858,487,26100, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1495.7388,-2434.8101,14.4736,92.7344,519,41000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1462.8730,-2435.1128,14.1073,274.7881,513,41000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1494.4330,-2414.5166,14.9590,91.5051,511,41000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih

    {-79.3621,-593.3800,-0.3102,84.3536,473,3800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-68.9610,-594.0487,-0.2000,266.5981,473,3800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-67.5698,-600.8708,-0.4598,264.1537,452,6820, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-81.9397,-599.8763,-0.4489,84.9603,452,6820, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-67.8799,-607.1755,-0.5725,264.8912,446,16900, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-82.1167,-606.5050,-0.5398,84.9556,446,16900, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih

    {898.5881,-1412.9033,13.1911,270.1001,445,2500, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, //Stations am: nähe Neulingsspawn
    {890.5629,-1413.0018,12.8842,270.3237,589,1380, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, //Stations am: nähe Neulingsspawn

    {1335.6625,-1254.1927,13.4360,179.8543,445,2500, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,5}, //Stations am: Ammu
    {1335.5961,-1246.1841,13.2219,180.2161,589,1380, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,5}, //Stations am: Ammu

    {945.4749,-1770.0242,13.8758,80.2933,445,2500, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,6}, //Stations am: LS Strand
    {953.7225,-1771.5251,13.8645,79.9483,533,1800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,6}, //Stations am: LS Strand

    {1192.3794,-1046.4410,31.8047,269.9852,445,2800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,7}, //Stations am: Wohngegend am PNS
    {1183.8732,-1046.4503,31.5575,270.2816,589,1380, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,7}, //Stations am: Wohngegend am PNS

    {1580.5494,2606.4641,10.6970,178.9019,445,2500, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,8}, //Stations am: in LV
    {1580.6941,2614.7944,10.4782,179.6787,589,1380, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,8} //Stations am: in LV
};

enum e_FahrzeugVerleihSpawn {
    Float:FVS_fX,
    Float:FVS_fY,
    Float:FVS_fZ,
    Float:FVS_fRot,
    bool:FVS_bFree,
    FVS_iVerleihIndex
}
new g_FahrzeugVerleihSpawn[][e_FahrzeugVerleihSpawn] = {
    {2073.7065,-1774.8682,13.4305,347.8131,true,0},

    {737.4862,-1335.7058,13.2808,269.2980,true,1},
    {737.4667,-1339.4930,13.2845,270.0067,true,1},
    {737.8382,-1343.9973,13.2510,270.0016,true,1},

    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},

    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},

    {884.9829,-1412.9148,13.1111,359.8797,true,4},
    {884.9829,-1412.9148,13.1111,359.8797,true,4},

    {1333.8597,-1240.5994,13.4218,268.7983,true,5},
    {1333.8597,-1240.5994,13.4218,268.7983,true,5},

    {959.8779,-1771.8010,14.1634,167.8922,true,6},
    {959.8779,-1771.8010,14.1634,167.8922,true,6},

    {1202.1469,-1052.4700,31.7223,270.3401,true,7},
    {1202.1469,-1052.4700,31.7223,270.3401,true,7},

    {1579.2615,2600.5720,10.6914,270.6026,true,8},
    {1579.2615,2600.5720,10.6914,270.6026,true,8}
};

enum e_PlayerTacho {
    PlayerText:pt_Name,
    PlayerText:pt_Border[6],
    PlayerText:pt_Info,
    PlayerText:pt_Speed,
    PlayerText:pt_Tank,
    PlayerText:pt_TankInfo,
    PlayerText:pt_Kennzeichen,
    PlayerText:pt_Liter,

    PlayerText:pt_Gear
}
new g_PlayerTacho[MAX_PLAYERS][e_PlayerTacho];

enum e_Zentralmeldung {
    Text:Z_tdVerfuegbar,
    Text:Z_tdNichtVerfuegbar
}

new g_Zentralmeldung[e_Zentralmeldung];

enum e_ClubShopItems {
    CSI_sName[38],
    CSI_iModel,
    CSI_iBone,
    Float:CSI_fX,
    Float:CSI_fY,
    Float:CSI_fZ,
    Float:CSI_fRotX,
    Float:CSI_fRotY,
    Float:CSI_fRotZ,
    Float:CSI_fScaleX,
    Float:CSI_fScaleY,
    Float:CSI_fScaleZ,
    CSI_iPrice
}
new const g_ClubShopItems[][e_ClubShopItems] = {
    {"Schwarzer Hut",19352, 2, 0.135453, 0.000000, 0.000000, 92.670608, 75.860046, 0.000000, 1.000000, 1.000000, 1.000000,1},
    {"Cowboy Hut",19095, 2, 0.185240, -0.015530, 0.000000, 351.382019, 3.160876, 347.847381, 1.000000, 1.000000, 1.000000,1},
    {"Gitarre",19319, 1, 0.062434, -0.106071, 0.017444, 0.000000, 62.955413, 358.461303, 1.000000, 1.000000, 1.000000,1},
    {"Vogelkopf",19137, 2, 0.093183, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000,1},
    {"Sonnenbrille mit schwarzem Glas",19033, 2, 0.090000, 0.028000, 0.000000, 0.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.100000,1},
    {"Sonnenbrille mit weißem Glas",19012, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit rotem Glas",19015, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit pinkem Glas",19006, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit grünem Glas",19010, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit gelbes Glas",19008, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Transpar. Sonnenbrille in Gelb",19007, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.000000,1},
    {"Transpar. Sonnenbrille in Pink",19018, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.000000,1},
    {"Transpar. Sonnenbrille in Blau",19019, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.000000,1},
    {"Pilotenbrille in Schwarz",19022,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Pilotenbrille in Orange",19027,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Pilotenbrille in Pink",19024,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Pilotenbrille in Gelb",19028,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Cap in Schwarz",18941, 2, 0.154340, -0.019610, -0.003148, 0.000000, 359.601928, 339.431274, 1.100000, 1.100000, 1.100000,1},
    {"Spezialer Motorradhelm",18976, 2, 0.079035, 0.013043, 0.000000, 71.521530, 79.331695, 19.203657, 1.149999, 1.500000, 1.200000,1},
    {"Wollmütze in Schwarz",18964, 2, 0.099004, 0.031445, -0.000578, 0.000000, 92.970489, 82.573211, 1.299999, 1.399999, 1.600000,1},
    {"Wollmütze in Bunt",18966, 2, 0.099004, 0.031445, -0.000578, 0.000000, 92.970489, 82.573211, 1.299999, 1.399999, 1.600000,1},
    {"Mütze in Schwarz",18953, 2, 0.110594, 0.013052, 0.000000, 0.000000, 0.000000, 331.269348, 1.500000, 1.100000, 1.299999,1},
    {"Mütze in Grau",18954, 2, 0.110594, 0.013052, 0.000000, 0.000000, 0.000000, 331.269348, 1.500000, 1.100000, 1.299999,1},
    {"Ring-Master Helm",18952, 2, 0.100472, 0.024532, 0.000000, 0.000000, 0.000000, 0.000000, 1.399999, 1.100000, 1.100000,1},
    {"Hut in Schwarz",18947, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1},
    {"Hut in Rot",18950, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1},
    {"Hut in Blau",18945, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1},
    {"Hut in Grün",18946, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1}

};

enum e_GangShopItems {
    GSI_sName[18],
    GSI_iModel,
    GSI_iBone,
    Float:GSI_fX,
    Float:GSI_fY,
    Float:GSI_fZ,
    Float:GSI_fRotX,
    Float:GSI_fRotY,
    Float:GSI_fRotZ,
    Float:GSI_fScaleX,
    Float:GSI_fScaleY,
    Float:GSI_fScaleZ,
    GSI_iPrice
}
new const g_GangShopItems[][e_GangShopItems] = {
    {"Schwarze Maske",18912, 2, 0.061876, 0.035511, -0.004993, 96.460441, 178.603134, 88.577461, 1.000000, 1.000000, 1.000000,200},
    {"Grüne Maske",18913, 2, 0.061876, 0.035511, -0.004993, 96.460441, 178.603134, 88.577461, 1.000000, 1.000000, 1.000000,200},
    {"Gepunktete Maske",18918, 2, 0.061876, 0.035511, -0.004993, 96.460441, 178.603134, 88.577461, 1.000000, 1.000000, 1.000000,200}
};

new const g_TUVDistance[] = {
    110,
    260,
    450
};

stock bool:IsTUVNeeded(distance) {
    for(new i ; i < sizeof(g_TUVDistance); i++) {
        if( distance == g_TUVDistance[i] ) return true;
    }
    return false;
}

// new Text3D:BotLabel[20];

#define GANGFIGHT_TIME 40

#define FIX_KFZSTEUER 1500

#define COL_DEFAULT "{FFFFFF}"
#define COL_LIGHTBLUE "{00C0FF}"
#define COL_YELLOW "{FFFF00}"
#define COL_ORANGE "{FF9900}"
#define COL_GREEN "{15951F}"


#define COLOR_R               "{FF0000}" //Red
#define COLOR_G               "{C4C4C4}" //Grey
#define COLOR_Y               "{EEEA00}" //Yellow
#define COLOR_B             "{00A7EE}" //Blue

#define MAX_GANG_ERPRESSUNGEN 3

#define HANDY_VERTRAG 0xFFFFFF
#define INVALID_BANK_PIN 0
#define INVALID_FRIEND_ID 0xFFFFFF

#define     ATTACHED_INDEX_CLUB_SHOP 1
#define     ATTACHED_INDEX_HELM 3
#define     ATTACHED_INDEX_GANG_SHOP 1
#define     ATTACHED_INDEX_LOBEN 2
#define     ATTACHED_INDEX_MUSIK 4
#define     ATTACHED_INDEX_KOFFER 5
#define     ATTACHED_INDEX_HANDSCHELLE 6
#define     ATTACHED_INDEX_HAUSTIER 7
#define     ATTACHED_INDEX_JOB 8

#define     INVALID_MARRIAGE    0
#define     DIALOG_NO_RESPONSE  0
#define     DIALOG_REG_STEP_1   1000
#define     DIALOG_REGISTER     1001
#define     DIALOG_LOGIN        1002
#define     DIALOG_REGLOGIN     1003
#define     DIALOG_TUT_1        1004
#define     DIALOG_TUT_2        1005
#define     DIALOG_TUT_3        1006
#define     DIALOG_TUT_4        1007
#define     DIALOG_TUT_5        1008
#define     DIALOG_TUT_6        1009
#define     DIALOG_TUT_7        1010
#define     DIALOG_STATS        1011
#define     DIALOG_LINIE        1012
#define     DIALOG_LISTE        1013
#define     DIALOG_FARMLISTE    1014
#define     DIALOG_BUSLISTE     1015
#define     DIALOG_JCENTER      1016
#define     DIALOG_STADTHALLE   1017
#define     DIALOG_FARMER       1018
#define     DIALOG_BUSFAHRER    1019
#define     DIALOG_TRUCKER      1020
#define     DIALOG_PILOT        1021
#define     DIALOG_KFZ          1022
#define     DIALOG_ANWALT       1023
#define     DIALOG_SELLCAR      1024
#define     DIALOG_CARKEY       1025
#define     DIALOG_REPORT       1026
#define     DIALOG_FZACC        1027
#define     DIALOG_FZSERV       1028
#define     DIALOG_MVCHEAT      1029
#define     DIALOG_SONST        1030
#define     DIALOG_TRUCKLISTE   1031
#define     DIALOG_PILOTLISTE   1032
#define     DIALOG_KFZLISTE     1033
#define     DIALOG_ANWALTLISTE  1034
#define     DIALOG_ADMINLISTE   1035
#define     DIALOG_RADIO        1036
#define     DIALOG_ATM          1037
#define     DIALOG_ABHEBEN      1038
#define     DIALOG_ANLEGEN      1039
#define     DIALOG_BANKWERT     1040
#define     DIALOG_BANKSPIELER  1041
#define     DIALOG_BANKENDE     1042
#define     DIALOG_CAROAMT      1043
#define     DIALOG_SZETTEL      1044
#define     DIALOG_REPLISTE     1045
#define     DIALOG_SANILISTE    1046
#define     DIALOG_OAMTLISTE    1047
#define     DIALOG_WTDLISTE     1048
#define     DIALOG_MIETEN       1049
#define     DIALOG_DDEALER      1050
#define     DIALOG_WDEALER      1051
#define     DIALOG_TOTLISTE     1052
#define     DIALOG_FAHRLISTE    1053
#define     DIALOG_NAVI         1054
#define     DIALOG_CONFIGHOUSE  1055
#define     DIALOG_CONFIGHOUSE_RAUSWERFEN 1056
#define     DIALOG_CONFIGHOUSE_KAUFPREIS 1057
#define     DIALOG_CONFIGHOUSE_MIETPREIS 1058
#define     DIALOG_CONFIGHOUSE_MIETSTATUS 1059
#define     DIALOG_CONFIGHOUSE_LOCKSTATUS 1060
#define     DIALOG_CONFIGHOUSE_INTERIOR 1061
#define     DIALOG_CONFIGHOUSE_NAME     1062
#define     DIALOG_MAXWAREN     1063
#define     DIALOG_CONFIGBIZ    1064
#define     DIALOG_CONFIGBIZ_RAUSWERFEN 1065
#define     DIALOG_CONFIGBIZ_KAUFPREIS 1066
#define     DIALOG_CONFIGBIZ_WARENPREIS 1067
#define     DIALOG_CONFIGBIZ_LOCKSTATUS 1068
#define     DIALOG_CONFIGBIZ_NAME 1069
#define     DIALOG_CONFIGBIZ_WAREN 1070
#define     DIALOG_CONFIGBIZ_MAXWAREN 1071
#define     DIALOG_MAXBENZIN    1072
#define     DIALOG_CONFIGTANKE  1073
#define     DIALOG_CONFIGTANKE_RAUSWERFEN 1074
#define     DIALOG_CONFIGTANKE_KAUFPREIS 1075
#define     DIALOG_CONFIGTANKE_BENZINKOSTEN 1076
#define     DIALOG_CONFIGTANKE_NAME 1077
#define     DIALOG_CONFIGTANKE_MAXBENZIN 1078
#define     DIALOG_WMENU        1079
#define     DIALOG_HANDYAUFLADEN 1080
#define     DIALOG_SERVICE      1081
#define     DIALOG_SLISTSANI    1082
#define     DIALOG_SLISTKFZ     1083
#define     DIALOG_SLISTCOP     1084
#define     DIALOG_SLISTOAMT    1085
#define     DIALOG_SLISTAWALT   1086
#define     DIALOG_MARKT        1087
#define     DIALOG_MEMBERS      1088
#define     DIALOG_AMAMT        1095
#define     DIALOG_LIEFAUSWAHL  1096
#define     DIALOG_GESCHLISTE   1097
#define     DIALOG_TANKLISTE    1098
#define     DIALOG_GOTOLISTE    1099
#define     DIALOG_HELP         1100
#define     DIALOG_HELP_ALLG    1101
#define     DIALOG_HELP_CAR     1102
#define     DIALOG_HELP_LEADER  1103
#define     DIALOG_HELP_HANDY   1104
#define     DIALOG_HELP_HAUS    1105
#define     DIALOG_HELP_BIZ     1106
#define     DIALOG_HELP_TANKE   1107
#define     DIALOG_HELP_JOB     1108
#define     DIALOG_HELP_FRAK    1109
#define     DIALOG_HELP_ADMIN   1110
#define     DIALOG_CHATOFF      1111
#define     DIALOG_TICKETS      1112
#define     DIALOG_AMT          1113
#define     DIALOG_ANGELSTATS   1114
#define     DIALOG_ASHOP        1115
#define     DIALOG_SELLFISH     1116
#define     DIALOG_TABMENU      1117
#define     DIALOG_LICENSES     1118
#define     DIALOG_LOGMSG       1119
#define     DIALOG_SZETTEL1     1120
#define     CDIALOG_WMENU       1121
#define     BEHORDEN            1122
#define     AUTOHAUSER          1123
#define     RESTO               1124
#define     TANKSTELLEN         1125
#define     KLEIDERLADEN        1126
#define     DIESHOPS            1127
#define     WORTE               1128
#define     DIALOG_STRASSE      1129
#define     DIALOG_MULLMANN     1130
#define     DIALOG_MULLMANN     1130
#define     DIALOG_GARTEN       1131
#define     DIALOG_BAUARBEITER  1132
#define     DIALOG_SCHIFFFAHRER 1133
#define     DIALOG_GELDT        1134
#define     DIALOG_EISMANN      1135
#define     DIALOG_TASCHENDIEB  1136
#define     DIALOG_WERBUNG      1137
#define     DIALOG_NOTRUF       1138
#define     DIALOG_TABMENU_VK   1139
#define     DIALOG_TABMENU_SMS  1140
#define     DIALOG_TABMENU_CALL 1141
#define     DIALOG_HITMEN_LIST  1142
#define     DIALOG_HITMEN_E     1143
#define     DIALOG_HITMEN_AUFTRAG 1144
#define     DIALOG_FSKIN        1145
#define     DIALOG_DEDEKTIV     1146
#define     DIALOG_PIZZAMAN     1147
#define     DIALOG_SLISTPIZZA   1148

#define     DIALOG_CLUBSHOP_DEL 1149
#define     DIALOG_CLUBSHOP     1150
#define     GANGFRAKBASE        1151
#define     JOBINNAVI           1152
#define     TUNINGGARAGE        1153
#define     ILLEGALEORTE        1154
#define     DIALOG_HURE         1155
#define     DIALOG_KONTOSTAND   1156
#define     DIALOG_TAXI         1157
#define     DIALOG_DRINKS       1158
#define     DIALOG_JOBWANTED    1159
#define     DIALOG_JOBTAXI      1160
#define     DIALOG_JOBAUTODIEB  1161
#define     AMMUORTE            1162
#define     DIALOG_SLISTTAXI    1163
#define     DIALOG_STARTBONUS   1164
#define     DIALOG_CMDHELP      1165
#define     DIALOG_CONFIGBIZ_ZEITEN 1166
#define     DIALOG_SET_SECURECODE 1167
#define     DIALOG_CHECK_SECURECODE 1168
#define     DIALOG_LEADER_LIST  1169
#define     DIALOG_TANKE        1170
#define     DIALOG_BANKKONTO    1171
#define     DIALOG_BANKKONTO_PIN 1172
#define     DIALOG_UEBERWEISEN_PIN 1173
#define     DIALOG_ABHEBEN_PIN  1174
#define     DIALOG_PIN_AENDERN_PIN 1175
#define     DIALOG_PIN_AENDERN  1176
#define     DIALOG_FAHRSCHULE_SOLO 1177
#define     DIALOG_CHECKAUSWAHL 1178
#define     DIALOG_SLISTWHEEL   1179
#define     DIALOG_TAXITLISTE   1180
#define     DIALOG_SILVESTER    1181
#define     DIALOG_KOFFERRAUM   1182
#define     DIALOG_KOFFERRAUM_ACTION   1183
#define     DIALOG_KOFFERRAUM_NEHMEN   1184
#define     DIALOG_KOFFERRAUM_ABLEGEN   1185
#define     DIALOG_REG_STEP_2   1186
#define     DIALOG_REG_STEP_5   1187
#define     DIALOG_REG_STEP_6   1188
#define     DIALOG_GEBURTSTAG   1189
#define     DIALOG_HANDYKAUFEN  1190
#define     DIALOG_FIGHTSTYLE   1191
#define     DIALOG_TANKMENGE    1192
#define     DIALOG_KANISTER    1193
#define     DIALOG_ZULASSUNGSSTELLE 1194
#define     DIALOG_FAHRZEUGZULASSEN 1195
#define     DIALOG_DUMMY        1196
#define     DIALOG_FAHRZEUGABMELDEN 1197
#define     DIALOG_ADBOARD_BUY   1198
#define     DIALOG_ADBOARD_MAIN  1199
#define     DIALOG_ADBOARD_HELP  1200
#define     DIALOG_ADBOARD_TEXT  1201
#define     DIALOG_ADBOARD_MATSIZE 1202
#define     DIALOG_ADBOARD_FONT    1203
#define     DIALOG_ADBOARD_TEXTSIZE 1204
#define     DIALOG_ADBOARD_BOLD      1205
#define     DIALOG_ADBOARD_TEXTCOLOR     1206
#define     DIALOG_ADBOARD_BACKCOLOR     1207
#define     DIALOG_ADBOARD_ALIGN     1208
#define     DIALOG_ADBOARD_RESET     1209
#define     DIALOG_ADBOARD_SELL     1210
#define     DIALOG_ADBOARD_TEXTCOLOR_LIST 1211
#define     DIALOG_ADBOARD_TEXTCOLOR_INPUT 1212
#define     DIALOG_ADBOARD_BACKCOLOR_LIST  1213
#define     DIALOG_ADBOARD_BACKCOLOR_INPUT  1214
#define     DIALOG_SECURECODE_REGISTER 1217
//#define     DIALOG_VISUM    1218
#define     DIALOG_WANTEDTICKET 1219
#define     DIALOG_FSLISTE  1220
#define     DIALOG_TABMENU_ADM 1221
#define     DIALOG_BAUERHELP 1222
#define     DIALOG_RATESUPPORTER 1224
#define     DIALOG_GANGSHOP_DEL 1225
#define     DIALOG_GANGSHOP     1226
#define     DIALOG_HWERBUNG     1227
#define     DIALOG_SELLDRUGS    1228
#define     DIALOG_SELLSPICE    1229
#define     DIALOG_WAFFENLAGER  1230
#define     DIALOG_WAFFENLAGER_INFO 1231
#define     DIALOG_WAFFENLAGER_LAGERN 1232
#define     DIALOG_WAFFENLAGER_BAUEN 1233
#define     DIALOG_BOMBELEGEN   1234
#define     DIALOG_BOMBDEFUSE   1235
#define     DIALOG_FAHRZEUGVERLEIH 1236
#define     DIALOG_KREDITUEBERSICHT 1237
#define     DIALOG_KREDITCONFIRM 1238
#define     DIALOG_MUSIK 1239
#define     BANKEN  1240
#define     DIALOG_TELEFONZELLE 1241
#define     DIALOG_TELEFONZELLE_CALL 1242
#define     DIALOG_TELEFONZELLE_SMS 1243
#define     DIALOG_BANK 1244
#define     DIALOG_PIN_VERGESSEN 1245
#define     DIALOG_KOFFER   1246
#define     DIALOG_KOFFER_ACTION   1247
#define     DIALOG_KOFFER_NEHMEN   1248
#define     DIALOG_KOFFER_ABLEGEN   1249
#define     DIALOG_TELEFONZELLE_CALL_MSG 1250
#define     DIALOG_TELEFONZELLE_SMS_MSG 1251
#define     DIALOG_HAUSUPGRADE 1252
#define     DIALOG_HAUSUPGRADE_WL 1253
#define     DIALOG_HAUSUPGRADE_SB 1254
#define     DIALOG_HAUSUPGRADE_WL_BUY 1255
#define     DIALOG_HAUSUPGRADE_SB_BUY 1256
#define     DIALOG_HAUSUPGRADE_SB_ACTION   1257
#define     DIALOG_HAUSUPGRADE_SB_NEHMEN   1258
#define     DIALOG_HAUSUPGRADE_SB_ABLEGEN   1259
#define     DIALOG_HAUSUPGRADE_WL_ACTION   1260
#define     DIALOG_HAUSUPGRADE_WL_NEHMEN   1261
#define     DIALOG_HAUSUPGRADE_WL_ABLEGEN   1262
#define     DIALOG_HAUSTIER 1263
#define     DIALOG_HAUSTIER_KAUFEN 1264
#define     DIALOG_PEILSENDER_LISTE 1265
#define     DIALOG_PEILSENDER_KAUFEN 1266
#define     CASINOSORT 1267
#define     DIALOG_TANKSTELLEN_OPTION 1268
#define     DIALOG_TANKSTELLEN_VIDEO 1269
#define     DIALOG_TANKSTELLEN_AUTONOTRUF 1270
#define     DIALOG_REG_STEP_7   1271
#define     DIALOG_CLUBNEON 1272
#define     DIALOG_SELLCAR_PAYMETHOD 1273
#define     DIALOG_SELLCAR_ECPIN 1274
#define     DIALOG_HANDYSHOP 1275
#define     VERKAUFH 1276
#define     DIALOG_BIZKEY 1277
#define     DIALOG_FIRMENINFO 1278
#define     DIALOG_FIRMENUEBERSICHT 1279
#define     DIALOG_SPAWNMELDUNG 1280
#define     DIALOG_TABMENU_VKO 1281
#define     DIALOG_CONFIGHOUSE_MAXMIETER 1282
#define     DIALOG_HAUSMIETER 1283
#define     DIALOG_CONFIGTANKE_BENZIN 1284
#define     DIALOG_STARTBAUER 1285
#define     DIALOG_ZOLLPASS 1286
#define     DIALOG_UEBERWEISEN 1287
#define     DIALOG_PASSWORD_UPDATE 1288
#define     DIALOG_SNACKSHOP 1289
#define     DIALOG_FPREIS 1290
#define     DIALOG_PARKSCHEIN 1291
#define     DIALOG_ANTWORT 1292
#define     DIALOG_HAUSMENU 1293
#define     DIALOG_REG_STEP_3   1294
#define     DIALOG_REG_STEP_4   1295
#define     DIALOG_EMAIL 1296
#define     DIALOG_VORNAME 1297

#define     DIALOG_HAUSMENU_MIETERANZAHL 1298
#define     DIALOG_HAUSMENU_MIETPREIS 1299
#define     DIALOG_HAUSMOEBEL_KATALOG 1301
#define     DIALOG_HAUSMOEBEL_KATALOG_EX 1300
#define     DIALOG_HAUSMENU_MOEBEL_EDIT 1302
#define     DIALOG_HAUSMENU_MOEBEL_BUY 1303
#define     DIALOG_HAUSMENU_MOEBEL_BUY_KAT 1304
#define     DIALOG_HAUSMENU_MOEBEL_BUY_ITEM 1305
#define     DIALOG_HAUSMENU_MOEBEL_SELL_CONFIRM 1306
#define     DIALOG_HAUSMENU_MOEBEL_SELL 1307
#define     DIALOG_HAUSMENU_MOEBEL_BUY_ITEM_CONFIRM 1308
#define     DIALOG_HAUSMENU_EMPTY 1309
#define     DIALOG_HAUSMENU_EDIT 1310
#define     DIALOG_SELLWTEILE    1311
#define     NAVIFAHRSCHULE       1312
#define     DIALOG_ZUGFAHRER     1313
#define     DIALOG_SCHWARZBERUF  1314
#define     DIALOG_SCHWARZJOBS   1315
#define     DIALOG_WLAGERCOP     1316
#define     DIALOG_JOBHOTDOG     1317
#define     DIALOG_FCAROAMT       1320
#define     DIALOG_REGSPERRE    1321
#define     DIALOG_GUTSCHEINCODE 1322
#define     CARSHARING      1323
#define     DIALOG_WARTUNG 1324
#define     HOTELNAVI 1325
#define     NOTDIENSTNAVI 1326
#define     VERSICHERUNGENAVI 1327
#define     DIALOG_RECHTSSCHUTZ 1328
#define     DIALOG_SELBSTBERUF 1329
#define     DIALOG_POST 1330
#define     DIALOG_POST2 1331
#define     DIALOG_POST3 1332
#define     DIALOG_POST4 1333
#define     DIALOG_POST5 1334
#define     DIALOG_POST6 1335
#define     DIALOG_POST7 1336
#define     DIALOG_POST8 1337
#define     DIALOG_POST9 1338
#define     DIALOG_POST10 1339
#define     DIALOG_POST11 1340
#define     DIALOG_WANTEDCODES 1341
#define     DIALOG_WANTEDCODES2 1342
#define     DIALOG_WANTEDCODES3 1343
#define     DIALOG_DEAKTACC 1344
#define     DIALOG_GUP 1345
#define     DIALOG_BESTAETIGEN 1346
#define     DIALOG_YSTREAM 1347
#define     DIALOG_PECH 1348
#define     DIALOG_SHISHA 1349
#define     DIALOG_RB 1350
#define     DIALOG_TUT_8 1351
#define     DIALOG_TUT_9 1352
#define     DIALOG_TUT_10 1353
#define     DIALOG_TUT_11 1354
#define     DIALOG_WPREIS 1355
#define     DIALOG_WHEELMAN_OFFER 1356
#define     DIALOG_SELLWCODES 1357
#define     DIALOG_SEEDPOINTS 1358
#define     DIALOG_CARSELL 1359
#define     DIALOG_SELLGUN_MAIN 1360
#define     DIALOG_SELLGUN_CLIENT 1361
#define     DIALOG_SELLGUN_PRICE 1362
#define     DIALOG_FILLUP_PAYMETHOD 1363
#define     DIALOG_FILLUP_ECPIN 1364

#define     KEIN_KENNZEICHEN    "KEINE PLAKETTE"

enum {
    CP_NONE,//0
    CP_FINDCAR,//   1
    CP_TOT,//2
    CP_SHOWJOB1,//  3
    CP_SHOWJOB2,//  4
    CP_SHOWJOB3,//  5
    CP_SHOWJOB4,//  6
    CP_SHOWJOB5,//  7
    CP_SHOWJOB6,//  8
    CP_SHOWJOB7,//  9
    CP_SHOWJOB8,//217
    CP_SHOWJOB9,//218
    CP_SHOWJOB10,//219
    CP_SHOWJOB11,//220
    CP_SHOWJOB12,//221
    CP_SHOWJOB13,//222
    CP_HARVEST1,//  10
    CP_HARVEST2,//  11
    CP_HARVEST3,//  12
    CP_HARVEST4,//  13
    CP_HARVEST5,//  14
    CP_HARVEST6,//  15
    CP_HARVEST7,//  16
    CP_HARVEST8,//  17
    CP_HARVEST9,//  18
    CP_HARVEST10,//19
    CP_HARVEST11,//20
    CP_HARVEST12,//21
    CP_HARVEST13,//22
    CP_HARVEST14,//23
    CP_HARVEST15,//24
    CP_HARVEST16,//25
    CP_HARVEST17,//26
    CP_HARVEST18,//27
    CP_HARVEST19,//28
    CP_HARVEST20,//29
    CP_HARVEST21,//30
    CP_HARVEST22,//31
    CP_HARVEST23,//32
    CP_HARVEST24,//33
    CP_HARVEST25,//33
    CP_HARVEST26,//33
    CP_PILOT1,//    34
    CP_PILOT2,//    35
    CP_PILOT3,//    36
    CP_PILOT4,//229
    CP_TRUCK1,//    37
    CP_TRUCK2,//    38
    //Linie1
    CP_BUSLINIE1CP1,//39
    CP_BUSLINIE1CP2,//40
    CP_BUSLINIE1CP3,//41
    CP_BUSLINIE1CP4,//42
    CP_BUSLINIE1CP5,//43
    CP_BUSLINIE1CP6,//44
    CP_BUSLINIE1CP7,//45
    //Linie2
    CP_BUSLINIE2CP1,//39
    CP_BUSLINIE2CP2,//40
    CP_BUSLINIE2CP3,//41
    CP_BUSLINIE2CP4,//42
    CP_BUSLINIE2CP5,//43
    CP_BUSLINIE2CP6,//44
    CP_BUSLINIE2CP7,//45
    CP_BUSLINIE2CP8,//45
    //Linie3
    CP_BUSLINIE3CP1,//46
    CP_BUSLINIE3CP2,//47
    CP_BUSLINIE3CP3,//  48
    CP_BUSLINIE3CP4,//49
    CP_BUSLINIE3CP5,//50
    CP_BUSLINIE3CP6,//51
    CP_BUSLINIE3CP7,//52
    CP_BUSLINIE3CP8,//53
    //Linie4
    CP_BUSLINIE4CP1,//54
    CP_BUSLINIE4CP2,//55
    CP_BUSLINIE4CP3,//56
    CP_BUSLINIE4CP4,//57
    CP_BUSLINIE4CP5,//  58
    CP_BUSLINIE4CP6,//  58
    CP_BUSLINIE4CP7,//  58
    //Zugfahrer
    CP_ZUGB1,
    CP_ZUGB2,
    CP_ZUGB3,
    CP_ZUGB4,
    CP_ZUGB5,
    CP_TUTORIAL1,//68
    CP_TUTORIAL2,//69
    CP_TUTORIAL3,//70
    CP_TUTORIAL4,//71
    CP_TUTORIAL5,//72
    CP_FAHRSCHULE1,//73
    CP_FAHRSCHULE2,//74
    CP_FAHRSCHULE3,//75
    CP_FAHRSCHULE4,//76
    CP_FAHRSCHULE5,//77
    CP_FAHRSCHULE6,//78
    CP_FAHRSCHULE7,//79
    CP_FAHRSCHULE8,//80
    CP_FAHRSCHULE9,//81
    CP_FAHRSCHULE10,//82
    CP_FAHRSCHULE11,//83
    CP_FAHRSCHULE12,//84
    CP_FAHRSCHULE13,//85
    CP_FAHRSCHULE14,//86
    CP_FAHRSCHULE15,//87
    CP_FAHRSCHULE16,//88
    CP_FAHRSCHULE17,//89
    CP_FAHRSCHULE18,//90
    CP_FAHRSCHULE19,//91
    CP_FAHRSCHULE20,//92
    CP_FAHRSCHULE21,//93
    CP_FAHRSCHULE22,//94
    CP_TRUCK_RAFFINERIE,// 95
    CP_TRUCK_BELADUNG,//    96
    CP_HOME,//97
    CP_FINDEN,//    98
    CP_ACCEPTCOP,//99
    CP_ACCEPTSANI,//100
    CP_ACCEPTKFZ,//101
    CP_ACCEPTOAMT,//102
    CP_TUTORIAL6,//104
    CP_TUTORIAL7,//105
    CP_BACKUP,//    106
    CP_NAVI1,// 59
    CP_NAVI2,// 60
    CP_NAVI3,// 61
    CP_NAVI4,// 62
    CP_NAVI5,// 63
    CP_NAVI6,// 64
    CP_NAVI7,// 65
    CP_NAVI8,// 66
    CP_NAVI9,// 67
    CP_NAVI10,//    107
    CP_NAVI11,//    108
    CP_NAVI12,//    109
    CP_NAVI13,//    110
    CP_NAVI14,//    111
    CP_NAVI15,//    112
    CP_NAVI16,//    113
    CP_NAVI17,//    114
    CP_NAVI18,//    115
    CP_NAVI19,//    116
    CP_NAVI20,//    117
    CP_NAVI21,//    118
    CP_NAVI22,//    119
    CP_NAVI23,//    120
    CP_NAVI24,//    121
    CP_NAVI25,//    122
    CP_NAVI26,//    123
    CP_NAVI27,//    124
    CP_NAVI28,//    125
    CP_NAVI29,//    126
    CP_NAVI30,//    127
    CP_NAVI31,//    128
    CP_NAVI32,//    129
    CP_NAVI33,//    130
    CP_NAVI34,//    103
    CP_NAVI35,//    131
    CP_NAVI36,//    132
    CP_NAVI37,//    133
    CP_NAVI38,//223
    CP_NAVI39,//224
    CP_NAVI40,//225
    CP_NAVI41,//226
    CP_NAVI42,//227
    CP_NAVI43,//228
    //Neu
    CP_NAVI44,//229
    CP_NAVI45,//230
    CP_NAVI46,//231
    CP_NAVI47,//232
    CP_NAVI48,//233
    CP_NAVI49,//234
    CP_NAVI50,//235
    CP_NAVI51,//236
    CP_NAVI52,//237
    CP_NAVI53,//238
    CP_NAVI54,//239
    CP_NAVI55,//240
    CP_NAVI56,//241
    CP_NAVI57,//242
    CP_NAVI58,//243
    CP_NAVI59,//244
    CP_NAVI60,//245
    CP_NAVI61,//246
    CP_NAVI62,//247
    CP_NAVI63,//248
    CP_NAVI64,//249
    CP_NAVI65,//250
    CP_NAVI66,//251
    CP_NAVI67,//252
    CP_NAVI68,//253
    CP_NAVI69,//254
    CP_NAVI70,//255
    CP_NAVI71,//256
    CP_NAVI72,//257
    CP_NAVI73,//258
    CP_NAVI74,//259
    CP_NAVI75,//260
    CP_NAVI76,//261
    CP_NAVI77,//262
    CP_NAVI78,//264
    CP_NAVI79,//265
    CP_NAVI80,//266
    CP_NAVI81,//267
    CP_NAVI82,//271
    CP_NAVI83,//272
    //Reinigungsjob
    CP_REINI1,// 134
    CP_REINI2,// 135
    CP_REINI3,// 136
    CP_REINI4,// 137
    CP_REINI5,// 138
    CP_REINI6,// 139
    CP_REINI7,// 140
    CP_REINI8,// 141
    CP_REINI9,// 142
    CP_REINI10,//143
    CP_REINI11,//144
    CP_REINI12,//145
    CP_REINI13,//146
    CP_REINI14,// 207
    //Gärtner Job
    CP_GARTEN1,//147
    CP_GARTEN2,//148
    CP_GARTEN3,//149
    CP_GARTEN4,//150
    CP_GARTEN5,//151
    CP_GARTEN6,//152
    CP_GARTEN7,//153
    CP_GARTEN8,//154
    CP_GARTEN9,//155
    CP_GARTEN10,//156
    CP_GARTEN11,//157
    CP_GARTEN12,//158
    CP_GARTEN13,//159
    CP_GARTEN14,//160
    CP_GARTEN15,//161
    CP_GARTEN16,//162
    CP_GARTEN17,//206
    CP_GARTEN18,//206
    CP_GARTEN19,//206
    //Müllman Job
    CP_MUELL,// 163
    CP_MUELL_ENTLEEREN,// 163
    CP_MUELLFINISH,
    CP_MUELL_CARRY,
    //Geld Transporter Job
    CP_GTRANS1,//182
    CP_GTRANS2,//183
    CP_GTRANS3,//184
    CP_GTRANS4,//185
    CP_GTRANS5,//186
    CP_GTRANS6,// 204
    CP_GTRANS7,// 208
    CP_GTRANS8,// 209
    //Bauarbeiter
    CP_BAUARBEITER1,//187
    CP_BAUARBEITER2,//188
    CP_BAUARBEITER3,//189
    CP_BAUARBEITER4,//190
    CP_BAUARBEITER5,//191
    CP_BAUARBEITER6,//192
    CP_BAUARBEITER7,//193
    CP_BAUARBEITER8,//194
    CP_BAUARBEITER9,//195
    CP_BAUARBEITER10,//196
    CP_BAUARBEITER11,//197
    CP_BAUARBEITER12,//198
    CP_BAUARBEITER13,//199
    CP_BAUARBEITER14,//200
    CP_BAUARBEITER15,//201
    CP_BAUARBEITER16,//202
    CP_BAUARBEITER17,//203
    //Rest
    //Schiff
    CP_SCHIFF1,// 210
    CP_SCHIFF2,// 211
    CP_SCHIFF3,// 212
    CP_SCHIFF4,// 213
    CP_SCHIFF5,// 214
    CP_SCHIFF6,// 215
    CP_SCHIFF7,// 216
    //Showjob
    CP_SFKRAN,//263
    CP_EVENTPOINT,//  268
    CP_FAHRSCHULE_OFFLINE,// 269
    CP_DIEBSTAHL_GT,//270
    CP_MELDESTELLE,// 273

    CP_TRUCKERWAREN,
    CP_TRUCKERWAREN2,
    CP_TRUCKERTANK,
    CP_TRUCKERTANK2,
    //
    CP_HAUSSUCHEN,
    CP_PRISONRUN,

    CP_COW,
    CP_COW_FINISH,
    CP_GELDT,// 163
    CP_GELDT_ENTLEEREN,// 163
    CP_GELDTFINISH
}
//Testserver
#if defined Testserveran
#define     SQL_HOST            "localhost"
#define     SQL_USER            "samp6100" // Server: gtaserver3173 - Test Server: ni89284_1_DB
#define     SQL_PASS            "Hallo500" // Server: Vy4Cwwif - Test Server: Vy4Cwwif
#define     SQL_DATA            "samp6100_test" // Server: gtaserver3173 - Test Server: ni89284_1_DB
#else
#define     SQL_HOST            "31.172.86.143"
#define     SQL_USER            "samp" // Server: gtaserver3173 - Test Server: ni89284_1_DB
#define     SQL_PASS            "Cs4FVusLWpzEZb9R" // Server: Vy4Cwwif - Test Server: Vy4Cwwif
#define     SQL_DATA            "samp" // Server: gtaserver3173 - Test Server: ni89284_1_DB
#endif

#define     WEBSQL_HOST         "31.172.86.143"
#define     WEBSQL_USER         "ucp"
#define     WEBSQL_PASS         "ebkAmH0WAP4KqAjo"
#define     WEBSQL_DATA         "ucp"


#define     MAX_HOUSES          703
#define     MAX_HOTELS          30
#define     MAX_BIZES           62
#define     MAX_TANKEN          30
#define     MAX_FISCHE_PRO_PLATZ    20
#define     MAX_APLATZ          10

#define     TEAM_LSPD_COLOR     0x217BFFFF
#define     TEAM_FBI_COLOR      0x0000A0FF
#define     TEAM_NEWS_COLOR     0xFF6600FF
#define     TEAM_OAMT_COLOR     0x00FFFFFF
#define     TEAM_SANI_COLOR     0xFF0021FF
#define     TEAM_FAHR_COLOR     0xFFFF00FF
#define     TEAM_STAAT_COLOR    0x008000FF

#define     COLOR_CHAT_JOB          0x8D8DFF00 // Lila
#define     COLOR_CHAT_FRAKTION     0x07FFFFFF // Türkis
#define     COLOR_CHAT_GC_NONADM    0xFFFFFFFF // Weiß
#define     COLOR_CHAT_GC_ADM       0x247BA6FF // Blau
#define     COLOR_CHAT_MUTED        0xFF8282FF // Pink

#define     COLOR_HEX_WHITE     "{FFFFFE}"
#define     COLOR_HEX_ORANGE    "{FF6731}"
#define     COLOR_HEX_RED       "{FF1705}"
#define     COLOR_HEX_LIGHTBLUE "{2E94D0}"
#define     COLOR_HEX_BLUE      "{0077FF}"
#define     COLOR_HEX_GREEN     "{15951F}"
#define     COLOR_HEX_GREENA    "{00CC00}"
#define     COLOR_HEX_YELLOW    "{FFFF00}"
#define     COLOR_HEX_BLACK     "{000000}"
#define     COLOR_HEX_PINK      "{AF00FF}"
#define     COLOR_HEX_GRAU      "{555555}"
#define     COLOR_HEX_DARKRED   "{A52A2A}"

#define     COLOR_3D_WHITE      0xFFFFFFAA

//Schwarz, Weiß und dazwischen
#define     COLOR_BOT           0xFFFFFF20
#define     COLOR_WHITE         0xFFFFFFFF
#define     COLOR_LIGHTGREY     0xCDCDCDFF
#define     COLOR_GREY          0xADADADFF
#define     COLOR_DARKGREY      0x818181FF
#define     COLOR_BLACK         0x000000FF
#define     COLOR_CLUB          0x00EAFFFF
#define     COLOR_BLINKER       0xFFD9A6FF
//Grün
#define     COLOR_LIGHTGREEN    0x00FF00FF
#define     COLOR_GREEN         0x009D00FF
#define     COLOR_DARKGREEN     0x006200FF
#define     COLOR_LIME          0x10F441AA
//Rot
#define     COLOR_LIGHTRED      0xFF6347AA
#define     COLOR_LIGHTRED2     0xFF8282AA
#define     COLOR_RED           0xAA3333AA
#define     COLOR_DARKRED       0xAA2222FF
//Yellow & Orange
#define     COLOR_LIGHTYELLOW   0xF7F3B3FF
#define     COLOR_YELLOW        0xFFFF00FF
#define     COLOR_DARKYELLOW    0xA2A602FF
#define     COLOR_ORANGE        0xFBB420FF
//Blue
#define     COLOR_LIGHTBLUE     0x33CCFFAA
#define     COLOR_BLUE          0x3592D7FF
#define     COLOR_COPPARTNER    0x0000CDFF
#define     COLOR_DARKBLUE      0x2171ABFF
#define     COLOR_TURKIS        0x07FFFFFF
//Pink & Purple
#define     COLOR_PURPLE        0xC2A2DAAA
#define     COLOR_PINK          0xFF0080FF
//Sonstige
#define     COLOR_SAMP          0xC6D9E7FF
#define     COLOR_PROP          0xB4B2AFFF
#define     COLOR_BCHAT         0xFDE144FF
#define     COLOR_COP_VERST     0x29088AFF
#define     COLOR_COP_MELDUNG   0x8D8DFF00

#define     INVALID_HOUSE_KEY   999

#define     HOTEL_OFFSET_VW     1000

#define     MaxVeh              6


#define HARTZ4_GELD 2000

#define     SPECIAL_ACTION_PISSING      68


#define MONEY_ALERT_VALUE 20000

#define RunOutTime 45000
#define RefuelWait 5000

#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))

#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

enum GangFight
{
    Float:fsMinX,
    Float:fsMinY,
    Float:fsMaxX,
    Float:fsMaxY,
    Float:fsCTFx,
    Float:fsCTFy,
    Float:fsCTFz,
    fsID,
    fsOwnerFaction,
    fsAttackFaction,
    fsKillsOfOwner,
    fsKillsOfAttack,
    fsFightTime,
    fsCTF[3],
    fsLastFight,
    fsZoneID,
    fsFlag,
    Text:fsWinFaction,
    Text:fsLoseFaction,
    Text:fsWinKills,
    Text:fsLoseKills,
    Text:fsTime
}

    /*{1060.145,-1721.339,1166.624,-1583.168,1072.4016,-1619.3834,20.4583},//Kaufhaus
    {990.2909,1821.38,1177.724,2057.332,1067.5798,1884.2932,10.8203},//Container
    {-887.5186,1377.989,-583.8938,1634.903,-813.6335,1525.2080,26.5065},//Wüste
    {-2506.7,740.0255,-2383.094,826.8147,2459.4094,787.3281,35.1719},//Markt
    {-1850.044,1438.284,-1710.987,1584.248,-1789.1478,1543.3608,7.1875},//Hafen
    {-1891.4263,857.8361,-1722.0261,1095.5897,-1720.0752,1018.2902,17.5859},//Bank
    {1828.318,-1938.465,2071.699,-1760.817,1958.6156,-1853.2424,4.3392},//Tanke
    {1828.0573,-2161.2705,1956.4136,-2057.7964,1924.0941,-2125.0146,13.5826}//Airport(LS)*/

new const g_KofferraumBezeichnung[][] = {
    {"Drogen"},
    {"Waffenteile"},
    {"Waffe"},
    {"Wantedcodes"},
    {"Spice"}
};

new const g_KofferBezeichnung[][] = {
    {"Drogen"},
    {"Waffenteile"},
    {"Waffe"},
    {"Wantedcodes"},
    {"Spice"}
};

new const g_HouseUpgradeBezeichnung[][] = {
    {"Drogen"},
    {"Spice"}
};

enum e_Mobiltelefon {
    M_sName[26],
    M_iPrice
}

new const g_Mobiltelefon[][e_Mobiltelefon] = {
    {"iPhone X",225000},
    {"iPhone 8",175000},
    {"iPhone 7",100000},
    {"iPhone 6",78000},
    {"iPhone 5",67000},
    {"iPhone 4",4500},
    {"Samsung S8",185000},
    {"Samsung S7",120000},
    {"Samsung S6",87000},
    {"Samsung S5",47000},
    {"Samsung S4",38000},
    {"Google Pixel",48000},
    {"HP Elite x3",50000},
    {"Sony Xperia XZ",40000},
    {"Nokia Lumia 520",42000},
    {"HTC One X",6600},
    {"Sony Xperia M",4000},
    {"Nokia 106",2500}
};


new
    g_aiDestroyedVehicles[MAX_PLAYERS char],
    g_aiLastVehicle[MAX_PLAYERS],
    g_aiLastDamagedByPlayer[MAX_PLAYERS];

enum e_PolizeiPartner {
    PP_iPartner,
    PP_iStatus
}

enum {
    PolizeiPartner_Active = 1,
    PolizeiPartner_Wait,
    PolizeiPartner_Approval
}

new g_PolizeiPartner[MAX_PLAYERS][e_PolizeiPartner];

/*new const playerColors[200] =
{
    0xFF8C13FF,0xC715FFFF,0x20B2AAFF,0xDC143CFF,0x6495EDFF,0xf0e68cFF,
    0x778899FF,0xFF1493FF,0xF4A460FF,0xEE82EEFF,0xFFD720FF,0x8b4513FF,
    0x4949A0FF,0x148b8bFF,0x14ff7fFF,0x556b2fFF,0x0FD9FAFF,0x10DC29FF,
    0x534081FF,0x0495CDFF,0xFF6CE8FF,0xBD34DAFF,0x247C1BFF,0x0C8E5DFF,
    0x635B03FF,0xCB7ED3FF,0x65ADEBFF,0x5C1ACCFF,0xF2F853FF,0x11F891FF,
    0x7B39AAFF,0x53EB10FF,0x54137DFF,0x275222FF,0xF09F5BFF,0x3D0A4FFF,
    0x22F767FF,0xD63034FF,0x9A6980FF,0xDFB935FF,0x3793FAFF,0x90239DFF,
    0xE9AB2FFF,0xAF2FF3FF,0x057F94FF,0xB98519FF,0x388EEAFF,0x028151FF,
    0xA55043FF,0x0DE018FF,0x93AB1CFF,0x95BAF0FF,0x369976FF,0x18F71FFF,
    0x4B8987FF,0x491B9EFF,0x829DC7FF,0xBCE635FF,0xCEA6DFFF,0x20D4ADFF,
    0x2D74FDFF,0x3C1C0DFF,0x12D6D4FF,0x48C000FF,0x2A51E2FF,0xE3AC12FF,
    0xFC42A8FF,0x2FC827FF,0x1A30BFFF,0xB740C2FF,0x42ACF5FF,0x2FD9DEFF,
    0xFAFB71FF,0x05D1CDFF,0xC471BDFF,0x94436EFF,0xC1F7ECFF,0xCE79EEFF,
    0xBD1FF2FF,0x93B7E4FF,0x3214AAFF,0x184D3BFF,0xAE4B99FF,0x7E49D7FF,
    0x4C436EFF,0xFA24CCFF,0xCE76BEFF,0xA04E0AFF,0x9F945CFF,0xDCDE3DFF,
    0x10C9C5FF,0x70524DFF,0x0BE472FF,0x8A2CD7FF,0x6152C2FF,0xCF72A9FF,
    0xE59338FF,0xEEDC2DFF,0xD8C762FF,0x3FE65CFF,0xFF8C13FF,0xC715FFFF,
    0x20B2AAFF,0xDC143CFF,0x6495EDFF,0xf0e68cFF,0x778899FF,0xFF1493FF,
    0xF4A460FF,0xEE82EEFF,0xFFD720FF,0x8b4513FF,0x4949A0FF,0x148b8bFF,
    0x14ff7fFF,0x556b2fFF,0x0FD9FAFF,0x10DC29FF,0x534081FF,0x0495CDFF,
    0xFF6CE8FF,0xBD34DAFF,0x247C1BFF,0x0C8E5DFF,0x635B03FF,0xCB7ED3FF,
    0x65ADEBFF,0x5C1ACCFF,0xF2F853FF,0x11F891FF,0x7B39AAFF,0x53EB10FF,
    0x54137DFF,0x275222FF,0xF09F5BFF,0x3D0A4FFF,0x22F767FF,0xD63034FF,
    0x9A6980FF,0xDFB935FF,0x3793FAFF,0x90239DFF,0xE9AB2FFF,0xAF2FF3FF,
    0x057F94FF,0xB98519FF,0x388EEAFF,0x028151FF,0xA55043FF,0x0DE018FF,
    0x93AB1CFF,0x95BAF0FF,0x369976FF,0x18F71FFF,0x4B8987FF,0x491B9EFF,
    0x829DC7FF,0xBCE635FF,0xCEA6DFFF,0x20D4ADFF,0x2D74FDFF,0x3C1C0DFF,
    0x12D6D4FF,0x48C000FF,0x2A51E2FF,0xE3AC12FF,0xFC42A8FF,0x2FC827FF,
    0x1A30BFFF,0xB740C2FF,0x42ACF5FF,0x2FD9DEFF,0xFAFB71FF,0x05D1CDFF,
    0xC471BDFF,0x94436EFF,0xC1F7ECFF,0xCE79EEFF,0xBD1FF2FF,0x93B7E4FF,
    0x3214AAFF,0x184D3BFF,0xAE4B99FF,0x7E49D7FF,0x4C436EFF,0xFA24CCFF,
    0xCE76BEFF,0xA04E0AFF,0x9F945CFF,0xDCDE3DFF,0x10C9C5FF,0x70524DFF,
    0x0BE472FF,0x8A2CD7FF,0x6152C2FF,0xCF72A9FF,0xE59338FF,0xEEDC2DFF,
    0xD8C762FF,0x3FE65CFF
};*/

// Fahrzeug Zuordnung

enum {
    VEH_INVALID = 0,

    VEH_PRIVAT,
    VEH_KAUFLISTE,
    VEH_BOTVEH,
    VEH_FAHRSCHULCAR,
    VEH_CAR,
    VEH_VERLEIH,
    VEH_PRIVATVERLEIH,
    // Jobfahrzeuge
    VEH_DROGEN,
    VEH_WDEALER,
    VEH_COMBINES,
    VEH_ZUGB,
    VEH_BUS,
    VEH_FLUG,
    VEH_TRUCK,
    VEH_SCHIFF,
    VEH_BAUARB,
    VEH_GARTENCARS,
    VEH_REINIGUNG,
    VEH_GELDT,
    VEH_MUELL,
    VEH_EISMANN,
    VEH_PIZZACAR,
    VEH_TAXICAR,
    VEH_KFZCARS,
    VEH_HOTDOGCAR,
    // Fraktionsfahrzeuge
    VEH_LSPDCARS,
    VEH_SANICARS,
    VEH_OAMTCARS,
    VEH_FBICARS,
    VEH_BALLASCARS,
    VEH_GROVECARS,
    VEH_NEWSCARS,
    VEH_FSCARS,
    VEH_FSACARS,
    VEH_YAKUCARS,
    VEH_STAATCARS,
    VEH_AZTCARS,
    VEH_LCNCARS,
    VEH_VAGOSCARS,
    VEH_HITMANC,
    VEH_BIKERCARS,
    VEH_LVPDCARS,
    VEH_WHEELCARS,
    VEH_ARMYCARS,
    VEH_TERRORCARS,
    VEH_TRIADENCARS,
    VEH_ZOLLCARS,
    VEH_WANTEDCAR,

    VEH_AUTOSCOOTER,
    VEH_WASSERSCOOTER,
    VEH_KARTBAHN,
    VEH_OUTLAWZSCARS
}

new aiVehicles[MAX_VEHICLES] = { VEH_INVALID,...};
new permissionleavegz[MAX_PLAYERS];
new FlasherState[MAX_VEHICLES];
new LightPwr[MAX_VEHICLES];
new FlashTimer;
new Flasher[MAX_VEHICLES];
new sireneobj[MAX_VEHICLES][5];
new fuelcount[MAX_PLAYERS];
new fuelcountactive[MAX_PLAYERS];
new fahrlehrerboni[MAX_PLAYERS];
new meslock[MAX_PLAYERS];
new bool:bBlockTelecom = false;
enum e_FahrzeugBlitzer {
    FB_iBlitzerIndex,
    FB_iLimit,
    FB_iGeldStrafe
}

new aiVehicleBlitzer[MAX_VEHICLES][e_FahrzeugBlitzer];

enum e_WantedTicket {
    WT_iPoints,
    WT_iPrice
}
new const g_WantedTicket[][e_WantedTicket] = {
    {1,2500},
    {2,4500},
    {3,7500}
};


#define MAX_FRIEND_LIST 10


enum {
    FriendList_Active = 1,
    FriendList_Wait,
    FriendList_Approval
}


enum e_FriendList {
    FL_sSpieler[MAX_PLAYER_NAME],
    FL_iStatus
}

new g_FriendList[MAX_PLAYERS][MAX_FRIEND_LIST][e_FriendList];


enum e_WantedRang {
    WR_iPoints,
    WR_sRang[20]
}
new const g_WantedRang[][e_WantedRang] = {
    {0,"Buerger"},
    {1,"Kleinverbrecher"},
    {4,"Verbrecher"},
    {10,"Schwerverbrecher"},
    {28,"Staatsfeind"}
};

enum e_Kofferraum {
    K_iDrogen,
    K_iWaffenteile,
    K_iWaffen,
    K_iWantedcodes,
    K_iSpice
}
new g_Kofferraum[MAX_VEHICLES][e_Kofferraum];
new g_Parkschein[MAX_VEHICLES];

enum e_Koffer {
    K_iDrogen,
    K_iWaffenteile,
    K_iWaffen,
    K_iWantedcodes,
    K_iSpice
}

new g_Koffer[MAX_PLAYERS][e_Koffer];


new g_KFZZulassung[MAX_PLAYERS][MaxVeh][32];

enum e_KreditLimits {
    KL_iKreditwert,
    KL_iKreditRate
}
new const g_KreditLimit[][e_KreditLimits] = {
    {10000,1000},
    {25000,3000},
    {50000,8000},
    {100000,10000},
    {150000,15000},
    {200000,25000}
};

stock GetKreditWertRate(wert) {
    for(new i ;  i < sizeof(g_KreditLimit) ; i++) {
        if( wert == g_KreditLimit[i][KL_iKreditwert] ) {
            return g_KreditLimit[i][KL_iKreditRate];
        }
    }
    return 0;
}

new SelectedPlayer[MAX_PLAYERS];
new wantedcodename[MAX_PLAYERS];

//new Hitman;

enum cInfo//cars
{
    Id,
    CarId,
    CarOwner[MAX_PLAYER_NAME],
    CarModel,
    Float:CarPos_x,
    Float:CarPos_y,
    Float:CarPos_z,
    Float:CarRotate,
    CarNitro,
    CarHyd,
    CarWheel,
    CarAusp,
    CarSideL,
    CarSideR,
    CarFB,
    CarRB,
    CarSpoiler,
    CarRoof,
    CarHood,
    CarVents,
    CarLamps,
    CarPJ,
    CarC1,
    CarC2,
    CarPreis,
    CarTank,
    CarState,
    CarNeon1,
    CarNeon2,
    CarNumberplate[32],
    CarPeilsender,
    CarPeilsenderIcon,
    ObjectIDNeon1,
    ObjectIDNeon2,
    SpecialTuned1,
    SpecialTuned2,
    SpecialTuned3,
    SpecialTuned4,
    SpecialTuned5,
    SpecialTuned6,
    SpecialTuned7,
    SpecialTuned8,
    SpecialTuned9,
    isSpecialTuned,
    TUV,
    CarDistance
};

enum {
    e_Vehicle_Status_Normal, //0
    e_Vehicle_Status_Towed, //1
    e_Vehicle_Status_Destroyed //2
}

new PlayerCar[MAX_PLAYERS][MaxVeh][cInfo];
new adventmin[MAX_PLAYERS];

new const g_Gutschein[][] = {
    {""},
    {"30.000 Dollar"},
    {"80.000 Dollar"},
    {"1 LevelUp"},
    {"2 LevelUp"},
    {"3 Respektpunkte"},
    {"6 Respektpunkte"},
    {"100 LyD Coins"},
    {"300 LyD Coins"},
    {"500 LyD Coins"},
    {"Neon-Premium"},
    {"Extra Fahrzeugschlüssel"}
};


#define MAX_HOUSEINTERIORS 30

enum HouseInterior {
    HI_iID,
    Float:HI_fExitX,
    Float:HI_fExitY,
    Float:HI_fExitZ,
    HI_iInterior,
    Float:HI_fPickupX,
    Float:HI_fPickupY,
    Float:HI_fPickupZ,
    HI_iUpgradePickup
};

new g_HouseInterior[MAX_HOUSEINTERIORS][HouseInterior];
new g_iHouseInteriors;

enum HausDaten
{
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    hBesitzer[MAX_PLAYER_NAME],
    hMieterMax,
    hMieterAnzahl,
    hName[32],
    hPreis,
    hMieten,
    Text3D:hText,
    hPickup,
    hLock,
    hMietPreis,
    hID,
    //hInterior,
    hKasse,
    Float:SellX,
    Float:SellY,
    Float:SellZ,
    Float:SellRot,
    //Float:PickupX,
    //Float:PickupY,
    //Float:PickupZ,
    HouseInteriorID,
    //UpgradePickup,
    SellObjectID
}
new Haus[MAX_HOUSES][HausDaten];
new iHaus;

enum HotelDaten
{
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    Float:ExitX,
    Float:ExitY,
    Float:ExitZ,
    hBesitzer[MAX_PLAYER_NAME],
    hName[32],
    Text3D:hText,
    hPickup,
    hLock,
    hMietPreis,
    hID,
    hEnterInterior,
    hExitInterior,
    hEnterVirtualWorld
}
new Hotel[MAX_HOTELS][HotelDaten];
new iHotel;

enum BizDaten
{
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    Float:ExitX,
    Float:ExitY,
    Float:ExitZ,
    bBesitzer[MAX_PLAYER_NAME],
    bName[32],
    bPreis,
    Text3D:bText,
    bPickup,
    bLock,
    bID,
    bInterior,
    bKasse,
    bEintritt,
    bWaren,
    bMaxWaren,
    bWarenPreis,
    bLadenAuf,
    bLadenZu,
    bErpresserFraktion,
    bErpresserForderung,
    bErpresserState
}
new Biz[MAX_BIZES][BizDaten];

#define MAX_STATIC_BIZES 6

enum StaticBizDaten {
    SBD_iID,
    SBD_iWaren,
    SBD_iTyp,
    Float:SBD_fX,
    Float:SBD_fY,
    Float:SBD_fZ,
    Text3D:SBD_t3dLabel
}

new StaticBiz[MAX_STATIC_BIZES][StaticBizDaten];

new
    StromBiz_Index,
    HandyShopBiz_Index,
    CasinoBiz_Index;

enum {
    Bankraub_Wartezeit = 0,
    Bankraub_Bereit,
    Bankraub_Aktiv
}

#define BANKRAUB_ZEIT (40*60)
new

	g_tPulseBank,
	g_unixBankraub,
	g_tPulseBankPosition,
	g_iBankraubStatus= Bankraub_Bereit,
	g_aiVehicleSirene[MAX_VEHICLES][4];

new FischNamen[8][64] = {
    "Goldfisch",
    "Garnele",
    "Schwertfisch",
    "Forelle",
    "Hai",
    "Delphin",
    "Seebarsch",
    "Flunder"
};

enum TankeDaten
{
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    tBesitzer[MAX_PLAYER_NAME],
    tName[32],
    tFillCost,
    Text3D:tText,
    tPickup,
    tKasse,
    tBenzin,
    tMaxBenzin,
    tID,
    tPreis,
    taiFillCost[3],
    bool:tVideoueberwachung,
    bool:tAutomatischerNotruf,
    tErpresserFraktion,
    tErpresserForderung,
    tErpresserState,
    tUnixRob,
    tRobberID
}
new Tanke[MAX_TANKEN][TankeDaten];
new iTanke;

enum e_FraktionSafeBox {
    FSB_iDrogen,
    FSB_iWaffenteile,
    FSB_iSpice
}
// Fraktionsanzahl + 1
new g_FraktionsSafeBox[22][e_FraktionSafeBox];

new pDrunkLevelLast[MAX_PLAYERS];
new pFPS[MAX_PLAYERS];

#define BUS_TICKET_PRICE 20

new
    sBusLinie1[]= "Linie 1:\n\
                LS - Stadthalle\n\
                LS - Fahrschule\n\
                LS - Strand\n\
                LS - Victim Kleidergeschäft\n\
                LS - Neulingsspawn\n\
                LS - Standesamt\n\
                LS - Busbahnhof",
    sBusLinie2[]= "Linie 2:\n\
                LS - ZIP Kleidungshop\n\
                LS - Zentralbank\n\
                LS - 24/7 Shop\n\
                LS - Subway\n\
                LS - Verwahrplatz\n\
                LS - Einkaufszentrum\n\
                LS - Busbahnhof",
    sBusLinie3[]="Linie 3:\n\
                LS - Autohaus Günstig\n\
                LS - Flughafen/Airport\n\
                LS - Hafen\n\
                LS - Binco Kleidergeschäft\n\
                LS - Altes Krankenhaus\n\
                LS - Alhambra (Disco)\n\
                LS - Busbahnhof",
    sBusLinie4[]="Linie 4:\n\
                Bauernfarm und Trucker GmbH\n\
                LS - Zollamt\n\
                LS - Bank\n\
                LS - Clubvilla\n\
                Los Santos Startower\n\
                LS - Busbahnhof";

new g_unixWerbung = 0;
new g_unixWerbungHitman = 0;


enum e_Drinks {
    D_sName[16],
    D_iPrice,
    D_iTime,
    D_iAnimation
}
new const g_Drinks[][e_Drinks] = {
    {"Wasser",50,120,SPECIAL_ACTION_DRINK_SPRUNK},
    {"Cafe",60,140,SPECIAL_ACTION_DRINK_SPRUNK},
    {"Vodka",80,200,SPECIAL_ACTION_DRINK_WINE},
    {"Bier",50,170,SPECIAL_ACTION_DRINK_WINE},
    {"Jack Daniels",150,250,SPECIAL_ACTION_DRINK_WINE}
};

enum AngelDaten
{
    aID,
    Float:PosX,
    Float:PosY,
    Float:PosZ,
    Fische,
    aPickup,
    Text3D:aText,
    Float:FacingAngle
}
new Angel[MAX_APLATZ][AngelDaten];
new iAngel;

enum KasseDaten
{
    Staat,
    Sana,
    Samd,
    Oamt,
    Fahrschule,
    Ballas,
    Grove,
    Yakuza,
    Aztecas,
    LCN,
    Vagos,
    Hitman,
    BBikerZ,
    Wheelmenk,
    TerrorK,
    OutlawzK,
    ndgradethaK
}
new Kasse[KasseDaten];

#define MAX_BLITZER 50
#define AREA_BLITZER 535
#define AREA_BLITZER_VEHICLE 536
#define AREA_BLITZER_OUTER 537
#define AREA_ZOLL 538
#define OBJECT_ZOLL 538
#define OBJECT_FALLTURM 539
#define OBJECT_FALLTURM_PLATTE 540
#define OBJECT_SCHIFF 541
#define OBJECT_BREAKDANCER 542

enum e_Blitzer {
    B_iObjectID,
    B_iArea,
    B_iAreaOuter,
    B_iVehicle
}
new
    g_iBlitzer,
    g_Blitzer[MAX_BLITZER][e_Blitzer];

// - - - - - - - - - - - - - - -

#define MAX_HAUS_MOEBEL 30


enum e_HausMoebelKategorie {
    HMK_iID,
    HMK_sTitel[32]
}
new const g_HausMoebelKategorie[][e_HausMoebelKategorie] = {
    {1,"Wohnzimmer"},
    {2,"Kommoden/Schränke"},
    {3,"Badezimmer/Küche"},
    {4,"Musikset"},
    {5,"Schlafzimmer"},
    {6,"Stühle"},
    {7,"Tische"},
    {8,"Elektronik"},
    {9,"Sonstiges"},
    {10,"Pflanzen"},
    {11,"Poster"}
};

enum e_HausMoebelObjekt {
    HMO_iID,
    // HMO_iHouseID,
    HMO_iMoebelID,
    /* Nur für erstellung relevant
    Float:HMO_fX,
    Float:HMO_fY,
    Float:HMO_fZ,
    Float:HMO_fRotX,
    Float:HMO_fRotY,
    Float:HMO_fRotZ,
    Float:HMO_fScaleX,
    Float:HMO_fScaleY,
    Float:HMO_fScaleZ,
    */
    HMO_iObjectID
}
new g_HausMoebelObjekt[MAX_HOUSES][MAX_HAUS_MOEBEL][e_HausMoebelObjekt];

enum e_HausMoebelDummy {
    HMD_iID,
    HMD_iHouseID,
    HMD_iMoebelID,
    Float:HMD_fX,
    Float:HMD_fY,
    Float:HMD_fZ,
    Float:HMD_fRotX,
    Float:HMD_fRotY,
    Float:HMD_fRotZ
}
new HausMoebelDummy[e_HausMoebelDummy];

enum e_HausMoebel {
    HM_iID,
    HM_iModelID,
    HM_iHMKID,
    HM_iPrice,
    HM_sTitel[64]
}

new const g_HausMoebel[][e_HausMoebel] = {
        //Wohnzimmer
        {1,2293,1,18000,"Dunkelbrauner Lederhoker"},
        {2,2291,1,20000,"Dunkelbrauner Ledersessel"},
        {3,1723,1,8800,"Schwarzes Sofa aus Leder mit Armlehne aus Holz"},
        {4,1724,1,4500,"Schwarzer Sessel aus Leder mit Armlehne aus Holz"},
        {5,1726,1,26000,"Schwarzer EckSofa aus Leder"},
        {6,1727,1,20000,"Schwarzer Sessel aus Leder"},
        {7,1769,1,4800,"Dunkelblauer Sessel"},
        {8,1729,1,2100,"Sessel in Cremefarbe"},
        {9,1728,1,5200,"Sofa in Cremefarbe"},
        {10,2339,7,2400,"Moderne Kommode in Weiß"},
        {11,2296,1,5000,"Kommode mit Fernseher"},
        {12,2297,1,1800,"Eckkommode mit Fernseher"},
        {13,2123,1,4500,"Weißer Esstischstuhl"},
        {14,2124,1,2500,"Roter Esstischstuhl aus Holz"},
        {15,2079,1,1500,"Schwarzer Esstischstuhl aus Metall"},
        //Kommoden Schränke
        {16,2200,2,6900,"Großer Weißer Kleiderschrank"},
        {17,2167,2,6300,"Kleiner Weißer Kleiderschrank"},
        {18,2025,2,3300,"Kleiderschrank aus Holz"},
        {19,1742,2,3500,"Bücherregal aus Holz"},
        {20,2164,2,4100,"Weißer Bücherregal"},
        {21,2133,2,4250,"Weiße Schrankkommode"},
        {22,2137,2,3100,"Schrankkommode aus Holz"},
        {23,2191,2,4000,"Dunkelblauer Bücherregal"},
        {24,2162,2,3050,"Bücherkommode"},
        {25,2609,2,800,"Metallspind"},
        //Badezimmer und Küche
        {26,1208,3,3500,"Waschmaschine"},
        {27,2528,3,1640,"Toilette"},
        {28,2517,3,3200,"Glasdusche"},
        {29,2127,3,6500,"Moderner Kühlschrank in Rot"},
        {30,2130,3,3600,"Moderne Küchenkommode in Rot"},
        {31,19609,3,3420,"Kühlschrank in Weiß"},
        {32,19819,3,1800,"Badewanne"},
        {33,19581,3,180,"Kochpfanne"},
        {34,19585,3,200,"Kochtopf"},
        {35,19586,3,150,"Pfannenwender"},
        {36,19818,3,150,"Weinglas"},
        {37,19819,3,150,"Cocktailglas"},
        {38,19824,3,360,"Weinflasche"},
        {39,19823,3,400,"Alkoholflasche"},
        //Musiksets
        {40,19609,8,6350,"Musik-Schlagzeug"},
        {41,2226,4,5100,"Ghettoblaster in rot"},
        {42,2103,4,5100,"Ghettoblaster in weiß"},
        {43,2102,4,5100,"Ghettoblaster in schwarz"},
        {44,2231,4,4100,"kleine Musikboxen aus Holz"},
        {45,1840,4,4200,"kleine Musikboxen in weiß"},
        {46,2229,4,5400,"lange Musikboxen in schwarz"},
        {45,2232,4,5300,"breite Musikboxen in schwarz"},
        {46,2227,4,5800,"Steh-Musikanlage"},
        {47,2225,4,5600,"Musikanlage auf Kommode"},
        {48,2099,4,5700,"Musikanlage in Kommode + Musikbox"},
        //Schlafzimmer
        {49,1798,5,7200,"Doppelbett aus Glanzholz"},
        {50,2298,5,8200,"Doppelbett aus Glanzholz + Nachtkommode"},
        {51,1701,5,6100,"Doppelbett aus Beigen Leder"},
        {52,1797,5,6700,"Doppelbett aus dunklem Holz"},
        {53,2302,5,4800,"Doppelbett aus Holz"},
        {54,1796,5,2450,"Einzelbett aus Holz"},
        {55,1793,5,1000,"Matratze"},
        //Stühle
        {56,1671,6,2700,"Schreibtischstuhl aus Leder"},
        {57,1714,6,3000,"großer Schreibtischstuhl aus Leder"},
        {58,1806,6,2050,"Weißer Schreibtischstuhl"},
        {59,1720,6,650,"Stuhl in weiß Holz"},
        {60,2120,6,450,"Stuhl aus Holz"},
        {61,2125,6,1850,"Roter Barhocker aus Leder"},
        {62,1716,6,1850,"Schwarzer Barhocker aus Leder"},
        //Tische
        {63,2165,7,6000,"Schreibtisch mit Computer"},
        {64,1827,7,5200,"Runder Glastisch"},
        {65,1815,7,4100,"Runder Glastisch aus Holz"},
        {66,1433,7,4280,"Schwarzer Tisch"},
        {67,2205,7,1900,"Schreibtisch aus Holz"},
        {68,1826,7,5600,"Moderner Hochglanz Tisch in weiß"},
        //Elektronik
        {69,1518,8,2100,"Fernseher"},
        {70,19807,8,1550,"Haustelefon"},
        {71,19808,8,410,"Tastertur"},
        {72,19893,8,4980,"Laptop"},
        {73,19894,8,4550,"Playstation"},
        {74,2779,8,3800,"Spielautomat"},
        {75,1775,8,2610,"Getränkeautomat"},
        {76,2202,8,2400,"Kopierer"},
        {77,18655,8,950,"Party Lichtstrahler in Blau"},
        {78,18654,8,950,"Party Lichtstrahler in Grün"},
        {79,18653,8,950,"Party Lichtstrahler in Rot"},
        //Sonstiges
        {80,2629,9,4500,"Hantelbank"},
        {81,2628,9,5200,"Große Hantelbank"},
        {82,2627,9,4100,"Laufband"},
        {83,2630,9,4100,"Laufrad"},
        {84,1985,9,1350,"Boxsack"},
        {85,19619,9,200,"Tresor"},
        {86,1738,9,500,"Heizung"},
        {87,1481,9,1100,"Grill"},
        {88,19128,9,8000,"Discoboden"},
        {89,19279,9,900,"Scheinwerfer"},
        {90,2600,9,750,"Tiloskop"},
        {91,19619,9,4000,"Tresor"},
        {92,2406,9,870,"Surfboard"},
        {93,2613,9,200,"Mülleimer in Weiß"},
        {94,19622,9,200,"Besen"},
        //Pflanzen
        {95,626,10,200,"Palme in Topf"},
        {96,2251,10,150,"Orchideen im Topf"},
        {97,628,10,280,"Bonsaipflanze im Topf"},
        {98,3802,10,200,"Wand Pflanze"},
        {99,2194,10,200,"Minikaktus in Vase"},
        {100,2245,10,170,"Tischblume in Topf"},
        //Poster
        {101,19166,11,150,"SA Map-Poster"},
        {102,19174,11,120,"Landschaftposter"},
        {103,19173,11,200,"Poster - große Brücke in SF"},
        {104,19172,11,200,"Stadtposter"},
        {105,1736,11,850,"Hirschkopf"}
};

#define MAX_TELEFONZELLEN 150
#define AREA_TELEFONZELLE 536

enum e_Telefonzelle {
    T_iObjectID,
    Text3D:T_t3dLabel
}
new
    g_iTelefonzelle,
    g_Telefonzelle[MAX_TELEFONZELLEN][e_Telefonzelle];

#if defined WEIHNACHTS_EVENT
enum e_Geschenk {
    bool:G_bFound,
    G_iModel,
    G_iObjectID,
    Text3D:G_t3dLabel,
    Float:G_fX,
    Float:G_fY,
    Float:G_fZ
}
new g_iGeschenk;
new g_Geschenk[][e_Geschenk] = {
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1078.9740,-2135.0076,59.1114 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1604.8754,-2693.9211,13.5469 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2078.4958,-2764.3872,2.2148 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2481.2773,-2372.1384,13.6250 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2874.2598,-2125.2559,4.1695 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2961.8484,-1877.9211,8.7813 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2696.3406,-1392.7244,33.3921 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2549.0935,-953.0178,82.5777 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2208.7600,-1370.4019,25.6908 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2351.0181,-655.4427,128.0547 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2343.8057,384.7440,26.0141 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1033.1106,-61.7556,22.7405 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,211.2027,24.7786,2.5708 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,251.4405,-300.0209,1.5781 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-744.1266,-884.6760,110.9090 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1035.5731,-719.8304,32.0078 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1858.3680,-1194.1261,34.8594 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2211.9185,-1714.4364,376.4037 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2023.6028,-861.8611,32.1719 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2482.7644,-284.2287,40.5412 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2976.3635,502.1966,2.4297 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2816.8188,1095.7631,27.7422 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2051.5190,1109.5011,53.2891 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1610.5121,1331.0670,5.7401 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1359.1635,308.6623,7.1875 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1705.7104,14.4345,3.5547 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1406.9772,-135.1877,6.0000 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-756.2743,-132.9903,65.8281 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,196.0154,-1230.0449,76.5034 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,531.0328,-1230.4192,37.8963 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,860.2167,-731.2683,101.4511 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2262.2981,-756.4196,38.0099 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1954.1663,-1363.8777,18.5781 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,359.2385,-2156.4741,7.8399 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-65.7758,-1146.1208,1.0781 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-85.7822,-102.2802,6.4844 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-679.7560,966.6936,12.1328 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-772.5918,1434.9199,13.7891 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1476.8936,1877.1807,32.6328 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1821.7047,2056.0806,9.4011 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2090.1746,2313.0225,25.9141 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1483.6116,2629.4966,58.7813 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1290.8533,2511.9036,87.0342 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-551.1439,2594.7085,53.9348 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-238.1836,2649.3203,62.8293 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,258.2831,2937.0186,1.7661 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,955.2698,1738.4801,8.6484 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1435.1826,1460.4963,10.8203 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2078.6787,1911.4092,14.0414 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1691.6219,2245.6472,10.8203 }, // Osterei
    {false,19341, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1838.7594,2836.5481,10.8359 } // Osterei
};
#endif


enum ahSpawn
{
    Float:CarPos_x,
    Float:CarPos_y,
    Float:CarPos_z,
    Float:CarRotate,
};
new const Autospawns[11][ahSpawn] = {
    {1795.1863,-1884.0706,13.5724,264.0573}, // Los Santos - Intercars
    {1131.9783,-1675.7164,13.6739,268.5765}, // Los Santos - Luxusautohaus
    {2535.8975, -1520.9816, 23.5721}, // Los Santos - Motorradhaus // BIKEDEALERSHIP_VEHICLE_SPAWN // TODO: can't use define here
    {1849.2611,-2545.6445,13.5469,90.8000}, // Los Santos Air Shop
    {946.9811,-1933.6057,-0.3639,92.2507}, //Bootshaus
    {679.9109,-1191.3190,16.2637,127.9095}, //Fahrradhaus
    {872.0743, -932.9666, 42.8534, 133.4660}, //Oldtimer - Autohaus
    {-1458.2250,678.7433,-0.0698,273.7694}, //Bootsverkauf in San Fierro
    {1295.5571,1397.1111,11.1011,270.0000}, //Flugzeugverkauf in Las Venturas
    {2147.5896,-1138.6252,25.3605,270.5095}, //Autohaus günstig in Los Santos 2
    {2146.2273,1386.4047,10.6953,89.2722} //Autohaus günstig in Las Venturas
};
// TODO: peek auslagern ^

enum aHaus
{
    Name[128],
    Autohaus,//0=Intercars,1=Grottis,2 = Coutt and Schutz
    Modelid,
    Carid,
    aPreis,
    Float:CarPos_x,
    Float:CarPos_y,
    Float:CarPos_z,
    Float:CarRotate,
    Tank,
};


new Kaufliste[84][aHaus] = {

//Normal-Karosserien - Intercars
    {"Camper", 0, 483 , 1 , 620000 ,1777.8184,-1890.2344,13.3802,310.2503, 65},
    {"Rancher", 0, 489  , 1 , 450000 , 1778.6202,-1894.5646,13.5448,308.2993, 70},
    {"Landstalker", 0, 400 , 1 , 510000 ,1777.6068,-1900.3296,13.4808,311.0105, 70},
    {"Sunrise", 0, 550 , 1 , 31000 ,1777.4644,-1906.6050,13.2118,309.2133, 60},
    {"Premier", 0, 426 , 1 , 43000 ,1777.5166,-1912.1143,13.1128,309.2785, 60},
    {"Sentinel", 0, 405 , 1 , 77000 ,1777.6332,-1917.0110,13.2625,305.9795, 60},
    {"Admiral", 0, 445 , 1 , 46000 ,1777.6113,-1922.2838,13.2511,306.0323, 60},
    {"Stratum", 0, 561 , 1 , 110000 ,1777.7556,-1927.2994,13.2020,303.4868, 50},
    {"Club", 0, 589 , 1 , 50000 ,1778.2655,-1931.7804,13.0459,303.9989, 60},
    {"Flash", 0, 565 , 1 , 41000 ,1803.4918,-1932.1062,13.0126,57.5682, 60},
    {"Elegy", 0, 562 , 1 , 39000 ,1804.0334,-1927.7360,13.0484,59.6635, 60},
    {"Blista", 0, 496 , 1 , 34000 , 1804.0896,-1922.8599,13.1080,57.8509, 60},
    {"Bravura", 0, 401 , 1 , 32000 ,1803.9370,-1917.7627,13.1707,61.4064, 50},
    {"Manana", 0, 410 , 1 , 34000 ,1803.8704,-1912.6768,13.0536,62.5491, 50},
    {"Fortune", 0, 526 , 1 , 32000 ,1804.4590,-1908.1527,13.1659,60.4806, 50},
    {"Uranus", 0, 558 , 1 , 35000 ,1804.1251,-1903.1792,13.0329,61.4885, 50},
//Luxus-Karosserien - Grottis
    {"Buffalo", 1, 402, 1, 2700000, 1131.1374, -1625.7481, 14.1659, 327.4692, 50},
    {"Stretch", 1, 409, 1, 10000000, 1138.2919, -1620.1066, 18.4245, 358.0670, 60},
    {"Infernus", 1, 411, 1, 5200000, 1114.3138, -1611.0205, 14.0720, 213.1129, 60},
    {"Cheetah", 1, 415, 1, 2400000, 1122.1995, -1611.3056, 13.9873, 211.8256, 55},
    {"Banshee", 1, 429, 1, 3400000, 1136.4945, -1636.0677, 18.8225, 20.4053, 55},
    {"Sultan", 1, 560, 1, 2500000, 1107.2796, -1611.9296, 14.2681, 210.7310, 60},
    {"Bullet", 1, 541, 1, 4300000, 1106.5139, -1626.4754, 14.2059, 318.8888, 60},
    {"Turismo", 1, 451, 1, 4800000, 1098.4344, -1626.4364, 14.0171, 32.3491, 60},
    {"Jester", 1, 559, 1, 2500000, 1100.2247, -1612.1229, 13.8717, 139.7872, 60},
    {"Comet", 1, 480, 1, 2500000, 1129.6069, -1636.3497, 18.7811, 326.4321, 60},
    {"Super GT", 1, 506, 1, 1800000, 1131.9493, -1612.7506, 14.2391, 224.2687, 60},
//Motorradhaus
    {"FCR-900", 2, 521, 1, 450000, 2505.6293, -1523.6760, 23.9423, 298.8435, 30},
    {"NRG-500", 2, 522, 1, 1800000, 2512.8532, -1524.5207, 23.9801, 131.1481, 30},
    {"Freeway", 2, 463, 1, 400000, 2518.4553, -1532.6268, 23.8086, 34.2093, 30},
    {"Wayfarer", 2, 586, 1, 280000, 2520.3647, -1532.3806, 23.7693, 37.8446, 30},
    {"Sanchez", 2, 468, 1, 180000, 2514.4797, -1532.7170, 23.9379, 28.4829, 35},
    {"Faggio", 2, 462, 1, 8000, 2512.8576, -1532.8160, 23.8680, 30.4016, 15},
	{"PCJ-600", 2, 461, 1, 430000, 2505.8344, -1527.1131, 23.9552, 300.1329, 30},
	{"BF-400", 2, 581, 1, 350000, 2516.2883, -1532.6101, 23.8641, 30.8514, 30},
//Flugzeug - Los Santos Air Shop
    {"Maverick", 3, 487, 1,15000000, 1888.7319,-2622.7720,13.7253,359.7918, 300},
    {"Dodo", 3, 593, 1,7000000, 1821.9655,-2621.8706,14.0082,2.6027, 100},
    {"Shamal", 3, 519, 1,21000000, 1754.5253,-2624.3870,14.4658,1.4927, 500},
//Bootshaus in Los Santos
    {"Speeder", 4, 452, 1, 780000, 952.2955,-1994.8793,-0.4687,92.2294, 60},
    {"Squallo", 4, 446, 1, 700000, 961.4017,-1949.5627,-0.2990,87.3579, 60},
    {"Reefer", 4, 453, 1, 500000, 929.9953,-1984.5798,-0.1762,179.7515, 60},
    {"Tropic", 4, 454, 1, 1800000, 928.6147,-1961.6210,0.1139,180.4821, 60},
    {"Jetmax", 4, 493, 1, 500000, 941.3287,-1949.8480,-0.2604,87.9953, 60},
    {"Dinghy", 4, 473, 1, 29000, 938.2015,-1994.0519,-0.2282,90.9601, 60},
    {"Coastguard", 4, 472, 1, 420000, 965.9826,-1994.2590,0.1605,89.7103, 60},
//Fahrradhaus
    {"Mountain Bike", 5, 510, 1, 4000, 698.8859, -1192.6660, 15.7238, 326.3322, 0},
    {"Bike", 5, 509, 1, 1500, 689.2124, -1186.1840, 15.2118, 48.4005, 0},
    {"BMX", 5, 481, 1, 1800, 693.5145, -1179.3686, 15.1269, 80.6211, 0},
//Oldtimer-Autohaus
    {"Stafford", 6, 580, 1, 30000000, 895.8816, -937.5002, 42.4149, 93.5958, 60},
    {"Hustler", 6, 545, 1, 26000000, 895.8915, -934.3734, 42.4119, 92.4652, 60},
    {"Broadway", 6, 575, 1, 28000000, 896.3578, -941.3626, 42.2687, 92.7796, 60},
    {"Voodoo", 6, 412, 1, 450000, 905.7409, -922.1875, 42.4787, 182.3283, 60},
    {"Majestic", 6, 517, 1, 480000, 911.0039, -921.3837, 42.4051, 183.7384, 60},
    {"Slamvan", 6, 535, 1, 1300000, 883.6339, -941.2964, 42.7489, 304.0722, 60},
    {"Savanna", 6, 567, 1, 7500000, 873.2122, -940.7374, 42.9815, 303.5382, 60},
    {"Hermes", 6, 474, 1, 25000000, 878.5829, -941.0810, 43.0642, 303.2011, 60},
    {"Remington", 6, 534, 1, 5000000, 882.9990, -930.3025, 42.5059, 236.3526, 60},
    {"Windsor", 6, 555, 1, 6000000, 895.0584, -923.1239, 42.6142, 124.2272, 60},
//Bootshaus in San Fierro
    {"Squallo", 7, 446, 1, 700000, -1469.1959,678.7098,-0.5790,176.3522, 60},
    {"Jetmax", 7, 493, 1, 500000, -1468.7255,691.8204,0.0081,359.4651, 60},
    {"Coastguard", 7, 472, 1, 420000, -1459.8029,688.6844,0.1490,267.0917, 60},
//Flugzeugverkauf in Las Venturas
    {"Beagle", 8, 511, 1, 18000000 , 1286.2562,1323.7429,12.1218,271.0401, 60},
    {"Maverick", 8, 487, 1, 15000000 , 1299.0364,1342.9835,11.0082,270.0564, 60},
    {"Dodo", 8, 593, 1, 7000000 , 1288.1346,1361.1349,11.2512,269.9028, 60},
//Autohaus Günstig 2 in Los Santos
    {"Mesa", 9, 500, 1 , 720000, 2118.7173,-1123.0830,25.4588,309.5612, 60},
    {"Regina", 9, 479, 1 , 25000, 2134.5454,-1129.1372,25.4190,49.5929, 60},
    {"Stratum", 9, 561, 1 , 110000, 2134.1526,-1133.7416,25.4996,46.2296, 60},
    {"Moonbeam", 9, 418, 1 , 240000, 2135.3325,-1139.7094,25.4648,45.9770, 60},
    {"Landstalker", 9, 400, 1 , 500000, 2134.3140,-1144.2582,24.9592,45.1484, 60},
    {"Elegant", 9, 507, 1 , 53000, 2120.1335,-1147.4746,24.1617,310.7347, 60},
    {"Elegy", 9, 562, 1 , 39000, 2119.4197,-1142.8087,24.4177,305.7601, 60},
    {"Feltzer", 9, 533, 1 , 180000, 2119.2419,-1137.4570,24.8492,306.4283, 60},
    {"Vincent", 9, 540, 1 , 35000, 2119.2632,-1132.5090,25.1499,308.5391, 60},
    {"Bobcat", 9, 422, 1 , 45000, 2119.1055,-1128.1691,25.0464,307.3262, 60},
//Autohaus Günstig in Las Venturas
    {"Burrito", 10, 482, 1 , 66000, 2100.7117,1398.5070,10.9544,180.0535, 60},
    {"Huntley", 10, 579, 1 , 820000, 2107.2810,1398.2810,10.7800,179.7361, 60},
    {"Yosemite", 10, 554, 1 , 132000, 2113.7146,1398.6532,10.8646,180.0120, 60},
    {"Oceanic", 10, 467, 1 , 65000, 2119.9753,1397.9963,10.6060,180.1109, 60},
    {"Tornado", 10, 576, 1 , 27000, 2126.3091,1397.9482,10.4665,179.7414, 60},
    {"Glendale", 10, 466, 1 , 28000, 2126.3816,1408.3682,10.6502,0.7667, 60},
    {"Perennial", 10, 404, 1 , 25000, 2120.0273,1409.0211,10.5851,0.0615, 60},
    {"Solair", 10, 458, 1 , 39000, 2113.5535,1408.5975,10.7417,0.0542, 60},
    {"Majestic", 10, 517, 1 , 38000, 2107.0940,1408.7985,10.7135,0.0514, 60},
    {"Primo", 10, 547, 1 , 42000, 2100.7742,1408.9865,10.6122,0.0102, 60}
};

#define MAX_ATM 106
new Float:ATM[][] = {
{2130.10009766,-1151.19995117,23.68000031},
{551.20001221,-1260.50000000,16.87999916},
{755.09997559,-1360.80004883,13.19999981},
{1032.19995117,-1029.90002441,31.70000076},
{491.39999390,-1734.59997559,10.86999989},
{2072.00000000,-1834.69995117,13.17999935},
{716.90002441,-463.10000610,15.60000038},
{2398.00000000,1482.90002441,10.39999962},
{1967.69995117,2166.69995117,10.39999962},
{-95.69999695,1110.90002441,19.37999916},
{-1424.80004883,2591.60009766,55.47999954},
{-2419.60009766,1028.69995117,50.00000000},
{-1900.00000000,277.20001221,40.70000076},
{2303.60009766,79.90000153,26.10000038},
{2475.69995117,32.09999847,26.10000038},
{2274.69995117,-76.40000153,26.20000076},
{1316.69995117,357.70001221,19.20000076},
{1302.80004883,255.39999390,19.20000076},
{211.30000305,-62.70000076,1.20000005},
{111.09999847,-221.39999390,1.20000005},
{242.39999390,-223.10000610,1.20000005},
{661.29998779,-565.50000000,16.00000000},
{811.40002441,-613.79998779,16.00000000},
{-2094.39990234,-2477.10009766,30.29999924},
{-2159.30004883,-2387.80004883,30.29999924},
{-2196.60009766,-2251.50000000,30.39999962},
{-818.20001221,1547.50000000,26.79999924},
{-860.00000000,1536.50000000,22.20000076},
{-1515.19995117,2560.80004883,55.50000000},
{-1486.30004883,2641.19995117,55.50000000},
{-771.90002441,2765.39990234,45.50000000},
{-209.19999695,2713.10009766,62.59999847},
{-255.10000610,2601.30004883,62.50000000},
{30.00000000,1187.40002441,18.70000076},
{-173.80000305,1107.90002441,19.39999962},
{-317.00000000,1051.69995117,20.00000000},
{-312.89999390,1307.09997559,53.29999924},
{-2512.00000000,2340.80004883,4.59999990},
{-2610.39990234,2246.39990234,7.90000010},
{-2239.00000000,2356.39990234,4.59999990},
{-2726.30004883,-319.79998779,6.80000019},
{-2388.30004883,-569.20001221,131.80000305},
{1146.80004883,-1415.50000000,13.30000019},
{1808.30004883,-1369.30004883,14.69999981},
{2441.00000000,-1470.19995117,23.60000038},
{2285.30004883,-2065.19995117,13.19999981},
{1585.69995117,-2286.60009766,13.19999981},
{1125.40002441,-2033.00000000,69.50000000},
{374.39999390,-2053.69995117,7.69999981},
{396.60000610,-1543.90002441,31.89999962},
{906.59997559,-1002.70001221,37.50000000},
{2747.39990234,-1186.30004883,69.00000000},
{2689.30004883,-1710.19995117,11.50000000},
{1739.40002441,-1863.59997559,13.19999981},
{1137.19995117,-1762.09997559,13.19999981},
{1016.50000000,-1553.59997559,14.50000000},
{810.50000000,-1614.59997559,13.19999981},
{943.90002441,-1385.50000000,13.00000000},
{-1381.69995117,-356.50000000,13.80000019},
{-1980.59997559,135.00000000,27.29999924},
{-1968.00000000,512.70001221,34.79999924},
{-2276.30004883,520.50000000,34.79999924},
{-2438.60009766,752.59997559,34.79999924},
{-2670.89990234,636.90002441,14.10000038},
{-2765.30004883,366.20001221,6.00000000},
{-2665.39990234,-5.50000000,5.80000019},
{-2025.19995117,-102.00000000,34.79999924},
{-2242.39990234,116.90000153,35.00000000},
{-2417.80004883,348.89999390,34.79999924},
{-2622.39990234,1413.19995117,6.69999981},
{-1940.69995117,1342.09997559,6.80000019},
{-1578.90002441,903.90002441,7.30000019},
{-1759.69995117,963.40002441,24.50000000},
{-1625.30004883,717.90002441,14.30000019},
{-1830.30004883,109.50000000,14.80000019},
{1025.00000000,1043.69995117,10.60000038},
{1169.90002441,1363.50000000,10.50000000},
{1703.19995117,1443.90002441,10.50000000},
{2019.30004883,1345.90002441,10.50000000},
{2196.89990234,1689.50000000,12.00000000},
{2031.09997559,1936.40002441,11.80000019},
{2137.39990234,2363.80004883,10.50000000},
{2296.39990234,2432.39990234,10.50000000},
{2532.30004883,1865.00000000,10.50000000},
{2433.50000000,1670.40002441,10.50000000},
{2841.60009766,1296.59997559,11.00000000},
{2578.00000000,1060.59997559,10.50000000},
{2159.50000000,941.79998779,10.50000000},
{2021.69995117,998.79998779,10.50000000},
{1516.59997559,1102.59997559,10.50000000},
{1479.69995117,2244.00000000,10.69999981},
{1438.80004883,2616.69995117,11.00000000},
{2159.30004883,2797.19995117,10.50000000},
{2537.00000000,2264.00000000,10.50000000},
{2558.19995117,2022.30004883,10.50000000},
{2204.00000000,1295.80004883,10.50000000},
// {826.4333,-1351.3235,13.5342},
//{822.5450,-1355.8326,13.5422},
{827.1663, -1355.6239, 13.1646},
{1004.599915, -1131.191284, 23.465918}, //Clubvilla LS
{1225.32947,-1811.68408,16.24608},
{1420.52087, -980.45911, 1639.41125},
{921.592407, -1207.274780, 16.619688},
{1790.9886, -1303.7802, 119.8556},
{1484.833862, -1805.827637, 14.740836},
{959.964539, -1562.702515, 13.211584}
};

enum e_FahrpruefungCP {
    Float:F_fX,
    Float:F_fY,
    Float:F_fZ
}
new const g_FahrpruefungCP[][e_FahrpruefungCP] = {
    {1196.0063,-1846.9019,13.3482},
    {1060.8523,-1836.4686,13.3828},
    {1038.0686,-1785.5364,13.4336},
    {1040.2084,-1598.6849,13.2578},
    {1014.4639,-1569.7875,13.2597},
    {895.7375,-1569.3164,13.2656},
    {828.5221,-1601.7271,13.2577},
    {774.6823,-1572.2042,13.2607},
    {813.5296,-1408.1097,13.1610},
    {1123.9777,-1408.5974,13.3006},
    {1340.1985,-1420.1740,13.2578},
    {1294.7069,-1596.5747,13.2578},
    {1286.8190,-1849.9485,13.2616},
    {1197.1539,-1846.7806,13.3475}
};

new
    Text3D:g_t3dPolizeiKontrolle[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID,...},
    Text3D:g_t3dTaxi[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID,...},
    Float:g_fVehicleHealth[MAX_VEHICLES],
    //g_iVehicleBrokeNotification[MAX_VEHICLES char],
    //g_iVehicleFixNotification[MAX_VEHICLES char];
    g_iVehicleFixNotation[MAX_VEHICLES char];

new SideL;
new SideR;
new PlayerHaveCar[MAX_PLAYERS][MaxVeh];
new PlayerKey[MAX_PLAYERS];
new Spectating[MAX_PLAYERS][1];

new gGas[MAX_VEHICLES];
new gMaxGas[MAX_VEHICLES];
new StundenZeigerObj, MinutenZeigerObj;

new Text:DummyTextDraw;
new Text:BlackBox;
new Text:tdNoDM;
new Text:tdBlitzerWarnung;

/*
    Stattdessen GetVehicleSpeed_P_Ex
stock Float:GetVehicleVelocityX(vehicleid){new Float:velocity_X, Float:velocity_dump_Y, Float:velocity_dump_Z;GetVehicleVelocity(vehicleid, velocity_X, velocity_dump_Y, velocity_dump_Z);velocity_dump_Y = 0.00;velocity_dump_Z = 0.00;return velocity_X;}
stock Float:GetVehicleVelocityY(vehicleid){new Float:velocity_dump_X, Float:velocity_Y, Float:velocity_dump_Z;GetVehicleVelocity(vehicleid, velocity_dump_X, velocity_Y, velocity_dump_Z);velocity_dump_X = 0.00;velocity_dump_Z = 0.00;return velocity_Y;}
stock Float:GetVehicleVelocityZ(vehicleid){new Float:velocity_dump_X, Float:velocity_dump_Y, Float:velocity_Z;GetVehicleVelocity(vehicleid, velocity_dump_X, velocity_dump_Y, velocity_Z);velocity_dump_X = 0.00;velocity_dump_Y = 0.00;return velocity_Z;}


#define GetVehicleSpeed_P(%0) floatmul(floatsqroot(floatadd(floatpower(GetVehicleVelocityX(GetPlayerVehicleID(%0)), 2), floatadd(floatpower(GetVehicleVelocityY(GetPlayerVehicleID(%0)), 2), floatpower(GetVehicleVelocityZ(GetPlayerVehicleID(%0)), 2)))), 200)
*/

stock GetPlayerVehicleSpeed(playerid) {
    new

        Float:velocity_x,
        Float:velocity_y,
        Float:velocity_z,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    GetVehicleVelocity(vehicleid,velocity_x,velocity_y,velocity_z);
    velocity_x *= velocity_x;
    velocity_y *= velocity_y;
    velocity_z *= velocity_z;
    return floatround(floatsqroot( velocity_x + velocity_y + velocity_z ) * 143); // 142.85
}

stock Float:GetPlayerVehicleSpeedEx(playerid) {
    new

        Float:velocity_x,
        Float:velocity_y,
        Float:velocity_z,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    GetVehicleVelocity(vehicleid,velocity_x,velocity_y,velocity_z);
    velocity_x *= velocity_x;
    velocity_y *= velocity_y;
    velocity_z *= velocity_z;
    return floatsqroot( velocity_x + velocity_y + velocity_z ) * 143.0; // 142.85
}
//Servername
new serverhost = 1;
new lagerbestand = 0;
new Lottostand = 0;

forward SaveInfos();
forward LoadInfos();

forward HauptTimer();
forward MinuteTimer();
forward FiveMinuteTimer();

forward split(const strsrc[], strdest[][], delimiter);
forward HeilReady(playerid);
forward OnPlayerCarUpdate(playerid);
//forward OnPlayerCarLogin(playerid);
forward PlayerCarSpawn(playerid, Slot);
forward OnUpdateUhr();
forward OnUpdateDatum();
forward OnPlayerUpdateTacho();
forward OnPlayerTot(playerid);
forward OnPlayerJail(playerid);
forward OnPlayerMute(playerid);
forward OnPlayerWaitPilot(playerid);
forward OnPlayerWaitLinie(playerid);
forward PlayaInfo(playerid);
forward SetPlayerSpawn(playerid);
forward PayDay();

#define MAX_TAXI_KUNDEN 3

enum SpielerDaten
{
    ID, // ID aus der Datenbank.Einzigartig und unbedingt notwendig für Hochzeitsystem!
    pLoginTimestamp,
    pMarriage, // ID mit der man Verheiratet ist.Identisch zu der pID eines Spielers
    pMarriageName[MAX_PLAYER_NAME],
    pHeiratsantragID,
    pLevel,//Spieler Level
    pAdmin,//Spieler Adminlevel
    pDonateRank,//0 = Normal 1 = Premium
    pHours,// Spielstunden (jeden PayDay +1)
    pSex,//Geschlecht
    pMuted,//Ob gemutet oder nicht
    pExp,//Wieviel Respekt man hat
    pCash,//Wieviel Geld man hat
    pCrimes,//Wieviele Wanteds man insgesamt hatte
    pKills,//Wieviele Abschüsse man insgesamt gemacht hat
    pDeaths,//Wie oft man insgesamt gestorben ist
    pArrested,//Wie oft man eingesperrt wurden ist
    pWantedDeaths,//Wie oft man mit Wanteds vom Cop getötet wurden ist
    pPhoneBook,//Ob man ein Telefonbuch hat
    pLottoNr,//Welche Lotto Nr man hat
    pJob,//Welchen Job man hat
    pPayCheck,//Wieviel Geld man beim nächsten PD erhält
    pJailed,//Ob man eingesperrt ist
    pJailTime,//Wielange man eingesperrt ist
    pDuty,//Ob man OnDuty ist(Sani, Cop etc.)
    pfDuty,
    pDutyTask, // 0 frei, 1 belegt
    //pMats,//Wieviele Mats man dabei hat
    pDrugs,//Wieviele Drogen man dabei hat

    pFraktion,//Welche Fraktions-ID man hat
    pRank,//Welchen Fraktions Rank man hat
    pSkin,//Welchen Skin man hat
    //pHouseKey,//Welche Haus-ID man hat

    pHouseAngebot[2], // 0 ID  , 1 Price
    pBizAngebot[2], // 0 ID  , 1 Price
    pTankeAngebot[2], // 0 ID  , 1 Price
    //pHotelKey,
    pPlayerHotel,
    pPlayerBiz,
    pPlayerBizEx, // 2.
    pPlayerFirma,
    pHouseMieteKey,
    pPremiumBizSlot,
    //pBizKey,//Welche Biz-ID man hat
    pCarLic,//Führerschein 1 = Ja 0 = Nein
    pFlyLic,//Flugschein 1 = Ja 0 = Nein
    pBoatLic,//Bootlizens 1 = Ja 0 = Nein
    //pFishLic,
    pEisVerkaeufer,
    pEisPreis,
    pHotDogVerkaeufer,
    pHotDogPreis,
    pTimerTaschendieb,
    pUnixTaschendieb,
    pTaschendiebCount,
    pTimerKnastbefreien,
    pUnixKnastbefreien,
    pKnastbefreienCount,
    pGunLic,//Waffenschein A 1 Ja 0 Nein
    pGunLicB,//Waffenschein B 1 Ja 0 Nein
    pLKWLic,//LKWschein 1 = Ja 0 = Nein
    pMotoLic,//Motorradschein 1 = Ja 0 = Nein
    pPayDay,//Wieviele Minuten man vom Payday hat
    pTut,//Ob man Tutorial schon durch hat
    pTutTimer,
    pWarns,//Wieviele Warns man hat (max. 5)
    pPerso,//Ob man den Perso hat
    pHandyNr,//Handy-Nummer
    pHandyNr_Temp,
    pHandyNr_Counter,
    pHandyGeld,//Wieviel handygeld man hat
    pClassRequest,
    pTot,//Ob man Tot ist
    pBanned,//Ob man gebannt ist
    pWanteds,//Wieviele Wanteds man hat
    pBank,//Geld auf der Bank
    pJailType,//0 = Links|Prison, 1 = Mitte, 2 = Rechts
    pPrisonRunCount,
    pPrisonRun,
    pPrisonRunStep,
    pTotTime,//Wielange man Tot ist
    Float:pTotX,//Tot-Position X
    Float:pTotY,//Tot-Position Y
    Float:pTotZ,//Tot-Position Z
    pKanister,//Kanister 0 = Nein, 1 = Ja
    pHeilReady,//Ob Heil Ready ist von /gheilen
    pWaffenteile,
    // pDrogen, <-- Wird gelöscht
    pSafeTeile,
    pdeacc,
    pschulden,
    pWeihnachtsday,
    pSafeDrogen,
    pSpawnChange,
    //pTankKey,
    pPlayerTank,
    pPlayerHouse,
    pKekse,
    pZigaretten,
    pHandyState,
    Text3D:pWantedLabel,
    Text3D:pWantedLabelEx,
    Text3D:pBlacklistLabel,
    Text3D:pNeuling,
    Text3D:pAFKLabel,
    Text3D:pAntiSpawnKill,
    Text3D:t3dSInfo,
    //Text3D:pAdminLabel,
    bool:pAntiSpawnKillOn,
    //bool:bShowMarker,
    pFrakLohn,
    pTimeBan,
    pMuteTime,
    pAngel,
    pFische,
    pKoeder,
    pMaxFishes,
    pMaxVerloren,
    pFishLic,
    /*
    pFPunkte - Fahrschein(Autoschein)
    pFBPunkte- Bootsschein
    pFlPunkte - Flugschein
    pGunPunkte - Waffenschein
    pLKWPunkte - LKW Schein
    */
    pFPunkte,
    pFBPunkte,
    pFlPunkte,
    pGunPunkte,
    pLKWPunkte,
    pMotoPunkte,

    punixFSperre,
    punixFBSperre,
    punixFlSperre,
    punixGunSperre,
    punixLKWSperre,
    punixMotoSperre,

    pFrakSperre, // MySQL Tabelle neu
    pHartz4, // MySQL Tabelle neu
    pHitmenAuftragID,
    pWheelAuftragID,
    bool:pKopfgeldStatus,
    pKopfgeld,
    pKopfgeldID,
    tickDfind,
    tDfind,
    tickJobCheckpoint,
    bool:bMaske,
    tMaske,
    bool:wbMaske,
    wtMaske,
    bool:abMaske,
    atMaske,
    iKidnapID,
    tKidnap,
    tickKidnap,
    bool:bKidnapped,
    bool:bAugenbinde,
    bool:bMundbinde,
    pPizzaVerkaeufer,
    pPizzaPreis,
    tHure,
    tickHure,
    bool:bHasSex,
    pHureID,
    pHurePreis,
    pWeaponInfo[13],
    pKFZSteuer,
    punixSpeedhack,
    tAutoknacken,
    punixAutoknacken,
    pAutoknackerVehicleID,

    pTaxiPreis,
    Text:tdTaxi,

    pTaxiVehicle,
    pTaxiKunden[MAX_TAXI_KUNDEN],
    pTaxiKundenStart[MAX_TAXI_KUNDEN],

    // tTaxi,
    tTaxiLeave,
    tDrink,
    pWantedCodes,
    bool:bWantedHacking,
    pSafeWantedCodes,
    punixWantedCodes,
    tWantedCodes,
    punixWantedCodesDone,
    unixUpdate,
    pStartbonus,
    pInterviewer,
    ibInterviewStat,
    pHurePoints,
    pDetektivPoints,
    pLawyerPoints,
	tWheelman,
	iWheelmanID,
	punixFlyhack,
	pSecureCodeLevel,
	pStaat[30],
	pVertragID,
	pVertragText[128],
	pKekseValue,
	pBankKonto,
	pBankKontoPin,
	tFahrschule,
	pFahrschuleSpeedWarnung,
	unixFahrschuleSpeed,
	unixFahrschuleZeit,
	unixFahrschuleFahrzeug,
	pGeldcheckID,
	pGeldcheckBetrag,
	#if defined SILVESTER_EVENT
	pBoeller,
	pRaketen,
	#endif
	bool:pTransportActive,
	pLoginVersuch,
	pJobWechsel,
	unixFeuerwerk,
	unixFeuerwerkleucht,
	unixKrankenversicherung,
	pKofferraumItem,
	pDrogenSamen,
	unixSpiceCooldown,
	pGeburtstag[20],
	pSpice,
	unixGetSamenCooldown,
	pSafeSpice,
	pHandy,
	pFightstyle,
	pBlitzerCooldown,
	pBrecheisen,
	unixHausAufbrechen,
	tEinbrechen,
	unixBlinkerCooldown,
	PlayerText:ptPayDay,
	pAutoknackerExtraLohn,
	pSSteuer,

	pHelm,
	pExperte,
	unixAFKNotice,
	pLobe,
	pVehicleVerleih,
	tickVehicleVerleih,
	pBMOD,
	pKreditwert,
	pKreditGezahlt,
	pKreditAuswahl,
	pMP3Player,
	pCommandSpam,
	pChatSpam,
	pPremiumCarSlot,

    Float:pSpawnX,
    Float:pSpawnY,
    Float:pSpawnZ,
    Float:pSpawnFace,
    pSpawnInt,
    pSpawnVirtual,

    bool:pKoffer,

    bool:bNoDMZone,
    bool:bAccountExists,
    pPinVergessen,
    pKofferItem,
    pWiederbelebung,

    pUpgradeWaffenlager,
    pUpgradeSafebox,
    pHausWaffenlager,
    pHausSafeboxSpice,
    pHausSafeboxDrogen,

    pHaustierTemp,
    pHaustier,
    bool:pHaustierSpawned,
    pHaustierCooldown,
    pHaustierNotice,
    pHaustierFutter,
    pHaustierObject,
    pHaustierDistanceAlert,

    Float:pPos[3],

    pHausSafeboxItem,
    tSpawnView,
    pVehiclePort,

    tTankeUeberfall,
    tTankeUnix,

    pPeilsenderTemp,
    ptickBotTest,
    Float:pAimbotTestValues[2],

    pRadarfallenWarnung,
    punixRadarfallenWarnung,
    tRadarfallenWarnung,
    pAutomatik,

    pMuellCP,
    pMuell[2],

    pGeldTCP,
    pGELDT[2],

    pCow[3], // 91 / 32
    pCowJob,

    pZollValid,

    pFahrgeschaeft,
    pFahrgeschaeftData,
    pWaffenSperre,
    pKFZVersicherung,
    pSHeilen,
    tSHeilen,
    pFLehrer,
    pFModus,
    pTrakLic,
    pCarmALic,
    pWheelmenP,
    pWModus,

    pKillsGangFight,
    pKillsGangFightSession,
    pPremiumNeon,

    tLoginTimeout,

    pAdminDienst,
    pBenutzerfarbe,
    pTempMoebelKategorie,
    pTempMoebelID,
    pEditObjectMode,

    pTruckerBlock,

    pDrogenPoints,
    pWaffenteilePoints,
    pfrakwarn,
    Float:pArmourInfo,
    Float:pHealthInfo
}

enum e_FahrPruefung {
    FP_sName[16],
    FP_iPrice,
    SpielerDaten:FP_iVar
}
new const g_FahrPruefung[][e_FahrPruefung] = {
    {"",0,SpielerDaten:0},
    {"Autoschein",8000,SpielerDaten:pCarLic},
    {"Motorradschein",11000,SpielerDaten:pMotoLic},
    {"Flugschein",50000,SpielerDaten:pFlyLic},
    {"Bootschein",17000,SpielerDaten:pBoatLic},
    {"LKWSchein",22000,SpielerDaten:pLKWLic},
    {"A-Waffenschein",65000,SpielerDaten:pGunLic},
    {"B-Waffenschein",85000,SpielerDaten:pGunLicB},
    {"Busschein",18000,SpielerDaten:pCarmALic}
};

enum e_WheelmenD {
    W_sName[29],
    W_iPrice,
    SpielerDaten:FP_iVar
}

new const g_WheelmenD[][e_WheelmenD] = {
    {"",0,SpielerDaten:0},
    {"Chauffeur",8000,SpielerDaten:pCarLic},
    {"Personenschutz",25000,SpielerDaten:pMotoLic},
    {"Befreiung vor Entführung",20000,SpielerDaten:pFlyLic},
    {"Befreiung vor Festnahme",25000,SpielerDaten:pBoatLic},
    {"Alcatraz Gefangenenbefreiung",40000,SpielerDaten:pGunLic},
    {"GangJail Gefangenenbefreiung",15000,SpielerDaten:pGunLicB}
};

new Spieler[MAX_PLAYERS][SpielerDaten];
new gangfightpause[22],gangfightwetten[4],gangfightwettenpot[4],gangfightwettenp[MAX_PLAYERS][MAX_PLAYER_NAME],gangfightwettenppp[MAX_PLAYERS],gangfightwettenpp[MAX_PLAYERS],gangfightkampffraks[4][2];
new pCar[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];

//new gSpawned[MAX_PLAYERS char];
new postpsenden[MAX_PLAYERS][MAX_PLAYER_NAME],postpid[MAX_PLAYERS][300],firstspawn[MAX_PLAYERS];
new AcceptStats[MAX_PLAYERS];
new AcceptAngelStats[MAX_PLAYERS];
new AcceptCarSell[MAX_PLAYERS];
new AcceptCarSellPreis[MAX_PLAYERS];
new MedicHealID[MAX_PLAYERS];
new MedicHealPreis[MAX_PLAYERS];
new buswait[MAX_PLAYERS];
new truckwait[MAX_PLAYERS];
new DrogenTimer[MAX_PLAYERS];
new unfreezewait[MAX_PLAYERS];
new BusTime[MAX_PLAYERS];
new TruckTime[MAX_PLAYERS];
new PilotTime[MAX_PLAYERS];
new pilotwait[MAX_PLAYERS];
new carmsgwait[MAX_PLAYERS];
new paydaywait[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RepairCarPreis[MAX_PLAYERS];
new RefillCar[MAX_PLAYERS];
new RefillCarPreis[MAX_PLAYERS];
new ZettelID[MAX_PLAYERS];
new ZettelPreis[MAX_PLAYERS];
new TazerTime[MAX_PLAYERS];
new Tazered[MAX_PLAYERS];
new Cuffed[MAX_PLAYERS];
new vehicleRefueling[MAX_VEHICLES];
new Refueling[MAX_PLAYERS];
new RefuelType[MAX_PLAYERS];
new MakeAnimation[MAX_PLAYERS];
new BankWert[MAX_PLAYERS];
new BankAn[MAX_PLAYERS];
new TelefonzelleAn[MAX_PLAYERS];
new PlayerIsPaintballing[MAX_PLAYERS];
new AnwaltID[MAX_PLAYERS];
new AnwaltPreis[MAX_PLAYERS];
new CurrentPhone[MAX_PLAYERS];
new pDrogenID[MAX_PLAYERS];
new pDrogenMenge[MAX_PLAYERS];
new pDrogenPreis[MAX_PLAYERS];
new pSpiceID[MAX_PLAYERS];
new pSpiceMenge[MAX_PLAYERS];
new pSpicePreis[MAX_PLAYERS];
new pWTeileID[MAX_PLAYERS];
new pWTeileMenge[MAX_PLAYERS];
new pWTeilePreis[MAX_PLAYERS];
new pDrogenEinfluss[MAX_PLAYERS];
new pWaffenPlayer[MAX_PLAYERS];
new pWaffenID[MAX_PLAYERS];
new pWaffenPreis[MAX_PLAYERS];
new pFahrStunde[MAX_PLAYERS];
new pCheckpoint[MAX_PLAYERS];
new pMakeTutorial[MAX_PLAYERS];
new pFahrschulCar[MAX_PLAYERS];
new pFahrschuleCP[MAX_PLAYERS];
new NeedCop[MAX_PLAYERS];
new NeedMedic[MAX_PLAYERS];
new NeedKFZ[MAX_PLAYERS];
new NeedOAMT[MAX_PLAYERS];
new NeedAWALT[MAX_PLAYERS];
new NeedPIZZA[MAX_PLAYERS];
new NeedWHEEL[MAX_PLAYERS];
new pUnderCover[MAX_PLAYERS];
new pCurrentSite[MAX_PLAYERS];
new RadioSender[MAX_VEHICLES];
new FrakInviteID[MAX_PLAYERS];
new JobVehicle[MAX_PLAYERS];
new IsAFK[MAX_PLAYERS];
new NeedBackup[MAX_PLAYERS];
new pBackupTimer[MAX_PLAYERS];
new IsPlayerSpectating[MAX_PLAYERS];
new SpectatedPlayer[MAX_PLAYERS];
new pCurrentBiz[MAX_PLAYERS];
new pSkinSelection[MAX_PLAYERS];
new pChoosedSkin[MAX_PLAYERS];
new ReportCall[MAX_PLAYERS];
new ReportTimer[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new SupText[MAX_PLAYERS][128];
new PlayerAngel[MAX_PLAYERS];
new pAngelTimer[MAX_PLAYERS];
new IsPlayerFishing[MAX_PLAYERS];
new NeedTAXI[MAX_PLAYERS];
new EventCP[MAX_PLAYERS];

new pGC[MAX_PLAYERS];
new pFC[MAX_PLAYERS];
new pJC[MAX_PLAYERS];
new pBC[MAX_PLAYERS];
new pCC[MAX_PLAYERS];
new pJL[MAX_PLAYERS];

new bestand[MAX_VEHICLES];
new Benzin[MAX_VEHICLES];
new Waren[MAX_VEHICLES];
new Text3D:lager3d;

new Text:ASKDraw;
//new Text:Logo1;
//new Text:Logo2;
new Text:URL;
new Text:TazerBox;
new Text:Leer;
//new PlayerText:TachoMessage[3][MAX_PLAYERS];
new Text:UhrMessage;
new Text:DatumMessage;
new PlayerText:Gesucht[MAX_PLAYERS];
//new PlayerText:WantedBar[MAX_PLAYERS];
new PlayerText:Spectate[4][MAX_PLAYERS];
new PlayerText:BusMessage[MAX_PLAYERS];
new Text:tdOffeneTickets;


new knastunfreezetimer[MAX_PLAYERS];

new vSirene[MAX_VEHICLES];
new vNeon[MAX_VEHICLES];
new OAmtSirene[MAX_VEHICLES];


new GCOff;
new GMXMode;
new gmxtimer;
new automsg;
new CurWeather;

new drogen[6];
new wdealer[6];
new combines[6];
new zugb[3];
new pizzacar[8];
new Text3D:t3dBus[4];
new kfzcars[6];
new bauarb[8];
new reinigung[8];
new geldt[8];
new muell[6];
new eismann[4];
new hotdogcar[3];
new pdeaccadmin[MAX_PLAYERS][MAX_PLAYER_NAME];
new ballascars[17];
new grovecars[16];
new fscars[18];
new fsacars[2];
new aztcars[18];
new vagoscars[16];
new lvpdcars[30];
new armycars[1];
new outlawzscars[17];
new zollcars[9];

new gSteuern;

new g_aiNoDM[5];
new g_waiNoDM[2];
new g_iWantedHackerZone;
new g_iAlcatraz;
new g_iAlhambra;

new CarName[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
    "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
    "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
    "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
    "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
    "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
    "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
    "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
    "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
    "Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
    "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
    "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
    "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
    "Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
    "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
    "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
    "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
    "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
    "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
    "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
    "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
    "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
    "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
    "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
    "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
    "Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
    "Phoenix", "2. Gebrauchtwagen", "1. Gebrauchtwagen", "Luggage", "Luggage", "Stairs", "Boxville",
    "Tiller", "Utility Trailer"
};

AntiDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

stock GetDistance( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
    x1 -= x2;
    y1 -= y2;
    z1 -= z2;
    return floatround( floatsqroot((x1 * x1) + (y1 * y1) + (z1 * z1)));
}

stock IsPlayerFalling(playerid)
{
    new index = GetPlayerAnimationIndex(playerid);
    if (index >= 958 && index <= 979 || index == 1130 || index == 1195 || index == 1132) return 1;
    return 0;
}

stock Float:frandom(Float:max, Float:min = 0.0, dp = 4)
{
    new
        // Get the multiplication for storing fractional parts.
        Float:mul = floatpower(10.0, dp),
        // Get the max and min as integers, with extra dp.
        imin = floatround(min * mul),
        imax = floatround(max * mul);
    // Get a random int between two bounds and convert it to a float.
    return float(random(imax - imin) + imin) / mul;
}

#define MAX_GANGZONES 20

enum e_GangZone {
    GZ_iID,
    Float:GZ_fMinX,
    Float:GZ_fMaxX,
    Float:GZ_fMinY,
    Float:GZ_fMaxY,
    Float:GZ_fIconX,
    Float:GZ_fIconY,
    Float:GZ_fIconZ,
    GZ_iOwner,
    GZ_iTimeout,
    GZ_iAttacker,
    GZ_iOwnerScore,
    GZ_iAttackerScore,
    GZ_iAreaID,
    GZ_iGangZoneID,
    GZ_iIconID,
    Text3D:GZ_t3dLabel,
    GZ_iStatus, // 0 normal,1 angriff
    GZ_iGangWarEnd,
    Text:GZ_tdInfo,
    GZ_iFlagge, // -1 keiner , 0 Owner,1 Attacker
    GZ_iFlaggePlayer,
    GZ_iFlaggeEnd,
    GZ_iCounter,
    GZ_igbestand,
    GZ_igupgrade
}
new iGangZones;
new Text:tdGangZoneHeader;
new g_GangZone[MAX_GANGZONES][e_GangZone];

new alcatrazGateHackTimeout   = 0;
new alcatrazGateHackTimestamp = 0;


#include <drogen>
#include <werbebanner>
#include <extfire_0.4>
//#include <feuerwehr>
#include <helmet>
#include <gdrop>
#include <bomb>
#include <pOneArmedBandit>
//#include <wof>
#include <obj_blinker>
#include <timestamptodate>
//#include <hausmoebel>
//#include <gears>
#include <robbing>

// MAPS
#include <maps\samdExterior>
#include <maps\samdInterior>
#include <maps\samdInterior2>
#include <maps\subway>
#include <maps\sanaBase>
#include <maps\cityhallExterior>
#include <maps\cityhallInterior>
#include <maps\impoundLot>
#include <maps\pooExterior>
#include <maps\pooInterior>
#include <maps\lspdExterior>
#include <maps\lspdInterior>
#include <maps\fbiExterior>
#include <maps\fbiInterior>
#include <maps\casinoExterior>
#include <maps\casinoInterior>
#include <maps\evidenceroomInterior>
#include <maps\shishaBar>
#include <maps\wedding>
#include <maps\oldtimerDealership>
#include <maps\petShop>
#include <maps\ammuStreet>
#include <maps\yakuzaExterior>
#include <maps\yakuzaInterior>
#include <maps\cheapCarDealerShipLv>
#include <maps\boatDealershipLs>
#include <maps\electronicsShop>
#include <maps\fishingShop>
#include <maps\boatRental>
#include <maps\busStops>
#include <maps\hitmanBase>
#include <maps\governmentExterior>
#include <maps\governmentInterior>
#include <maps\bikeRental>
#include <maps\noobSpawn>
#include <maps\taxiStations>
#include <maps\carRentalStations>
#include <maps\speedCameras>
#include <maps\safeBoxes>
#include <maps\gasPumps>
#include <maps\busStation>
#include <maps\wantedHackerBase>
#include <maps\gardenerBase>
#include <maps\nineDemonsBase>
#include <maps\beach>
#include <maps\alhambraExterior>
#include <maps\alhambraInterior>
#include <maps\alcatraz>
#include <maps\drivingSchoolExterior>
#include <maps\bicycleDealership>
#include <maps\boatDealershipSf>
#include <maps\luxuryCarDealership>
#include <maps\cheapCarDealershipLs2>
#include <maps\cheapCarDealershipLs>
#include <maps\lcnExterior>
#include <maps\lcnInterior>
#include <maps\tuev>
#include <maps\bikeDealership>
#include <maps\terrorBase>
#include <maps\atm>
#include <maps\trafficLights>
#include <maps\tollStations>
#include <maps\misc>
#include <maps\phoneBooths>
#include <maps\wheelmanBase>
#include <maps\airportLs>
#include <maps\truckerBase>
#include <maps\bankExteriorLs>
#include <maps\bankInteriorLs>
#include <maps\bankInteriorLs2>
#include <maps\clubExteriorLs>
#include <maps\clubInteriorLs>
#include <maps\boatCargoJob>
#include <maps\kartParcour>
#include <maps\bankExteriorLv>
#include <maps\bankInteriorLv>
#include <maps\amusementPark>
#include <maps\triadsExterior>
#include <maps\triadsInterior>
#include <maps\paintballGymLs>

enum E_VEHICLE_DEALERSHIP {
    VEHICLE_DEALERSHIP_NAME[50],
    Float:VEHICLE_DEALERSHIP_COORD_X,
    Float:VEHICLE_DEALERSHIP_COORD_Y,
    Float:VEHICLE_DEALERSHIP_COORD_Z
}

new const g_vehicleDealership[][E_VEHICLE_DEALERSHIP] = {
    {"Autohaus - Günstig am Bahnhof in Los Santos", CHEAPCARDEALERSHIPLS_COORDS},
    {"Autohaus - Günstig nahe der Ballas Base", CHEAPCARDEALERSHIPLS2_COORDS},
    {"Autohaus - Günstig in Las Venturas", CHEAPCARDEALERSHIPLV_COORDS},
    {"Fahrradladen in Los Santos", BICYCLEDEALERSHIP_COORDS},
    {"Motorradhandel in Los Santos", BIKEDEALERSHIP_COORDS},
    {"Luxus-Autohaus in Los Santos", LUXURYCARDEALERSHIP_COORDS},
    {"Oldtimer Autohaus in Los Santos", OLDTIMERDEALERSHIP_COORDS},
    {"Flugzeughandel in Los Santos", AIRPORTLS_PLANE_DEALERSHIP_POINT},
    {"Flugzeughandel in Las Venturas", 1310.9393, 1342.6803, 10.8203},
    {"Bootshandel in Los Santos", BOATDEALERSHIPLS_COORDS},
    {"Bootshandel in San Fierro", BOATDEALERSHIPSF_COORDS}
};

enum e_KampfShop {
	Float:KS_fX,
	Float:KS_fY,
	Float:KS_fZ,
	KS_iInterior,
	KS_iVirtualWorld
}
new const g_KampfShop[][e_KampfShop] = {
	{BEACH_FIGHTINGSTYLE_POINT, 0, 0}
};

enum e_KampfStyle {
	KS_sName[16],
	KS_iStyle,
	KS_iPrice
}
new const g_KampfStyle[][e_KampfStyle] = {
	{"Normal", FIGHT_STYLE_NORMAL , 1},
	{"Boxen", FIGHT_STYLE_BOXING , 5000},
	{"Kung-Fu", FIGHT_STYLE_KUNGFU , 5000},
	{"Wrestling", FIGHT_STYLE_GRABKICK , 2500 }
};

main()
{
    print("\n----------------------------------");
    print("Live your Dream Roleplay by Puma");
    print("----------------------------------\n");
}
enum rInfo
{
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};

#define MAX_ROADBLOCKS 100
new Roadblocks[MAX_ROADBLOCKS][rInfo];

forward Lotto(number);
public Lotto(number)
{
    new message[128];
    if (Lottostand == 0) return SendClientMessageToAll(COLOR_RED, "** [LOTTO] Der Jackpot ist leer! Die Lottoziehung findet daher nicht statt. **");
    format(message, sizeof(message), "** [LOTTO] >> Der heutige Lotto-Jackpot beträgt: $%s - Die Gewinnummer lautet: %d. << **", AddDelimiters(Lottostand), number);
    SendClientMessageToAll(COLOR_YELLOW, message);

    new winnerCount = 0, poolSize = GetPlayerPoolSize(), bool:winners[MAX_PLAYERS];
    for (new b; b <= poolSize; b++) {
        if (!gPlayerLogged[b]) continue;
        if (Spieler[b][pLottoNr] == number) {
            winnerCount++; 
            winners[b] = true;
        }

        Spieler[b][pLottoNr] = 0;
    }

    if (winnerCount == 0) return SendClientMessageToAll(COLOR_ORANGE, "** [LOTTO] >> Leider konnte in dieser Lottoziehung keiner den Jackpot knacken. << **");

    if (winnerCount > 1) {
        format(message, sizeof(message), "** [LOTTO] >> Da es %d Sieger gibt erhält jeder Sieger nur 1/%d des Jackpots! << **", winnerCount, winnerCount    );
        SendClientMessageToAll(COLOR_GREEN, message);
    }

    new jackPot = Lottostand/winnerCount, jackPotString[32];
    jackPotString = AddDelimiters(jackPot);
    for (new i = 0; i < MAX_PLAYERS; i++) {
        if (!winners[i]) continue;
        
        format(message, sizeof(message), "** [LOTTO] >> %s hat mit der Nummer %d den heutigen Lotto-Jackpot in Höhe von $%s gewonnen! << **", GetName(i), number, jackPotString);
        SendClientMessageToAll(COLOR_GREEN, message);
        format(message, sizeof(message), "[LOTTO] {FFFFFF}Du erhältst deinen Lottogewinn in Höhe von: $%s.", jackPotString);
        SendClientMessage(i, COLOR_GREEN, message);
        GivePlayerCash(i, jackPot);
    }

    Lottostand = 0;
    return 1;
}

public FiveMinuteTimer()
{
    new Float:health;
    for(new i=0; i < MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(IsAFK[i] == 0 && Spieler[i][pTot] == 0 && Spieler[i][pJailed] == 0 && Spieler[i][pAntiSpawnKillOn] == false)
            {
                GetPlayerHealth(i, health);
                SetPlayerHealth(i, health - 3.0 );
            }
        }
    }
    return 1;
}

forward LottoTimer();
public LottoTimer()
{
    Lotto(minrand(1, 100));
    return 1;
}

new playertimestamp[MAX_PLAYERS];
public MinuteTimer()
{
    new i;
    new stunde, minute, sekunde;
    for( i=0 ; i < iAngel ;i++)
    {
        if(Angel[i][Fische] < MAX_FISCHE_PRO_PLATZ)
        {
            Angel[i][Fische]++;
        }
    }
    // -- Aus HauptTimer verschoben
    for( i = 1 ; i < MAX_BIZES ; i++)
    {
        UpdateBizText(i);
    }
    for( i=0;i<MAX_STATIC_BIZES;i++)
    {
        UpdateStaticBizText(i);
    }
    for( i=0;i<MAX_HOUSES;i++)
    {
        UpdateHouseText(i);
    }
    for( i=0;i<MAX_TANKEN;i++)
    {
        UpdateTankeText(i);
    }
    for( i=0;i<MAX_APLATZ;i++)
    {
        UpdateAngelText(i);
    }
    // --
    gettime(stunde, minute, sekunde);

    /*if(stunde == 6 && minute == 1)
    {
        SendRconCommand("gmx");
        return 1;
    }*/
    //SaveAllSecond();
    if(minute == 0)
    {
        new str[128];
        SendClientMessageToAll(0xFF6731FF, "~>~>~>~>~>~>~>~>~>~>~> {FFFFFF}San Andreas - Lotto " COLOR_HEX_ORANGE "<~<~<~<~<~<~<~<~<~<~");
        format(str, sizeof(str), COLOR_HEX_YELLOW "Die Lottoziehung beginnt um " COLOR_HEX_ORANGE "%d:05 Uhr" COLOR_HEX_YELLOW " - im Jackpot sind $%s!", stunde, AddDelimiters(Lottostand));
        SendClientMessageToAll(COLOR_YELLOW, str);
        SendClientMessageToAll(COLOR_YELLOW, "Kaufe dir mit /Lotto ein Lottoticket für $1.200 und versuche dein Glück!");
        SetTimer("LottoTimer", 1000 * 60 * 5, false);
    }
    /*
        Jobfahrzeuge bekommen kein Tank mehr abgezogen,
        also ist auffüllen unnötig
    for( i=0;i<sizeof(drogen);i++){
        gGas[drogen[i]] = GetMaxTank( drogen[i]);
    }
    for( i=0;i<sizeof(wdealer);i++){
        gGas[wdealer[i]] = GetMaxTank(wdealer[i]);
    }
    for( i=0;i<sizeof(combines);i++){
        gGas[combines[i]] = GetMaxTank(combines[i]);
    }
    for( i=0;i<sizeof(bus);i++){
        gGas[bus[i]] = GetMaxTank(bus[i]);
    }
    for( i=0;i<sizeof(vehicle_airportLs);i++){
        gGas[vehicle_airportLs[i]] = GetMaxTank(vehicle_airportLs[i]);
    }
    for( i=0;i<sizeof(vehicle_truckerBase);i++){
        gGas[vehicle_truckerBase[i]] = GetMaxTank(vehicle_truckerBase[i]);
    }
    for( i=0;i<sizeof(schiff);i++){
        gGas[schiff[i]] = GetMaxTank(schiff[i]);
    }
    for( i=0;i<sizeof(bauarb);i++){
        gGas[bauarb[i]] = GetMaxTank(bauarb[i]);
    }
    for( i=0;i<sizeof(garten);i++){
        gGas[garten[i]] = GetMaxTank(garten[i]);
    }
    for( i=0;i<sizeof(reinigung);i++){
        gGas[reinigung[i]] = GetMaxTank(reinigung[i]);
    }
    for( i=0;i<sizeof(muell);i++){
        gGas[muell[i]] = GetMaxTank(muell[i]);
    }
    for( i=0;i<sizeof(eismann);i++){
        gGas[eismann[i]] = GetMaxTank(eismann[i]);
    }
    for( i=0;i<sizeof(pizzacar);i++){
        gGas[pizzacar[i]] = GetMaxTank(pizzacar[i]);
    }
    for( i=0;i<sizeof(taxicar);i++){
        gGas[taxicar[i]] = GetMaxTank(taxicar[i]);
    }
    for( i=0;i<sizeof(kfzcars);i++){
        gGas[kfzcars[i]] = GetMaxTank(kfzcars[i]);
    }
    */
    for(new playerid;playerid<MAX_PLAYERS;playerid++)
    {
        if(IsPlayerConnected(playerid))
        {
            if(IsAFK[playerid]==0)
            {
                adventmin[playerid]++;
            }
        }
    }
    return 1;
}

public HauptTimer()
{
    #if defined _RUN_HAUPTTIMER_TEST_
    new
        tick = GetTickCount();
    new tick2;
    #endif
    new i;
    new str[58];
    //new wantedstr[16];
    new SpecStr[155];
    new weaponStr[32];
    new Float:pHealth, Float:pArmor;
    automsg ++;
    if(automsg == 600)
    {
        SendClientMessageToAll(COLOR_YELLOW, "|___________________ Live your Dream ___________________|");
        SendClientMessageToAll(COLOR_WHITE, "Mit /Help werden dir alle Befehle strukturiert aufgelistet,");
        SendClientMessageToAll(COLOR_WHITE, "mit /Navi kannst du alle wichtigen Orte finden.");
        SendClientMessageToAll(COLOR_WHITE, "Hast du Fragen oder Probleme? Dann helfen wir dir gerne!");
        SendClientMessageToAll(COLOR_WHITE, "Unser Support erreichst du über /Sup.");
        SendClientMessageToAll(COLOR_WHITE, "Du möchtest ein Regelverstoß melden? Mit /Admin kannst du");
        SendClientMessageToAll(COLOR_WHITE, "sofort in eiligen Situationen ein Administrator kontaktieren.");
        SendClientMessageToAll(COLOR_YELLOW, "|___________________________________________________|");
    }
    else if(automsg == 1200)
    {
        SendClientMessageToAll(COLOR_YELLOW, "|_________________ Live your Dream _________________|");
        SendClientMessageToAll(COLOR_WHITE, "Du möchtest dem Server behilflich sein?");
        SendClientMessageToAll(COLOR_WHITE, "Dann schau in unserem Shop vorbei, wo du dir tolle");
        SendClientMessageToAll(COLOR_WHITE, "Premiumvorteile sichern kannst!");
        SendClientMessageToAll(COLOR_WHITE, "Unser Shop erreichst du unter: www.Shop.LyD-Roleplay.de");
        SendClientMessageToAll(COLOR_YELLOW, "|___________________________________________________|");
    }
    else if(automsg == 1800)
    {
        SendClientMessageToAll(COLOR_YELLOW, "|_________________ Live your Dream _________________|");
        SendClientMessageToAll(COLOR_WHITE, "In unserem Forum findest du wichtige Neuigkeiten,");
        SendClientMessageToAll(COLOR_WHITE, "die du unbedingt nicht verpassen solltest!");
        SendClientMessageToAll(COLOR_WHITE, "Außerdem kannst du dich für Fraktionen o.ä bewerben");
        SendClientMessageToAll(COLOR_WHITE, "oder dich in unseren Smalltalk-Bereichen vergnügen");
        SendClientMessageToAll(COLOR_WHITE, "und den Marktplatz durchforsten.");
        SendClientMessageToAll(COLOR_WHITE, "Unser Forum erreichst du unter: www.LyD-Roleplay.de");
        SendClientMessageToAll(COLOR_WHITE, "Unsere Teamspeak-IP lautet: Teamspeak.LyD-Roleplay.de");
        SendClientMessageToAll(COLOR_YELLOW, "|___________________________________________________|");
    }
    else if(automsg == 2400)
    {
        SendClientMessageToAll(COLOR_YELLOW, "|_____________________ Live your Dream _____________________|");
        SendClientMessageToAll(COLOR_WHITE, "Mit deinen Spielerdaten kannst du dich über ein Internet-Browser");
        SendClientMessageToAll(COLOR_WHITE, "in unser User Panel anmelden. Unser User Panel bietet eine");
        SendClientMessageToAll(COLOR_WHITE, "Vielfalt an Funktionen und ist sehr benutzerfreundlich.");
        SendClientMessageToAll(COLOR_WHITE, "Jederzeit kannst du deine Spielstände, die Server-Statistiken");
        SendClientMessageToAll(COLOR_WHITE, "abrufen und Einstellungen vornehmen. Außerdem kannst du");
        SendClientMessageToAll(COLOR_WHITE, "ein Support-Ticket erstellen oder ein Regelverstoß bei unserer");
        SendClientMessageToAll(COLOR_WHITE, "Beschwerdestelle anzeigen. Unser User-Panel erreichst du");
        SendClientMessageToAll(COLOR_WHITE, "unter www.UCP.LyD-Roleplay.de");
        SendClientMessageToAll(COLOR_YELLOW, "|___________________________________________________________|");
        automsg = 0;
    }
    // UpdateInfos();
    // Brauch nicht über Timer aktualisiert werden. Wird manuell bei Aktualisierung durchgeführt.
    // Zusätzlich zur Sicherheit in MinutenTimer
    // ---

    //IntAndVwWFix();
    // OnPlayerTachoShowHide();
    OnUpdateUhr();
    OnUpdateDatum();

    // OnPlayerUpdateTacho();
    for( i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) ) {
            if( !IsPlayerNPC(i)) {
                if( gPlayerLogged[i] )  {

                    if( Spieler[i][pDuty] == 1 ) {
                        if( Spieler[i][pDutyTask] == 1 ) {
                            TextDrawShowForPlayer(i,g_Zentralmeldung[Z_tdNichtVerfuegbar]);
                            TextDrawHideForPlayer(i,g_Zentralmeldung[Z_tdVerfuegbar]);
                        }
                        else {
                            TextDrawShowForPlayer(i,g_Zentralmeldung[Z_tdVerfuegbar]);
                            TextDrawHideForPlayer(i,g_Zentralmeldung[Z_tdNichtVerfuegbar]);
                        }
                    }
                    OnPlayerTot(i);
                    OnPlayerJail(i);
                    OnPlayerMute(i);
                    format(str, sizeof(str),  "Status: ~y~%s~n~~r~Wantedlevel: ~w~%d", GetPlayerWantedRang(i), Spieler[i][pWanteds] );
                    if( Spieler[i][pLevel] >= 2 ) {
                        if( _:Spieler[i][pNeuling] != INVALID_3DTEXT_ID ) {
                            DestroyDynamic3DTextLabel(Spieler[i][pNeuling]);
                            Spieler[i][pNeuling] = Text3D:INVALID_3DTEXT_ID;
                        }
                    }
                    else {
                        SetPlayerHealth(i,500.0);
                    }

                    if(Spieler[i][pWanteds] > 0)
                    {
                        //format(wantedstr, sizeof(wantedstr),  "Wantedanzahl: %i", Spieler[i][pWanteds]);
                        SetPlayerWantedLevel(i,Spieler[i][pWanteds]);
                    }
                    else {
                        //format(wantedstr, sizeof(wantedstr),  "Wantedanzahl: 0");
                        SetPlayerWantedLevel(i,0);
                    }
                    PlayerTextDrawSetString(i, Gesucht[i], str);
                    //PlayerTextDrawSetString(i, WantedBar[i], wantedstr);

                    if(IsPlayerSpectating[i] == 1)
                    {
                        new specVirtualWorld = GetPlayerVirtualWorld(SpectatedPlayer[i]);
                        new specInterior = GetPlayerInterior(SpectatedPlayer[i]);
                        // Issue #52 - maybe respec needed?
                        // wenn die virtuelle Welt sich ändert:
                        if (GetPlayerVirtualWorld(i) != specVirtualWorld || GetPlayerInterior(i) != specInterior) {
                            SetPlayerInterior(i, GetPlayerInterior(SpectatedPlayer[i]));
                            SetPlayerVirtualWorld(i, specVirtualWorld);
                            PlayerSpectatePlayer(i, SpectatedPlayer[i]);
                        }

                        GetWeaponNameEx(GetPlayerWeapon(SpectatedPlayer[i]), weaponStr, 32);
                        GetPlayerHealth(SpectatedPlayer[i], pHealth);
                        GetPlayerArmour(SpectatedPlayer[i], pArmor);
                        format(SpecStr, sizeof(SpecStr), "~y~Name: ~w~%s~n~~y~Leben:~w~ %.2f~n~~y~Ruestung:~w~ %.2f~n~~y~Level:~w~ %d~n~~y~Waffe: ~w~%s~n~~y~FPS: ~w~%d", GetName(SpectatedPlayer[i]), pHealth, pArmor, Spieler[SpectatedPlayer[i]][pLevel], weaponStr,GetPlayerFPS(SpectatedPlayer[i]));
                        PlayerTextDrawSetString(i, Spectate[1][i], SpecStr);
                        PlayerTextDrawShow(i, Spectate[0][i]);
                        PlayerTextDrawShow(i, Spectate[1][i]);
                        PlayerTextDrawShow(i, Spectate[2][i]);
                        PlayerTextDrawShow(i, Spectate[3][i]);
                    }
                    else
                    {
                        PlayerTextDrawHide(i, Spectate[0][i]);
                        PlayerTextDrawHide(i, Spectate[1][i]);
                        PlayerTextDrawHide(i, Spectate[2][i]);
                        PlayerTextDrawHide(i, Spectate[3][i]);
                    }
                    if(damagesperre[i]>0)
                    {
                        damagesperre[i]--;
                    }
                    // --- Nicht entfernen
                    /*
                    if( ( vehicle = GetPlayerVehicleID(i) ) ) {
                        aiVehicleInUse[vehicle] = 1;
                    }
                    */
                }
            }
        }
    }
    /* Achtung:
        Das hier ist eine manuelle Ausarbeitung deines Hauptproblemes.
        Es läuft nicht mehr über die Fraktioncars bzw dessen Variablen,
        da es sehr langsam funktioniert.
        Der ständige Aufruf von IsVehicleOccupied macht dir Probleme.
        GetMaxTank macht keinen Sinn für gMaxGas,da es bei OnVehicleSpawn aufgerufen wird.
        GetMaxTank für gGas in den Minutentimer verschoben. Der ganze Tank wird ja
        niemals innerhalb von 1 Minute leer gehen.

    */
    #if defined _RUN_HAUPTTIMER_TEST_
    tick2 = GetTickCount();
    #endif
    /*
    for(new vehicleid = 1 ; vehicleid < MAX_VEHICLES ; vehicleid++ ) {
        if( aiVehicleInUse[vehicleid] == 0 ) {
            if(aiVehicles[vehicleid]) {
                if( VEH_DROGEN <= aiVehicles[vehicleid] <= VEH_KFZCARS ) {
                    UnLockCar( vehicleid );
                }
            }
        }
    }
    */
    #if defined _RUN_HAUPTTIMER_TEST_
    new
        finish = GetTickCount(),
        players = GetOnlinePlayers();
    printf("HauptTimer: %dms bei %d Spielern", finish - tick , players );
    printf("HauptTimer ( Part #1 ): %dms bei %d Spielern", tick2 - tick , players );
    printf("HauptTimer ( Part #2 ): %dms bei %d Spielern", finish - tick2 , players );
    #endif
    return 1;
}

public OnGameModeInit()
{
	Connect_To_Database();
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 800, -1); // Object fix
    OnGameModeInit2();
}

OnGameModeInit2() {
    CollectUnusedAccount();
    HashPasswords();
    LoadInfos();
    LoadWaffenLager();
    LoadFirma();
    HouseInteriorLoad();
    // HouseLoad(); -> In HouseInteriorLoad
    HotelLoad();
    AngelLoad();
    StaticBizLoad();
    BizLoad();
    TankeLoad();
    LoadFraktionsSafeBox();
    InitWerbebanner();
    Blinker_Init();
    ClearOnlinePlayers();
//  Gears_Init();

    #if defined USE_NPCS
    ConnectBot(0);
    #endif

    //SetTimer("3",15013,true);
    SetTimer("Pulse_Banksystem",15013,true);
    SetTimer("fraklabeltimer",11941,true);
    SetTimer("DetectHacks",11941,true);
    //SetTimer("AntiDriveBy",373,true);
    SetTimer("Haustier_Follow",631,true);
    SetTimer("Pulse_Tickets",5227,true);
    SetTimer("Pulse_SInfo",757,true);
    SetTimer("gwarentimer",60000*60*3,true);
    SetTimer("PayDay",60000,true);
    SetTimer("NagelBand_Timer",NAGELBAND_TIMER_INTERVALL,true);
    //SetTimer("UpdatePeilsender",1613,true);

    //SetTimer("SaveAll", 30000 ,true); // Alle ~10 Minuten
    #if defined DEVELOPMENT
    SetTimer("SaveAll", ( 2*60*1000 ) + 2161 ,true); // Alle ~2 Minuten
    #else
    SetTimer("SaveAll", ( 10*60*1000 ) + 2161 ,true); // Alle ~10 Minuten
    #endif
    World_Pulse();
    SetTimer("World_Pulse",60013 * 59 , true ); // Alle ~60 Minuten
    // SetTimer("SaveAll",99991,true); // Primzahlen, etwa 100 Sekunden

    /*for(new i ; i < sizeof(g_DeathIcon) ; i++) {
        g_DeathIcon[i][DI_iPickup] = 0;
        g_DeathIcon[i][DI_t3dLabel] = Text3D:INVALID_3DTEXT_ID;
    }*/

    g_EventUhr[EU_tTimer] = INVALID_TIMER_ID;

    Streamer_TickRate(67);

    LoadPlayerColumns();
    ExtFire_Init();
    InitDrogenPflanzen();
    Riesenrad_Init();
    Zoll_Init();
    // ShowPlayerMarkers( PLAYER_MARKERS_MODE_STREAMED );
    //ShowPlayerMarkers( PLAYER_MARKERS_MODE_GLOBAL );

    ShowPlayerMarkers(0);

    LoadFahrzeugVerleih();
    InitBallon();
    InitWantedKillZones();

    SetNameTagDrawDistance(50.0);
    SetTimer("HauptTimer", 1013, 1); // Primzahlen
    SetTimer("OnPlayerUpdateTacho", 683, 1);
    SetTimer("MinuteTimer", 60013, 1); // Primzahlen
    SetTimer("FiveMinuteTimer", 60017 * 5, 1); // Primzahlen
    SetTimer("Servername", 5003, 1);// Primzahlen
    SetTimer("AFK_Check",30851,true);
    SetTimer("OnPlayerMoneyCheck",1013,true); // ::..Puma..:: Man es mal bitte auf 1 Millisekunde
    SetTimer("Pulse_Taxi",2281,true);

    // SetTimer("FlyHack",8311,true); --> DetectHacks

    SetTimer("WantedLabel",15277,true);
    SetTimer("FreeLicence",50021,true);
    SetTimer("GangZone_Pulse",3221,true);

    {
        DummyTextDraw = TextDrawCreate(0.0,0.0,"_");
        TextDrawFont(DummyTextDraw,1);
        TextDrawLetterSize(DummyTextDraw, 0.0, 0.0);
        TextDrawUseBox(DummyTextDraw, true);
        TextDrawColor(DummyTextDraw,0);
        TextDrawBoxColor(DummyTextDraw, 0x00000000);
    }
    {
        BlackBox = TextDrawCreate(0.0,0.0,"_");
        TextDrawFont(BlackBox,1);
        TextDrawLetterSize(BlackBox, 0.0, 50.0);
        TextDrawUseBox(BlackBox, true);
        TextDrawColor(BlackBox,0);
        TextDrawBoxColor(BlackBox, 0x000000FF);
    }
    {
        tdNoDM = TextDrawCreate(320.000000, 376.000000, "No DM Zone");
        TextDrawAlignment(tdNoDM, 2);
        TextDrawBackgroundColor(tdNoDM, 255);
        TextDrawFont(tdNoDM, 1);
        TextDrawLetterSize(tdNoDM, 0.509999, 2.299999);
        TextDrawColor(tdNoDM, -16776961);
        TextDrawSetOutline(tdNoDM, 1);
        TextDrawSetProportional(tdNoDM, 1);
        TextDrawUseBox(tdNoDM, 1);
        TextDrawBoxColor(tdNoDM, 85);
        TextDrawTextSize(tdNoDM, 417.000000, 137.000000);
    }
    {
        tdOffeneTickets = TextDrawCreate( 35.0, 306.0,"Offene Support-Tickets: ~b~~h~2");
        TextDrawBackgroundColor(tdOffeneTickets, 255);
        TextDrawFont(tdOffeneTickets, 1);
        TextDrawLetterSize(tdOffeneTickets, 0.31, 0.31 * 3.5 );
        TextDrawColor(tdOffeneTickets,-1);
        TextDrawSetOutline(tdOffeneTickets, 1);

    }

    g_tPulseBank = SetTimer("Pulse_Bankraub",( (BANKRAUB_ZEIT)*1000)+197,false);

    g_aiNoDM[0] = CreateDynamicRectangle(346.0, -2006.0, 415.0, -2191.0, .interiorid = -1); // Freizeitpark
    g_aiNoDM[1] = CreateDynamicRectangle(1284.0, -1776.0, 1157.0, -1846.0, .interiorid = -1); // Fahrschule
    g_aiNoDM[2] = CreateDynamicRectangle(1614.3436, -1331.6265, 1671.4816, -1403.0798, .worldid = VW_LSPDINTERIOR, .interiorid = MAPS_LSPDINTERIOR_INTERIOR); // LSPD Interior
    g_aiNoDM[3] = CreateDynamicRectangle(882.1005, -1438.1812, 965.1881, -1483.2373, .worldid = VW_CITYHALLINTERIOR, .interiorid = MAPS_CITYHALLINTERIOR_INTERIOR); // Cityhall Interior
	g_aiNoDM[4] = CreateDynamicRectangle(1400.2966, -1742.9885, 1558.1973, -1804.2220, .worldid = VW_MAIN, .interiorid = MAPS_CITYHALLEXTERIOR_INTERIOR); // Cityhall Exterior

    g_waiNoDM[0] = CreateDynamicRectangle( 1602.0 , -1864.0 , 1419.0 , -1581.0, .interiorid = -1 );
    g_waiNoDM[1] = CreateDynamicRectangle( 788.0 , -1388.0 , 849.0 , -1331.0, .interiorid = -1 );

    g_iAlcatraz = CreateDynamicRectangle(2794.0, 2000.0, 2929.0, 1763.0, .interiorid = 0, .worldid = 0);
    // g_iAlcatraz = CreateDynamicRectangle(2808.0, 1987.0, 2910.0, 1803.0, .interiorid = 0);
    g_iWantedHackerZone = CreateDynamicRectangle( 1405.9171 , -1752.7811 , 1649.2175 , -1563.5104 , .interiorid = 0 ,.worldid = 0);
    g_iAlhambra = CreateDynamicCube(470.0,-27.0,998.0,510.0,5.0,1010.0,.interiorid = 17);
    //g_iCasino = CreateDynamicCube(1969.0,981.0,996.0,2020.0,1040.0,996.0,.interiorid = 10);

    EnableStuntBonusForAll(0);
    //ChangeWeather();
    // SetTimer("ChangeWeather", 60000*30, 1);
    for(new at = 0;at<sizeof(ATM);at++)
    {
        CreateDynamic3DTextLabel("{FF7700}Bankautomat\n{00FF00}Tippe /Automat",0xFFFFFFFF, ATM[at][0], ATM[at][1], ATM[at][2]+1, 10.0);
    }
    new lagerstr[128];
    format(lagerstr, sizeof(lagerstr), COLOR_HEX_BLUE"Lagerbestand\n"COLOR_HEX_WHITE"%d Pakete\nTippe /Paketeinladen"COLOR_HEX_BLUE"/"COLOR_HEX_WHITE" um Pakete zu entnehmen\n"COLOR_HEX_BLUE"500$ pro Paket", lagerbestand);
    lager3d = CreateDynamic3DTextLabel(lagerstr, COLOR_WHITE, -38.4148,56.1184,3.1172, 10.0);
    CreateDynamicPickup(1239, 1, -38.4148,56.1184,3.1172,0);
    CreateDynamicPickup(1239, 1, 2348.1086,-2302.4243,13.5469);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffenteile-Pakete\n"COLOR_HEX_WHITE"Tippe /Paketeinladen um Pakete zu entnehmen",  COLOR_WHITE, 2348.1086,-2302.4243,13.5469, 15.0);
    SetTimer("CheckGas", RunOutTime, 1);
    OnUpdateUhr();
    OnUpdateDatum();
    AntiDeAMX();
    ManualVehicleEngineAndLights();
    SetGameModeText("German Roleplay Selfmade");
    AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
    DisableInteriorEnterExits();
    OAB_OnGameModeInit();
    InitZentralMeldung();
    //fWheel_init();
    for(new i ; i < MAX_PLAYERS ; i++) {
        Spieler[i][pKopfgeld] = 0;
        Spieler[i][pKopfgeldID] = INVALID_PLAYER_ID;
        Spieler[i][pJailed] = INVALID_PLAYER_ID;
        Spieler[i][iKidnapID] = INVALID_PLAYER_ID;
    }
    //Vehicles//
    /*
    Hier werden alle normalen Fahrzeuge, sprich Fraktions-Fahrzeuge, Noob-Fahrzeuge etc.
    reingemacht.*/

	//AddStaticVehicleEx(538,827.9582,-1378.5370,-1.6589,90.00000000,0,0,320); // zug hier


    //Drogen Transporter
    drogen[0] = AddStaticVehicleEx(482,311.2510,-47.8946,1.6779,180.0258,34,34,60*10); // Drogen1
    drogen[1] = AddStaticVehicleEx(482,314.6620,-47.8846,1.6602,181.2968,87,87,60*10); // Drogen2
    drogen[2] = AddStaticVehicleEx(482,328.7251,-45.3317,1.5990,89.8018,51,1,60*10); // Drogen3
    drogen[3] = AddStaticVehicleEx(482,328.6741,-48.6964,1.5664,90.7113,31,34,60*10); // Drogen4
    drogen[4] = AddStaticVehicleEx(482,328.6540,-52.0104,1.5976,90.2421,6,34,60*10); // Drogen4
    drogen[5] = AddStaticVehicleEx(482,328.6812,-55.3923,1.6008,90.0675,5,5,60*10); // Drogen4

    //Zug
    zugb[0] = AddStaticVehicleEx(538,1810.9481,-1957.9902,13.5469,268.9864,1,1,60*10); // Zug
    zugb[1] = AddStaticVehicleEx(538,1724.2969,-1957.7959,13.5391,173.4324,1,1,60*10); // Zug
    zugb[2] = AddStaticVehicleEx(538,1654.6897,-1957.9625,13.5469,270.8898,1,1,60*10); // Zug

    //Waffenteile Transporter
    wdealer[0] = AddStaticVehicleEx(482,2282.6243,-2351.6001,13.6290,226.3535,6,3,60*10); // WDealer1
    wdealer[1] = AddStaticVehicleEx(482,2290.0530,-2343.9314,13.6311,225.6010,4,4,60*10); // WDealer2
    wdealer[2] = AddStaticVehicleEx(482,2297.5593,-2336.3022,13.6220,227.2437,9,9,60*10); // WDealer3
    wdealer[3] = AddStaticVehicleEx(482,2290.8293,-2329.9988,13.6274,226.5028,85,84,60*10); // WDealer4
    wdealer[4] = AddStaticVehicleEx(482,2283.5171,-2337.6597,13.6266,227.1544,108,108,60*10); // WDealer5
    wdealer[5] = AddStaticVehicleEx(482,2276.0869,-2345.1609,13.6405,225.8990,3,38,60*10); // WDealer6

	//Farmer Combines
	combines[0] =AddStaticVehicleEx(532,-29.79999924,-1.29999995,4.19999981,66.24993896,-1,-1,60*10); //Combine
	combines[1] =AddStaticVehicleEx(532,-34.09999847,-10.39999962,4.19999981,66.24755859,-1,-1,60*10); //Combine
	combines[2] =AddStaticVehicleEx(532,-38.29999924,-19.79999924,4.19999981,66.24755859,-1,-1,60*10); //Combine
	combines[3] =AddStaticVehicleEx(532,-72.90000153,5.59999990,4.19999981,158.49755859,-1,-1,60*10); //Combine
	combines[4] =AddStaticVehicleEx(532,-83.30000305,-20.39999962,4.19999981,338.49414062,-1,-1,60*10); //Combine
	combines[5] =AddStaticVehicleEx(532,-89.80000305,32.29999924,4.19999981,248.49414062,-1,-1,60*10); //Combine

    //KFZ-Fahrzeuge
    kfzcars[0] =AddStaticVehicleEx(552,1941.2205,-1790.8042,13.0758,271.9213,1,79,60*10); // MECHA an Tanke
    kfzcars[1] =AddStaticVehicleEx(552,982.5037,-929.1548,41.3965,267.4868,1,79,60*10); // MECHA an Tanke NEU
    kfzcars[2] =AddStaticVehicleEx(552,982.7092,-924.4758,41.4802,269.6549,1,79,60*10); // MECHA an Tanke
    kfzcars[3] =AddStaticVehicleEx(552,667.0059,-580.8707,16.0361,90.2695,1,79,60*10); // MECHA an Tanke
    kfzcars[4] =AddStaticVehicleEx(552,-90.1938,-1196.0406,1.9958,345.7256,1,79,60*10); // MECHA an Tanke
    kfzcars[5] =AddStaticVehicleEx(552,-86.8948,-1196.8789,2.0065,345.7235,1,79,60*10); // MECHA an Tanke

    //Pizzacar
    pizzacar[0] = AddStaticVehicleEx(448,2122.7878,-1784.4783,12.9871,15.4276,3,5,60*10); // Pizza
    pizzacar[1] = AddStaticVehicleEx(448,2121.1492,-1784.9320,13.0122,15.4396,3,5,60*10); // Pizza
    pizzacar[2] = AddStaticVehicleEx(448,2118.9297,-1785.0514,12.9817,15.4484,3,5,60*10); // Pizza
    pizzacar[3] = AddStaticVehicleEx(448,2116.8140,-1785.0240,12.9760,15.4484,3,5,60*10); // Pizza
    pizzacar[4] = AddStaticVehicleEx(448,2114.5076,-1784.9103,12.9863,15.4576,3,5,60*10); // Pizza
    pizzacar[5] = AddStaticVehicleEx(448,2112.3501,-1785.1090,13.0096,15.4682,3,5,60*10); // Pizza
    pizzacar[6] = AddStaticVehicleEx(448,2108.7300,-1784.7393,12.9869,20.0269,3,5,60*10); // Pizza
    pizzacar[7] = AddStaticVehicleEx(448,2105.5789,-1784.8358,12.9815,20.0102,3,5,60*10); // Pizza

	//Busse

	t3dBus[0] = Text3D:INVALID_3DTEXT_ID;
	t3dBus[1] = Text3D:INVALID_3DTEXT_ID;
	t3dBus[2] = Text3D:INVALID_3DTEXT_ID;
	t3dBus[3] = Text3D:INVALID_3DTEXT_ID;

	//Reinigung
	reinigung[0] = AddStaticVehicleEx(574,2065.6135,-1903.0514,13.2720,180.3510,1,3,60*10); // reni
	reinigung[1] = AddStaticVehicleEx(574,2062.4521,-1903.0706,13.2972,180.3509,1,3,60*10); // reni
	reinigung[2] = AddStaticVehicleEx(574,2059.1306,-1903.0906,13.2974,180.3509,1,3,60*10); // reni
	reinigung[3] = AddStaticVehicleEx(574,2055.6692,-1903.1121,13.2593,180.3509,1,3,60*10); // reni
	reinigung[4] = AddStaticVehicleEx(574,2052.7971,-1903.1295,13.2850,180.3509,1,3,60*10); // reni
	reinigung[5] = AddStaticVehicleEx(574,2062.2500,-1920.5278,13.2720,359.5535,1,3,60*10); // reni
	reinigung[6] = AddStaticVehicleEx(574,2065.2402,-1920.5510,13.2972,359.5535,1,3,60*10); // reni

    //Eiswagen
    eismann[0] = AddStaticVehicleEx(423,1000.8613,-1368.5023,13.2883,14.3345,1,5,60*10); // eiswagen
    eismann[1] = AddStaticVehicleEx(423,1005.3301,-1368.3827,13.3348,16.2586,1,3,60*10); // eiswagen
    eismann[2] = AddStaticVehicleEx(423,1015.1770,-1369.0472,13.4086,15.4217,2,1,60*10); // eiswagen
    eismann[3] = AddStaticVehicleEx(423,1010.4574,-1368.8745,13.3912,14.7082,3,2,60*10); // eiswagen

    //Hotdogwagen
    hotdogcar[0] = AddStaticVehicleEx(588,2370.6411,-1928.0067,13.3064,359.5818,8,8,60*10); // Hotdogwagen
    hotdogcar[1] = AddStaticVehicleEx(588,2377.0818,-1928.0540,13.3332,359.5819,8,8,60*10); // Hotdogwagen
    hotdogcar[2] = AddStaticVehicleEx(588,2383.5793,-1928.1016,13.3400,359.5818,8,8,60*10); // Hotdogwagen

	//Bauarbeiter
	bauarb[0] = AddStaticVehicleEx(486,823.8465,886.6324,13.5834,276.7267,1,1,60*10); // bauarba
	bauarb[1] = AddStaticVehicleEx(486,823.3401,890.9330,13.5920,276.7213,1,1,60*10); // bauarba
	bauarb[2] = AddStaticVehicleEx(486,822.8735,894.8936,13.6017,276.7277,1,1,60*10); // bauarba
	bauarb[3] = AddStaticVehicleEx(486,822.3878,899.0094,13.6016,276.7277,1,1,60*10); // bauarba
	bauarb[4] = AddStaticVehicleEx(486,821.9666,902.5806,13.6016,276.7277,1,1,60*10); // bauarba
	bauarb[5] = AddStaticVehicleEx(486,821.4063,907.3297,13.6016,276.7277,1,1,60*10); // bauarba
	bauarb[6] = AddStaticVehicleEx(486,820.8406,912.1172,13.6112,276.7340,1,1,60*10); // bauarba
	bauarb[7] = AddStaticVehicleEx(486,820.3097,916.6208,13.5928,276.7313,1,1,60*10); // bauarba

    //Geldtransporter
    geldt[0] = AddStaticVehicleEx(428,1558.4480,-1011.4513,24.0308,181.0827,9,9,60*10); // gt
    geldt[1] = AddStaticVehicleEx(428,1562.5607,-1011.3737,24.0687,181.0817,9,9,60*10); // gt
    geldt[2] = AddStaticVehicleEx(428,1567.0750,-1011.2867,24.0258,181.0806,9,9,60*10); // gt
    geldt[3] = AddStaticVehicleEx(428,1571.5496,-1011.2010,24.0635,181.0796,9,9,60*10); // gt
    geldt[4] = AddStaticVehicleEx(428,1575.7191,-1011.1234,24.0285,181.0806,9,9,60*10); // gt
    geldt[5] = AddStaticVehicleEx(428,1555.4271,-1028.2484,24.0302,342.9333,9,9,60*10); // gt
    geldt[6] = AddStaticVehicleEx(428,1559.6638,-1029.5486,24.0644,342.9344,9,9,60*10); // gt
    geldt[7] = AddStaticVehicleEx(428,1563.9189,-1030.8583,24.0202,342.9335,9,9,60*10); // gt

    //Müllwagen
    muell[0] = AddStaticVehicleEx(408,2119.0425,-2077.1606,14.0978,137.4615,1,16,60*10); // müllmann
    muell[1] = AddStaticVehicleEx(408,2127.0383,-2084.0186,14.1013,137.4624,1,16,60*10); // müllmann
    muell[2] = AddStaticVehicleEx(408,2133.9006,-2090.3154,14.1523,137.4605,1,16,60*10); // müllmann
    muell[3] = AddStaticVehicleEx(408,2141.5610,-2097.3281,14.0799,137.4607,1,16,60*10); // müllmann
    muell[4] = AddStaticVehicleEx(408,2112.6843,-2070.8335,14.1242,137.4605,1,16,60*10); // müllmann
    muell[5] = AddStaticVehicleEx(408,2089.0874,-2084.4946,14.0993,179.7765,1,16,60*10); // müllmann

	for(new i=0;i<sizeof(combines);i++) {
		SetVehicleToRespawn( combines[i] );
	    aiVehicles[ combines[i] ] = VEH_COMBINES;
	}
	for(new i=0;i<sizeof(zugb);i++) {
		SetVehicleToRespawn( zugb[i] );
	    aiVehicles[ zugb[i] ] = VEH_ZUGB;
	}
	for(new i=0;i<sizeof( vehicle_airportLs );i++) {
	    aiVehicles[ vehicle_airportLs[i] ] = VEH_FLUG;
	}
	for(new i=0;i<sizeof(vehicle_truckerBase);i++)
	{
		SetVehicleNumberPlate(vehicle_truckerBase[i], COLOR_HEX_BLACK"TRUCKER");
		SetVehicleToRespawn(vehicle_truckerBase[i]);
		aiVehicles[ vehicle_truckerBase[i] ] = VEH_TRUCK;
	}
	for(new i=0;i<sizeof(vehicle_busStation);i++)
	{
		SetVehicleNumberPlate(vehicle_busStation[i], COLOR_HEX_BLACK"BUS");
		SetVehicleToRespawn(vehicle_busStation[i]);
		aiVehicles[ vehicle_busStation[i] ] = VEH_BUS;
	}
	for(new i=0;i<sizeof(drogen);i++)
	{
		SetVehicleNumberPlate(drogen[i], COLOR_HEX_BLACK"LS-43795");
		SetVehicleToRespawn(drogen[i]);
		aiVehicles[ drogen[i] ] = VEH_DROGEN;
	}
	for(new i=0;i<sizeof(wdealer);i++)
	{
		SetVehicleNumberPlate(wdealer[i], COLOR_HEX_BLACK"LS-98651");
		SetVehicleToRespawn(wdealer[i]);
		aiVehicles[ wdealer[i] ] = VEH_WDEALER;
	}
	for(new i=0;i<sizeof(vehicle_wantedHackerBase);i++)
	{
		SetVehicleNumberPlate(vehicle_wantedHackerBase[i], COLOR_HEX_BLACK"LS-87492");
		SetVehicleToRespawn(vehicle_wantedHackerBase[i]);
		aiVehicles[ vehicle_wantedHackerBase[i] ] = VEH_WANTEDCAR;
	}
	for(new i=0;i<sizeof(vehicle_gardenerBase);i++)
	{
		SetVehicleNumberPlate(vehicle_gardenerBase[i], COLOR_HEX_BLACK"GÄRTNER");
		SetVehicleToRespawn(vehicle_gardenerBase[i]);
		aiVehicles[ vehicle_gardenerBase[i] ] = VEH_GARTENCARS;
	}
	for(new i=0;i<sizeof(bauarb);i++)
	{
		SetVehicleNumberPlate(bauarb[i], COLOR_HEX_BLACK"BAUARBEITER");
		SetVehicleToRespawn(bauarb[i]);
		aiVehicles[ bauarb[i] ] = VEH_BAUARB;
	}
	for(new i=0;i<sizeof(eismann);i++)
	{
		SetVehicleNumberPlate(eismann[i], COLOR_HEX_BLACK"EISWAGEN");
		SetVehicleToRespawn(eismann[i]);
		aiVehicles[ eismann[i] ] = VEH_EISMANN;
	}
	for(new i=0;i<sizeof(hotdogcar);i++)
	{
		SetVehicleNumberPlate(hotdogcar[i], COLOR_HEX_BLACK"HOTDOG");
		SetVehicleToRespawn(hotdogcar[i]);
		aiVehicles[ hotdogcar[i] ] = VEH_HOTDOGCAR;
	}
	for(new i=0;i<sizeof(geldt);i++)
	{
		SetVehicleNumberPlate(geldt[i], COLOR_HEX_BLACK"GELDTRANS");
		SetVehicleToRespawn(geldt[i]);
		aiVehicles[ geldt[i] ] = VEH_GELDT;
	}
	for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
	{
		SetVehicleNumberPlate(vehicle_boatCargoJob[i], COLOR_HEX_BLACK"SCHIFF");
		SetVehicleToRespawn(vehicle_boatCargoJob[i]);
		aiVehicles[ vehicle_boatCargoJob[i] ] = VEH_SCHIFF;
	}
	for(new i=0;i<sizeof(reinigung);i++)
	{
		SetVehicleNumberPlate(reinigung[i], COLOR_HEX_BLACK"REINIGUNG");
		SetVehicleToRespawn(reinigung[i]);
		aiVehicles[ reinigung[i] ] = VEH_REINIGUNG;
	}
	for(new i=0;i<sizeof(muell);i++)
	{
		SetVehicleNumberPlate(muell[i], COLOR_HEX_BLACK"MÜLLMANN");
		SetVehicleToRespawn(muell[i]);
		aiVehicles[ muell[i] ] = VEH_MUELL;
	}
	for(new i=0;i<sizeof(pizzacar);i++)
	{
		SetVehicleNumberPlate(pizzacar[i], COLOR_HEX_BLACK"PIZZA");
		SetVehicleToRespawn(pizzacar[i]);
		aiVehicles[ pizzacar[i] ] = VEH_PIZZACAR;
	}
	for(new i=0;i<sizeof(vehicle_taxiStations);i++)
	{
		SetVehicleNumberPlate(vehicle_taxiStations[i], COLOR_HEX_BLACK"TAXI");
		SetVehicleToRespawn(vehicle_taxiStations[i]);
		aiVehicles[ vehicle_taxiStations[i] ] = VEH_TAXICAR;
	}
	for(new i=0;i<sizeof(kfzcars);i++)
	{
		SetVehicleNumberPlate(kfzcars[i], COLOR_HEX_BLACK"MECHANIKER");
		SetVehicleToRespawn(kfzcars[i]);
		aiVehicles[ kfzcars[i] ] = VEH_KFZCARS;
	}

	for(new i ; i < sizeof(vehicle_lspdExterior) ; i++) {
		SetVehicleHealth(vehicle_lspdExterior[i],2000.0);
	}


	for (new i; i < sizeof(vehicle_fbiExterior); i++) {
		SetVehicleHealth(vehicle_fbiExterior[i],2000.0);
	}

	zollcars[0]=AddStaticVehicleEx(560,611.0714,-609.5248,16.9444,358.2168,3,1,-1); // sultan zoll
	zollcars[1]=AddStaticVehicleEx(560,615.0045,-609.6320,16.9468,359.6290,4,1,-1); // sultan zoll
	zollcars[2]=AddStaticVehicleEx(598,611.3314,-601.3384,16.9871,271.9958,154,1,-1); // cop zoll
	zollcars[3]=AddStaticVehicleEx(599,611.2375,-597.3527,17.4267,269.3019,154,1,-1); // cop zoll
	zollcars[4]=AddStaticVehicleEx(598,622.1819,-605.9639,16.8954,271.6949,154,1,-1); // cop zoll
	zollcars[5]=AddStaticVehicleEx(598,622.4391,-610.5795,16.8808,270.9315,154,1,-1); // cop zoll
	zollcars[6]=AddStaticVehicleEx(497, 614.2656, -575.8803, 26.2353, -44.8200, 154, 1,-1); // cop zoll
	zollcars[7]=AddStaticVehicleEx(427,613.0840,-591.6060,17.3631,268.7245,154,1,-1); // enforc
	zollcars[8]=AddStaticVehicleEx(598,1602.5723,-1683.8928,5.6465,90.3662,154,1,-1); // im PD Zoll

    ballascars[0]=AddStaticVehicleEx(541,1990.9467,-1119.4481,26.4129,179.9358,233,233,-1); // BulletBallas
    ballascars[1]=AddStaticVehicleEx(468,1995.2906,-1115.3430,26.4428,182.9227,233,233,-1); // SanchezBallas
    ballascars[2]=AddStaticVehicleEx(468,1996.7445,-1115.3165,26.4553,177.6080,233,233,-1); // SanchezBallas2
    ballascars[3]=AddStaticVehicleEx(522,1998.0895,-1115.4828,26.3332,178.6234,233,233,-1); // NRGBallas2
    ballascars[4]=AddStaticVehicleEx(522,1993.7739,-1115.4847,26.3401,177.6492,233,233,-1); // NRGBallas
    ballascars[5]=AddStaticVehicleEx(492,2012.9988,-1120.6031,25.9860,178.3631,233,233,-1); // GreenwoodBallas
    ballascars[6]=AddStaticVehicleEx(482,2009.8549,-1114.6075,26.4704,178.4923,233,233,-1); // BurritoBallas
    ballascars[7]=AddStaticVehicleEx(411,1983.5637,-1130.3420,25.5524,89.2121,233,233,-1); // InfernusBallas
    ballascars[8]=AddStaticVehicleEx(411,1982.9535,-1141.4402,25.5508,90.6272,233,233,-1); // InfernusBallas2
    ballascars[9]=AddStaticVehicleEx(560,1991.9883,-1141.6213,25.3315,89.6901,233,233,-1); // SultanBallas
    ballascars[10]=AddStaticVehicleEx(560,1992.1487,-1130.2668,25.3300,89.3787,233,233,-1); // SultanBallas2
    ballascars[11]=AddStaticVehicleEx(480,2005.7639,-1141.1750,25.0209,88.6317,233,233,-1); // CometBallas
    ballascars[12]=AddStaticVehicleEx(517,2008.5016,-1130.2786,25.0353,90.5387,233,233,-1); // MajesticBallas
    ballascars[13]=AddStaticVehicleEx(451,2018.7788,-1130.4905,24.5891,89.5072,233,233,-1); // TahomaBallas
    ballascars[14]=AddStaticVehicleEx(567,2014.3694,-1140.9803,24.8682,90.6045,233,233,-1); // SavannaBallas
    ballascars[15]=AddStaticVehicleEx(566,2022.5289,-1141.0352,24.5565,89.6170,233,233,-1); // TahomaBallas
    ballascars[16]=AddStaticVehicleEx(415,2026.1147,-1130.4745,24.4481,89.5987,233,233,-1); // CheetahBallas


    grovecars[0]=AddStaticVehicleEx(451,2473.2583,-1694.4656,13.2400,0.1565,86,86,-1); // NEUE GROVE CARS
    grovecars[1]=AddStaticVehicleEx(541,2473.2947,-1703.3059,13.0748,0.0540,86,86,-1); // NEUE GROVE CARS
    grovecars[2]=AddStaticVehicleEx(482,2459.6746,-1673.9707,13.5140,35.1171,86,86,-1); // NEUE GROVE CARS
    grovecars[3]=AddStaticVehicleEx(492,2460.2600,-1664.1295,13.1713,269.3049,86,86,-1); // NEUE GROVE CARS
    grovecars[4]=AddStaticVehicleEx(411,2480.2668,-1653.4987,13.1263,90.8599,86,86,-1); // NEUE GROVE CARS
    grovecars[5]=AddStaticVehicleEx(411,2486.9036,-1653.4114,13.1377,91.2914,86,86,-1); // NEUE GROVE CARS
    grovecars[6]=AddStaticVehicleEx(480,2502.9614,-1656.5347,13.2613,57.0989,86,86,-1); // NEUE GROVE CARS
    grovecars[7]=AddStaticVehicleEx(415,2507.0894,-1677.5730,13.2404,324.0849,86,86,-1); // NEUE GROVE CARS
    grovecars[8]=AddStaticVehicleEx(560,2499.1611,-1683.1373,13.0975,281.7965,86,86,-1); // NEUE GROVE CARS
    grovecars[9]=AddStaticVehicleEx(560,2492.1660,-1684.1700,13.1276,273.6986,86,86,-1); // NEUE GROVE CARS
    grovecars[10]=AddStaticVehicleEx(567,2510.5535,-1687.4958,13.4692,47.9130,86,86,-1); // NEUE GROVE CARS
    grovecars[11]=AddStaticVehicleEx(522,2515.7395,-1666.9268,13.3639,97.3516,86,86,-1); // NEUE GROVE CARS
    grovecars[12]=AddStaticVehicleEx(468,2519.4167,-1666.5616,14.1826,98.1252,86,86,-1); // NEUE GROVE CARS
    grovecars[13]=AddStaticVehicleEx(468,2519.0330,-1663.9734,13.9064,95.4827,86,86,-1); // NEUE GROVE CARS
    grovecars[14]=AddStaticVehicleEx(522,2515.3694,-1664.5391,13.2992,96.7674,86,86,-1); // NEUE GROVE CARS
    grovecars[15]=AddStaticVehicleEx(535,2468.4702,-1669.6483,13.1571,190.2437,86,86,-1); // NEUE GROVE CARS



	fscars[0] = AddStaticVehicleEx(445,1263.2448,-1795.6274,13.3110,269.4153,3,3,-1); // FAHRFS
	fscars[1] = AddStaticVehicleEx(445,1263.3678,-1800.2133,13.3047,270.6445,3,3,-1); // FAHRFS
	fscars[2] = AddStaticVehicleEx(445,1263.1033,-1804.4402,13.2867,269.5510,3,3,-1); // FAHRFS
	fscars[3] = AddStaticVehicleEx(445,1263.1484,-1809.0742,13.2964,269.5421,3,3,-1); // FAHRFS
	fscars[4] = AddStaticVehicleEx(445,1263.0479,-1813.4319,13.2942,268.2029,3,3,-1); // FAHRFS
	fscars[5] = AddStaticVehicleEx(525,1279.3492,-1834.8304,13.4539,90.2772,3,3,-1); // FAHRFS
	fscars[6] = AddStaticVehicleEx(445,1262.9385,-1817.7603,13.2450,270.3015,3,3,-1); // FAHRFS
	fscars[7] = AddStaticVehicleEx(445,1262.9637,-1821.9283,13.2833,270.3065,3,3,-1); // FAHRFS
	fscars[8] = AddStaticVehicleEx(522,1281.5190,-1800.4894,12.9598,0.2219,3,3,-1); // FSFAHRMOT
	fscars[9] = AddStaticVehicleEx(522,1279.1785,-1800.5511,12.9582,0.3022,3,3,-1); // FSFAHRMOT
	fscars[10] = AddStaticVehicleEx(522,1276.7729,-1800.6061,12.9556,0.0330,3,3,-1); // FSFAHRMOT
	fscars[11] = AddStaticVehicleEx(515,1172.8893,-1808.2694,14.0048,180.7034,3,3,-1); // fslkw
	fscars[12] = AddStaticVehicleEx(515,1181.9495,-1808.3904,14.0049,179.9298,3,3,-1); // fslkw
	fscars[13] = AddStaticVehicleEx(452,941.0000000,-2064.8999000,0.0000000,181.0000000,1,1,-1);//FS Boot
	fscars[14] = AddStaticVehicleEx(452,940.5000000,-2050.0000000,0.0000000,0.0000000,1,1,-1);//FS Boot
	fscars[15] = AddStaticVehicleEx(593,1225.2351,-1797.4314,34.1174,90.1936,3,1,-1); // fs fahr
	fscars[16] = AddStaticVehicleEx(431,1200.3561,-1831.2299,13.5042,270.4382,3,3,-1); // bus fahrschule
	fscars[17] = AddStaticVehicleEx(431,1200.3883,-1835.4598,13.5199,270.4391,3,3,-1); // bus fahrschule

    fsacars[0] = AddStaticVehicleEx(435,1172.6271,-1789.8167,14.0381,179.9523,1,1,-1); // fslkwhange
    fsacars[1] = AddStaticVehicleEx(435,1181.6830,-1791.7823,14.0243,179.5749,1,1,-1); // fslkwhanger

    lvpdcars[0] = AddStaticVehicleEx(405,2239.4507,2456.5173,3.1494,270.2650,0,0,-1); // LVPDCAR1
    lvpdcars[1] = AddStaticVehicleEx(405,2239.3254,2452.0718,3.1504,269.8009,79,1,-1); // LVPDCAR2
    lvpdcars[2] = AddStaticVehicleEx(560,2238.9485,2447.1506,2.9700,269.2279,5,5,-1); // LVPDCAR3
    lvpdcars[3] = AddStaticVehicleEx(560,2238.9812,2442.4902,2.9817,270.6428,3,3,-1); // LVPDCAR4
    lvpdcars[4] = AddStaticVehicleEx(560,2239.1768,2437.5298,3.0034,267.8893,79,1,-1); // LVPDCAR5
    lvpdcars[5] = AddStaticVehicleEx(598,2246.4360,2429.7314,3.0028,359.2801,79,1,-1); // LVPDCAR6
    lvpdcars[6] = AddStaticVehicleEx(598,2251.0259,2429.9438,3.0218,0.4150,79,1,-1); // LVPDCAR7
    lvpdcars[7] = AddStaticVehicleEx(598,2255.1829,2429.8999,3.0206,0.5584,79,1,-1); // LVPDCAR8
    lvpdcars[8] = AddStaticVehicleEx(598,2259.7000,2429.8774,3.0204,0.5520,79,1,-1); // LVPDCAR9
    lvpdcars[9] = AddStaticVehicleEx(598,2263.9941,2429.7378,3.0035,359.2305,79,1,-1); // LVPDCAR10
    lvpdcars[10] = AddStaticVehicleEx(598,2268.3118,2429.7920,3.0201,1.4199,79,1,-1); // LVPDCAR11
    lvpdcars[11] = AddStaticVehicleEx(598,2272.8186,2429.7383,3.0198,358.8412,79,1,-1); // LVPDCAR12
    lvpdcars[12] = AddStaticVehicleEx(598,2277.4490,2429.8140,3.0199,357.7484,79,1,-1); // LVPDCAR13
    lvpdcars[13] = AddStaticVehicleEx(598,2285.8835,2429.8467,3.0179,0.0355,79,1,-1); // LVPDCAR14
    lvpdcars[14] = AddStaticVehicleEx(598,2290.2632,2429.7991,3.0652,0.4543,79,1,-1); // LVPDCAR15
    lvpdcars[15] = AddStaticVehicleEx(598,2294.6782,2429.8669,3.0669,358.3740,79,1,-1); // LVPDCAR16
    lvpdcars[16] = AddStaticVehicleEx(523,2303.5640,2428.6833,2.8390,359.6427,79,1,-1); // LVPDCAR17
    lvpdcars[17] = AddStaticVehicleEx(523,2307.5439,2428.3679,2.8385,1.9826,79,1,-1); // LVPDCAR18
    lvpdcars[18] = AddStaticVehicleEx(523,2312.2839,2428.4348,2.8409,359.5007,79,1,-1); // LVPDCAR19
    lvpdcars[19] = AddStaticVehicleEx(523,2316.6831,2428.4504,2.8420,1.2779,79,1,-1); // LVPDCAR20
    lvpdcars[20] = AddStaticVehicleEx(599,2315.9824,2455.5166,3.4697,92.1749,79,1,-1); // LVPDCAR21
    lvpdcars[21] = AddStaticVehicleEx(599,2315.9844,2460.4214,3.4733,91.0241,79,1,-1); // LVPDCAR22
    lvpdcars[22] = AddStaticVehicleEx(599,2315.9434,2465.3582,3.4568,89.0088,79,1,-1); // LVPDCAR23
    lvpdcars[23] = AddStaticVehicleEx(599,2315.9250,2470.3108,3.4739,90.1439,79,1,-1); // LVPDCAR24
    lvpdcars[24] = AddStaticVehicleEx(599,2316.0222,2475.0396,3.4690,88.0988,79,1,-1); // LVPDCAR25
    lvpdcars[25] = AddStaticVehicleEx(427,2298.1360,2464.2979,3.4048,270.7071,79,1,-1); // LVPDCAR26
    lvpdcars[26] = AddStaticVehicleEx(427,2298.0464,2460.1831,3.4068,270.3262,79,1,-1); // LVPDCAR27
    lvpdcars[27] = AddStaticVehicleEx(427,2298.2336,2455.9700,3.4067,269.8926,79,1,-1); // LVPDCAR28
    lvpdcars[28] = AddStaticVehicleEx(427,2298.0234,2451.5701,3.4087,269.2323,79,1,-1); // LVPDCAR29
    lvpdcars[29] = AddStaticVehicleEx(430,961.7000100,-2064.6999500,0.0000000,180.0000000,79,1,-1);//LVPD Boot
    for(new i ; i < sizeof(lvpdcars) ; i++) {
        SetVehicleHealth(lvpdcars[i],2000.0);
    }

    aztcars[0] = AddStaticVehicleEx(522,1804.4222,-2140.7539,13.1169,88.0794,2,2,-1); // NRGA1
    aztcars[1] = AddStaticVehicleEx(522,1804.4545,-2138.8755,13.1172,89.9769,2,2,-1); // NRGA2
    aztcars[2] = AddStaticVehicleEx(468,1799.3064,-2141.4197,13.2161,355.6931,2,2,-1); // SanchezA1
    aztcars[3] = AddStaticVehicleEx(468,1800.5356,-2141.4353,13.2157,0.0592,2,2,-1); // SanchezA2
    aztcars[4] = AddStaticVehicleEx(541,1786.8893,-2118.3857,13.0903,267.9275,2,2,-1); // BulletA
    aztcars[5] = AddStaticVehicleEx(415,1787.1909,-2107.3713,13.2335,268.2321,2,2,-1); // CheetahA
    aztcars[6] = AddStaticVehicleEx(492,1773.1451,-2099.4297,13.3286,179.8169,2,2,-1); // GreenwoodA
    aztcars[7] = AddStaticVehicleEx(566,1772.2343,-2126.2988,13.3255,0.5992,2,2,-1); // TahomaA
    aztcars[8] = AddStaticVehicleEx(534,1778.8894,-2118.4307,13.1878,269.5840,2,2,-1); // RemingtonA
    aztcars[9] = AddStaticVehicleEx(451,1779.6711,-2107.3459,13.1690,269.0779,2,2,-1); // TurismoA
    aztcars[10] = AddStaticVehicleEx(567,1793.5132,-2140.4932,13.4147,359.6383,2,2,-1); // SavannaA
    aztcars[11] = AddStaticVehicleEx(567,1793.6196,-2128.4536,13.4133,359.5349,2,2,-1); // AztecasT2
    aztcars[12] = AddStaticVehicleEx(560,1810.2878,-2118.3972,13.1702,269.3692,2,2,-1); // SultanA1
    aztcars[13] = AddStaticVehicleEx(560,1801.6576,-2118.3479,13.1705,269.0801,2,2,-1); // AztecasA2
    aztcars[14] = AddStaticVehicleEx(411,1810.0449,-2107.3904,13.1889,269.4128,2,2,-1); // InfernusA1
    aztcars[15] = AddStaticVehicleEx(411,1803.5897,-2107.4424,13.1890,269.9739,2,2,-1); // InfernusA2
    aztcars[16] = AddStaticVehicleEx(480,1773.2216,-2092.1753,13.3215,179.8830,2,2,-1); // CometA



	vagoscars[0] = AddStaticVehicleEx(522,2769.0017,-1624.9568,10.4935,267.0336,6,6,-1); // NRGV
	vagoscars[1] = AddStaticVehicleEx(522,2769.0234,-1623.5334,10.4992,265.9211,6,6,-1); // NRGV2
	vagoscars[2] = AddStaticVehicleEx(468,2768.8862,-1620.2795,10.5908,267.3992,6,6,-1); // SanchezV2
	vagoscars[3] = AddStaticVehicleEx(468,2768.9001,-1621.9874,10.5962,268.7310,6,6,-1); // SanchezV1
	vagoscars[4] = AddStaticVehicleEx(482,2768.6836,-1615.3088,11.0414,267.9682,6,6,-1); // BurritoV1
	vagoscars[5] = AddStaticVehicleEx(482,2768.6824,-1606.2904,11.0390,270.4248,6,6,-1); // BurritoV2
	vagoscars[6] = AddStaticVehicleEx(411,2795.6733,-1589.1215,10.6552,268.9738,6,6,-1); // InfernusV1
	vagoscars[7] = AddStaticVehicleEx(411,2795.7666,-1584.6597,10.6555,268.8422,6,6,-1); // InfernusV2
	vagoscars[8] = AddStaticVehicleEx(492,2795.5774,-1580.2659,10.5527,269.4885,6,6,-1); // Greenwood
	vagoscars[9] = AddStaticVehicleEx(492,2795.9006,-1576.1068,10.7004,269.1242,6,6,-1); // Greenwood
	vagoscars[10] = AddStaticVehicleEx(451,2795.6626,-1571.5248,10.6215,268.3755,6,6,-1); // TurismoV
	vagoscars[11] = AddStaticVehicleEx(415,2795.6946,-1567.1765,10.6996,269.3013,6,6,-1); // CheetahV
	vagoscars[12] = AddStaticVehicleEx(560,2795.7676,-1562.8962,10.6330,270.4707,6,6,-1); // SultanV1
	vagoscars[13] = AddStaticVehicleEx(560,2795.7566,-1558.4786,10.6280,270.1499,6,6,-1); // SultanV2
	vagoscars[14] = AddStaticVehicleEx(567,2795.9907,-1553.9663,10.7906,270.0299,6,6,-1); // SavannaV
	vagoscars[15] = AddStaticVehicleEx(567,2796.1350,-1549.6545,10.7048,270.3109,6,6,-1); // TahomaV

    armycars[0] = AddStaticVehicleEx(430,951.0999800,-2064.6001000,0.0000000,180.0000000,173,173,-1);//Army Boot
    for(new i ; i < sizeof(armycars) ; i++) {
        SetVehicleHealth(armycars[i],2000.0);
    }



	outlawzscars[0] = AddStaticVehicleEx(411,-33.1031,-273.4972,5.1499,271.3550,219,219,-1); // InfernusO1
	outlawzscars[1] = AddStaticVehicleEx(411,-33.0603,-276.7014,5.1499,269.5479,219,219,-1); // InfernusO2
	outlawzscars[2] = AddStaticVehicleEx(541,-33.0257,-280.0908,5.0478,268.1004,219,219,-1); // BulletO
	outlawzscars[3] = AddStaticVehicleEx(415,-33.0528,-283.4705,5.1974,269.4584,219,219,-1); // CheetahO
	outlawzscars[4] = AddStaticVehicleEx(480,-32.8525,-290.3657,5.2008,269.5213,219,219,-1); // CometO
	outlawzscars[5] = AddStaticVehicleEx(451,-32.8009,-286.8076,5.1338,270.8159,219,219,-1); // TurismoO
	outlawzscars[6] = AddStaticVehicleEx(560,-33.0659,-297.0753,5.1347,270.5900,219,219,-1); // SultanO2
	outlawzscars[7] = AddStaticVehicleEx(560,-32.9927,-293.6271,5.1328,270.0236,219,219,-1); // SultanO2
	outlawzscars[8] = AddStaticVehicleEx(522,-53.8328,-297.3306,5.0034,178.0595,219,219,-1); // NRGO2
	outlawzscars[9] = AddStaticVehicleEx(522,-45.9062,-297.6670,4.9987,180.2963,219,219,-1); // NRGO1
	outlawzscars[10] = AddStaticVehicleEx(468,-53.8271,-293.1526,5.0971,181.0236,219,219,-1); // SanchezO2
	outlawzscars[11] = AddStaticVehicleEx(468,-45.9222,-293.2677,5.0985,180.3444,219,219,-1); // SanchezO1
	outlawzscars[12] = AddStaticVehicleEx(463,-53.8573,-289.5272,4.9701,179.8784,219,219,-1); // FreewayO2
	outlawzscars[13] = AddStaticVehicleEx(463,-45.9345,-289.3428,4.9697,177.1727,219,219,-1); // FreewayO1
	outlawzscars[14] = AddStaticVehicleEx(409,-39.7334,-300.3714,5.2297,269.4898,219,219,-1); // StretchO
	outlawzscars[15] = AddStaticVehicleEx(482,-23.1192,-271.8727,5.5486,179.3399,219,219,-1); // BurritoO
	outlawzscars[16] = AddStaticVehicleEx(579,-14.4494,-272.1361,5.3607,181.2796,219,219,-1); // HuntleyO
    for(new i=0;i<sizeof(vehicle_sanaBase);i++)
    {
        SetVehicleNumberPlate(vehicle_sanaBase[i], COLOR_HEX_BLACK"SA-NA");
        SetVehicleToRespawn(vehicle_sanaBase[i]);
        aiVehicles[vehicle_sanaBase[i]] = VEH_NEWSCARS;
    }
    for(new i=0;i<sizeof(grovecars);i++)
    {
        SetVehicleNumberPlate(grovecars[i], COLOR_HEX_BLACK"GROVE");
        SetVehicleToRespawn(grovecars[i]);
        aiVehicles[ grovecars[i] ] = VEH_GROVECARS;
    }
    for (new i = 0; i < sizeof(vehicle_pooExterior); i++)
    {
        SetVehicleNumberPlate(vehicle_pooExterior[i], COLOR_HEX_BLACK "O-AMT");
        SetVehicleToRespawn(vehicle_pooExterior[i]);
        aiVehicles[vehicle_pooExterior[i]] = VEH_OAMTCARS;
    }
    for (new i = 0; i < sizeof(vehicle_fbiExterior); i++)
    {
        SetVehicleNumberPlate(vehicle_fbiExterior[i], COLOR_HEX_BLACK"FBI");
        SetVehicleToRespawn(vehicle_fbiExterior[i]);
        aiVehicles[vehicle_fbiExterior[i]] = VEH_FBICARS;
    }
    for(new i=0;i<sizeof(ballascars);i++)
    {
        SetVehicleNumberPlate(ballascars[i], COLOR_HEX_BLACK"Ballas");
        SetVehicleToRespawn(ballascars[i]);
		aiVehicles[ ballascars[i] ] = VEH_BALLASCARS;
	}
	for(new i=0;i<sizeof(vehicle_lspdExterior);i++){

	    SetVehicleNumberPlate(vehicle_lspdExterior[i], COLOR_HEX_BLACK"LSPD");
        SetVehicleToRespawn(vehicle_lspdExterior[i]);
		aiVehicles[ vehicle_lspdExterior[i] ] = VEH_LSPDCARS;
	}
	for(new i=0;i<sizeof(vehicle_governmentExterior);i++)
	{
		SetVehicleNumberPlate(vehicle_governmentExterior[i], COLOR_HEX_BLACK"STAAT");
        SetVehicleToRespawn(vehicle_governmentExterior[i]);
		aiVehicles[ vehicle_governmentExterior[i] ] = VEH_STAATCARS;
	}
	for(new i=0;i<sizeof(vehicle_samdExterior);i++)
	{
	    SetVehicleNumberPlate(vehicle_samdExterior[i], COLOR_HEX_BLACK"SA-MD");
        SetVehicleToRespawn(vehicle_samdExterior[i]);
		aiVehicles[ vehicle_samdExterior[i] ] = VEH_SANICARS;
	}
	for(new i=0;i<sizeof(fscars);i++)
	{
		SetVehicleNumberPlate(fscars[i], COLOR_HEX_BLACK"Fahrschule");
        SetVehicleToRespawn(fscars[i]);
        aiVehicles[ fscars[i] ] = VEH_FSCARS;
    }
    for(new i=0;i<sizeof(vehicle_yakuzaExterior);i++)
    {
        SetVehicleNumberPlate(vehicle_yakuzaExterior[i], COLOR_HEX_BLACK"YAKUZA");
        SetVehicleToRespawn(vehicle_yakuzaExterior[i]);
        aiVehicles[ vehicle_yakuzaExterior[i] ] = VEH_YAKUCARS;
    }
    for(new i=0;i<sizeof(aztcars);i++)
    {
        SetVehicleNumberPlate(aztcars[i], COLOR_HEX_BLACK"AZTECAS");
        SetVehicleToRespawn(aztcars[i]);
        aiVehicles[ aztcars[i] ] = VEH_AZTCARS;
    }
    for(new i=0;i<sizeof(vehicle_lcnExterior);i++)
    {
        SetVehicleNumberPlate(vehicle_lcnExterior[i], COLOR_HEX_BLACK"LCN");
        SetVehicleToRespawn(vehicle_lcnExterior[i]);
        aiVehicles[ vehicle_lcnExterior[i] ] = VEH_LCNCARS;
    }
    for(new i=0;i<sizeof(vagoscars);i++)
    {
        SetVehicleNumberPlate(vagoscars[i], COLOR_HEX_BLACK"VAGOS");
        SetVehicleToRespawn(vagoscars[i]);
        aiVehicles[ vagoscars[i] ] = VEH_VAGOSCARS;
    }
    for(new i=0;i<sizeof(vehicle_hitmanBase);i++)
    {
        SetVehicleNumberPlate(vehicle_hitmanBase[i], COLOR_HEX_BLACK"LS-1920");
        SetVehicleToRespawn(vehicle_hitmanBase[i]);
        aiVehicles[ vehicle_hitmanBase[i] ] = VEH_HITMANC;
    }
    for(new i=0;i<sizeof(vehicle_nineDemonsBase);i++)
    {
        SetVehicleNumberPlate(vehicle_nineDemonsBase[i], COLOR_HEX_BLACK"NINEDEMONS");
        SetVehicleToRespawn(vehicle_nineDemonsBase[i]);
        aiVehicles[ vehicle_nineDemonsBase[i] ] = VEH_BIKERCARS;
    }
    for(new i=0;i<sizeof(lvpdcars);i++)
    {
        SetVehicleNumberPlate(lvpdcars[i], COLOR_HEX_BLACK"LVPD");
        SetVehicleToRespawn(lvpdcars[i]);
        aiVehicles[ lvpdcars[i] ] = VEH_LVPDCARS;
    }
    for(new i=0;i<sizeof(vehicle_wheelmanBase);i++)
    {
        SetVehicleNumberPlate(vehicle_wheelmanBase[i], COLOR_HEX_BLACK"WHEELMAN");
        SetVehicleToRespawn(vehicle_wheelmanBase[i]);
        aiVehicles[ vehicle_wheelmanBase[i] ] = VEH_WHEELCARS;
    }
    for(new i=0;i<sizeof(armycars);i++)
    {
        SetVehicleNumberPlate(armycars[i], COLOR_HEX_BLACK"ARMY");
        SetVehicleToRespawn(armycars[i]);
        aiVehicles[ armycars[i] ] = VEH_ARMYCARS;
    }
    for(new i=0;i<sizeof(vehicle_triadsExterior);i++)
    {
        SetVehicleNumberPlate(vehicle_triadsExterior[i], COLOR_HEX_BLACK"TRIADEN");
        SetVehicleToRespawn(vehicle_triadsExterior[i]);
        aiVehicles[ vehicle_triadsExterior[i] ] = VEH_TRIADENCARS;
    }
    for(new i=0;i<sizeof(outlawzscars);i++)
    {
        SetVehicleNumberPlate(outlawzscars[i], COLOR_HEX_BLACK"OUTLAWZ");
        SetVehicleToRespawn(outlawzscars[i]);
        aiVehicles[ outlawzscars[i] ] = VEH_OUTLAWZSCARS;
    }
    for(new i=0;i<sizeof(zollcars);i++)
    {
        SetVehicleNumberPlate(zollcars[i], COLOR_HEX_BLACK"ZOLLAMT");
        SetVehicleToRespawn(zollcars[i]);
		aiVehicles[ zollcars[i] ] = VEH_ZOLLCARS;
	}
	for(new i=0;i<sizeof(vehicle_terrorBase);i++)
	{
		SetVehicleNumberPlate(vehicle_terrorBase[i], COLOR_HEX_BLACK"SF-8473");
        SetVehicleToRespawn(vehicle_terrorBase[i]);
		aiVehicles[ vehicle_terrorBase[i] ] = VEH_TERRORCARS;
	}

    ASKDraw = TextDrawCreate(514.000000, 125.000000, "Anti-Spawn-Kill");
    TextDrawBackgroundColor(ASKDraw, 255);
    TextDrawFont(ASKDraw, 2);
    TextDrawLetterSize(ASKDraw, 0.230000, 1.000000);
    TextDrawColor(ASKDraw, -65281);
    TextDrawSetOutline(ASKDraw, 1);
    TextDrawSetProportional(ASKDraw, 1);

    UhrMessage = TextDrawCreate(547.000000,28.000000, "23:49");
    TextDrawBackgroundColor(UhrMessage, 255);
    TextDrawFont(UhrMessage, 3);
    TextDrawLetterSize(UhrMessage, 0.399999,1.600000);
    TextDrawColor(UhrMessage, -1);
    TextDrawSetOutline(UhrMessage, 1);
    TextDrawSetProportional(UhrMessage, 1);

    DatumMessage = TextDrawCreate(547.000000,11.000000, "--");
    TextDrawBackgroundColor(DatumMessage, 255);
    TextDrawFont(DatumMessage,3);
    TextDrawLetterSize(DatumMessage,0.399999,1.600000);
    TextDrawColor(DatumMessage, -1);
    TextDrawSetOutline(DatumMessage, 1);
    TextDrawSetProportional(DatumMessage, 1);

    /*Logo1 = TextDrawCreate(557.000000, 16.000000, "ROLEPLAY");
    TextDrawBackgroundColor(Logo1, 255);
    TextDrawFont(Logo1, 3);
    TextDrawLetterSize(Logo1, 0.280000, 1.699998);
    TextDrawColor(Logo1, 869072895);
    TextDrawSetOutline(Logo1, 1);
    TextDrawSetProportional(Logo1, 1);

    Logo2 = TextDrawCreate(554.000000, 5.000000, "LYD");
    TextDrawBackgroundColor(Logo2, 255);
    TextDrawFont(Logo2, 0);
    TextDrawLetterSize(Logo2, 0.479999, 1.699998);
    TextDrawColor(Logo2, -1);
    TextDrawSetOutline(Logo2, 1);
    TextDrawSetProportional(Logo2, 1);*/

    URL = TextDrawCreate(26.000000, 430.000000, "~g~Forum: ~w~www.LyD-Roleplay.de");
    TextDrawBackgroundColor(URL, 255);
    TextDrawFont(URL, 2);
    TextDrawLetterSize(URL, 0.280000, 1.000000);
    TextDrawColor(URL, -1);
    TextDrawSetOutline(URL, 1);
    TextDrawSetProportional(URL, 1);
    for(new a=0;a<sizeof(Kaufliste);a++)
    {
        Kaufliste[a][Carid] = CreateVehicle(Kaufliste[a][Modelid],Kaufliste[a][CarPos_x], Kaufliste[a][CarPos_y], Kaufliste[a][CarPos_z], Kaufliste[a][CarRotate], -1, -1, 20);
        aiVehicles[ Kaufliste[a][Carid] ] = VEH_KAUFLISTE;
    }

    Leer = TextDrawCreate(490.000000, 340.000000, "Animation Abbrechen:~r~ Enter");
    TextDrawBackgroundColor(Leer, 255);
    TextDrawFont(Leer, 2);
    TextDrawLetterSize(Leer, 0.200000, 1.000000);
    TextDrawColor(Leer, -1);
    TextDrawSetOutline(Leer, 1);
    TextDrawSetProportional(Leer, 1);

    TazerBox = TextDrawCreate(650.000000, 0.000000, "_");
    TextDrawBackgroundColor(TazerBox, 255);
    TextDrawFont(TazerBox, 1);
    TextDrawLetterSize(TazerBox, 0.500000, 50.000000);
    TextDrawColor(TazerBox, -1);
    TextDrawSetOutline(TazerBox, 0);
    TextDrawSetProportional(TazerBox, 1);
    TextDrawSetShadow(TazerBox, 1);
    TextDrawUseBox(TazerBox, 1);
    TextDrawBoxColor(TazerBox, -156);
    TextDrawTextSize(TazerBox, -20.000000, 11.000000);




    KillTimer(gmxtimer);
    GMXMode = 0;
    GCOff = 0;
    automsg = 0;

	/*CreateDynamicPickup(19346, 23, 1782.0698,-2087.7612,13.5469, 0);//Bratwurst
	Create3DTextLabel(COLOR_HEX_GREEN"Bratwurst Tag, 29.07.2015\n"COLOR_HEX_RED"Mach ein Screen und poste es!", COLOR_WHITE, 1782.0698,-2087.7612,13.5469, 10.0, 0,0);*/

	CreateDynamicPickup(19197, 1, 377.213928, -192.850128, 1000.640100, 0, 17);//Donatladen exit
	CreateDynamicPickup(19197, 1, 1038.3171,-1339.7793,13.7266, 0);//Donatladen enter
	CreateDynamicPickup(19197, 1,  2305.8259,-16.1325,26.7496, 0);//KFZ-AMT Außen
	CreateDynamicPickup(19197, 1,  264.3734,191.1904,1008.1719,0);//FBI Innen

	CreateDynamicPickup(1318, 1, 2127.5486,2378.9626,10.8203, 0);//Clubmitglied enter in Las Venturas

	CreateDynamicPickup(1318, 1, -2636.6230,1403.3202,906.4609, 0);//Ausgangclub in Las Venturas

	CreateDynamicPickup(1318, 1, 2169.8208,1618.7504,999.9766, 39);//Paintball Ausgang in INT 1
	CreateDynamicPickup(19197, 1, 1571.2114,-1336.6027,16.4844, 0);//Startower unten
	CreateDynamicPickup(19197, 1, 1571.2114,-1336.6027,16.4844, 0);//Startower oben
	// CreateDynamicPickup(19197, 1, 2870.8152,1906.2897,11.5510, 0);//Hochsicherheitstrakt außen
	// CreateDynamicPickup(19197, 1, 2870.9697,1902.6180,11.5510, 0);//Hochsicherheitstrakt innen
	CreateDynamicPickup(19197, 1,  1726.6801,-1638.5601,20.2233, 0);//In Hotel ausgang
	CreateDynamicPickup(19197, 1, 315.8161,-143.5091,999.6016,0);//Army Innen
	CreateDynamicPickup(19197, 1, -1366.4780,500.7095,11.1953,0 );//Army Außen
	CreateDynamicPickup(19197, 1, 1216.5732,-1812.2876,16.5938, 0);//Fahrschule Interior enter
	CreateDynamicPickup(19197, 1, -2029.8124,-119.0646,1035.1719, 0);//Fahrschule Interior Ausgang
	CreateDynamicPickup(19197, 1, -2026.8407,-104.1143,1035.1719, 0);//Fahrschule Waffen  enter
	CreateDynamicPickup(19197, 1, 305.3869,-158.9812,999.5938, 0);//Fahrschule Waffen  exit
	CreateDynamicPickup(19197, 1, 1221.9672,-1812.2772,16.5938, 0);//Fahrschule Flugschein enter
	CreateDynamicPickup(19197, 1, 1234.1289,-1784.0337,33.6312, 0);//Fahrschule Flugschein  exit
	CreateDynamicPickup(19197, 1, 627.5951,-571.8589,17.6345, -1);//Zollamt enter
	CreateDynamicPickup(19197, 1, 322.2221,302.7604,999.1484, -1);//Zollamt  exit

	CreateDynamicPickup(18635, 1, -382.0342,-1426.4521,26.0822, 0);//zerbrechen
	// CreateDynamicPickup(18635, 1, -1632.7894,-2239.3267,31.4766, 0);//Wheelman befreien
	CreateDynamicPickup(19197, 1, 285.79,-85.8,1001.52, 1);//Ausgang Ammu LS
	CreateDynamicPickup(19197, 1, 316.42,-169.41,999.59, 40);//Ausgang Ammu LS Ballas
	CreateDynamicPickup(19197, 1, 286.14,-40.63,1001.52, 53);//Ausgang Ammu LV


	//Info Position

	CreateDynamicPickup(1239, 1, 822.3183,1.8747,1004.1797, -1);//Posthaus /Post
	CreateDynamicPickup(1239, 1, 2316.4529,-12.6540,26.7422, VW_REGISTRATIONOFFICE);//KFZ Schalter 1
	CreateDynamicPickup(1239, 1, 2316.3318,-9.9532,26.7422, VW_REGISTRATIONOFFICE);//KFZ Schalter 2
	CreateDynamicPickup(1239, 1,  -2158.7920,642.9232,1052.3750, 0);//Clubzeichen
	CreateDynamicPickup(1247, 1,  2268.1128,2448.0073,3.5313, 0);//Arrest Point LV

	CreateDynamicPickup(1239, 1, -2656.1047,1416.0248,906.2734, 0);//Waffenshop Club in Las Venturas

    CreateDynamicPickup(1240, 1, -2653.5183,1413.5085,906.2734, 0);//Heal Club in Las Venturas
   	CreateDynamicPickup(1239, 1, -1857.4130,-1618.9630,21.9022, 0);//Unloadpunkt Waffendealer
	CreateDynamicPickup(1239, 1, -258.9534,-2181.9905,29.0150, 0);//Unloadpunkt Drogendealer

	CreateDynamicPickup(1318, 1, -1548.0554,125.1203,3.5547, 0);//Autodieb kran
	CreateDynamicPickup(1239, 1, 1412.1915,-1700.3817,13.5395, 0);//Werbeagentur LS
	CreateDynamicPickup(1239, 1, 2008.1722,1169.3364,10.8203, 0);//Werbeagentur LV
	CreateDynamicPickup(1239, 1, 2160.4111,-98.0815,2.8239, 0);//Gangjail Point
	CreateDynamicPickup(1239, 1, 1234.3380,-1823.9462,13.5909, 0);//Auto. Fahrschule
	CreateDynamicPickup(1239, 1,  1248.3843,-1833.8750,13.3930, 0);//Staatsrepair von Army
	CreateDynamicPickup(1239, 1, 1138.9730,-1820.9103,33.6354, 0);//Staatsrepairfür Fahrschule Helikopterplatz

	CreateDynamicPickup(1242, 1, 326.8095,308.8015,999.1484, 0);//Zollamt Waffenspint

   	CreateDynamicPickup(1239, 1, 2041.3099,-1408.8322,17.1641, 0);//Zollamt oben
	CreateDynamicPickup(1239, 1, 610.4565,-583.6769,18.1342, 0);//Zollamt unten
	CreateDynamicPickup(3798, 1, 2571.6233,-2226.6980,13.3550, 0);//Warenkauf LS
	CreateDynamicPickup(3798, 1, 2187.6926,-2263.8967,13.4674, 0);//Warenkauf LS
	CreateDynamicPickup(3798, 1, -1034.6223,-626.2365,32.0078, 0);//Spritkauf LS
	CreateDynamicPickup(3798, 1, 2482.8813,-2084.2239,13.5469, 0);//Spritkauf LS
	CreateDynamicPickup(1299, 1, 577.4390,1221.7273,11.2689, 0);//Loadware in LV
	CreateDynamicPickup(1650, 1, 268.9609,1384.2981,10.1610, 0);//Loadbenzin in LV

	//Fraktionssafebox
	CreateDynamicPickup(1279, 1,  333.7054,1121.7754,1083.8903, 0);//Fsavebox Ballas
	CreateDynamicPickup(1279, 1,  2498.2847,-1710.8126,1014.7422, 0);//Fsavebox Grove Street

	CreateDynamicPickup(1279, 1, 505.9030,-79.8864,998.9609, 0);//Fsavebox Aztecas
	CreateDynamicPickup(1279, 1, -2170.3828,635.3927,1052.3750, 0);//Fsavebox Outlawz
	CreateDynamicPickup(1279, 1, 2811.7188,-1165.9420,1025.5703, 0);//Fsavebox Vagos

	//Duty und Spawn Points
	CreateDynamicPickup(1240, 1, 331.0788,1128.5469,1083.8828, 0);//Ballas Herz
	CreateDynamicPickup(1240, 1,  2496.0542,-1709.4050,1014.7422, 0);//Grove Herz
	CreateDynamicPickup(1240, 1,  2807.4153,-1165.1274,1025.5703, 0);//Vagos
	CreateDynamicPickup(1240, 1,  508.3369,-84.9195,998.9609, 0);//Aztecas
	CreateDynamicPickup(1240, 1, 902.5193,-1277.1499,14.5935, 0);//O-Amt /dienst
	CreateDynamicPickup(1240, 1,  -2033.1216,-117.4597,1035.1719, 0);//Dienst Fahrschule
	CreateDynamicPickup(1240, 1,  2280.1423,2423.6230,3.4766,0);//LVPD Duty
	CreateDynamicPickup(1240, 1,  309.2354,-135.8690,999.6016,0);//Army Duty

	CreateDynamicPickup(1240, 1, -2170.3818,641.4621,1052.3817, 0);//OUTLAWZS
	CreateDynamicPickup(1240, 1, 326.7928,307.7375,999.1484,-1);//Zollamt Duty

	//Gang Interior Eingang
	CreateDynamicPickup(19197, 1,  1999.9869,-1114.0542,27.1250, 0);//Ballas Eingang
	CreateDynamicPickup(19197, 1, 2495.3547,-1690.6273,14.7656, 0);//Grove Eingang
	CreateDynamicPickup(19197, 1, 1804.1870,-2124.9021,13.9424, 0);//Aztecas Eingang
	CreateDynamicPickup(19197, 1, -49.8745,-269.3627,6.6332, 0);//Outlawz Eingang
	CreateDynamicPickup(19197, 1, 2770.6990,-1628.7225,12.1775, 0);//Vagos Eingang

	//Fraktions Skinpoints
	CreateDynamicPickup(1275, 1,  2284.2014,2423.4590,3.4766, 0);//LVPD Skin
	//CreateDynamicPickup(1275, 1, 1213.5494,-1812.7568,16.5938, 0);//Fahrschulskin
	CreateDynamicPickup(1275, 1, 814.9228,-1234.5846,14.9359, 0);//Oamtskin
	CreateDynamicPickup(1275, 1,  307.6244,-131.3671,999.6083, 0);//Army Skin'
	CreateDynamicPickup(1275, 1, 326.9853,306.7588,999.1484, -1);//Zollamt Skin

	//Waffenlager Gang
	CreateDynamicPickup(1254, 1, 331.9387,1119.7072,1083.8903, 0);//Ballas Waffenlager
	CreateDynamicPickup(1254, 1, 2491.1003,-1699.9390,1014.7416, 0);//Grove Waffenlager
	CreateDynamicPickup(1254, 1,  506.0543,-81.1208,998.9609, 0);//Aztecas Waffenlager
	CreateDynamicPickup(1254, 1,  2809.7944,-1171.9598,1025.5703, 0);//Vagos Waffenlager
	CreateDynamicPickup(1254, 1, -2165.1348,644.2082,1052.3750, 0);//Outlawz Waffenlager

	//Fahrtticket
	CreateDynamicPickup(1274, 1, 374.6658,-2121.6416,7.8820, 0);//Fallturm
	CreateDynamicPickup(1274, 1, 373.8057,-2056.3586,7.9260, 0);//Autossooter
	CreateDynamicPickup(1274, 1, 356.7114,-2149.5613,7.8779, 0);//Breakdancer
	CreateDynamicPickup(1274, 1, 382.0282,-2165.8818,7.8511, 0);//Schiff
	CreateDynamicPickup(1274, 1,  396.3516,-2152.5928,7.8399, 0);//Wasserbahn
	CreateDynamicPickup(19197, 1, 361.7136,-2107.5913,7.8340, 0);//Springbrett unten
	CreateDynamicPickup(19197, 1, 359.5758,-2107.5520,74.8357, 0);//Springbrett oben

	//Gangitem Points
	CreateDynamicPickup(1275, 1,  2491.7261,-1701.2618,1018.3438, 0);//GS Skin
	CreateDynamicPickup(1275, 1, 308.2954,1120.7721,1083.8828, 0);//BALLAS Skin
	CreateDynamicPickup(1275, 1, 1798.4584,-2124.5525,13.5469, 0);//AZTECAS Skin
	CreateDynamicPickup(1275, 1, 2805.5723,-1170.7960,1025.5703, 0);//VAGOS Skin
	CreateDynamicPickup(1275, 1, -2159.0173,640.3590,1052.3817, 0);//OUTLAWZ

	//Job Skinpoints
	CreateDynamicPickup(1275, 1,-90.4999,-10.3628,3.1094, 0);//Bauer
	CreateDynamicPickup(1275,  1,2046.2723,-1913.2064,13.5469, 0);//Straßenreiniger
	CreateDynamicPickup(1275, 1,2118.6157,-2085.0828,13.5544, 0);//Müllmann

	CreateDynamicPickup(1275, 1,831.2045,865.6005,12.5911, 0);//Bauarbeiter
	CreateDynamicPickup(1275,  1,1551.5492,-1005.0830,24.0781, 0);//Geldtransportfahrer
	CreateDynamicPickup(1275, 1,1021.9334,-1371.0099,13.5585, 0);//Eisverkäufer
	CreateDynamicPickup(1275, 1,2117.3662,-1790.0100,13.5547, 0);//Pizzalieferrant
	CreateDynamicPickup(1275,  1,2417.1555,-1220.1472,25.3914, 0);//Hure
	CreateDynamicPickup(1275, 1,1735.0045,-1944.0450,13.5681, 0);//Zugfahrer
	CreateDynamicPickup(1275, 1,2384.0181,-1915.5509,13.5469, 0);//Hotdog

	CreateDynamicPickup(1275, 1,980.6174,-933.2461,41.3419, 0);//Mechaniker
	CreateDynamicPickup(1275, 1,1945.9237,-1793.6355,13.5469, 0);//Mechaniker
	CreateDynamicPickup(1275, 1,662.6830,-579.0665,16.3359, 0);//Mechaniker
	CreateDynamicPickup(1275, 1,-93.9144,-1196.9713,2.4775, 0);//Mechaniker

	//Verkaufspoints

	CreateDynamicPickup(19627, 1, 1782.8275,-1702.7240,13.5096,0);//Tuningabbaue für Autos und Motorräder
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,2);//BSN (BS 1)
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,3);//Cluckin Bell 1
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,4);//BSS (BS 2)
	CreateDynamicPickup(1240, 1, 375.5368,-119.2299,1001.4995,6);//Pizza Stack 1
	CreateDynamicPickup(1240, 1, 375.5368,-119.2299,1001.4995,7);//Pizza Stack 2
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,8);//BS 3
	CreateDynamicPickup(1240, 1, 375.5368,-119.2299,1001.4995,9);//Pizza Stack 3
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,10);//BS 4
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,11);//BS 5
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,12);//Cluckin Bell 2
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,13);//Cluckin Bell 3
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,14);//Cluckin Bell 4
	CreateDynamicPickup(1240, 1, 375.5368,-119.2299,1001.4995,15);//Pizza Stack 4
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,16);//BS 6
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,17);//BS 7
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,18);//Cluckin Bell 5
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,20);//Cluckin Bell 6
	CreateDynamicPickup(1240, 1, 375.5368,-119.2299,1001.4995,21);//Pizza Stack 5
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,25);//Cluckin Bell 7
	CreateDynamicPickup(1240, 1, 369.8342,-6.2002,1001.8589,29);//Cluckin Bell 8
	CreateDynamicPickup(1240, 1, 375.5368,-119.2299,1001.4995,30);//Pizza Stack 6
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,31);//BS 8
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 22);//24/7-1
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 23);//24/7-2
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 24);//24/7-3
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 26);//24/7-4
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 27);//24/7-5
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 28);//24/7-6
	CreateDynamicPickup(1239, 1, 296.4476,-37.9833,1001.5156, 53);//Ammu LV
	CreateDynamicPickup(1239, 1, 312.1370,-165.9137,999.6010, 40);//Ammu LS Ballas
	CreateDynamicPickup(1239, 1, 295.5200,-80.3668,1001.5156, 1);//Ammu LS
	CreateDynamicPickup(1239, 1, 206.3740,-8.2494,1001.2109, 36);//Victim LS (Strand)
	CreateDynamicPickup(1239, 1, 161.4726,-83.2517,1001.8047, 35);//ZIP LS (Bank)
	CreateDynamicPickup(1239, 1, 207.7187,-100.5032,1005.2578, 37);//Binco (GS)
	CreateDynamicPickup(1239, 1,  1702.9427,-1470.3704,13.5469, 0);//Motorradfärbe point
	CreateDynamicPickup(1239, 1, 1763.4915,2080.2959,10.8203, 0);//Autofärbe point
	CreateDynamicPickup(1239, 1,  -2653.6023,1407.0844,906.2734, 0);//Getränke Clubvilla in Las Venturas
	CreateDynamicPickup(1239, 1,  2309.3276,-8.2968,26.7422, VW_REGISTRATIONOFFICE);//kfzversicherung
	//CreateDynamicPickup(1239, 1, 1455.8802,-1741.8704,13.5469, 0);//Getraenk

	//CreateDynamicPickup(1239, 1, 1151.7448,-1203.0283,19.5159, 0);//Peilsender Verkauf


	//Jobpoints
	//CreateDynamicPickup(1279, 1, 645.3646,-521.5663,16.3359, 0);//Geld  entladen
	CreateDynamicPickup(1279, 1, 635.8752,862.5970,-42.6892, 0);//Steine laden
	CreateDynamicPickup(1279, 1, 607.7939,863.4465,-42.0452, 0);//Steine laden
	CreateDynamicPickup(1279, 1, 382.3929,871.6203,21.9523, 0);//steine entladen
	CreateDynamicPickup(1279, 1, -85.5813,2.2551,3.1172, 0);//Spice Drogenfarm  Punkt 1
	CreateDynamicPickup(1279, 1, 797.5535, -617.8438, 16.3359, 0);//Spice Drogenfarm Punkt 2
	CreateDynamicPickup(1279, 1, 760.4858, 378.9008, 23.1683, 0);//Spice Drogenfarm Punkt 3


	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 2288.5466,2444.9841,3.2734, 10.0);
	// CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 621.3207,-584.6555,17.2330, 10.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 1248.3843,-1833.8750,13.3930, 10.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 1138.9730,-1820.9103,33.6354, 10.0);


	//Fahrtticket 3D Text
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Fallturm\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 374.6658,-2121.6416,7.8820, 10.0);//Fallturm
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Autosscooter\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 373.8057,-2056.3586,7.9260, 10.0);//Autosscooter
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft:  Breakdancer\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 356.7114,-2149.5613,7.8779, 10.0);//Breakdancer
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Schaukelschiff\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 382.0282,-2165.8818,7.8511, 10.0);//Schaukelschiff
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Wasserbahn\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 396.3516,-2152.5928,7.8399, 10.0);//Wasserbahn
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Sprungturm\n"COLOR_HEX_BLUE"Drück 'Enter'\n", COLOR_WHITE, 361.7136,-2107.5913,7.8340, 10.0);//Sprungbrett

    //Job Skin 3D Text
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Bauern\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, -90.4999,-10.3628,3.1094, 25.0);//BAUER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Straßenreiniger\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2046.2723,-1913.2064,13.5469, 25.0);//STRAßENREINIGER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Müllmann\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2118.6157,-2085.0828,13.5544, 25.0);//MÜLLMANN
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 831.2045,865.6005,12.5911, 25.0);//BAUARBEITER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Geldtransportfahrer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1551.5492,-1005.0830,24.0781, 25.0);//GELDTRANSPORTFAHRER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Eisverkäufer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1021.9334,-1371.0099,13.5585, 25.0);//EISVERKÄUFER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Pizzalieferrant\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2117.3662,-1790.0100,13.5547, 25.0);//PIZZALIEGERRANT
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Prostituierte\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2417.1555,-1220.1472,25.3914, 25.0);//HURE
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Zugfahrer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1735.0045,-1944.0450,13.5681, 25.0);//ZUFAHRER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Hotdog Verkäufer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2384.0181,-1915.5509,13.5469, 25.0);//Hotdog
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 980.6174,-933.2461,41.3419, 25.0);//MECHANIKER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1945.9237,-1793.6355,13.5469, 25.0);//MECHANIKER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 662.6830,-579.0665,16.3359, 25.0);//MECHANIKER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, -93.9144,-1196.9713,2.4775, 25.0);//MECHANIKER

    //Gang Interior Eingang

	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Territorium der\n"COLOR_HEX_PINK"BALLAS", COLOR_WHITE, 1999.9869,-1114.0542,27.1250, 25.0);//Ballas
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Territorium der\n"COLOR_HEX_GREEN"GROVE STREET", COLOR_WHITE, 2495.3547,-1690.6273,14.7656, 25.0);//Grove
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Territorium der\n"COLOR_HEX_LIGHTBLUE"AZTECAS", COLOR_WHITE, 1804.1870,-2124.9021,13.9424, 25.0);//Aztecas
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Territorium der\n"COLOR_HEX_ORANGE"OUTLAWZ", COLOR_WHITE, -49.8745,-269.3627,6.6332, 25.0);//OUTLAWZ
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Territorium der\n"COLOR_HEX_YELLOW"VAGOS", COLOR_WHITE, 2770.6990,-1628.7225,12.1775, 25.0);//VAGOS

   	//Gangshop 3D Text

    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"GroveStreet - Gangshop\n"COLOR_HEX_WHITE"Tippe /Gangitem", COLOR_WHITE, 2491.7261,-1701.2618,1018.3438, 15.0);//GS
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Ballas - Gangshop\n"COLOR_HEX_WHITE"Tippe /Gangitem", COLOR_WHITE,308.2954,1120.7721,1083.8828, 15.0);//BALLAS
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Vagos - Gangshop\n"COLOR_HEX_WHITE"Tippe /Gangitem", COLOR_WHITE, 2805.5723,-1170.7960,1025.5703, 15.0, .worldid = 6);//VAGOS
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Aztecas - Gangshop\n"COLOR_HEX_WHITE"Tippe /Gangitem", COLOR_WHITE, 1798.4584,-2124.5525,13.5469, 15.0);//AZTECAS
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"OutlawZ - Gangshop\n"COLOR_HEX_WHITE"Tippe /Gangitem", COLOR_WHITE, -2159.0173,640.3590,1052.3817, 15.0);//outlawzs

	//Gangwaffenlager 3D Text
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Ballas - Waffenlager\n"COLOR_HEX_WHITE"Tippe /Waffenlager", COLOR_WHITE, 331.9387,1119.7072,1083.8903, 15.0);//Waffenlager
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"GroveStreet - Waffenlager\n"COLOR_HEX_WHITE"Tippe /Waffenlager", COLOR_WHITE, 2491.1003,-1699.9390,1014.7416, 15.0);//Waffenlager
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Aztecas - Waffenlager\n"COLOR_HEX_WHITE"Tippe /Waffenlager", COLOR_WHITE, 506.0543,-81.1208,998.9609, 15.0);//Waffenlager
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Vagos - Waffenlager\n"COLOR_HEX_WHITE"Tippe /Waffenlager", COLOR_WHITE, 2809.7944,-1171.9598,1025.5703, 15.0);//Waffenlager
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"OutlawZ - Waffenlager\n"COLOR_HEX_WHITE"Tippe /Waffenlager", COLOR_WHITE, -2165.1348,644.2082,1052.3750, 15.0);//Waffenlager


    //Job 3D Text
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Steineladen", COLOR_WHITE, 635.8752,862.5970,-42.6892, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Steineladen", COLOR_WHITE, 607.7939,863.4465,-42.0452, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Steineentladen", COLOR_WHITE, 382.3929,871.6203,21.9523, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Spice Drogensamen\n"COLOR_HEX_WHITE"Tippe /Getsamen", COLOR_WHITE, -85.5813,2.2551,3.1172, 15.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Spice Drogensamen\n"COLOR_HEX_WHITE"Tippe /Getsamen", COLOR_WHITE, 797.5535, -617.8438, 16.3359, 15.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Spice Drogensamen\n"COLOR_HEX_WHITE"Tippe /Getsamen", COLOR_WHITE, 760.4858, 378.9008, 23.1683, 15.0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waren-Vergabe Las Venturas\n"COLOR_HEX_WHITE"Tippe /Loadwaren", COLOR_WHITE, 577.4390,1221.7273,11.2689, 20.0);//Loadware in LV
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Öl-Raffinerie Las Venturas\n"COLOR_HEX_WHITE"Tippe /Loadbenzin", COLOR_WHITE, 268.9609,1384.2981,10.1610, 20.0);//Loadbenzin in LV

    //Spawn 3D Text
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Grove Street Spawn\n"COLOR_HEX_WHITE"Tippe /Gangwaffen zum Ausrüsten\nTippe /Gheilen zum heilen", COLOR_WHITE, 2496.0542,-1709.4050,1014.7422, 15.0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Ballas Spawn\n"COLOR_HEX_WHITE"Tippe /Gangwaffen zum Ausrüsten\nTippe /Gheilen zum heilen", COLOR_WHITE, 331.0788,1128.5469,1083.8828, 15.0, .worldid = 0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Vagos Spawn\n"COLOR_HEX_WHITE"Tippe /Gangwaffen zum Ausrüsten\nTippe /Gheilen zum heilen", COLOR_WHITE, 2807.4153,-1165.1274,1025.5703, 15.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Aztecas Spawn\n"COLOR_HEX_WHITE"Tippe /Gangwaffen zum Ausrüsten\nTippe /Gheilen zum heilen", COLOR_WHITE, 508.3369,-84.9195,998.9609, 15.0);

	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Staat Dienst\n"COLOR_HEX_WHITE"Tippe /Dienst um in den Dienst zu gehen", COLOR_WHITE, 350.0831,160.1326,1025.7891, 15.0 , .worldid = 1);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"OutlawZ Spawn\n"COLOR_HEX_WHITE"Tippe /Gangwaffen zum Ausrüsten\nTippe /Gheilen zum heilen", COLOR_WHITE, -2170.3818,641.4621,1052.3817, 15.0);

	//3D Gebäude mit Enter betreten
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Fahrschule\n"COLOR_HEX_WHITE"Gebäude betreten mit 'Enter'", COLOR_WHITE, 1216.5732,-1812.2876,16.5938, 20.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Paintball - Anlage\n"COLOR_HEX_WHITE"Gebäude betreten mit 'Enter'", COLOR_WHITE, 1738.5869,-1586.3961,13.5555, 8.0);
    // CreateDynamic3DTextLabel("Paintball - 1v1\n" COLOR_HEX_WHITE "Benutze /Paintball", COLOR_BLUE, 1735.9580, -1582.5923, 14.1573, 8.0);

	//Fraktionssafebox 3d Text
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Safebox der Ballas\n"COLOR_HEX_WHITE"Tippe /FSafebox", COLOR_WHITE, 333.7054,1121.7754,1083.8903, 8.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Safebox der Grove Street\n"COLOR_HEX_WHITE"Tippe /FSafebox", COLOR_WHITE, 2498.2847,-1710.8126,1014.7422, 8.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Safebox der Aztecas\n"COLOR_HEX_WHITE"Tippe /FSafebox", COLOR_WHITE, 505.9030,-79.8864,998.9609, 8.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Safebox der Vagos\n"COLOR_HEX_WHITE"Tippe /FSafebox", COLOR_WHITE, 2811.7188,-1165.9420,1025.5703, 8.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Safebox der OutlawZ\n"COLOR_HEX_WHITE"Tippe /FSafebox", COLOR_WHITE, -2170.3828,635.3927,1052.3750, 8.0);

	//3D Infotext
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"SERVER - EXPERTE\nFreischalten mit:"COLOR_HEX_WHITE"/Experte", COLOR_WHITE, 814.4642,-1345.7327,13.5320, 15.0);
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"OSTER-AKTION im LyD-Shop\n"COLOR_HEX_GREEN"Es erwarten dich tolle Preise!\n"COLOR_HEX_WHITE"Weitere Informationen im Forum!", COLOR_WHITE, 1480.9296,-1613.7988,14.0979, 25.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"POSTHAUS - Eingang\n"COLOR_HEX_WHITE"Betreten mit 'Enter'", COLOR_WHITE, 914.3174,-1004.0942,37.9902, 25.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"POSTHAUS\n"COLOR_HEX_WHITE"Tippe /Post", COLOR_WHITE, 822.3183,1.8747,1004.1797, 15.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Schmied (Befreit von Handschellen)\n"COLOR_HEX_WHITE"Tippe /Zerbrechen\n"COLOR_HEX_ORANGE"Preis: 500$", COLOR_WHITE, -382.0342,-1426.4521,26.0822, 25.0);
	CreateDynamic3DTextLabel(COLOR_HEX_GREENA"Werbeagentur\n"COLOR_HEX_WHITE"Tippe /Werbung", COLOR_WHITE, 1412.1915,-1700.3817,13.5395, 15.0); //in LS
	CreateDynamic3DTextLabel(COLOR_HEX_GREENA"Werbeagentur\n"COLOR_HEX_WHITE"Tippe /Werbung", COLOR_WHITE, 2008.1722,1169.3364,10.8203, 15.0); // in LV
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Motorradlackiererei\n"COLOR_HEX_ORANGE"Preis: 2.000$\n"COLOR_HEX_WHITE"Tippe /Motorradfarbe", COLOR_WHITE, 1702.9427,-1470.3704,13.5469, 20.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Autolackiererei\n"COLOR_HEX_ORANGE"Preis: 1.500$\n"COLOR_HEX_WHITE"Tippe /Autofarbe", COLOR_WHITE, 1763.4915,2080.2959,10.8203, 20.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Abbauwerkstatt\nfür Auto- u. Motorradtuning\n"COLOR_HEX_ORANGE"Preis: 3.000$\n"COLOR_HEX_WHITE"Tippe /Tuningabbauen", COLOR_WHITE, 1782.8275,-1702.7240,13.5096, 20.0);

    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Entladungspunkt\n"COLOR_HEX_WHITE"Tippe /Paketentladen", COLOR_WHITE, -1857.4130,-1618.9630,21.9022, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Entladungspunkt\n"COLOR_HEX_WHITE"Tippe /Paketentladen", COLOR_WHITE, -258.9534,-2181.9905,29.0150, 10.0, .worldid = 0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Kein Fahrlehrer da?\n"COLOR_HEX_WHITE"Tippe /Ruflehrer\n"COLOR_HEX_GRAU"----------\n"COLOR_HEX_YELLOW"Automatische Fahrschule\n"COLOR_HEX_WHITE"Tippe /Fahrpruefung", COLOR_WHITE, 1234.3380,-1823.9462,13.5909, 40.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Paintball - Anlage\nGebäude verlassen mit 'Enter'", COLOR_BLUE, 2169.8208,1618.7504,999.9766, 15.0, .worldid = 0);

	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Gangjail\n"COLOR_HEX_WHITE"Tippe /Gangjail um einzusperren\nTippe /Aufbrechen um zu befreien", COLOR_WHITE, 2160.4111,-98.0815,2.8239, 13.0, .worldid = 0);
	CreateDynamic3DTextLabel(COLOR_HEX_GREENA"Die Clubvilla\n"COLOR_HEX_WHITE"Zutritt nur für Clubmitglieder", COLOR_WHITE, 2127.5486,2378.9626,10.8203, 20.0, .worldid = 0); // Clubvilla in Las Venturas

    //CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Informationen zum Stadtamt\n"COLOR_HEX_WHITE"Tippe /Stadtamtinfo", COLOR_WHITE, 1481.7039,-1740.6183,13.5469, 30.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Los Santos 4 Sterne Hotel\n"COLOR_HEX_WHITE"Miete Dir günstig ein schönes Hotelzimmer", COLOR_WHITE, 1722.5425,-1650.1168,20.2289, 20.0);
   	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrzeug Zulassungsstelle\n"COLOR_HEX_WHITE"Schalter 1\nTippe /Zulassungsstelle", COLOR_WHITE, 2316.4529,-12.6540,26.7422, 15.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrzeug Zulassungsstelle\n"COLOR_HEX_WHITE"Schalter 2\nTippe /Zulassungsstelle", COLOR_WHITE, 2316.3318,-9.9532,26.7422, 15.0);
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Einwohnermeldeamt\n"COLOR_HEX_WHITE"Schalter 1", COLOR_WHITE, 359.0863,210.2258,1008.3828, 15.0);
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Einwohnermeldeamt\n"COLOR_HEX_WHITE"Schalter 2", COLOR_WHITE, 358.2361,184.5094,1008.3828, 15.0);
   	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"LOS SANTOS - FAHRSCHULE", COLOR_WHITE, 1270.0138,-1846.0366,13.3906, 20.0);
   	/*CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Las Venturas - Bahnhof NORD\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 1433.3264,2640.8018,11.3926, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Las Venturas - Bahnhof OST\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 2859.5542,1290.5511,11.3906, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"San Fierro - Hauptbahnhof\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, -1952.0848,137.6278,26.2813, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Los Santos - Bahnhof NORD\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 816.9464,-1362.2501,-0.5078, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Los Santos - Hauptbahnhof\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 1738.0658,-1949.8571,14.1172, 18.0);*/

	//Verkaufs 3D Infotext
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Clubvilla Bar\n"COLOR_HEX_WHITE"Tippe /Getraenk", COLOR_WHITE, -2653.6023,1407.0844,906.2734, 10.0); //in Las Venturas

    //CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Getränkestand\n"COLOR_HEX_WHITE"Tippe /Getraenk", COLOR_WHITE, 1455.8802,-1741.8704,13.5469, 10.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Club Waffenshop\n"COLOR_HEX_WHITE"Tippe /Clubwaffen", COLOR_WHITE, -2656.1047,1416.0248,906.2734, 8.0); // in Las Venturas
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Club Kueche\n"COLOR_HEX_WHITE"Tippe /Clubheal", COLOR_WHITE, -2653.5183,1413.5085,906.2734, 8.0); //in Las Venturas
   	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"KFZ-Versicherung\n"COLOR_HEX_WHITE"Keine Reparaturkosten für 7 Tage! Preis: $10.000\nTippe /Kfzversicherung", COLOR_WHITE, 2309.3276,-8.2968,26.7422, 25.0, .worldid = VW_REGISTRATIONOFFICE);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Flugzeugverkauf - Las Venturas\n"COLOR_HEX_WHITE"Steige in ein beliebiges Flugzeug deiner Wahl ein!", COLOR_WHITE, 1310.9393,1342.6803,10.8203, 30.0);//Flugzeugverkauf LV

	//Verkaus 3D Infotext 2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Kleidungs Shop\n"COLOR_HEX_WHITE"Tippe /Kleidung", COLOR_WHITE, 206.3740,-8.2494,1001.2109, 11.0, .worldid = 36);//Victim LS (Strand)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Kleidungs Shop\n"COLOR_HEX_WHITE"Tippe /Kleidung", COLOR_WHITE, 161.4726,-83.2517,1001.8047, 11.0, .worldid = 35);//ZIP LS (Bank)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Kleidungs Shop\n"COLOR_HEX_WHITE"Tippe /Kleidung", COLOR_WHITE, 207.7187,-100.5032,1005.2578, 11.0, .worldid = 37);//Binco LS /GS)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"CLUB Waffenshop\n"COLOR_HEX_WHITE"Tippe /Cwmenu", COLOR_WHITE, -2165.6643,646.1125,1052.3750, 10.0, .worldid = 8);//Clubammu
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffen Laden\n"COLOR_HEX_WHITE"Tippe /Wmenu", COLOR_WHITE, 296.4476,-37.9833,1001.5156, 10.0, .worldid = 53);//LV Amu
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffen Laden\n"COLOR_HEX_WHITE"Tippe /Wmenu", COLOR_WHITE, 312.1370,-165.9137,999.6010, 10.0, .worldid = 40);//LS Amu Ballas
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffen Laden\n"COLOR_HEX_WHITE"Tippe /Wmenu", COLOR_WHITE, 295.5200,-80.3668,1001.5156, 10.0, .worldid = 1);//LS Amu
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"CLUB Küche\n"COLOR_HEX_WHITE"Tippe /Cheilen", COLOR_WHITE, -2160.3027,638.3347,1057.5861, 10.0, .worldid = 8);//Clubheal
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0, .worldid = 22);//24/7-1
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0, .worldid = 23);//24/7-2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0, .worldid = 24);//24/7-3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0, .worldid = 26);//24/7-4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0, .worldid = 27);//24/7-5
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0, .worldid = 28);//24/7-6
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Subway\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 377.1597,-67.7632,1001.5151, 10.0, .worldid = 2);//BSN (BS 1)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 377.1597,-67.7632,1001.5151, 10.0, .worldid = 4);//BSS (BS 2)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 3);//Cluckin Bell 1
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 375.5368,-119.2299,1001.4995, 10.0, .worldid = 6);//Pizza Stack 1
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 375.5368,-119.2299,1001.4995, 10.0, .worldid = 7);//Pizza Stack 2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  377.1597,-67.7632,1001.5151, 10.0, .worldid = 8);//BS 3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  375.5368,-119.2299,1001.4995, 10.0, .worldid = 9);//Pizza Stack 3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  377.1597,-67.7632,1001.5151, 10.0, .worldid = 10);//BS 4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  377.1597,-67.7632,1001.5151, 10.0, .worldid = 11);//BS 5
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 12);//Cluckin Bell 2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 13);//Cluckin Bell 3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 14);//Cluckin Bell 4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  375.5368,-119.2299,1001.4995, 10.0, .worldid = 15);//Pizza Stack 4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  377.1597,-67.7632,1001.5151, 10.0, .worldid = 16);//BS 6
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  377.1597,-67.7632,1001.5151, 10.0, .worldid = 17);//BS 7
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 18);//Cluckin Bell 5
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 20);//Cluckin Bell 6
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  375.5368,-119.2299,1001.4995, 10.0, .worldid = 21);//Pizza Stack 5
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 25);//Cluckin Bell 7
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 369.8342,-6.2002,1001.8589, 10.0, .worldid = 29);//Cluckin Bell 8
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  375.5368,-119.2299,1001.4995, 10.0, .worldid = 30);//Pizza Stack 6
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  377.1597,-67.7632,1001.5151, 10.0, .worldid = 31);//BS 8

	//CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Peilsender-Verkauf\n"COLOR_HEX_WHITE"Tippe /Peilsender", COLOR_WHITE,  1151.7448,-1203.0283,19.5159, 25.0);//
	gSteuern = 1;

    //Gate::Gate();
    Spikes::Spikes();

    InitBlitzer();
    InitSchilder();
    InitParkscheibe();
    MuellInit();
    CowInit();
    InitTelefonzelle();
    CreateBlitzerWarnung();

    InitAutoscooter();
    InitWasserscooter();
    InitKartbahn();
    InitFallturm();
    SchaukelschiffInit();
    InitBreakdancer();

	// TODO: Peek delete?
    #if defined WEIHNACHTS_EVENT
	for(new i ; i < sizeof(g_Geschenk) ; i++) {
	    g_Geschenk[i][G_iObjectID] = CreateDynamicObject( g_Geschenk[i][G_iModel],g_Geschenk[i][G_fX],g_Geschenk[i][G_fY],g_Geschenk[i][G_fZ],0.0,0.0,0.0,50.0);
	    g_Geschenk[i][G_t3dLabel] = CreateDynamic3DTextLabel("/OSTEREI",0xFFFFFFFF,g_Geschenk[i][G_fX],g_Geschenk[i][G_fY],g_Geschenk[i][G_fZ] + 0.65,20.0);
		MoveDynamicObject( g_Geschenk[i][G_iObjectID] , g_Geschenk[i][G_fX],g_Geschenk[i][G_fY],g_Geschenk[i][G_fZ] , 1.0 , 180.0 , 0.0 , 0.0 );
	}
	#endif


    for(new i=0;i<MAX_VEHICLES;i++)
    {
        ResetKofferraum(i);
        RadioSender[i] = 0;
        GetVehicleHealth(i,g_fVehicleHealth[i]);
        /*g_iVehicleFixNotification{i} = 0;
        g_iVehicleBrokeNotification{i} = 0;*/
        g_iVehicleFixNotation{i} = 0;
        bestand[i] = 0;
        Benzin[i] = 0;
        Waren[i] = 0;
        vSirene[i] = INVALID_OBJECT_ID;
        vNeon[i] = INVALID_OBJECT_ID;
        OAmtSirene[i] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][0] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][1] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][2] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][3] = INVALID_OBJECT_ID;
        aiVehicleBlitzer[i][FB_iBlitzerIndex] = -1;
        aiVehicleBlitzer[i][FB_iLimit] = 0;
        aiVehicleBlitzer[i][FB_iGeldStrafe] = 0;

        gGas[i] = GetMaxTank(i);
        gMaxGas[i] = GetMaxTank(i);

        LightPwr[i]=1;
        Flasher[i]=0;
        FlasherState[i]=0;
        ResetVehiclePassengers(i);
    }
    LoadGangZones();
    //GZ_Init();
    LoadFaction();
    FlashTimer = SetTimer("FlasherFunc",223,1);
    return 1;
}
forward SaveAll();
public SaveAll()
{
    // mysql_oquery("START TRANSACTION", THREAD_STARTTRANSACTION ,INVALID_PLAYER_ID,gSQL);
    HouseSave();
    HotelSave();
    StaticBizSave();
    BizSave();
    AngelSave();
    TankeSave();
    SaveInfos();
    SaveWaffenLager();
    SaveFirma();
    SaveFraktionsSafeBox();
    SaveGangZones();
    SaveWerbebanner();
    SaveFaction();
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(gPlayerLogged[i])
            {
                SaveAccount(i);
            }
        }
    }
    //mysql_oquery("COMMIT",  THREAD_COMMIT , tick ,gSQL);
    return 1;
}


public OnGameModeExit()
{
    Riesenrad_Exit();
    ExtFire_Close();
    //Debug::DebugClose();
    SaveWerbebanner();
    Spikes::SpikesClose();

    HouseSave();
    HotelSave();
    StaticBizSave();
    BizSave();
    AngelSave();
    TankeSave();
    SaveInfos();
    SaveWaffenLager();
    SaveFirma();
    SaveGangZones();
    ClearOnlinePlayers();

    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(gPlayerLogged[i])
            {
                OnPlayerCarUpdate(i);
                SaveAccount(i);
            }
        }
    }
    for(new i=0;i<iAngel;i++)
    {
        DestroyDynamic3DTextLabel(Angel[i][aText]);
        DestroyPickup(Angel[i][aPickup]);
    }
    for(new i=0;i<iHaus;i++)
    {
        DestroyDynamic3DTextLabel(Haus[i][hText]);
        DestroyPickup(Haus[i][hPickup]);
    }
    for(new i=1;i<MAX_BIZES;i++)
    {
        DestroyDynamic3DTextLabel(Biz[i][bText]);
        DestroyPickup(Biz[i][bPickup]);
    }
    for(new i=0;i<iTanke;i++)
    {
        DestroyDynamic3DTextLabel(Tanke[i][tText]);
        DestroyPickup(Tanke[i][tPickup]);
    }
    DestroyDynamic3DTextLabel(lager3d);

    KillTimer(FlashTimer);
    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        DestroyDynamicObject(sireneobj[i][0]);
        DestroyDynamicObject(sireneobj[i][1]);
        DestroyDynamicObject(sireneobj[i][2]);
        DestroyDynamicObject(sireneobj[i][3]);
        DestroyDynamicObject(sireneobj[i][4]);
    }
    TextDrawDestroy( g_Zentralmeldung[Z_tdVerfuegbar] );
    TextDrawDestroy( g_Zentralmeldung[Z_tdNichtVerfuegbar] );
    mysql_close(gSQL);
    mysql_close(gWebSQL);
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    SetSpawnInfo(playerid, 0,0,0,0,0,0,0,0,0,0,0,0);
    #if defined USE_NPCS
    if( IsPlayerNPC(playerid) ) {
        new
            name[MAX_PLAYER_NAME];
        GetPlayerName(playerid,name,sizeof(name));
        gPlayerLogged[playerid] = 0; // <- Hots eingeloggt ... wieso?
        for(new i ; i < sizeof(g_Bots) ; i++) {
            if(!strcmp(name,g_Bots[i][Bot_sName])) {
                if( g_Bots[i][Bot_iVehicle] > 0 ) {
                    new
                        vehicleid;
                    if(!strcmp(name,"Pilot1")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,3,6,-1);
                    }
                    else if(!strcmp(name,"Pilot2")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,6,1,-1);
                    }
                    else if(!strcmp(name,"Pilot3")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,3,1,-1);
                    }
                    else if(!strcmp(name,"Pilot4")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,2,1,-1);
                    }
                    g_Bots[i][Bot_iVehicleID] = vehicleid;
                }
                SetSpawnInfo(playerid,NO_TEAM, g_Bots[i][Bot_iSkinID] ,0.0,0.0,0.0,0.0,0,0,0,0,0,0);
                SpawnPlayer(playerid);
            }
        }
        return 1;
    }
    #endif
    /*
    else {
        if( gPlayerLogged[playerid] == 0 ) {
            printf("gPlayerLogged == false");
            SetTimerEx("SetPlayerView",503,false,"dd",playerid,-1); // Muss,sonst klappt Spectate nicht
        }
    }
    */
    if (!Spieler[playerid][pClassRequest]) Spieler[playerid][pClassRequest] = 1;
    else {
        TogglePlayerSpectating(playerid, true);
        TogglePlayerSpectating(playerid, false);
    }
    return 1;
}

new Float:oldposx[MAX_PLAYERS],Float:oldposy[MAX_PLAYERS],Float:oldposz[MAX_PLAYERS];
public OnPlayerConnect(playerid)
{
    //#if defined USE_NPCS
    //printf("OnPlayerConnect(%d) Bot %d",playerid,IsPlayerNPC(playerid) );
    new
        _gettime = gettime();
    if(IsPlayerNPC(playerid)) return 1;
    //#endif
    new
        serial[128],
        string[256],
        sName[MAX_PLAYER_NAME],
        ip[16];
    MySQLThreadOwner[playerid]++;
    GetPlayerIp(playerid,ip,sizeof(ip));
    GetPlayerName(playerid,sName,sizeof(sName));

    gpci(playerid, serial,sizeof( serial ) );
    AddOnlinePlayer(playerid);

    ClearAnimations(playerid);
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0,1 ); // Dieing of Crack
    Riesenrad_OnPlayerConnect(playerid);


	TextDrawShowForPlayer(playerid, URL);
	if(strcmp(sName, "Niemand", true) == 0)
	{
		SendClientMessage(playerid, COLOR_RED, "Du wurdest gekickt, da dein Name nicht passend war!");
		Kick(playerid);
	}
	format(string, sizeof(string), "* %s hat Live your Dream betreten.", sName);
	// SendAdminMessage(COLOR_GREY, str);
	for(new i = 0 ; i < MAX_PLAYERS ; i++)
	{
	    if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
	    {
	        if(Spieler[i][pAdmin] >= 1)
	        {
	            if( pJL[i] == 1 ) {
		            SendClientMessage(i, COLOR_GREY, string);
	            }
			}
	    }
	}

    PlayAudioStreamForPlayer(playerid, URL_LOGINMUSIC);
    //PlayAudioStreamForPlayer(playerid, "http://www.uploadmusic.org/MUSIC/5384711376757549.mp3");
    PlayerKey[playerid] = 0;

    format(string,sizeof(string),"SELECT * FROM `hwban` WHERE `hwid` = '%s'",serial );
    mysql_pquery(string,THREAD_HWBAN_CONNECT,playerid,gSQL,MySQLThreadOwner);


	// OnPlayerCarLogin(playerid);
	//ResetPlayerMoney(playerid);
	// TODO: Peek anpassen.
	SetPlayerMapIcon(playerid, 1, 1329.4666,-1559.4634,13.5469, 31, 0, 0);//Hotel
    SetPlayerMapIcon(playerid, 2, 1154.4122, -1457.7490, 15.7968, 25, 0, 0); // 247 mall
	SetPlayerMapIcon(playerid, 7, 1238.0809,-1814.2310,13.4292, 19, 0, 0);//Fahrschule
    SetPlayerMapIcon(playerid, 13, 1038.5304,-1339.6097,13.7266, 17, 0, 0);//Donatladen
    SetPlayerMapIcon(playerid, 14, 1833.2742,-1681.8307,13.4802, 49, 0, 0);//Bar
    SetPlayerMapIcon(playerid, 15, 1006.6136,-942.5633,42.0423, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 16, 1944.6305,-1774.1670,13.3906, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 17, 612.2504,1694.3873,6.9922, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 18, 1596.0598,2198.7400,10.8203, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 19, -2023.9924,156.4616,28.8359, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 20, -1676.5607,412.4557,7.1797, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 21, -99.1346,-1166.1656,2.5805, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 22, -1676.5607,412.4557,7.1797, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 23, 2127.5486,2378.9626,10.8203, 48, 0, 0);//Clubvilla in LV
    SetPlayerMapIcon(playerid, 25, 2422.1592,-1508.4604,23.9922, 14, 0, 0);//Cluckin' Süd
    SetPlayerMapIcon(playerid, 26, 1350.0214,-1754.2931,13.3554, 25, 0, 0);//247 lspd
    SetPlayerMapIcon(playerid, 27, 1316.0682,-906.5001,38.3864, 25, 0, 0);//247 bsn
    SetPlayerMapIcon(playerid, 28, 2098.0144,-1806.8236,13.5541, 29, 0, 0);//pizzaria
    SetPlayerMapIcon(playerid, 29, 1457.8679,-1140.2852,24.0735, 45, 0, 0);//Skin Shop Bank
    SetPlayerMapIcon(playerid, 30, 2244.6521,-1664.0035,15.4766, 45, 0, 0);//Skin Shop Grove
    SetPlayerMapIcon(playerid, 33, 817.6655,-1618.9307,13.7034, 10, 0, 0);//süd bsn
    SetPlayerMapIcon(playerid, 35, 1411.5352,-1699.5714,13.5395, 46, 0, 0);//Werbung in LS
    SetPlayerMapIcon(playerid, 36, 2400.5369,-1981.5837,13.5469, 18, 0, 0);//Nähe Ballasbase Ammunastion
    SetPlayerMapIcon(playerid, 39, 1380.9908,457.3878,19.9316, 42, 0, 0);//Tankstelle
	SetPlayerMapIcon(playerid, 40, 2423.8147,-1742.4226,13.1120, 25, 0, 0);//247 grove street
 	SetPlayerMapIcon(playerid, 41, 1257.1144,-1339.0963,12.9213, 8, 0, 0);//Busbahnhof
 	SetPlayerMapIcon(playerid, 43, 2008.1722,1169.3364,10.8203, 46, 0, 0);//Werbung in LV


    // 36 für /DFINDE reserviert
    //  SetPlayerCameraPos(playerid, 1511.7239,-1715.6687,30.0469);//Brücke Verona Beach
    // SetPlayerCameraPos(playerid, 369.8176, -1869.0303, 22.6842);//Brücke Verona Beach
    //SetPlayerCameraLookAt(playerid, 1481.4827,-1756.5393, 22.5);
    //SetPlayerPos(playerid, 1486.3573,-1749.6531,15.4453 );
    SetPlayerColor(playerid, COLOR_WHITE);
    ClearPlayerChat(playerid);
    /*
    format(string, sizeof(string), "Herzlich Willkommen auf Live your Dream - Reallife, %s", GetName(playerid));
    SendClientMessage(playerid, COLOR_GREEN, string);
    */

    SpectatedPlayer[playerid] = INVALID_PLAYER_ID;
    IsPlayerSpectating[playerid] = 0;
    //Daten zurücksetzen
    for(new i = 0 ; i < MaxVeh ; i++) {
        PlayerCar[playerid][i][CarId] = INVALID_VEHICLE_ID;
        PlayerHaveCar[playerid][i] = 0;
    }
    damagesperre[playerid]=0;
    adventmin[playerid]=0;
    Spieler[playerid][pLevel] = 1;
    Spieler[playerid][pHeiratsantragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pMarriage] = INVALID_MARRIAGE;
    format(Spieler[playerid][pMarriageName],32,"Niemand");
    Spieler[playerid][ID] = 0;
    Spieler[playerid][pfrakwarn] = 0;
    Spieler[playerid][pAdmin] = 0;
    Spieler[playerid][pDonateRank] = 0;
    Spieler[playerid][pHours] = 0;
    Spieler[playerid][pSex] = 0;
    Spieler[playerid][pMuted] = 0;
    Spieler[playerid][pExp] = 0;
    Spieler[playerid][pCash] = 0;
    Spieler[playerid][pCrimes] = 0;
    Spieler[playerid][pKills] = 0;
    Spieler[playerid][pDeaths] = 0;
    Spieler[playerid][pArrested] = 0;
    Spieler[playerid][pWantedDeaths] = 0;
    Spieler[playerid][pPhoneBook] = 0;
    Spieler[playerid][pLottoNr] = 0;
    Spieler[playerid][pJob] = 0;
    Spieler[playerid][pPayCheck] = 0;
    Spieler[playerid][pJailed] = 0;
    Spieler[playerid][pJailTime] = 0;
    Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    Spieler[playerid][pfDuty] = 0;
    // Spieler[playerid][pMats] = 0;
    Spieler[playerid][pDrugs] = 0;
    Spieler[playerid][pWantedCodes] = 0;
    Spieler[playerid][pFraktion] = 0;
    Spieler[playerid][pRank] = 0;
    Spieler[playerid][pSkin] = 0;
    //Spieler[playerid][pHouseKey] = INVALID_HOUSE_KEY;
    //Spieler[playerid][pHotelKey] = INVALID_HOTEL_KEY;
    //Spieler[playerid][pBizKey] = INVALID_BIZ_KEY;
    //Spieler[playerid][pTankKey] = INVALID_TANK_KEY;
    Spieler[playerid][pCarLic] = 0;
    Spieler[playerid][pFlyLic] = 0;
    Spieler[playerid][pBoatLic] = 0;
    Spieler[playerid][pGunLic] = 0;
    Spieler[playerid][pGunLicB] = 0;
    Spieler[playerid][pLKWLic] = 0;
    Spieler[playerid][pMotoLic] = 0;
    Spieler[playerid][pTrakLic] = 0;
    Spieler[playerid][pCarmALic] = 0;
    Spieler[playerid][pPayDay] = 0;
    Spieler[playerid][pTut] = 0; // UNGÜLTIG!
    Spieler[playerid][pWarns] = 0;
    Spieler[playerid][pPerso] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyGeld] = 0;
    Spieler[playerid][pTot] = 0;
    Spieler[playerid][pClassRequest] = 0;
    Spieler[playerid][pBanned] = 0;
    Spieler[playerid][pdeacc] = 0;
    fahrlehrerboni[playerid]=0;
    meslock[playerid]=0;
    Spieler[playerid][pschulden] = 0;
    Spieler[playerid][pWeihnachtsday] = 0;
    format(pdeaccadmin[playerid],32,"");
    Spieler[playerid][pWanteds] = 0;
    Spieler[playerid][pBank] = 0;
    Spieler[playerid][pJailType] = 0;
    Spieler[playerid][pTotTime] = 0;
    Spieler[playerid][pTotX] = 0.0;
    Spieler[playerid][pTotY] = 0.0;
    Spieler[playerid][pTotZ] = 0.0;
    Spieler[playerid][pKanister] = 0;
    Spieler[playerid][pHeilReady] = 1;
    Spieler[playerid][pWaffenteile] = 0;
    // Spieler[playerid][pDrogen] = 0;
    Spieler[playerid][pSafeTeile] = 0;
    Spieler[playerid][pSafeWantedCodes] = 0;
    //Spieler[playerid][bShowMarker] = false;
    Spieler[playerid][pSafeDrogen] = 0;
    Spieler[playerid][pSpawnChange] = 0;
    Spieler[playerid][pHandyState] = 1;
    Spieler[playerid][pFrakLohn] = 0;
    Spieler[playerid][pTimeBan] = 0;
    Spieler[playerid][pMuteTime] = 0;
    Spieler[playerid][pAngel] = 0;
    Spieler[playerid][pFische] = 0;
    Spieler[playerid][pKoeder] = 0;
    Spieler[playerid][pMaxFishes] = 0;
    Spieler[playerid][pMaxVerloren] = 0;
    Spieler[playerid][pFishLic] = 0;
    Spieler[playerid][pFPunkte] = 0;
    Spieler[playerid][pFBPunkte] = 0;
    Spieler[playerid][pFlPunkte] = 0;
    Spieler[playerid][pMotoPunkte] = 0;
    Spieler[playerid][pGunPunkte] = 0;
    Spieler[playerid][pKekse] = 0;
    Spieler[playerid][pZigaretten] = 0;
    Spieler[playerid][pFrakSperre] = 0;
    Spieler[playerid][pHartz4] = 0;
    Spieler[playerid][pKopfgeld] = 0;
    Spieler[playerid][pKopfgeldID] = INVALID_PLAYER_ID;
    Spieler[playerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pWheelAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][tickJobCheckpoint] = _gettime;
    Spieler[playerid][bMaske] = false;
    Spieler[playerid][wbMaske] = false;
    Spieler[playerid][abMaske] = false;
    Spieler[playerid][bMundbinde] = false;
    ClearPlayerTaxiSlots(playerid);
    Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
    Spieler[playerid][pVehicleVerleih] = INVALID_VEHICLE_ID;
    Spieler[playerid][tickVehicleVerleih] = 0;
    Spieler[playerid][pSpice] = 0;
    Spieler[playerid][pSafeSpice] = 0;
    Spieler[playerid][pHausSafeboxSpice] = 0;
    Spieler[playerid][pVehiclePort] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyNr_Temp] = 0;
    Spieler[playerid][pHandyNr_Counter] = 0;

    Spieler[playerid][tDrink] = INVALID_TIMER_ID;
    Spieler[playerid][tSpawnView] = INVALID_TIMER_ID;
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;

    Spieler[playerid][punixWantedCodes] = 0;
    Spieler[playerid][bHasSex] = false;
    Spieler[playerid][bNoDMZone] = false;
    Spieler[playerid][bWantedHacking] = false;
    Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
    Spieler[playerid][ibInterviewStat] = 0;
    Spieler[playerid][unixUpdate] = _gettime;
    Spieler[playerid][punixFlyhack] = Spieler[playerid][unixUpdate];
    Spieler[playerid][pStartbonus] = 0;
    Spieler[playerid][pDetektivPoints] = 1;
    Spieler[playerid][pHurePoints] = 1;
    Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
    Spieler[playerid][pSecureCodeLevel] = -1;
    Spieler[playerid][pVertragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pVertragText][0] = '\0';
    oldposx[playerid]=0,oldposy[playerid]=0,oldposz[playerid]=0;
    Spieler[playerid][pWantedLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pWantedLabelEx] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pBlacklistLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pNeuling] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][t3dSInfo] = Text3D:INVALID_3DTEXT_ID;
    //Spieler[playerid][pAdminLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pAdminDienst] = 0;
    Spieler[playerid][pBenutzerfarbe] = 0;
    Spieler[playerid][pKekseValue] = 0;
    Spieler[playerid][pGeldcheckID] = INVALID_PLAYER_ID;
    Spieler[playerid][pGeldcheckBetrag] = 0;
    Spieler[playerid][pBankKontoPin] = INVALID_BANK_PIN;
    Spieler[playerid][pBankKonto] = 0;
    Spieler[playerid][pLoginVersuch] = 0;
    Spieler[playerid][pJobWechsel] = 0;
    Spieler[playerid][unixFeuerwerk] = _gettime;
    Spieler[playerid][unixFeuerwerkleucht] = _gettime;
    Spieler[playerid][pDrogenSamen] = 0;
    Spieler[playerid][unixGetSamenCooldown] = 0;
    Spieler[playerid][pAutoknackerExtraLohn] = 0;
    Spieler[playerid][punixFSperre] = 0;
    Spieler[playerid][punixFBSperre] = 0;
    Spieler[playerid][punixFlSperre] = 0;
    Spieler[playerid][punixGunSperre] = 0;
    Spieler[playerid][punixLKWSperre] = 0;
    Spieler[playerid][punixMotoSperre] = 0;
    Spieler[playerid][pCommandSpam] = 0;
    Spieler[playerid][pChatSpam] = 0;
    Spieler[playerid][pPinVergessen] = 0;
    Spieler[playerid][pHaustierSpawned] = false;
    Spieler[playerid][pHaustierObject] = INVALID_OBJECT_ID;
    Spieler[playerid][pWiederbelebung] = 0;
    Spieler[playerid][pLawyerPoints] = 0;
    Spieler[playerid][tRadarfallenWarnung] = INVALID_TIMER_ID;
    Spieler[playerid][pAutomatik] = 0;
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    Spieler[playerid][pMuellCP] = 0;
    Spieler[playerid][pMuell][0] = 0;
    Spieler[playerid][pMuell][1] = 0;
    Spieler[playerid][pGeldTCP] = 0;
    Spieler[playerid][pGELDT][0] = 0;
    Spieler[playerid][pGELDT][1] = 0;
    Spieler[playerid][pCowJob] = 0;
    Spieler[playerid][pCow][0] = 0;
    Spieler[playerid][pCow][1] = 0;
    Spieler[playerid][pCow][2] = 0;
    Spieler[playerid][pFahrgeschaeft] = -1;
    pDrunkLevelLast[playerid] = 0;
    pFPS[playerid] = 0;

    Spieler[playerid][pBMOD] = 0;
    Spieler[playerid][pLobe] = 0;
    Spieler[playerid][pKoffer] = false;
    Spieler[playerid][pHelm] = 0;
    Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
    Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
    Spieler[playerid][pPremiumNeon] = 0;
    Spieler[playerid][pKillsGangFight] = 0;
    Spieler[playerid][pMP3Player] = 0;
    Spieler[playerid][pRadarfallenWarnung] = 0;
    Spieler[playerid][pPremiumBizSlot] = 0;
    Spieler[playerid][pPremiumCarSlot] = 0;
    format(postpsenden[playerid],MAX_PLAYER_NAME,"");
    format(postpid[playerid],300,""),firstspawn[playerid]=0;
    Spieler[playerid][pKillsGangFightSession] = 0;

    ClearKFZZulassung(playerid);
    ClearPolizeiPartner(playerid);
    ReleasePlayerKeys(playerid);
    ResetKoffer(playerid);

    //gSpawned{playerid} = 0;
    gPlayerLogged[playerid] = 0;
    AcceptStats[playerid] = 999;
    AcceptAngelStats[playerid] = 999;
    AcceptCarSell[playerid] = 999;
    AcceptCarSellPreis[playerid] = 0;
    RepairCar[playerid] = 999;
    RepairCarPreis[playerid] = 0;
    RefillCar[playerid] = 999;
    RefillCarPreis[playerid] = 0;
    ZettelID[playerid] = 999;
    ZettelPreis[playerid] = 0;
    TazerTime[playerid] = 1;
    Tazered[playerid] = 0;
    Cuffed[playerid] = 0;
    MedicHealID[playerid] = 999;
    MedicHealPreis[playerid] = 0;
    Refueling[playerid] = 0;
    MakeAnimation[playerid]= 0;
    FrakInviteID[playerid]=999;
    BankWert[playerid] = 0;
    BankAn[playerid] = 999;
//  wheelmanclient[playerid]=0;
    PlayerIsPaintballing[playerid] = 0;
    AnwaltID[playerid] = 999;
    AnwaltPreis[playerid] = 0;
    CurrentPhone[playerid] = 999;
    pDrogenID[playerid] = 999;
    pDrogenMenge[playerid] = 0;
    pDrogenPreis[playerid] = 0;
    pSpiceID[playerid] = 999;
    pSpiceMenge[playerid] = 0;
    pSpicePreis[playerid] = 0;
    pWTeileID[playerid] = 999;
    pWTeileMenge[playerid] = 0;
    pWTeilePreis[playerid] = 0;
    pDrogenEinfluss[playerid] = 0;
    pWaffenPlayer[playerid] = 999;
    pWaffenPreis[playerid] = 0;
    pWaffenID[playerid] = 0;
    pFahrStunde[playerid] = 0;
    pCar[playerid] = INVALID_VEHICLE_ID;
    pCheckpoint[playerid] = CP_NONE;
    pMakeTutorial[playerid] = 0;
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    NeedCop[playerid] = 0;
    NeedMedic[playerid] = 0;
    NeedKFZ[playerid] = 0;
    NeedOAMT[playerid] = 0;
    NeedAWALT[playerid] = 0;
    pUnderCover[playerid] = 0;
    pCurrentSite[playerid] = 0;
    JobVehicle[playerid] = INVALID_VEHICLE_ID;
    IsAFK[playerid] = 0;
    NeedBackup[playerid] = 0;
    IsPlayerSpectating[playerid]= 0;
    SpectatedPlayer[playerid]= INVALID_PLAYER_ID;
    pCurrentBiz[playerid] = 0;
    pSkinSelection[playerid] = 0;
    pChoosedSkin[playerid] = 0;
    pGC[playerid] = 0;
    pFC[playerid] = 0;
    pJC[playerid] = 0;
    pBC[playerid] = 0;
    pCC[playerid] = 0;
    pJL[playerid] = 0;
    wantedcodename[playerid]=MAX_PLAYERS;
    ReportCall[playerid]=999;
    PlayerNeedsHelp[playerid] = 0;
    IsPlayerFishing[playerid] = 0;
    NeedPIZZA[playerid] = 0;
    NeedTAXI[playerid] = 0;
    NeedWHEEL[playerid] = 0;
    g_aiDestroyedVehicles{playerid} = 0;
    TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
    if (Spieler[playerid][tLoginTimeout] != INVALID_TIMER_ID) KillTimer(Spieler[playerid][tLoginTimeout]);
    Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
    Spieler[playerid][pHouseAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pHouseAngebot][1] = 0;
    Spieler[playerid][pBizAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pBizAngebot][1] = 0;
    Spieler[playerid][pTankeAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pTankeAngebot][1] = 0;
    Spieler[playerid][tdTaxi] = Text:INVALID_TEXT_DRAW;
    Spieler[playerid][pTaxiVehicle] = INVALID_VEHICLE_ID;
    Spieler[playerid][pTruckerBlock] = _gettime;
    permissionleavegz[playerid]=0;
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        Spieler[playerid][pTaxiKundenStart][0] = 0;
        Spieler[playerid][pTaxiKunden][0] = INVALID_PLAYER_ID;
    }

    //Player 3DText's
    Spieler[playerid][pWantedLabel] = CreateDynamic3DTextLabel(" ", COLOR_RED, 0.0, 0.0, 0.0, 35.0, .attachedplayer = playerid, .testlos = true);
//  Spieler[playerid][pWantedLabelEx] = CreateDynamic3DTextLabel("Gesucht", COLOR_RED, 0.0, 0.0, 0.0, 12.0 , .attachedplayer = playerid );
    Spieler[playerid][pBlacklistLabel] = CreateDynamic3DTextLabel(" ", 0xFF0000FF, 0.0, 0.0, 0.0, 12.0, .attachedplayer = playerid, .testlos = true);
    Spieler[playerid][pNeuling] = CreateDynamic3DTextLabel("-> NEULING <-\nKILL-SCHUTZ", 0xFFFF00FF, 0.0, 0.0, 0.4, 12.0, .attachedplayer = playerid, .testlos = true);

    // Spieler[playerid][pWantedLabel] = Create3DTextLabel(" ", COLOR_RED, 0.0, 0.0, 0.0, 10.0, 0, 0);
    // Attach3DTextLabelToPlayer(Spieler[playerid][pWantedLabel], playerid, 0.0, 0.0, 0.85);
    Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][pWantedLabelEx] , E_STREAMER_ATTACH_OFFSET_X , 0.0 );
    Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][pWantedLabelEx] , E_STREAMER_ATTACH_OFFSET_Y , 0.0 );
    Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][pWantedLabelEx] , E_STREAMER_ATTACH_OFFSET_Z , 0.3 );


    Spieler[playerid][pAFKLabel] = CreateDynamic3DTextLabel(" ", COLOR_PURPLE, 0.0, 0.0, 0.0, 10.0, .attachedplayer = playerid );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAFKLabel], E_STREAMER_ATTACH_OFFSET_X, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAFKLabel], E_STREAMER_ATTACH_OFFSET_Y, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAFKLabel], E_STREAMER_ATTACH_OFFSET_Z, 0.7 );

    Spieler[playerid][pAntiSpawnKill] = CreateDynamic3DTextLabel(" ", COLOR_3D_WHITE, 0.0, 0.0, 0.0, 10.0, .attachedplayer = playerid );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAntiSpawnKill], E_STREAMER_ATTACH_OFFSET_X, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAntiSpawnKill], E_STREAMER_ATTACH_OFFSET_Y, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAntiSpawnKill], E_STREAMER_ATTACH_OFFSET_Z, 0.55 );

    Gesucht[playerid] = CreatePlayerTextDraw(playerid, 35.0, 321.0, " ");
    PlayerTextDrawBackgroundColor(playerid,Gesucht[playerid], 255);
    PlayerTextDrawFont(playerid,Gesucht[playerid], 1);
    PlayerTextDrawLetterSize(playerid,Gesucht[playerid], 0.31, 0.31 * 3.5 );
    PlayerTextDrawColor(playerid,Gesucht[playerid],-1);
    PlayerTextDrawSetOutline(playerid,Gesucht[playerid], 1);
    //PlayerTextDrawSetProportional(playerid,Gesucht[playerid], 1);

    BusMessage[playerid] = CreatePlayerTextDraw(playerid,241.000000, 111.000000, " ");
    PlayerTextDrawBackgroundColor(playerid,BusMessage[playerid], 255);
    PlayerTextDrawFont(playerid,BusMessage[playerid], 2);
    PlayerTextDrawLetterSize(playerid,BusMessage[playerid], 0.300000, 1.000000);
    PlayerTextDrawColor(playerid,BusMessage[playerid], -1);
    PlayerTextDrawSetOutline(playerid,BusMessage[playerid], 1);
    PlayerTextDrawSetProportional(playerid,BusMessage[playerid], 1);
    PlayerTextDrawUseBox(playerid,BusMessage[playerid], 1);
    PlayerTextDrawBoxColor(playerid,BusMessage[playerid], 60);
    PlayerTextDrawTextSize(playerid,BusMessage[playerid], 396.000000, 0.000000);

    CreatePlayerTacho(playerid);

    Spectate[0][playerid] = CreatePlayerTextDraw(playerid,150.000000, 350.000000, "_");
    PlayerTextDrawBackgroundColor(playerid,Spectate[0][playerid], 255);
    PlayerTextDrawFont(playerid,Spectate[0][playerid], 1);
    PlayerTextDrawLetterSize(playerid,Spectate[0][playerid], 0.500000, 5.099999);
    PlayerTextDrawColor(playerid,Spectate[0][playerid], -1);
    PlayerTextDrawSetOutline(playerid,Spectate[0][playerid], 0);
    PlayerTextDrawSetProportional(playerid,Spectate[0][playerid], 1);
    PlayerTextDrawSetShadow(playerid,Spectate[0][playerid], 1);
    PlayerTextDrawUseBox(playerid,Spectate[0][playerid], 1);
    PlayerTextDrawBoxColor(playerid,Spectate[0][playerid], 122);
    PlayerTextDrawTextSize(playerid,Spectate[0][playerid], 268.000000, -10.000000);

    Spectate[1][playerid] = CreatePlayerTextDraw(playerid, 150.000000, 350.000000, "~y~Name: ~w~aaaaaaaaaaaaaaaaaaaaaaaa~n~~y~Leben:~w~ 100.0~n~~y~Ruestung:~w~ 100.0~n~~y~Level:~w~ 10~n~~y~Fraktion:~w~ V-T GmbH");
    PlayerTextDrawBackgroundColor(playerid,Spectate[1][playerid], 255);
    PlayerTextDrawFont(playerid,Spectate[1][playerid], 1);
    PlayerTextDrawLetterSize(playerid,Spectate[1][playerid], 0.200000, 1.000000);
    PlayerTextDrawColor(playerid,Spectate[1][playerid], -1);
    PlayerTextDrawSetOutline(playerid,Spectate[1][playerid], 0);
    PlayerTextDrawSetProportional(playerid,Spectate[1][playerid], 1);
    PlayerTextDrawSetShadow(playerid,Spectate[1][playerid], 1);

    Spectate[2][playerid] = CreatePlayerTextDraw(playerid,140.000000, 337.000000, "]");
    PlayerTextDrawBackgroundColor(playerid,Spectate[2][playerid], 255);
    PlayerTextDrawFont(playerid,Spectate[2][playerid], 0);
    PlayerTextDrawLetterSize(playerid,Spectate[2][playerid], 0.500000, 2.000000);
    PlayerTextDrawColor(playerid,Spectate[2][playerid], -65281);
    PlayerTextDrawSetOutline(playerid,Spectate[2][playerid], 1);
    PlayerTextDrawSetProportional(playerid,Spectate[2][playerid], 1);

    Spectate[3][playerid] = CreatePlayerTextDraw(playerid, 261.000000, 337.000000, "]");
    PlayerTextDrawBackgroundColor(playerid, Spectate[3][playerid] , 255);
    PlayerTextDrawFont(playerid, Spectate[3][playerid] , 0);
    PlayerTextDrawLetterSize(playerid, Spectate[3][playerid] , 0.500000, 2.000000);
    PlayerTextDrawColor(playerid, Spectate[3][playerid] , -65281);
    PlayerTextDrawSetOutline(playerid, Spectate[3][playerid] , 1);
    PlayerTextDrawSetProportional(playerid, Spectate[3][playerid] , 1);


    CreatePayDayTextdraw(playerid);

    ClearAnimations(playerid);
    for(new i ; i < MAX_PLAYERS ; i++) {
        if(Spieler[i][bMaske]) {
            ShowPlayerNameTagForPlayer(playerid,i,0);
        }
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if(Spieler[i][abMaske]) {
            ShowPlayerNameTagForPlayer(playerid,i,0);
        }
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if(Spieler[i][wbMaske]) {
            ShowPlayerNameTagForPlayer(playerid,i,0);
        }
    }
    format(string,sizeof(string),"%s - %s CONNECTED",sName,ip);
    LoginLog(string);


    format(string,sizeof(string),"UPDATE `accounts` SET `ipadresse` = '%s' WHERE `Name` = '%s'",ip,sName );
    mysql_oquery(string,THREAD_DUMMY,playerid,gSQL);

    // FS JOIN
    new idx;
    format(string,sizeof(string),"[FS-NACHRICHT] Dein Freund %s hat das Spiel betreten!",sName);
    for(new i ; i < MAX_PLAYERS; i++) {
        if( i != playerid ) {
            if( IsPlayerConnected(i) ) {
                if(IsNameOnFriendList(i,sName,idx) ) {
                    SendClientMessage(i,0x8B008BFF,string);
                }
            }
        }
    }
    return 1;
}

public OnPlayerUpdateTacho()
{
    new
        Float:x,
        Float:y,
        Float:z,

        kennzeichen, // 0 Kennzeichen
        skennzeichen[64],
        //szulassung[64],
        radios[64],
        string[200],
        slot,
        Float:CarHealth,
        //Float:speed,
        //Float:memory[3],
        kraftstoff,
        model,
        //CarHealthIni,
        //SpeedT,
        fraktion,
        besitzer,
        Float:kmStand,
        Float:kmStandOld,
        SpeedF,
        Distance,
        Float:percent,
        Float:td_size,
        tuerstatus[] = "Auf",
        vehicleid;
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i))
        {
            vehicleid = GetPlayerVehicleID(i);
            if(vehicleid && IsPlayerInVehicle(i,vehicleid) ) {
                SpeedF = GetPlayerVehicleSpeed(i);
                GetVehicleHealth(vehicleid, CarHealth);
                model = GetVehicleModel( vehicleid );
                kmStandOld = 0;
                if(model >= 400){
                    GetVehiclePos(vehicleid,x,y,z);
                    Distance = GetDistance(x,y,z,g_OldVehiclePos[vehicleid][0],g_OldVehiclePos[vehicleid][1],g_OldVehiclePos[vehicleid][2]);
                    if( Distance < 125.0 ) { // mehr als 125m in 600ms ist unrealistisch.
                        kmStandOld = (g_VehicleDistance[vehicleid] / 1000.0);
                        g_VehicleDistance[vehicleid] += Distance;
                    }

                    g_OldVehiclePos[vehicleid][0] = x;
                    g_OldVehiclePos[vehicleid][1] = y;
                    g_OldVehiclePos[vehicleid][2] = z;

                    /*
                    CarHealth = CarHealth -250;
                    CarHealth = CarHealth/10;
                    CarHealth = CarHealth/75;
                    CarHealth = CarHealth * 100;
                    CarHealthIni = floatround(CarHealth, floatround_floor);
                    if(CarHealthIni < 0){CarHealthIni = 0;}
                    */
                    // GetVehicleVelocity(vehicleid, memory[0], memory[1], memory[2]);
                    // SpeedT = floatround(speed)/2;
                    // SpeedF = (SpeedT*1000)/700;
                    if(RadioSender[vehicleid] == 0){radios ="Radio aus";}
                    else if(RadioSender[vehicleid] == 1){radios ="1-Live";}
                    else if(RadioSender[vehicleid] == 2){radios ="Technobase.FM";}
                    else if(RadioSender[vehicleid] == 3){radios ="Hardbase.FM";}
                    else if(RadioSender[vehicleid] == 4){radios ="I Love Radio";}
                    else if(RadioSender[vehicleid] == 5){radios ="Breakz.us";}
                    else if(RadioSender[vehicleid] == 6){radios ="You.FM";}
                    else if(RadioSender[vehicleid] == 7){radios ="PlanetRadio";}
                    else if(RadioSender[vehicleid] == 8){radios ="The Club";}
                    else if(RadioSender[vehicleid] == 9){radios ="NightWax";}
                    else if(RadioSender[vehicleid] == 10){radios ="I Love Mashup";}
                    else if(RadioSender[vehicleid] == 11){radios ="Das Hitradio";}
                    else if(RadioSender[vehicleid] == 12){radios ="I Love the Battle";}
                    else if(RadioSender[vehicleid] == 13){radios ="I Love 2Dance";}
                    else if(RadioSender[vehicleid] == 14){radios ="Login-Musik";}
                    else if(RadioSender[vehicleid] == 15){radios ="iTunes Hot 40";}

                    besitzer = GetCarOwner(vehicleid);
                    fraktion = GetVehicleFraktion(vehicleid);
                    if( besitzer != INVALID_PLAYER_ID  && i == besitzer ) {
                        slot = GetCarOwnerSlot(i, vehicleid);
                        if( !HasVehicleLicence( besitzer,slot ) ) {
                            //szulassung = "~r~Keine Zulassung";
                            kennzeichen = 0;
                        }
                        else {
                            kennzeichen = 1;
                            format(skennzeichen,sizeof(skennzeichen),"%s",PlayerCar[i][slot][CarNumberplate]);
                        }
                    }
                    else {
                        kennzeichen = 2;
                        //szulassung = "Zugelassen";
                    }
                    if( fraktion != 0 ) {
                        new
                            s[50];
                        ReturnFraktionByID(fraktion,s);
                    }
                    kraftstoff = GetVehicleModelKraftstoff( model  );

                    // Kraftstoff: Diesel~n~Zustand: 977/1000~n~Radio: Technobase.FM~n~Fahrzeugtuer: Auf
                    if( !IsDoorOpen(vehicleid) ) {
                        tuerstatus = "Zu";
                    }
                    else {
                        tuerstatus = "Auf";
                    }
                    kmStand = (g_VehicleDistance[vehicleid] / 1000.0);
                    if( besitzer != INVALID_PLAYER_ID ) {
                        if( IsTUVNeeded( floatround(kmStandOld,floatround_floor) ) == false &&
                            IsTUVNeeded( floatround(kmStand,floatround_floor) ) == true) {
                            slot = GetCarOwnerSlot(i, vehicleid);
                            if( slot != 555 ) {
                                PlayerCar[besitzer][slot][TUV] = 1;
                                format(string,sizeof(string),"Dein Fahrzeug (%s) muss wieder aufgrund seines Kilometerstandes zum TÜV.",CarName[model-400]);
                                SendClientMessage(besitzer,COLOR_ORANGE,string);
                            }
                        }
                    }
                    format(string,sizeof(string),"Kraftstoff: %s~n~KM-Stand: %.1f~n~Zustand: %.0f/1000~n~Radio: %s~n~Fahrzeugtuer: %s",
                        g_asKraftstoff[kraftstoff],kmStand,CarHealth,radios,tuerstatus);

                    PlayerTextDrawSetString(i, g_PlayerTacho[i][pt_Info],string);

                    format(string,sizeof(string),"%s~n~~n~~n~~n~~n~~n~~n~~n~",CarName[model-400] );
                    PlayerTextDrawSetString(i, g_PlayerTacho[i][pt_Name], string);

                    format(string,sizeof(string),"km/h: %d",floatround(SpeedF) );
                    PlayerTextDrawSetString(i,g_PlayerTacho[i][pt_Speed],string);

                    if( kennzeichen == 0) {
                        format(string,sizeof(string),"~r~Keine Zulassung" );
                    }
                    else if( kennzeichen == 1) {
                        format(string,sizeof(string),"Kennzeichen: %s",skennzeichen );
                    }
                    else {
                        format(string,sizeof(string),"~g~Zugelassen",skennzeichen );
                    }
                    PlayerTextDrawSetString(i,g_PlayerTacho[i][pt_Kennzeichen],string);

                    percent = float( gGas[vehicleid] ) / float( GetMaxTank(vehicleid) );
                    if( percent > 1.0 ) percent = 0.0;
                    if( percent < 0.01 ) percent = 0.0; // Minimum 1% Anzeigen,sonst ist nichts sichtbar
                    td_size = percent * 6.0;
                    //printf("tank %d max_tank %d percent %.2f td_size %.2f",tank,max_tank,percent,td_size);

                    PlayerTextDrawLetterSize(i,g_PlayerTacho[i][pt_Tank], 1.0, td_size );
                    format(string,sizeof(string),"%d/%d l", gGas[vehicleid], gMaxGas[vehicleid] );
                    PlayerTextDrawSetString(i,g_PlayerTacho[i][pt_Liter], string );
                    if( percent > 0.4 ) {
                        // Grün
                        PlayerTextDrawColor(i,g_PlayerTacho[i][pt_Tank], 0x00FF0070);
                    }
                    else if( 0.15 < percent <= 0.4 ) {
                        // Orange
                        PlayerTextDrawColor(i,g_PlayerTacho[i][pt_Tank], 0xFF8C0070);
                    }
                    else {
                        // Rot
                        PlayerTextDrawColor(i,g_PlayerTacho[i][pt_Tank], 0xFF000070);
                    }
                    PlayerTextDrawHide(i,g_PlayerTacho[i][pt_Tank]);
                    PlayerTextDrawShow(i,g_PlayerTacho[i][pt_Tank]);

                    if( SpeedF >= 240 ) {
                        new
                            t = gettime();
                        if( t >= Spieler[i][punixSpeedhack] ) {
                            format(string,sizeof(string),"[ACHTUNG] Spieler %s Speed-Warnung %dKm/h",GetName(i),SpeedF);
                            SendAdminMessage(COLOR_LIGHTRED2,string);
                            Spieler[i][punixSpeedhack] = t + 5; // Alle 5 Sekunden MAXIMAL die Nachricht senden
                        }
                    }
                }
            }
        }
    }
    return 1;
}

public OnUpdateUhr()
{
    new stunde, minute;
    gettime(stunde, minute);
    //SetWorldTime(stunde);
    new string[10];
    format(string, sizeof(string), "%02d:%02d", stunde, minute);
    TextDrawSetString(UhrMessage, string);
}

public OnUpdateDatum()
{
    new year,string[14],month,day;
    getdate(year, month, day);
    format(string, sizeof string, "%02d/%02d/%d", day, month , year);
    TextDrawSetString(DatumMessage, string);
}

public OnPlayerDisconnect(playerid, reason)
{
    if(fuelcountactive[playerid]==1)
    {
        GivePlayerCash(playerid,-100*fuelcount[playerid]);
        if(fuelcount[playerid]>=1)
        {
            new string[200];
            format(string,200,"Du hast %d Liter verbraucht. Kosten: $%s",fuelcount[playerid], AddDelimiters(100*fuelcount[playerid]));
            SendClientMessage(playerid,COLOR_ORANGE,string);
        }
        fuelcountactive[playerid]=0;
        fuelcount[playerid]=0;
    }

    new vehID = GetPlayerVehicleID(playerid);
    if (vehID) {
        if (Refueling[playerid]) vehicleRefueling[vehID] = 0;
        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleFraktion(vehID)) {
            new engine, lights, alarm, doors, bonnet, boot, objective;
            GetVehicleParamsEx(vehID, engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(vehID, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
            UnLockCar(vehID);
        }
    }

    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_ONGOING && g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER] == playerid) {
       KillTimer(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER]);
       g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] = INVALID_TIMER_ID;
       EvidenceRoomHeistFinished();
    }

    //print("OnPlayerDisconnect");
    MySQLThreadOwner[playerid]++;
    DeleteOnlinePlayer(playerid);
    KillTimer(Spieler[playerid][pTutTimer]);
    KillTimer(Spieler[playerid][tLoginTimeout]);
    Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;
    KillTimer(Spieler[playerid][tKidnap]);
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    KillTimer(Spieler[playerid][tEinbrechen]);
    Spieler[playerid][tEinbrechen] = INVALID_TIMER_ID;
    new
        sName[MAX_PLAYER_NAME],
        idx,
        partner,
        ip[16],
        String[128],
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerName(playerid,sName,sizeof(sName));
    GetPlayerIp(playerid,ip,sizeof(ip));
    Spieler[playerid][pLoginTimestamp] = 0;
    Spieler[playerid][pFahrgeschaeft] = -1;
    Spieler[playerid][pSpawnX] = X;
    Spieler[playerid][pSpawnY] = Y;
    Spieler[playerid][pSpawnZ] = Z;
    GetPlayerFacingAngle(playerid,Spieler[playerid][pSpawnFace]);
    Spieler[playerid][pSpawnInt] = GetPlayerInterior(playerid);
    Spieler[playerid][pSpawnVirtual] = GetPlayerVirtualWorld(playerid);
    Spieler[playerid][pHouseAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pHouseAngebot][1] = 0;
    Spieler[playerid][pBizAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pBizAngebot][1] = 0;
    Spieler[playerid][pTankeAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pTankeAngebot][1] = 0;
    Spieler[playerid][pKillsGangFightSession] = 0;
    gangfightwettenpp[playerid] = 0;
    gangfightwettenppp[playerid] = 0;
    ReleasePlayerKeys(playerid,false);
    KillTimer( Spieler[playerid][tTankeUeberfall] );
    if( Spieler[playerid][tTankeUnix] != 0 ) {
        Tankstelle_Ueberfall_Stop(playerid,-1,2);
    }
    Spieler[playerid][tTankeUnix] = 0;
    Haustier_RemovePlayer(playerid);
    format(String,sizeof(String),"%s - %s DISCONNECTED",sName,ip);
    LoginLog(String);
    partner = GetPlayerVertragsPartner(playerid);
    DestroyPayDayTextdraw(playerid);
    Robbing_OnPlayerDisconnect(playerid);
    DeletePlayerDropItem(playerid);
    StopOnArmedBanditForPlayer(playerid);

    new zoll = GetPlayerZollAreaUser(playerid);
    if( zoll != -1 ) {
        g_Zoll[zoll][Z_iStatus] = 2;
        StopDynamicObject( g_Zoll[zoll][Z_iObject] );
        Zoll_Close(zoll);
    }
    /*
    if( pFahrschulCar[playerid] != INVALID_VEHICLE_ID ) {
        FahrschuleAbbruch(playerid);
    }*/
    // Falls noch offene Freundschaftsanfragen , Löschen
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( g_FriendList[playerid][i][FL_iStatus] == FriendList_Wait ||
            g_FriendList[playerid][i][FL_iStatus] == FriendList_Approval ) {
            sscanf(g_FriendList[playerid][i][FL_sSpieler],"u",partner);
            if( IsPlayerConnected(partner) ) {
                if( IsNameOnFriendList(partner,sName,idx)) {
                    g_FriendList[partner][idx][FL_iStatus] = 0;
                    g_FriendList[partner][idx][FL_sSpieler] = '\0';
                    //printf("PartnerSlot %d gelöscht",idx);
                }
            }
        }
        g_FriendList[playerid][i][FL_sSpieler] = '\0';
        g_FriendList[playerid][i][FL_iStatus] = 0;
    }
    if( partner != INVALID_PLAYER_ID ) {
        Spieler[partner][pVertragID] = INVALID_PLAYER_ID;
    }
    if( Spieler[playerid][pGeldcheckID] != INVALID_PLAYER_ID ) {
        new
            giveid;
        giveid = Spieler[playerid][pGeldcheckID];
        format(String,sizeof(String),"Der Geldcheck von %s in Höhe von $%s ist nicht mehr gültig",sName, AddDelimiters(Spieler[playerid][pGeldcheckBetrag]));
        SendClientMessage(giveid,COLOR_RED,String);
        Spieler[playerid][pGeldcheckID] = INVALID_PLAYER_ID;
    }
    if( Spieler[playerid][pInterviewer] != INVALID_PLAYER_ID ) {
        partner = Spieler[playerid][pInterviewer];
        Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
        Spieler[partner][pInterviewer] = INVALID_PLAYER_ID;
        if( Spieler[playerid][ibInterviewStat] != 0 ) {
            if( Spieler[playerid][ibInterviewStat] == 2 ) {
                format(String,sizeof(String),"Das Interview zwischen %s und %s wurde beendet,da der Newsreporter den Server verlassen hat",sName,GetName(partner));
            }
            else if( Spieler[partner][ibInterviewStat] == 2 ) {
                format(String,sizeof(String),"Das Interview zwischen %s und %s wurde beendet,da die interviewte Person den Server verlassen hat",sName,GetName(partner));
            }
            Spieler[playerid][ibInterviewStat] = 0;
            Spieler[partner][ibInterviewStat] = 0;
            SendClientMessageToAll(COLOR_CHAT_JOB,String);
            UnfreezePlayer(partner);
        }
    }

    if( g_PolizeiPartner[playerid][PP_iStatus] == PolizeiPartner_Active ) {
        ClearPolizeiPartner( g_PolizeiPartner[playerid][PP_iPartner] );
        ClearPolizeiPartner(playerid);
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        // Streifenpartner Anfrage löschen
        if( g_PolizeiPartner[i][PP_iPartner] == playerid ) {
            g_PolizeiPartner[i][PP_iPartner] = INVALID_PLAYER_ID;
            g_PolizeiPartner[i][PP_iStatus] = 0;
        }
        /* Spectate bei LOGIN entfernen
        if( IsPlayerSpectating[i] == 1 ) {
            if( SpectatedPlayer[i] == playerid ) {
                StopSpectate(i);
            }
        }*/
    }

    CreateDisconnectNotice( sName , X , Y , Z , reason );

    KillTimer(pAngelTimer[playerid]);
    KillTimer( Spieler[playerid][tDrink] );
    if( IsPlayerAnyTaxiCustomer(playerid) != -1) {
        //Fahrgast Disconnected
        new
            preis,
            driverid = IsPlayerAnyTaxiCustomer(playerid);
        preis = GetPlayerTaxiCosts(driverid,playerid);
        format(String,sizeof(String),"Dein Fahrgast %s hat den Server verlassen. Die Fahrtkosten in Höhe von $%s werden dennoch abgebucht und dir bezahlt.", sName, AddDelimiters(preis));
        SendClientMessage( driverid ,COLOR_YELLOW,String);
        format(String,sizeof(String),"UPDATE `accounts` SET `Bank` = `Bank` - %d WHERE `Name` = '%s'",preis,sName);
        mysql_oquery(String,THREAD_DUMMY,driverid,gSQL);
        Spieler[driverid][pCash] += preis;
        RemovePlayerFromTaxi(driverid,playerid);
    }
    //printf("OnPlayerDisconnect(%s) HasPlayerTaxiCustomers(%d) = %d",GetName(playerid),playerid,HasPlayerTaxiCustomers(playerid) );
    if( HasPlayerTaxiCustomers(playerid) ) {
        // KillTimer(Spieler[playerid][tTaxi]);
        CancelTaxi(playerid, Spieler[playerid][pTaxiVehicle],0 );
    }
    if( Spieler[playerid][bMaske] ) {
        KillTimer(Spieler[playerid][tMaske]);
    }
    if( Spieler[playerid][wbMaske] ) {
        KillTimer(Spieler[playerid][wtMaske]);
    }
    if( Spieler[playerid][abMaske] ) {
        KillTimer(Spieler[playerid][atMaske]);
    }
    if( Spieler[playerid][pTimerTaschendieb] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerTaschendieb]);
        Spieler[playerid][pTimerTaschendieb] = INVALID_TIMER_ID;
    }
    if( Spieler[playerid][pTimerKnastbefreien] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerKnastbefreien]);
        Spieler[playerid][pTimerKnastbefreien] = INVALID_TIMER_ID;
    }
    if( Spieler[playerid][pTot] == 2 ) {
        Spieler[playerid][pTot] = 1;
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i)) {
            if(Spieler[i][pKopfgeldID] == playerid) {
                // Spieler Server verlassen bevor Kopfgeld Aktion beendet
                format(String,sizeof(String),"Auftragsziel %s hat den Server verlassen bevor dein Auftrag ausgeführt/angenommen wurde.",sName);
                SendClientMessage(i,COLOR_RED,String);

                GivePlayerCash(i, Spieler[i][pKopfgeld]);
                if( Spieler[i][pKopfgeldStatus] == true ) {
                    // Auftragnehmer finden und entfernen!
                    for(new j ; j < MAX_PLAYERS ; j++) {
                        if( Spieler[j][pHitmenAuftragID] == i ) {
                            //Auftragnehmer gefunden
                            format(String,sizeof(String),"Deine Zielperson %s hat den Server verlassen.",sName);
                            SendClientMessage(j,COLOR_RED,String);
                            Spieler[j][pHitmenAuftragID] = INVALID_PLAYER_ID;
                        }
                    }
                }
                Spieler[i][pKopfgeldStatus] = false;
                Spieler[i][pKopfgeldID] = INVALID_PLAYER_ID;
                Spieler[i][pKopfgeld] = 0;
            }
        }
    }
    if( Spieler[playerid][pKopfgeldID] != INVALID_PLAYER_ID ) {
        // Auftrag wurde nicht beendet bevor Auftraggeber Server verlässt
        GivePlayerCash(playerid,Spieler[playerid][pKopfgeldID]);
        if( Spieler[playerid][pKopfgeldStatus] ) {
            for(new i ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pHitmenAuftragID] == playerid ) {
                    format(String,sizeof(String),"Dein Auftraggeber %s hat den Server verlassen. Auftrag beendet.",sName);
                    SendClientMessage(i,COLOR_RED,String);
                    Spieler[i][pHitmenAuftragID] = INVALID_PLAYER_ID;
                }
            }
        }
    }
    if( Spieler[playerid][pHitmenAuftragID] != INVALID_PLAYER_ID ) {
        // Auftragnehmer Offline.Auftrag ist wieder frei.
        new
            auftraggeber;
        auftraggeber = Spieler[playerid][pHitmenAuftragID];
        if( Spieler[auftraggeber][pKopfgeldStatus] ) {
            Spieler[auftraggeber][pKopfgeldStatus] = false;
            SendClientMessage(auftraggeber,COLOR_YELLOW,"Dein Auftragskiller hat den Server verlassen, bevor der Auftrag erledigt werden konnte.");
            SendClientMessage(auftraggeber,COLOR_YELLOW,"Dein Auftrag kann wieder von anderen Hitmen angenommen werden.");
        }
        Spieler[playerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
    }
    Spieler[playerid][pKopfgeldID] = INVALID_PLAYER_ID;
    Spieler[playerid][pKopfgeld] = 0;
    DestroyVehicle(Spieler[playerid][pVehicleVerleih]);
    Spieler[playerid][pVehicleVerleih] = INVALID_VEHICLE_ID;
    Spieler[playerid][tickVehicleVerleih] = 0;

    RemovePlayerAttachedObject(playerid, 0);
    if(Cuffed[playerid] == 1)
    {
        format(String, sizeof(String), "%s wurde vom Server für 30 Minuten ins Prison teleportiert, Grund: Offline Flucht", sName);
        SendAdminMessage(COLOR_DARKRED, String);
        Spieler[playerid][pJailed] = 3;
        Spieler[playerid][pJailTime] = 1800;
        format(String,sizeof(String),"Spieler %s wurde vom System wegen Offline-Flucht für 30 Minuten ins Prison gesteckt",GetName(playerid));
        SendUCPAktenEintrag(playerid,"System","System",String);
    }
    if(ReportCall[playerid] != 999)
    {
        format(String, sizeof(String), "> Ticket < - %s hat den Server verlassen. Ticket geschlossen.", sName);
        SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN, String);
        ReportCall[playerid] = 999;
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(IsPlayerConnected(i))
            {
                if(ReportCall[i] == playerid)
                {
                    ReportCall[i] = 999;
                }
            }
        }
    }
    Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pfDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    pUnderCover[playerid] = 0;
    if(reason==0)
    {
        format(String, sizeof(String), "* %s hat Live your Dream verlassen. (Crash/Time-Out)", sName);
    }
    else if(reason==1)
    {
        format(String, sizeof(String), "* %s hat Live your Dream verlassen.", sName);
    }
    else if(reason==2)
    {
        format(String, sizeof(String), "* %s hat Live your Dream verlassen. (Kick/Bann)", sName);
    }
    // SendAdminMessage(COLOR_GREY, str);
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAdmin] >= 1)
            {
                if( pJL[i] == 1 ) {
                    SendClientMessage(i, COLOR_GREY, String);
                }
            }
        }
    }
    KillTimer( Spieler[playerid][tFahrschule] );
    if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
    {
        FahrschuleAbbruch(playerid);
        //DestroyVehicle(pFahrschulCar[playerid]); FahrschuleAbbruch
        //aiVehicles[pFahrschulCar[playerid]] = VEH_INVALID; FahrschuleAbbruch
    }
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    if(pCar[playerid] != INVALID_VEHICLE_ID)
    {
        DestroyVehicle(pCar[playerid]);
        aiVehicles[pCar[playerid]] = VEH_INVALID;
    }
    pCar[playerid] = INVALID_VEHICLE_ID;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][iKidnapID] == playerid ) {
                // Disconnect während KIDNAP
                printf("Flucht bei KidNap von Spieler %s -> GangJail",sName );
                Spieler[playerid][pJailed] = 4;
                Spieler[i][iKidnapID] = INVALID_PLAYER_ID;
                break;
            }
        }
    }
    Spieler[playerid][iKidnapID] = INVALID_PLAYER_ID;
    //PlayerTextDrawDestroy(playerid, TachoMessage[0][playerid]);
    //PlayerTextDrawDestroy(playerid, TachoMessage[1][playerid]);
    //PlayerTextDrawDestroy(playerid, TachoMessage[2][playerid]);
    DestroyPlayerTacho(playerid);
    //DriveBy_OnPlayerDisconnect(playerid,reason);

    PlayerTextDrawDestroy(playerid, Spectate[0][playerid]);
    PlayerTextDrawDestroy(playerid, Spectate[1][playerid]);
    PlayerTextDrawDestroy(playerid, Spectate[2][playerid]);
    PlayerTextDrawDestroy(playerid, Spectate[3][playerid]);
    PlayerTextDrawDestroy(playerid, BusMessage[playerid]);
    //PlayerTextDrawDestroy(playerid, WantedBar[playerid]);
    PlayerTextDrawDestroy(playerid, Gesucht[playerid]);
    DestroyDynamic3DTextLabel(Spieler[playerid][pWantedLabel]);
    Spieler[playerid][pWantedLabel] = Text3D:INVALID_3DTEXT_ID;
    DestroyDynamic3DTextLabel(Spieler[playerid][pWantedLabelEx]);
    DestroyDynamic3DTextLabel(Spieler[playerid][pBlacklistLabel]);
    Spieler[playerid][pWantedLabelEx] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pBlacklistLabel] = Text3D:INVALID_3DTEXT_ID;
    DestroyDynamic3DTextLabel(Spieler[playerid][pNeuling]);
    Spieler[playerid][pNeuling] = Text3D:INVALID_3DTEXT_ID;
    //DestroyDynamic3DTextLabel(Spieler[playerid][pAdminLabel]);
    Spieler[playerid][pAdminDienst] = 0;
    Spieler[playerid][pBenutzerfarbe] = 0;
    DestroyDynamic3DTextLabel(Spieler[playerid][pAFKLabel]);
    Spieler[playerid][pAFKLabel] = Text3D:INVALID_3DTEXT_ID;
    DestroyDynamic3DTextLabel(Spieler[playerid][pAntiSpawnKill]);
    Spieler[playerid][pAntiSpawnKill] = Text3D:INVALID_3DTEXT_ID;
    DestroyDynamic3DTextLabel(Spieler[playerid][t3dSInfo]);
    Spieler[playerid][t3dSInfo] = Text3D:INVALID_3DTEXT_ID;
    KillTimer(pBackupTimer[playerid]);
    paydaywait[playerid]=1;
    KillTimer(carmsgwait[playerid]);
    KillTimer(pilotwait[playerid]);
    KillTimer(DrogenTimer[playerid]);
    OnPlayerCarUpdate(playerid);
    KillTimer(buswait[playerid]);
    KillTimer(truckwait[playerid]);
    KillTimer(unfreezewait[playerid]);
    KillTimer(knastunfreezetimer[playerid]);
    KillTimer(ReportTimer[playerid]);
    DestroyTaxiTextdraw(playerid);
    // FS LEFT
    format(String,sizeof(String),"[FS-NACHRICHT] Dein Freund %s hat das Spiel verlassen!",sName);
    for(new i ; i < MAX_PLAYERS; i++) {
        if( i != playerid ) {
            if( IsPlayerConnected(i) ) {
                if(IsNameOnFriendList(i,sName,idx) ) {
                    SendClientMessage(i,0x8B008BFF,String);
                }
            }
        }
    }
    if(gPlayerLogged[playerid]){
        SaveAccount(playerid);
    }
    damagesperre[playerid]=0;
    adventmin[playerid]=0;
    Spieler[playerid][pLevel] = 1;
    Spieler[playerid][pHeiratsantragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pMarriage] = INVALID_MARRIAGE;
    format(Spieler[playerid][pMarriageName],32,"Niemand");
    Spieler[playerid][ID] = 0;
    Spieler[playerid][pfrakwarn] = 0;
    Spieler[playerid][pAdmin] = 0;
    Spieler[playerid][pDonateRank] = 0;
    Spieler[playerid][pHours] = 0;
    Spieler[playerid][pSex] = 0;
    Spieler[playerid][pMuted] = 0;
    Spieler[playerid][pExp] = 0;
    Spieler[playerid][pCash] = 0;
    Spieler[playerid][pCrimes] = 0;
    Spieler[playerid][pKills] = 0;
    Spieler[playerid][pDeaths] = 0;
    Spieler[playerid][pArrested] = 0;
    Spieler[playerid][pWantedDeaths] = 0;
    Spieler[playerid][pPhoneBook] = 0;
    Spieler[playerid][pLottoNr] = 0;
    Spieler[playerid][pJob] = 0;
    Spieler[playerid][pPayCheck] = 0;
    Spieler[playerid][pJailed] = 0;
    Spieler[playerid][pJailTime] = 0;
    Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    Spieler[playerid][pfDuty] = 0;
    // Spieler[playerid][pMats] = 0;
    Spieler[playerid][pDrugs] = 0;
    Spieler[playerid][pFraktion] = 0;
    Spieler[playerid][pRank] = 0;
    Spieler[playerid][pSkin] = 0;
    //Spieler[playerid][pHouseKey] = INVALID_HOUSE_KEY;
    //Spieler[playerid][pHotelKey] = INVALID_HOTEL_KEY;
    //Spieler[playerid][pBizKey] = INVALID_BIZ_KEY;
    //Spieler[playerid][pTankKey] = INVALID_TANK_KEY;
    Spieler[playerid][pCarLic] = 0;
    Spieler[playerid][pFlyLic] = 0;
    Spieler[playerid][pBoatLic] = 0;
    Spieler[playerid][pGunLic] = 0;
    Spieler[playerid][pGunLicB] = 0;
    Spieler[playerid][pLKWLic] = 0;
    Spieler[playerid][pMotoLic] = 0;
    Spieler[playerid][pTrakLic] = 0;
    Spieler[playerid][pCarmALic] = 0;
    Spieler[playerid][pPayDay] = 0;
    Spieler[playerid][pTut] = 0; // UNGÜLTIG!
    Spieler[playerid][pWarns] = 0;
    Spieler[playerid][pPerso] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyGeld] = 0;
    Spieler[playerid][pTot] = 0;
    Spieler[playerid][pBanned] = 0;
    Spieler[playerid][pdeacc] = 0;
    fahrlehrerboni[playerid]=0;
    meslock[playerid]=0;
    Spieler[playerid][pschulden] = 0;
    Spieler[playerid][pWeihnachtsday] = 0;
    format(pdeaccadmin[playerid],32,"");
    Spieler[playerid][pWanteds] = 0;
    Spieler[playerid][pBank] = 0;
    Spieler[playerid][pJailType] = 0;
    Spieler[playerid][pTotTime] = 0;
    Spieler[playerid][pTotX] = 0.0;
    Spieler[playerid][pTotY] = 0.0;
    Spieler[playerid][pTotZ] = 0.0;
    Spieler[playerid][pKanister] = 0;
    Spieler[playerid][pHeilReady] = 1;
    Spieler[playerid][pWaffenteile] = 0;
    Spieler[playerid][pWantedCodes] = 0;
    Spieler[playerid][pSafeWantedCodes] = 0;
    // Spieler[playerid][pDrogen] = 0;
    Spieler[playerid][pSafeTeile] = 0;
    //Spieler[playerid][bShowMarker] = false;
    Spieler[playerid][pSafeDrogen] = 0;
    Spieler[playerid][pSpawnChange] = 0;
    Spieler[playerid][pHandyState] = 1;
    Spieler[playerid][pFrakLohn] = 0;
    Spieler[playerid][pTimeBan] = 0;
    Spieler[playerid][pMuteTime] = 0;
    Spieler[playerid][pAngel] = 0;
    Spieler[playerid][pFische] = 0;
    Spieler[playerid][pKoeder] = 0;
    Spieler[playerid][pMaxFishes] = 0;
    Spieler[playerid][pMaxVerloren] = 0;
    Spieler[playerid][pFishLic] = 0;
    Spieler[playerid][pFPunkte] = 0;
    Spieler[playerid][pFBPunkte] = 0;
    Spieler[playerid][pFlPunkte] = 0;
    Spieler[playerid][pMotoPunkte] = 0;
    Spieler[playerid][pGunPunkte] = 0;
    Spieler[playerid][pKekse] = 0;
    Spieler[playerid][pZigaretten] = 0;
    Spieler[playerid][pFrakSperre] = 0;
    Spieler[playerid][pHartz4] = 0;
    Spieler[playerid][pKopfgeld] = 0;
    Spieler[playerid][pKopfgeldID] = INVALID_PLAYER_ID;
    Spieler[playerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pWheelAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][bMaske] = false;
    Spieler[playerid][wbMaske] = false;
    Spieler[playerid][abMaske] = false;
    Spieler[playerid][bMundbinde] = false;
    ClearPlayerTaxiSlots(playerid);
    Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
    Spieler[playerid][pVehicleVerleih] = INVALID_VEHICLE_ID;
    Spieler[playerid][tickVehicleVerleih] = 0;
    Spieler[playerid][pSpice] = 0;
    Spieler[playerid][pSafeSpice] = 0;
    Spieler[playerid][pHausSafeboxSpice] = 0;
    Spieler[playerid][pVehiclePort] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyNr_Temp] = 0;
    Spieler[playerid][pHandyNr_Counter] = 0;
    SelectedPlayer[playerid] = INVALID_PLAYER_ID;

    Spieler[playerid][tDrink] = INVALID_TIMER_ID;
    Spieler[playerid][tSpawnView] = INVALID_TIMER_ID;
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;

    Spieler[playerid][punixWantedCodes] = 0;
    Spieler[playerid][bHasSex] = false;
    Spieler[playerid][bNoDMZone] = false;
    Spieler[playerid][bWantedHacking] = false;
    Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
    Spieler[playerid][ibInterviewStat] = 0;
    Spieler[playerid][punixFlyhack] = Spieler[playerid][unixUpdate];
    Spieler[playerid][pStartbonus] = 0;
    Spieler[playerid][pDetektivPoints] = 1;
    Spieler[playerid][pHurePoints] = 1;
    Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
    Spieler[playerid][pSecureCodeLevel] = -1;
    Spieler[playerid][pVertragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pVertragText][0] = '\0';
    oldposx[playerid]=0,oldposy[playerid]=0,oldposz[playerid]=0;
    Spieler[playerid][pWantedLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pWantedLabelEx] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pBlacklistLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pNeuling] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][t3dSInfo] = Text3D:INVALID_3DTEXT_ID;
    //Spieler[playerid][pAdminLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pAdminDienst] = 0;
    Spieler[playerid][pBenutzerfarbe] = 0;
    Spieler[playerid][pKekseValue] = 0;
    Spieler[playerid][pGeldcheckID] = INVALID_PLAYER_ID;
    Spieler[playerid][pGeldcheckBetrag] = 0;
    Spieler[playerid][pBankKontoPin] = INVALID_BANK_PIN;
    Spieler[playerid][pBankKonto] = 0;
    Spieler[playerid][pLoginVersuch] = 0;
    Spieler[playerid][pJobWechsel] = 0;
    Spieler[playerid][pDrogenSamen] = 0;
    Spieler[playerid][unixGetSamenCooldown] = 0;
    Spieler[playerid][pAutoknackerExtraLohn] = 0;
    Spieler[playerid][punixFSperre] = 0;
    Spieler[playerid][punixFBSperre] = 0;
    Spieler[playerid][punixFlSperre] = 0;
    Spieler[playerid][punixGunSperre] = 0;
    Spieler[playerid][punixLKWSperre] = 0;
    Spieler[playerid][punixMotoSperre] = 0;
    Spieler[playerid][pCommandSpam] = 0;
    Spieler[playerid][pChatSpam] = 0;
    Spieler[playerid][pPinVergessen] = 0;
    Spieler[playerid][pHaustierSpawned] = false;
    Spieler[playerid][pHaustierObject] = INVALID_OBJECT_ID;
    Spieler[playerid][pWiederbelebung] = 0;
    Spieler[playerid][pLawyerPoints] = 0;
    Spieler[playerid][tRadarfallenWarnung] = INVALID_TIMER_ID;
    Spieler[playerid][pAutomatik] = 0;
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    Spieler[playerid][pMuellCP] = 0;
    Spieler[playerid][pMuell][0] = 0;
    Spieler[playerid][pMuell][1] = 0;
    Spieler[playerid][pGeldTCP] = 0;
    Spieler[playerid][pGELDT][0] = 0;
    Spieler[playerid][pGELDT][1] = 0;
    Spieler[playerid][pCowJob] = 0;
    Spieler[playerid][pCow][0] = 0;
    Spieler[playerid][pCow][1] = 0;
    Spieler[playerid][pCow][2] = 0;
    Spieler[playerid][pFahrgeschaeft] = -1;
    pDrunkLevelLast[playerid] = 0;
    pFPS[playerid] = 0;

    Spieler[playerid][pBMOD] = 0;
    Spieler[playerid][pLobe] = 0;
    Spieler[playerid][pKoffer] = false;
    Spieler[playerid][pHelm] = 0;
    Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
    Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
    Spieler[playerid][pPremiumNeon] = 0;
    Spieler[playerid][pKillsGangFight] = 0;
    Spieler[playerid][pMP3Player] = 0;
    Spieler[playerid][pRadarfallenWarnung] = 0;
    Spieler[playerid][pPremiumBizSlot] = 0;
    Spieler[playerid][pPremiumCarSlot] = 0;
    format(postpsenden[playerid],MAX_PLAYER_NAME,"");
    format(postpid[playerid],300,""),firstspawn[playerid]=0;
    Spieler[playerid][pKillsGangFightSession] = 0;

    ClearKFZZulassung(playerid);
    ClearPolizeiPartner(playerid);
    ReleasePlayerKeys(playerid);
    ResetKoffer(playerid);

    //gSpawned{playerid} = 0;
    gPlayerLogged[playerid] = 0;
    AcceptStats[playerid] = 999;
    AcceptAngelStats[playerid] = 999;
    AcceptCarSell[playerid] = 999;
    AcceptCarSellPreis[playerid] = 0;
    RepairCar[playerid] = 999;
    RepairCarPreis[playerid] = 0;
    RefillCar[playerid] = 999;
    RefillCarPreis[playerid] = 0;
    ZettelID[playerid] = 999;
    ZettelPreis[playerid] = 0;
    TazerTime[playerid] = 1;
    Tazered[playerid] = 0;
    Cuffed[playerid] = 0;
    MedicHealID[playerid] = 999;
    MedicHealPreis[playerid] = 0;
    Refueling[playerid] = 0;
    MakeAnimation[playerid]= 0;
    FrakInviteID[playerid]=999;
    BankWert[playerid] = 0;
    BankAn[playerid] = 999;
//  wheelmanclient[playerid]=0;
    PlayerIsPaintballing[playerid] = 0;
    AnwaltID[playerid] = 999;
    AnwaltPreis[playerid] = 0;
    CurrentPhone[playerid] = 999;
    pDrogenID[playerid] = 999;
    pDrogenMenge[playerid] = 0;
    pDrogenPreis[playerid] = 0;
    pSpiceID[playerid] = 999;
    pSpiceMenge[playerid] = 0;
    pSpicePreis[playerid] = 0;
    pWTeileID[playerid] = 999;
    pWTeileMenge[playerid] = 0;
    pWTeilePreis[playerid] = 0;
    pDrogenEinfluss[playerid] = 0;
    pWaffenPlayer[playerid] = 999;
    pWaffenPreis[playerid] = 0;
    pWaffenID[playerid] = 0;
    pFahrStunde[playerid] = 0;
    pCar[playerid] = INVALID_VEHICLE_ID;
    pCheckpoint[playerid] = CP_NONE;
    pMakeTutorial[playerid] = 0;
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    NeedCop[playerid] = 0;
    NeedMedic[playerid] = 0;
    NeedKFZ[playerid] = 0;
    NeedOAMT[playerid] = 0;
    NeedAWALT[playerid] = 0;
    pUnderCover[playerid] = 0;
    pCurrentSite[playerid] = 0;
    JobVehicle[playerid] = INVALID_VEHICLE_ID;
    IsAFK[playerid] = 0;
    NeedBackup[playerid] = 0;
    IsPlayerSpectating[playerid]= 0;
    SpectatedPlayer[playerid]= INVALID_PLAYER_ID;
    pCurrentBiz[playerid] = 0;
    pSkinSelection[playerid] = 0;
    pChoosedSkin[playerid] = 0;
    pGC[playerid] = 0;
    pFC[playerid] = 0;
    pJC[playerid] = 0;
    pBC[playerid] = 0;
    pCC[playerid] = 0;
    pJL[playerid] = 0;
    wantedcodename[playerid]=MAX_PLAYERS;
    ReportCall[playerid]=999;
    PlayerNeedsHelp[playerid] = 0;
    IsPlayerFishing[playerid] = 0;
    NeedPIZZA[playerid] = 0;
    NeedTAXI[playerid] = 0;
    NeedWHEEL[playerid] = 0;
    g_aiDestroyedVehicles{playerid} = 0;
    TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
    Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
    Spieler[playerid][pHouseAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pHouseAngebot][1] = 0;
    Spieler[playerid][pBizAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pBizAngebot][1] = 0;
    Spieler[playerid][pTankeAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pTankeAngebot][1] = 0;
    Spieler[playerid][tdTaxi] = Text:INVALID_TEXT_DRAW;
    Spieler[playerid][pTaxiVehicle] = INVALID_VEHICLE_ID;
    permissionleavegz[playerid]=0;
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        Spieler[playerid][pTaxiKundenStart][0] = 0;
        Spieler[playerid][pTaxiKunden][0] = INVALID_PLAYER_ID;
    }
    return 1;
}

#define MAX_CUSTOM_OBJECTS		20

new customObject[MAX_CUSTOM_OBJECTS];

stock DestroyAllCustomObjects() {
	for (new i; i < sizeof(customObject); i++)
		DestroyDynamicObject(customObject[i]);

	return 1;
}

stock GetCustomObjectFreeIndex() {
	for (new i; i < sizeof(customObject); i++)
		if (customObject[i] == 0) return i;

	return MAX_CUSTOM_OBJECTS;
}

stock GetCustomObjectIDIndex(objectID) {
	for (new i; i < sizeof(customObject); i++)
		if (customObject[i] == objectID) return i;

	return MAX_CUSTOM_OBJECTS;
}

CMD:destroyallobjects(playerid) {
	if (Spieler[playerid][pAdmin] < 6) return 1;

	DestroyAllCustomObjects();
	return SendClientMessage(playerid, COLOR_WHITE, "All custom objects destroyed.");
}

CMD:destroyobject(playerid, params[]) {
	if (Spieler[playerid][pAdmin] < 6) return 1;

	new objectID;
	if (sscanf(params, "i", objectID)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /destroyobject [Object-ID]");
	new index = GetCustomObjectIDIndex(objectID);
	if (index == MAX_CUSTOM_OBJECTS) return SendClientMessage(playerid, COLOR_RED, "Invalid object id.");
	customObject[index] = 0;
	DestroyDynamicObject(objectID);
	return SendClientMessage(playerid, COLOR_WHITE, "Custom object destroyed.");
}

CMD:editobject(playerid, params[]) {
	if (Spieler[playerid][pAdmin] < 6) return 1;

	new objectID;
	if (sscanf(params, "i", objectID)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /Editobject [Object-ID]");
	EditDynamicObject(playerid, objectID);
	return 1;
}

CMD:createobject(playerid, params[]) {
	if (Spieler[playerid][pAdmin] < 6) return 1;

	new modelID;
	if (sscanf(params, "i", modelID)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /Createobj [Model-ID]");

	new Float:x, Float:y, Float:z, message[128];
	GetPlayerPos(playerid, x, y, z);
	new index = GetCustomObjectFreeIndex();
	if (index == MAX_CUSTOM_OBJECTS) return SendClientMessage(playerid, COLOR_RED, "Max custom objects exceeded.");

	customObject[index] = CreateDynamicObject(modelID, x, y + 1.0, z + 1.0, 0.000000, 0.000000, 0.000000, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	format(message, sizeof(message), "Object ID: %i, model: %i", customObject[index], modelID);
	SendClientMessage(playerid, COLOR_WHITE, message);
	EditObject(playerid, customObject[index]);
	return 1;
}

CMD:vw(playerid) {
	if (Spieler[playerid][pAdmin] < 2) return 1;

	new message[30];
	format(message, sizeof(message), "Virtual World: %i", GetPlayerVirtualWorld(playerid));
	return SendClientMessage(playerid, COLOR_WHITE, message);
}

CMD:debug(playerid, params[]) {
	if (Spieler[playerid][pAdmin] < 6) return 1;

	new animlib[32], animname[32];
	if (sscanf(params, "s[32]s[32]", animlib, animname)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /debug [animlib] [animname]");

	LoopingAnim(playerid, animlib, animname, 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, COLOR_WHITE, "{00FF00}>> {FFFFFF}Animation set.");
	return 1;
}

CMD:sp(playerid)
{
    if (!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 3 ||Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16
        || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22)) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist oder Ordnungsbeamter.");
    if (Spieler[playerid][pRank] < 1) return SendClientMessage(playerid, COLOR_RED, "Dein Rang reicht dafür nicht aus.");

    return ShowPlayerDialog(playerid,DIALOG_RB,DIALOG_STYLE_LIST,"Straßensperren","Kleine Sperre\nGroße Sperre\nVerkehrskegel\nUmleitungsschild\nGelbe Barriere\nStraßensperre entfernen\nAlle Straßensperren entfernen\nNagelband platzieren\nNagelband entfernen\nAlle Nagelbänder entfernen","Wählen","Abbrechen");
}

CMD:nagelband(playerid) return cmd_sp(playerid);

CMD:suchatm(playerid)
{
    new Float:x, Float:y, Float:z, Float:distance, Float:smallestDistance = 10000, index = 0;
    GetPlayerPos(playerid, x, y, z);
    for (new i = 0; i < sizeof(ATM); i++)
        if ((distance = GetDistance(x, y, z, ATM[i][0], ATM[i][1], ATM[i][2])) < smallestDistance) index = i, smallestDistance = distance;

    SetPlayerCheckpointEx(playerid, ATM[index][0], ATM[index][1], ATM[index][2], 2.0, CP_NAVI1);
    return SendClientMessage(playerid, COLOR_GREEN, "[INFO] {FFFFFF}Der nächste Bankautomat wurde dir auf der Rot Karte markiert.");
}

CMD:flugzeugrepair(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,10.0, AIRPORTLS_REPAIR_POINT))
    {
        if(IsAPlane(GetVehicleModel(GetPlayerVehicleID(playerid))))
        {
            if(Spieler[playerid][pCash]>=2000)
            {
                SetVehicleHealth(GetPlayerVehicleID(playerid),1000);
                GivePlayerCash(playerid,-2000);
                RepairVehicle(GetPlayerVehicleID(playerid));
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Du benötigst für die Reparatur 2.000$.");
            }
        }
        else
        {
            SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Flugzeug!");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht an der Werkstatt am Los Santos Airport.");
    }
    return 1;
}

new fahklingel[MAX_PLAYERS];
CMD:ruflehrer(playerid)
{
    if(fahklingel[playerid]==0)
    {
        if(IsPlayerInRangeOfPoint(playerid,5.0,1234.3380,-1823.9462,13.5909))
        {
            new lehreron;
            for(new i;i<MAX_PLAYERS;i++)
            {
                if(IsPlayerConnected(i))
                {
                    if(Spieler[i][pFraktion] == 8)
                    {
                        lehreron++;
                        new string[150];
                        format(string,150,"[F-KLINGEL] %s befindet sich an der Fahrschule und benötigt ein Fahrlehrer.",GetName(playerid));
                        SendClientMessage(i,COLOR_ORANGE,string);
                    }
                }
            }
            if(lehreron>=1)
            {
                fahklingel[playerid]=1;
                SetTimerEx("fhaklingel",180000,false,"i",playerid);
                SendClientMessage(playerid,COLOR_GREEN,"Du hast ein Fahrlehrer gerufen.");
            }
            else
            {
                SendClientMessage(playerid,COLOR_GREEN,"Es sind keine Fahrlehrer online.");
            }
        }
        else
        {
            SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht an der Fahrschule.");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Du kannst nur alle 3 Minuten die Klingel betätigen.");
    }
    return 1;
}
forward fhaklingel(playerid);
public fhaklingel(playerid)
{
    fahklingel[playerid]=0;
}
CMD:tuningabbauen(playerid)
{
    new newcar = GetPlayerVehicleID(playerid);
    if(newcar == PlayerCar[playerid][PlayerKey[playerid]][CarId])
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, 1782.8275,-1702.7240,13.5096))
        {
            if(Spieler[playerid][pCash]>=3000)
            {
                PlayerCar[playerid][PlayerKey[playerid]][CarNitro]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarHyd]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarWheel]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarAusp]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarSideL]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarSideR]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarFB]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarRB]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarSpoiler]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarRoof]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarHood]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarVents]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarLamps]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarPJ]=-1;
                new Float:X, Float:Y,Float:Z,Float:xa,Float:xb,Float:xc;
                new Float:z_rot,Float:xz;
                GetPlayerPos(playerid, X,Y,Z);
                GetVehicleZAngle(newcar, z_rot);
                xa=PlayerCar[playerid][PlayerKey[playerid]][CarPos_x];
                xb=PlayerCar[playerid][PlayerKey[playerid]][CarPos_y];
                xc=PlayerCar[playerid][PlayerKey[playerid]][CarPos_z];
                xz=PlayerCar[playerid][PlayerKey[playerid]][CarRotate];
                //
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_x] = X;
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_y] = Y;
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_z] = Z;
                PlayerCar[playerid][PlayerKey[playerid]][CarRotate] = z_rot;
                SendClientMessage(playerid, COLOR_GREEN, "Dein Tuning wurde vollständig für 3.000$ abgebaut.");
                SavePlayerCar( playerid, PlayerKey[playerid] );
                PlayerCarSpawn(playerid,PlayerKey[playerid]);
                Spieler[playerid][pCash]-=3000;
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_x]=xa;
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_y]=xb;
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_z]=xc;
                PlayerCar[playerid][PlayerKey[playerid]][CarRotate]=xz;
                SavePlayerCar( playerid, PlayerKey[playerid] );
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Du hast nicht genügend Geld. Du benötigst 3.000$.");
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED,"Du befindest dich nicht an der Werkstatt, wo du dein Tuning abbauen lassen kannst.");
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht in deinem Fahrzeug oder du hast keinen Schlüssel.");
    }
    return 1;
}
CMD:delmarker(playerid,params[])
{
    DisablePlayerCheckpointEx(playerid);
    return 1;
}
CMD:gebietupgrade(playerid,params[])
{
    for(new index;index<MAX_GANGZONES;index++)
    {
        if(!IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ])&&index==MAX_GANGZONES-1)
        {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der nähe des Icons");
        }
        else if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ]))
        {
            if(Spieler[playerid][pFraktion]!=g_GangZone[index][GZ_iOwner])
            {
                return SendClientMessage(playerid, COLOR_RED, "Diese Gangzone gehört dir nicht");
            }
            /*if(Spieler[playerid][pRank] < 6)
            {
                return SendClientMessage(playerid, COLOR_RED, "Du bist kein Leader der Fraktion");
            }*/
            if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ])&&
            Spieler[playerid][pFraktion]==g_GangZone[index][GZ_iOwner] && Spieler[playerid][pRank] > 4)
            {
                ShowPlayerDialog(playerid,DIALOG_GUP,DIALOG_STYLE_LIST,"Gebietupgrade","Maschine für Waffenteile - Kaufpreis: $450.000\nMaschine für Drogen -  Kaufpreis: $300.000\nVerpachtung - Einnahmen: $50.000","Auswählen","Abbrechen");
            }
            break;
        }
    }
    return 1;
}
CMD:gebietinfo(playerid,params[])
{
    for(new index;index<MAX_GANGZONES;index++)
    {
        if(!IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ])&&index==MAX_GANGZONES-1)
        {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Icons.");
        }
        else if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ]))
        {
            if(Spieler[playerid][pFraktion]!=g_GangZone[index][GZ_iOwner])
            {
                return SendClientMessage(playerid, COLOR_RED, "Dieses Gebiet gehört dir nicht.");
            }
            if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ])&&
            Spieler[playerid][pFraktion]==g_GangZone[index][GZ_iOwner])
            {
                new gupstr[200];
                if(g_GangZone[index][GZ_igupgrade]==3)
                {
                    format(gupstr,200,"=====GEBIETINFO=====\nDas Gangfight-Gebiet hat durch die Verpachtung bereits $%s eingenommen.",
                    AddDelimiters(g_GangZone[index][GZ_igbestand]));
                }
                if(g_GangZone[index][GZ_igupgrade]==1)
                {
                    format(gupstr,200,"=====GEBIETINFO=====\nDas Gangfight-Gebiet hat aktuell %d Waffenteile produziert.",
                    g_GangZone[index][GZ_igbestand]);
                }
                if(g_GangZone[index][GZ_igupgrade]==2)
                {
                    format(gupstr,200,"=====GEBIETINFO=====\nDas Gangfight-Gebiet hat aktuell %d Gramm Drogen produziert.",
                    g_GangZone[index][GZ_igbestand]);
                }
                SendClientMessage(playerid,COLOR_YELLOW,gupstr);
            }
            break;
        }
    }
    return 1;
}
CMD:gebietbestand(playerid,params[])
{
    new bestandname[30],wbestand;
    for(new index;index<MAX_GANGZONES;index++)
    {
        if(!IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ])&&index==MAX_GANGZONES-1)
        {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der nähe des Icons");
        }
        else if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ]))
        {
            if(Spieler[playerid][pFraktion]!=g_GangZone[index][GZ_iOwner])
            {
                return SendClientMessage(playerid, COLOR_RED, "Diese Gangzone gehört dir nicht");
            }
            /*if(Spieler[playerid][pRank] < 5)
            {
                return SendClientMessage(playerid, COLOR_RED, "Du bist kein Co. Leader oder Leader der Fraktion");
            }*/
            if(sscanf(params,"s[30]i",bestandname,wbestand))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gebietbestand [rausnehmen/reinlegen] [Anzahl]");
            if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ])&&
            Spieler[playerid][pFraktion]==g_GangZone[index][GZ_iOwner] && Spieler[playerid][pRank] > 4)
            {
                if(wbestand>0)
                {
                    if(strcmp(bestandname,"rausnehmen",true)==0)
                    {
                        if(g_GangZone[index][GZ_igbestand]>=wbestand)
                        {
                            g_GangZone[index][GZ_igbestand]-=wbestand;
                            if(g_GangZone[index][GZ_igupgrade]==1)
                            {
                                Spieler[playerid][pWaffenteile]+=wbestand;
                                SendClientMessage(playerid,COLOR_GREEN,"Du hast erfolgreich die Waffenteile aus dem Bestand genommen.");
                            }
                            else if(g_GangZone[index][GZ_igupgrade]==2)
                            {
                                Spieler[playerid][pDrugs]+=wbestand;
                                SendClientMessage(playerid,COLOR_GREEN,"Du hast erfolgreich die Drogen aus dem Bestand genommen.");
                            }
                            else if(g_GangZone[index][GZ_igupgrade]==3)
                            {
                                GivePlayerCash(playerid,wbestand);
                                SendClientMessage(playerid,COLOR_GREEN,"Du hast erfolgreich das Geld aus dem Bestand genommen.");
                            }
                            SaveGangZones();
                        }
                        else
                        {
                            SendClientMessage(playerid,COLOR_RED,"So viele Waren hast du nicht im Bestand.");
                        }
                    }
                    else if(strcmp(bestandname,"reinlegen",true)==0)
                    {
                        if(g_GangZone[index][GZ_igupgrade]==1)
                        {
                            if(Spieler[playerid][pWaffenteile]>=wbestand)
                            {
                                Spieler[playerid][pWaffenteile]-=wbestand;
                                g_GangZone[index][GZ_igbestand]+=wbestand;
                                SaveGangZones();
                                SendClientMessage(playerid,COLOR_GREEN,"Du hast erfolgreich die Waffenteile in den Bestand reingelegt.");
                            }
                            else
                            {
                                SendClientMessage(playerid,COLOR_RED,"So viele Waffenteile hast du nicht dabei.");
                            }
                        }
                        else if(g_GangZone[index][GZ_igupgrade]==2)
                        {
                            if(Spieler[playerid][pDrugs]>=wbestand)
                            {
                                Spieler[playerid][pDrugs]-=wbestand;
                                g_GangZone[index][GZ_igbestand]+=wbestand;
                                SaveGangZones();
                                SendClientMessage(playerid,COLOR_GREEN,"Du hast erfolgreich die Drogen in den Bestand reingelegt.");
                            }
                            else
                            {
                                SendClientMessage(playerid,COLOR_RED,"So viele Drogen hast du nicht dabei.");
                            }
                        }
                        else if(g_GangZone[index][GZ_igupgrade]==3)
                        {
                            if(GetPlayerMoney(playerid)>=wbestand)
                            {
                                GivePlayerCash(playerid,-wbestand);
                                g_GangZone[index][GZ_igbestand]+=wbestand;
                                SaveGangZones();
                                SendClientMessage(playerid,COLOR_GREEN,"Du hast erfolgreich das Geld in den Bestand reingelegt.");
                            }
                            else
                            {
                                SendClientMessage(playerid,COLOR_RED,"So viel Geld hast du nicht dabei.");
                            }
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid,COLOR_RED,"Gib rausnehmen/reinlegen an um Waren aus/in den Bestand zu legen.");
                    }
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Ungültige Anzahl.");
                }
                break;
            }
        }
    }
    return 1;
}

forward gwarentimer();
public gwarentimer()
{
    for(new index;index<MAX_GANGZONES;index++)
    {
        if(g_GangZone[index][GZ_igupgrade]!=0)
        {
            if(g_GangZone[index][GZ_igupgrade] == 3) // Geld
                g_GangZone[index][GZ_igbestand] += 75000;
            else if (g_GangZone[index][GZ_igupgrade] == 2) // Drogen
                g_GangZone[index][GZ_igbestand] += 200;
            else if (g_GangZone[index][GZ_igupgrade] == 1) // WTeile
                g_GangZone[index][GZ_igbestand] += 3000;
            SaveGangZones();
        }
    }
}

CMD:adventskweralender(playerid)
{
    new wjahr,wmonat,wday;
    getdate(wjahr,wmonat,wday);
    if(wmonat==12)
    {
        if(wday>=1&&wday<=24)
        {
            if(IsPlayerInRangeOfPoint(playerid,30,1226.4282,-1655.1801,13.5663))
            {
                if(adventmin[playerid]>=40)
                {
                    if(Spieler[playerid][pBoeller] == 0)
                    {
                        adventmin[playerid]=0;
                        new adventname[40],wgeschenk=random(100);
                        if(wgeschenk<15)
                        {
                            Spieler[playerid][pLevel]++;
                            SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
                            adventname="+1 Level-UP";
                        }
                        else if(wgeschenk<30)
                        {
                            GivePlayerCash(playerid,200000);
                            adventname="200.000$";
                        }
                        else if(wgeschenk<65)
                        {
                            Spieler[playerid][pExp]+=5;
                            GivePlayerCash(playerid,50000);
                            adventname="+5 Respektpunkte und +50.000$";
                        }
                        else if(wgeschenk<100)
                        {
                            Spieler[playerid][pExp]+=3;
                            GivePlayerCash(playerid,100000);
                            adventname="+3 Respektpunkte und +100.000$";
                        }
                        new string[200];
                        format(string,200,"Dein Adventsgeschenk: %s. Wir wünschen dir eine frohe Weihnachtszeit!",adventname);
                        SendClientMessage(playerid,COLOR_GREEN,string);
                        Spieler[playerid][pBoeller] = 1;
                    }
                    else
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du hast heute bereits ein Adventstürchen geöffnet!");
                    }
                }
                else
                {
                    new winfo[71];
                    format(winfo,71,"Du bist aktuell %i/40 Minuten durchgehend online.",adventmin[playerid]);
                    SendClientMessage(playerid,COLOR_RED,winfo);
                    SendClientMessage(playerid,COLOR_RED,"Du musst 40 Minuten durchgehend online sein, um das heutige Weihnachtsgeschenk zu erhalten!");
                }
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht am Adventskalender! Mit /Findekalender wird der Adventskalender auf der Karte markiert!");
            }
        }
    }
    return 1;
}
CMD:gangfightinfo(playerid)
{
    new string[400], bool:gangfightRunning = false;
    for(new i;i<MAX_GANGZONES;i++)
    {
        if(g_GangZone[i][GZ_iAttacker]!=0)
        {
            new wartime;
            wartime=gettime()-g_GangZone[i][GZ_iGangWarEnd];
            format(string,400,"%s (%i Punkte) vs. %s (%i Punkte), Gangfightende: in %i Sekunden",
            GetFactionNameOfFaction(g_GangZone[i][GZ_iAttacker]),g_GangZone[i][GZ_iAttackerScore],
            GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]),g_GangZone[i][GZ_iOwnerScore],wartime);
            SendClientMessage(playerid,COLOR_YELLOW,string);
            gangfightRunning = true;
        }
    }
    if (!gangfightRunning) SendClientMessage(playerid, COLOR_YELLOW, "Zur Zeit läuft kein Gangfight.");
    return 1;
}

new flammen[MAX_HOUSES][8];
new flammentimer[MAX_HOUSES];
CMD:brandlegen(playerid)
{
    if(Spieler[playerid][pKanister] > 0)
    {
        if( GetOnlineMedic(playerid) <  3) {
            SendClientMessage(playerid, COLOR_RED, "Es sind nicht genug Feuerwehrmänner online!");
            return 1;
        }
        /*if( GetOnlineMedic(playerid) <  300) {
            SendClientMessage(playerid, COLOR_RED, "Die Funktion ist aufgrund kleinen Verfeinerungen, die noch vorzunehmen sind, deaktiviert.");
            SendClientMessage(playerid, COLOR_RED, "Viele Grüße Puma :-)");
            return 1;
        }*/
        for(new i;i<MAX_HOUSES;i++)
        {
            if(IsPlayerInRangeOfPoint(playerid,0.8,Haus[i][EnterX],Haus[i][EnterY],Haus[i][EnterZ]))
            {
                if(strcmp(Haus[i][hBesitzer],"Niemand",true)==0)
                {
                    SendClientMessage(playerid,COLOR_RED,"Dieses Haus hat keinen Besitzer");
                }
                else
                {
                    flammen[i][0]=AddFire(Haus[i][EnterX]-1,Haus[i][EnterY],Haus[i][EnterZ]);
                    flammen[i][1]=AddFire(Haus[i][EnterX]+1,Haus[i][EnterY],Haus[i][EnterZ]);
                    flammen[i][2]=AddFire(Haus[i][EnterX]-2,Haus[i][EnterY],Haus[i][EnterZ]);
                    flammen[i][3]=AddFire(Haus[i][EnterX]+2,Haus[i][EnterY],Haus[i][EnterZ]);
                    flammen[i][4]=AddFire(Haus[i][EnterX],Haus[i][EnterY]+1,Haus[i][EnterZ]);
                    flammen[i][5]=AddFire(Haus[i][EnterX],Haus[i][EnterY]+2,Haus[i][EnterZ]);
                    flammen[i][6]=AddFire(Haus[i][EnterX],Haus[i][EnterY]-1,Haus[i][EnterZ]);
                    flammen[i][7]=AddFire(Haus[i][EnterX],Haus[i][EnterY]-2,Haus[i][EnterZ]);
                    flammentimer[i]=SetTimerEx("flammetimer",600000,false,"i",i);
                    Spieler[playerid][pKanister]--;
                    for(new x;x<MAX_PLAYERS;x++)
                    {
                        if(IsPlayerConnected(x))
                        {
                            if(!IsPlayerNPC(x))
                            {
                                if(Spieler[x][pFraktion]==3)
                                {
                                    new string[150];
                                    format(string,150,"ZENTRALE: Hausnummer %i steht unter Flammen!",Haus[i][hID]);
                                    SendClientMessage(x,COLOR_RED,string);
                                }
                                if(Spieler[x][pFraktion]==1)
                                {
                                    new string[150];
                                    format(string,150,"ZENTRALE: An Hausnummer %i wird eine Brandstiftung gemeldet!",Haus[i][hID]);
                                    SendClientMessage(x,COLOR_RED,string);
                                }
                                if(strcmp(Haus[i][hBesitzer],GetName(x),true)==0)
                                {
                                    SendClientMessage(x,COLOR_RED,"An deinem Haus wurde ein Brand gelegt! Die Feuerwehr ist informiert.");
                                }
                            }
                        }
                    }
                }
                break;
            }
            else if(i==MAX_HOUSES-1)
            {
                SendClientMessage(playerid,COLOR_RED,"Du befindest dich an keinem Haus.");
            }
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Tankkanister, um ein Brand zu legen.");
    }
    return 1;
}
forward flammencheck(flammeid);
public flammencheck(flammeid)
{
//  print("DEBUG: Brandlegen System, flammencheck(flammeid) aufgerufen!");
    for(new i;i<MAX_HOUSES;i++)
    {
        for(new x;x<8;x++)
        {
            if(flammeid==flammen[i][x]&&flammen[i][x]!=0)
            {
                flammen[i][x]=0;
                print("DEBUG: Brandlegen System, flammen[i][x] auf 0 gesetzt");
                if(flammen[i][0]==0&&flammen[i][1]==0&&flammen[i][2]==0&&flammen[i][3]==0&&flammen[i][4]==0&&flammen[i][5]==0&&flammen[i][6]==0&&flammen[i][7]==0)
                {
                    print("DEBUG: Brandlegen System, flammen[i][x] alles auf 0");
                    KillTimer(flammentimer[i]);
                    flammentimer[i]=0;
                    for(new playerid;playerid<MAX_PLAYERS;playerid++)
                    {
                        if(IsPlayerConnected(playerid))
                        {
                            if(!IsPlayerNPC(playerid))
                            {
                                if(Spieler[playerid][pFraktion]==3)
                                {
                                    new string[150];
                                    format(string,150,"ZENTRALE: Der Brand an Hausnummer %d wurde gelöscht.",Haus[i][hID]);
                                    SendClientMessage(playerid,COLOR_GREEN,string);
                                }
                                if(strcmp(Haus[i][hBesitzer],GetName(playerid),true)==0)
                                {
                                    SendClientMessage(playerid,COLOR_GREEN,"Die Feuerwehr konnte das Feuer bekämpfen!");
                                }
                            }
                        }
                    }
                }
                i=MAX_HOUSES,x=8;
            }
        }
    }
    return 1;
}
forward flammetimer(brandid);
public flammetimer(brandid)
{
    Haus[brandid][hKasse]-=15000;
    KillFire(flammen[brandid][0]);
    KillFire(flammen[brandid][1]);
    KillFire(flammen[brandid][2]);
    KillFire(flammen[brandid][3]);
    KillFire(flammen[brandid][4]);
    KillFire(flammen[brandid][5]);
    KillFire(flammen[brandid][6]);
    KillFire(flammen[brandid][7]);
    for(new x;x<MAX_PLAYERS;x++)
    {
        if(IsPlayerConnected(x))
        {
            if(!IsPlayerNPC(x))
            {
                if(Spieler[x][pFraktion]==3)
                {
                    new string[150];
                    format(string,150,"ZENTRALE: Der Brand an Hausnummer %d konnte nicht gelöscht werden!",Haus[brandid][hID]);
                    SendClientMessage(x,COLOR_RED,string);
                }
                if(strcmp(Haus[brandid][hBesitzer],GetName(x),true)==0)
                {
                    SendClientMessage(x,COLOR_RED,"Das Feuer konnte nicht gelöscht werden! Dein Schaden beläuft sich auf 15.000$");
                }
            }
        }
    }
}
CMD:gebeskill(playerid,params[])
{
    new pid,skillname[32],skilllevel;
    if(sscanf(params,"us[32]i",pid,skillname,skilllevel))return SendClientMessage(playerid,COLOR_RED,"Befehl: /Gebeskill [playerid] [Skillname] [SkillLevel]");
    if(Spieler[playerid][pAdmin]>=3)
    {
        if(IsPlayerConnected(pid))
        {
            if(skilllevel<1||skilllevel>6)
            {
                SendClientMessage(playerid,COLOR_RED,"Fehler: Das ausgewählte Level muss mindestens 1 betragen und maximal 6");
            }
            else if(strcmp(skillname,"Hure",true)==0||strcmp(skillname,"Anwalt",true)==0||strcmp(skillname,"Waffendealer",true)==0||strcmp(skillname,"Detektiv",true)==0||strcmp(skillname,"Drogendealer",true)==0)
            {
                if(strcmp(skillname,"Hure",true)==0)
                {
                    if(skilllevel==6){skilllevel=5;}
                    Spieler[pid][pHurePoints]=skilllevel;
                    new string[200];
                    format(string,200,"%s %s hat dir den Hure Skill auf das Level %i gesetzt", GetPlayerAdminRang(playerid), GetName(playerid), skilllevel);
                    SendClientMessage(pid,COLOR_GREEN,string);
                    format(string,200,"Du hast erfolgreich dem Spieler %s beim Hure Skill das Level auf %i gesetzt",GetName(pid),skilllevel);
                    SendClientMessage(playerid,COLOR_GREEN,string);
                }
                if(strcmp(skillname,"Anwalt",true)==0)
                {
                    new skillpoints;
                    if(skilllevel==1)
                    {
                        skillpoints=0;
                    }
                    else if(skilllevel==2)
                    {
                        skillpoints=20;
                    }
                    else if(skilllevel==3)
                    {
                        skillpoints=80;
                    }
                    else if(skilllevel==4)
                    {
                        skillpoints=120;
                    }
                    else if(skilllevel==5)
                    {
                        skillpoints=250;
                    }
                    else
                    {
                        skillpoints=420;
                    }
                    Spieler[pid][pLawyerPoints]=skillpoints;
                    new string[200];
                    format(string,200,"%s %s hat dir den Anwalts Skill auf das Level %i gesetzt", GetPlayerAdminRang(playerid), GetName(playerid), skilllevel);
                    SendClientMessage(pid,COLOR_GREEN,string);
                    format(string,200,"Du hast erfolgreich dem Spieler %s beim Anwalts Skill das Level auf %i gesetzt",GetName(pid),skilllevel);
                    SendClientMessage(playerid,COLOR_GREEN,string);
                    new
                        String[140];

                    format(String,sizeof(String),"%s %s hat Spieler %s den Anwalt-Skill %d gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pid), skilllevel);
                    AdminLog(String);
                }
                if(strcmp(skillname,"Detektiv",true)==0)
                {
                    new skillpoints;
                    if(skilllevel==1)
                    {
                        skillpoints=0;
                    }
                    else if(skilllevel==2)
                    {
                        skillpoints=50;
                    }
                    else if(skilllevel==3)
                    {
                        skillpoints=150;
                    }
                    else if(skilllevel==4)
                    {
                        skillpoints=310;
                    }
                    else if(skilllevel==5)
                    {
                        skillpoints=540;
                    }
                    else
                    {
                        skillpoints=540;
                    }
                    Spieler[pid][pDetektivPoints]=skillpoints;
                    new string[200];
                    format(string,200,"%s %s hat dir den Detektiv Skill auf das Level %i gesetzt", GetPlayerAdminRang(playerid), GetName(playerid), skilllevel);
                    SendClientMessage(pid,COLOR_GREEN,string);
                    format(string,200,"Du hast erfolgreich dem Spieler %s beim Detektiv Skill das Level auf %i gesetzt",GetName(pid),skilllevel);
                    SendClientMessage(playerid,COLOR_GREEN,string);
                    new
                        String[140];

                    format(String,sizeof(String),"%s %s hat Spieler %s den Detektiv-Skill %d gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pid), skilllevel);
                    AdminLog(String);
                }
                if(strcmp(skillname,"Drogendealer",true)==0)
                {
                    if(skilllevel==6){skilllevel=5;}
                    new skillpoints;
                    if(skilllevel==1)
                    {
                        skillpoints=0;
                    }
                    else if(skilllevel==2)
                    {
                        skillpoints=50;
                    }
                    else if(skilllevel==3)
                    {
                        skillpoints=100;
                    }
                    else if(skilllevel==4)
                    {
                        skillpoints=280;
                    }
                    else
                    {
                        skillpoints=510;
                    }
                    Spieler[pid][pDrogenPoints]=skillpoints;
                    new string[200];
                    format(string,200,"%s %s hat dir den Drogendealer Skill auf das Level %i gesetzt", GetPlayerAdminRang(playerid), GetName(playerid), skilllevel);
                    SendClientMessage(pid,COLOR_GREEN,string);
                    format(string,200,"Du hast erfolgreich dem Spieler %s beim Drogendealer Skill das Level auf %i gesetzt",GetName(pid),skilllevel);
                    SendClientMessage(playerid,COLOR_GREEN,string);
                    new
                        String[140];

                    format(String,sizeof(String),"%s %s hat Spieler %s den Drogendealer-Skill %d gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pid), skilllevel);
                    AdminLog(String);
                }
                if(strcmp(skillname,"Waffendealer",true)==0)
                {
                    if(skilllevel==6){skilllevel=5;}
                    new skillpoints;
                    if(skilllevel==1)
                    {
                        skillpoints=0;
                    }
                    else if(skilllevel==2)
                    {
                        skillpoints=80;
                    }
                    else if(skilllevel==3)
                    {
                        skillpoints=200;
                    }
                    else if(skilllevel==4)
                    {
                        skillpoints=440;
                    }
                    else
                    {
                        skillpoints=710;
                    }
                    Spieler[pid][pWaffenteilePoints]=skillpoints;
                    new string[200];
                    format(string,200,"%s %s hat dir den Waffendealer Skill auf das Level %i gesetzt", GetPlayerAdminRang(playerid), GetName(playerid), skilllevel);
                    SendClientMessage(pid,COLOR_GREEN,string);
                    format(string,200,"Du hast erfolgreich dem Spieler %s beim Waffendealer Skill das Level auf %i gesetzt",GetName(pid),skilllevel);
                    SendClientMessage(playerid,COLOR_GREEN,string);
                    new
                        String[140];

                    format(String,sizeof(String),"%s %s hat Spieler %s den Waffendealer-Skill %d gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pid), skilllevel);
                    AdminLog(String);
                }
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Fehler: es muss der Skill 'Hure', 'Waffendealer', 'Drogendealer' oder 'Anwalt' ausgewählt werden");
            }
        }
        else
        {
            SendClientMessage(playerid,COLOR_RED,"Die ausgewählte Spielerid ist nicht Online");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Keine Berechtigung für diesen Befehl");
    }
    return 1;
}
CMD:waffenlagerstatus(playerid,params[])
{
    if(Spieler[playerid][pFraktion]==6||Spieler[playerid][pFraktion]==7||Spieler[playerid][pFraktion]==10||
    Spieler[playerid][pFraktion]==11||Spieler[playerid][pFraktion]==12||Spieler[playerid][pFraktion]==13||Spieler[playerid][pFraktion]==20||Spieler[playerid][pFraktion]==21)
    {
        if(Spieler[playerid][pRank]>=5)
        {
            new status[5];
            sscanf(params,"s[5]",status);
            if(strcmp(status,"auf",true)==0)
            {
                if(waffenlagerzu[Spieler[playerid][pFraktion]]==0)
                {
                    SendClientMessage(playerid,COLOR_RED,"Das Waffenlager ist bereits geöffnet.");
                }
                else
                {
                    waffenlagerzu[Spieler[playerid][pFraktion]]=0;
                    SendClientMessage(playerid,COLOR_GREEN,"Du hast das Waffenlager geöffnet.");
                }
            }
            else if(strcmp(status,"zu",true)==0)
            {
                if(waffenlagerzu[Spieler[playerid][pFraktion]]==1)
                {
                    SendClientMessage(playerid,COLOR_RED,"Das Waffenlager ist bereits geschlossen.");
                }
                else
                {
                    waffenlagerzu[Spieler[playerid][pFraktion]]=1;
                    SendClientMessage(playerid,COLOR_ORANGE,"Du hast das Waffenlager geschlossen.");
                }
            }
            else
            {
                if(waffenlagerzu[Spieler[playerid][pFraktion]]==0)
                {
                    SendClientMessage(playerid,COLOR_RED,"Das Waffenlager ist geöffnet, gib '/Waffenlagerstatus zu' ein um es zu schließen");
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Das Waffenlager ist geschlossen, gib '/Waffenlagerstatus auf' ein um es zu öffnen");
                }
            }
        }
        else
        {
            SendClientMessage(playerid,COLOR_RED,"Du musst Leader/Co-Leader sein um auf diesen Befehl zugreifen zu können.");
        }
    }
    return 1;
}

CMD:gangfightwette(playerid,params[])
{
    new gangfightname[64],wetteinsatz;
    if(sscanf(params,"s[64]i",gangfightname,wetteinsatz))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gangfightwette [Gangname] [ Wetteinsatz (100$ bis 50.000$) ]");
    if(GetPlayerMoney(playerid)>=wetteinsatz)
    {
        if(wetteinsatz<100)
        {
            SendClientMessage(playerid,COLOR_RED,"Der Wetteinsatz muss mindestens 100$ betragen.");
        }
        else if(wetteinsatz>100000)
        {
            SendClientMessage(playerid,COLOR_RED,"Der Wetteinsatz darf maximal 100.000$ betragen.");
        }
        else if(GetPlayerScore(playerid)>=3)
        {
            if(gangfightwettenpp[playerid]<100)
            {
                for(new i;i<4;i++)
                {
                    for(new z;z<2;z++)
                    {
                        new gangname[20];
                        if(strcmp(GetFactionNameOfFaction(gangfightkampffraks[i][z]),"Grove Street",true)==0)
                        {
                            format(gangname,20,"GroveStreet");
                        }
                        else
                        {
                            format(gangname,20,"%s",GetFactionNameOfFaction(gangfightkampffraks[i][z]));
                        }
                        if(strcmp(gangfightname,GetFactionNameOfFaction(gangfightkampffraks[i][z]),true)==0&&IsGangInFight(gangfightkampffraks[i][z]))
                        {
                            if(gangfightwetten[i]+180>gettime())
                            {
                                if(gangfightkampffraks[i][0]==Spieler[playerid][pFraktion]||gangfightkampffraks[i][1]==Spieler[playerid][pFraktion])
                                {
                                    SendClientMessage(playerid,COLOR_RED,"Du kannst nicht auf diesen Gangfight wetten, da du selbst in diesen Kampf involviert bist.");
                                }
                                else
                                {
                                    gangfightwettenpot[i]+=wetteinsatz;
                                    GivePlayerCash(playerid,-wetteinsatz);
                                    format(gangfightwettenp[playerid],MAX_PLAYER_NAME,"%s",GetName(i));
                                    gangfightwettenpp[playerid]=wetteinsatz;
                                    gangfightwettenppp[playerid]=gangfightkampffraks[i][z];
                                    new string[200];
                                    format(string,200,"Du hast $%s auf die %s gewettet. Viel Glück!!", AddDelimiters(wetteinsatz),GetFactionNameOfFaction(gangfightkampffraks[i][z]));
                                    SendClientMessage(playerid,COLOR_YELLOW,string);
                                    i=4,z=2;
                                    break;
                                }
                            }
                            else
                            {
                                SendClientMessage(playerid,COLOR_RED,"Es werden nur 3 Minuten nach Gangfightbeginn Wetten angenommen!");
                                i=4,z=2;
                                break;
                            }
                        }
                        else if(i==3&&z==1)
                        {
                            SendClientMessage(playerid,COLOR_RED,"So eine Gang kämpft aktuell nicht im Gangfight.");
                        }
                    }
                }
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Du hast bereits eine Gangfight-Wette am laufen.");
            }
        }
        else
        {
            SendClientMessage(playerid,COLOR_RED,"Du musst mindestens Level 3 erreicht haben um Wetten abschließen zu können!");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht so viel Geld!");
    }
    return 1;
}
/*CMD:offgivecar(playerid, params[])
{
Tipp: Suche nach "THREAD_LOADPLAYERCARS"
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, vID, color1, color2, neon, stuned;
    if(sscanf(params, "uiiiii", pID, vID, color1, color2, neon, stuned)){SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /offgivecar [Name] [Vehicle-ID] [Color-1] [Color-2] [Neon] [Special-Tuned]"); SendClientMessage(playerid, COLOR_ORANGE, "Neon-Farben: 0 = Keins, 1 = Blau, 2 = Rot, 3 = Grün, 4 = Weiß, 5 = Pink, 6 = Gelb"); SendClientMessage(playerid, COLOR_ORANGE, "Special-Tuned Typen: 1 = Infernus-Tuned"); return 1;}
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    if(!PlayerHaveCar[pID][PlayerKey[pID]])
    {

id
owner
model
posX
posY
posZ
rot
nitro
hyd
wheel
ausp
sideL
sideR
fb
rb
spoiler
roof
hood
vents
lamps
pj
c1
c2
preis
tank
state
neon1
neon2
specialtuned
numberplate
peilsender
distance
tuv
        format(PlayerCar[pID][PlayerKey[pID]][CarNumberplate] ,32, KEIN_KENNZEICHEN );
        PlayerCar[pID][PlayerKey[pID]][CarId] = CreateVehicle(PlayerCar[pID][PlayerKey[pID]][CarModel],PlayerCar[pID][PlayerKey[pID]][CarPos_x],PlayerCar[pID][PlayerKey[pID]][CarPos_y],PlayerCar[pID][PlayerKey[pID]][CarPos_z],PlayerCar[pID][PlayerKey[pID]][CarRotate],PlayerCar[pID][PlayerKey[pID]][CarC1],PlayerCar[pID][PlayerKey[pID]][CarC2], -1);
        aiVehicles[ PlayerCar[pID][PlayerKey[pID]][CarId] ] = VEH_PRIVAT;
         printf("CarId %d",PlayerCar[pID][PlayerKey[pID]][CarId]);
         new vnp[46];
         format(vnp, sizeof(vnp), "{CB1107}%s", GetName(pID));
        DestroyPeilsender(playerid, PlayerKey[playerid] );
        gGas[PlayerCar[pID][PlayerKey[pID]][CarId]] = GetMaxTank(PlayerCar[pID][PlayerKey[pID]][CarId]);
        gMaxGas[PlayerCar[pID][PlayerKey[pID]][CarId]] = GetMaxTank(PlayerCar[pID][PlayerKey[pID]][CarId]);
        PlayerCar[pID][PlayerKey[pID]][CarTank] = GetMaxTank(PlayerCar[pID][PlayerKey[pID]][CarId]);
        g_VehicleDistance[ PlayerCar[pID][PlayerKey[pID]][CarId] ] = 0;
        PlayerCar[pID][PlayerKey[pID]][TUV] = 0;
        if(stuned == 0)
        {
            SendClientMessage(playerid, COLOR_YELLOW, "Kein Spezial-Tuning ausgewählt!");
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 0;
        }
        else if(stuned == 1)
        {
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 1;
            SendClientMessage(playerid, COLOR_YELLOW, "Spezial-Tuning für Infernus ausgewählt. (Tuning: 1)");
        }
        else if(stuned == 2)
        {
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 2;
            SendClientMessage(playerid, COLOR_YELLOW, "Spezial-Tuning für Infernus ausgewählt. (Tuning: 2)");
        }
        else if(stuned == 3)
        {
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 3;
            SendClientMessage(playerid, COLOR_YELLOW, "Spezial-Tuning für Infernus ausgewählt. (Tuning: 3)");
        }
        if(neon == 0)
        {
            SendClientMessage(playerid, COLOR_YELLOW, "Kein Neon ausgewählt!");
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 0;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 0;
        }
        else if(neon == 1)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18648;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18648;
        }
        else if(neon == 2)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18647;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18647;
        }
        else if(neon == 3)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18649;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18649;
        }
        else if(neon == 4)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18652;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18652;
        }
        else if(neon == 5)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18651;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18651;
        }
        else if(neon == 6)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18650;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18650;
        }
        new
            String[128];
        format(String,sizeof(String),"%s %s hat Spieler %s das Fahrzeug (%d) gesetzt", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), vID);
        AdminLog(String);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "* Der Spieler hat auf dem Autoschlüssel bereits ein Fahrzeug.");
        return 1;
    }
    return 1;
}*/
CMD:aeventitem(playerid,params[])
{
    new eventitem;
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte");
    if(sscanf(params,"i",eventitem)&&eventitemactive==0)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Aeventitem [Item]");
    if(eventitem>=1&&eventitem<=5)
    {
        eventitemactive=eventitem;
        new eventstr[100];
        format(eventstr,100,"%s %s hat Eventitem %d freigeschaltet.", GetPlayerAdminRang(playerid), GetName(playerid), eventitem);
        for(new i;i<MAX_PLAYERS;i++)
        {
            if(IsPlayerConnected(i))
            {
                if(Spieler[i][pAdmin]>=1)
                {
                    SendClientMessage(i,COLOR_GREEN,eventstr);
                }
            }
        }
    }
    else if(eventitemactive!=0)
    {
        new eventstr[100];
        format(eventstr,100,"%s %s hat Eventitem %d wieder deaktiviert.", GetPlayerAdminRang(playerid), GetName(playerid), eventitemactive);
        for(new i;i<MAX_PLAYERS;i++)
        {
            if(IsPlayerConnected(i))
            {
                if(Spieler[i][pAdmin]>=1)
                {
                    SendClientMessage(i,COLOR_GREEN,eventstr);
                }
            }
        }
        eventitemactive=0;
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Ungültige Item ID (1-3)");
    }
    return 1;
}
CMD:eventitem(playerid)
{
    if(eventitemactive>=1&&eventitemactive<=5)
    {
        if(eventitemactive==1)
        {
            ResetPlayerWeapons(playerid);
            GivePlayerWeapon(playerid,10,1);
            SetPlayerHealth(playerid, 100);
            SetPlayerArmour(playerid, 100);
        }
        else if(eventitemactive==2)
        {
            ResetPlayerWeapons(playerid);
            GivePlayerWeapon(playerid,29,100);
            GivePlayerWeapon(playerid,24,100);
            GivePlayerWeapon(playerid,34,15);
            GivePlayerWeapon(playerid,25,30);
            SetPlayerHealth(playerid, 100);
            SetPlayerArmour(playerid, 100);
        }
        else if(eventitemactive==3)
        {
            ResetPlayerWeapons(playerid);
            SetPlayerHealth(playerid, 100);
            SetPlayerArmour(playerid, 100);
        }
        else if(eventitemactive==4)
        {
            ResetPlayerWeapons(playerid);
            GivePlayerWeapon(playerid,24,100);
            SetPlayerHealth(playerid, 100);
            SetPlayerArmour(playerid, 100);
        }
        else if(eventitemactive==5)
        {
            ResetPlayerWeapons(playerid);
            GivePlayerWeapon(playerid,46,1);
            SetPlayerHealth(playerid, 100);
            SetPlayerArmour(playerid, 100);
        }
        SendClientMessage(playerid, COLOR_GREEN,"Du hast die Eventitems erhalten!");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Befehl ist nicht von einem Teammitglied aktiviert worden.");
    }
    return 1;
}

CMD:namechange(playerid, params[])
{
    new oldName[MAX_PLAYER_NAME], newName[MAX_PLAYER_NAME];//, pID = INVALID_PLAYER_ID;
    if (Spieler[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt nicht die benötigten Rechte.");
    if (sscanf(params, "s[25]s[25]", oldName, newName))
        return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Namechange [Name] [Neuer Name]");

    if (!strcmp(newName, "Niemand", true) || strlen(newName) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Gebe einen gültigen Spielernamen an.");

    mysql_real_escape_string(oldName, oldName, gSQL, sizeof(oldName));
    mysql_real_escape_string(newName, newName, gSQL, sizeof(newName));

    new tempName[MAX_PLAYER_NAME];
    GetPVarString(playerid, "NAMECHANGE.OLDNAME", tempName, sizeof(tempName));
    if (!isnull(tempName)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du führst bereits einen Namechange durch.");
    // sscanf(oldName, "k<playername>", pID);
    // if (pID != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist gerade online.");
    new query[128];
    SetPVarString(playerid, "NAMECHANGE.OLDNAME", oldName);
    SetPVarString(playerid, "NAMECHANGE.NEWNAME", newName);
    format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `Name` = '%s'", oldName);
    mysql_pquery(query, THREAD_CHECKNAMECHANGE_OLDNAME, playerid, gSQL, MySQLThreadOwner);
    return 1;
}

CMD:angelshop(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, FISHINGSHOP_COORDS))
    {
        ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(40$ pro Fisch)", "Auswählen", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Angelshop!");
    }
    return 1;
}

CMD:pwchange(playerid,params[])
{
    new spielername[MAX_PLAYER_NAME],pw[128];
    if(Spieler[playerid][pAdmin] < 6)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte");
    if(sscanf(params,"s[32]s[128]",spielername,pw))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Pwchange [Name] [Passwort]");
    if(!IsPlayerConnected(GetPlayerIdFromName(spielername)))
    {
        new query[256];
        mysql_real_escape_string(pw, pw,gSQL,sizeof(pw));
        mysql_real_escape_string(spielername, spielername,gSQL,sizeof(spielername));
        format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s'",spielername);
        if(mysql_pquery(query , THREAD_PWCHANGE , playerid, gSQL,MySQLThreadOwner)==101)
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Das Passwort wurde erfolgreich geändert");
        }
        format(query,sizeof(query),"UPDATE `accounts` SET `Passwort`=SHA2(CONCAT('%s',`SaltKey`),256) WHERE `Name` = '%s'",pw,spielername);
        mysql_tquery(gSQL,query);
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Der Spieler ist derzeit online");
    }
    return 1;
}
CMD:angeln(playerid, params[])
{
    new a = IsPlayerAtAngelPlatz(playerid);
    if(a == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Angelplatz.");
    if(Spieler[playerid][pAngel] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Du besitzt keine Angel, kaufe eine im Angelshop. Verwende /Navi -> Weitere Orte um diesen zu finden!");
    if(Spieler[playerid][pKoeder] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Du besitzt keine Koeder, kaufe welche im Angelshop. Verwende /Navi -> Weitere Orte um diesen zu finden!");
    if(Spieler[playerid][pFische] > 20)return SendClientMessage(playerid, COLOR_ORANGE, "Du hast zuviele Fische, verkaufe sie zuerst!");
    if (Angel[a][Fische] < 1) return SendClientMessage(playerid, COLOR_ORANGE, "Hier sind im Moment keine Fische mehr zu fangen.");
    if(IsPlayerFishing[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du bist bereits am angeln!");
    FreezePlayer(playerid);
    Spieler[playerid][pKoeder] --;
    LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
    SetPlayerFacingAngle(playerid, Angel[a][FacingAngle]);
    PlayerAngel[playerid] = SetPlayerAttachedObject(playerid, 0,18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
    GameTextForPlayer(playerid, "~g~Angel ~y~ausgeworfen", 5000, 1);
    pAngelTimer[playerid] = SetTimerEx("AngelTimer", 5000, 0, "i", playerid);
    IsPlayerFishing[playerid] = 1;
    return 1;
}

CMD:angelstats(playerid, params[])
{
    new pID;
    if (sscanf(params, "u", pID) || pID == playerid) {
        ShowAngelStats(playerid, playerid);
        return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Angelstats [SpielerID/Name] um jemand anderem deine Angel-Statistiken zu zeigen!");
    }

    if (pID == INVALID_PLAYER_ID || !gPlayerLogged[pID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht online.");
    if (Spieler[pID][pAdminDienst]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist gerade im Admindienst.");
    if (!IsPlayerInRangeOfPlayer(playerid, pID, 5.0)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht in deiner Nähe.");

    SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast %s angeboten, deine Angelstatistiken anzuschauen.", GetName(pID));
    SCMFormatted(pID, COLOR_YELLOW, "[INFO] {FFFFFF}%s %s hat dir angeboten, seine/ihre Angelstatistiken anzuschauen.", GetName(playerid));
    SCMFormatted(pID, COLOR_LIGHTBLUE, "[INFO] {FFFFFF}Nutze '/Accept Angelstats' um dir die Angelstatistiken anzuschauen.", GetName(playerid));
    new pVarString[40];
    format(pVarString, sizeof(pVarString), "%i %i", playerid, Spieler[playerid][pLoginTimestamp]);
    SetPVarString(pID, "SHOW.ANGELSTATS", pVarString);
    return 1;
}

stock ShowAngelStats(targetid, playerid)
{
    if(IsPlayerConnected(playerid))
    {
        new maxgefangen = Spieler[playerid][pMaxFishes];
        new maxverloren = Spieler[playerid][pMaxVerloren];
        new dabei = Spieler[playerid][pFische];
        new koeder = Spieler[playerid][pKoeder];
        new angel[32];
        if(Spieler[playerid][pAngel] == 0){angel=COLOR_HEX_RED"Nicht Vorhanden";}
        else if(Spieler[playerid][pAngel] == 1){angel =COLOR_HEX_GREEN"Vorhanden";}
        new schein[32];
        if(Spieler[playerid][pFishLic] == 0){schein=COLOR_HEX_RED"Nicht Vorhanden";}
        else if(Spieler[playerid][pFishLic] == 1){schein=COLOR_HEX_GREEN"Vorhanden";}
        new str1[256], str2[256], finalstr[512];
        format(str1, sizeof(str1), COLOR_HEX_BLUE"Gefangene Fische: "COLOR_HEX_WHITE"%d\n"COLOR_HEX_BLUE"Verfehlte Fische: "COLOR_HEX_WHITE"%d\n"COLOR_HEX_BLUE"Fische dabei: "COLOR_HEX_WHITE"%d\n"COLOR_HEX_BLUE"Köder: "COLOR_HEX_WHITE"%d\n", maxgefangen, maxverloren, dabei, koeder);
        format(str2, sizeof(str2), COLOR_HEX_BLUE"Angel: "COLOR_HEX_WHITE"%s\n"COLOR_HEX_BLUE"Angelschein: "COLOR_HEX_WHITE"%s", angel, schein);
        format(finalstr, sizeof(finalstr), "%s%s", str1, str2);
        new aTitle[64];
        format(aTitle,sizeof(aTitle), "Angelstatistiken von %s", GetName(playerid));
        ShowPlayerDialog(targetid, DIALOG_ANGELSTATS, DIALOG_STYLE_MSGBOX, aTitle, finalstr, "Schließen", "");
    }
    return 1;
}

forward AngelTimer(playerid);
public AngelTimer(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        new string[128];
        new change = minrand(1, 100);
        if(change < 50)
        {
            SendClientMessage(playerid, COLOR_ORANGE, "Du hattest leider kein Glück, und hast nichts gefangen. Versuche es erneut!");
            Spieler[playerid][pMaxVerloren] ++;
        }
        else if(change >= 50)
        {
            new a = IsPlayerAtAngelPlatz(playerid);
            if(Angel[a][Fische] == 0)return SendClientMessage(playerid, COLOR_RED, "Es gibt keine Fische mehr!");
            new fischname = random(sizeof(FischNamen));
            Spieler[playerid][pFische] ++;
            format(string, sizeof(string), "Du hast einen Fisch gefangen! ("COLOR_HEX_BLUE"%s"COLOR_HEX_WHITE")", FischNamen[fischname]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Angel[a][Fische] --;
            Spieler[playerid][pMaxFishes] ++;
            UpdateAngelText(a);
        }
    }
    RemovePlayerAttachedObject(playerid, 0);
    ClearAnimations(playerid);
    UnfreezePlayer(playerid);
    IsPlayerFishing[playerid] = 0;
    KillTimer(pAngelTimer[playerid]);
    return 1;
}

CMD:grillen(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0, FISHINGSHOP_GRILL_POINT))
    {
        if(Spieler[playerid][pFische] == 0)return SendClientMessage(playerid, COLOR_RED, "Du hast keine Fische.");
        Spieler[playerid][pFische] --;
        GameTextForPlayer(playerid, "~g~Fisch ~y~gegrillt", 2000, 1);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        new Float:heal;
        GetPlayerHealth(playerid, heal);
        if(heal > 90)return SendClientMessage(playerid, COLOR_ORANGE, "Du kannst keine Fische mehr essen, da du zuviel Leben hast.");
        SetPlayerHealth(playerid, heal+10);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Strand am Lagerfeuer.");
        return 1;
    }
    return 1;
}

CMD:admin(playerid, params[])
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    new msg[128];
    if(sscanf(params, "s[128]", msg))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Admin [Nachricht]");
    new string[144];
    format(string, sizeof(string), ">MELDUNG<"#COLOR_HEX_YELLOW" %s (ID: %d) Nachricht: %s", GetName(playerid), playerid, msg);
    SendModMessage(COLOR_RED, string);
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Dein Meldung wurde an die Admins geschickt!");
    return 1;
}

CMD:sup(playerid, params[])
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    if(PlayerNeedsHelp[playerid] == 1)
    {
        SendClientMessage(playerid, COLOR_ORANGE, "Du hast vorhin erst ein Ticket abgeschickt. Warte noch einen Moment!");
        return 1;
    }
    new msg[128];
    if(sscanf(params, "s[128]", msg))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sup [Frage]");
    new string[144];
    format(string, sizeof(string), "> Ticket < - %s (ID: %d) Nachricht: %s", GetName(playerid), playerid, msg);
    SendAdminMessage(COLOR_LIGHTGREEN, string);
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Dein Ticket wurde an das Support-Team gesendet, warte auf eine Rückmeldung!");
    PlayerNeedsHelp[playerid] = 1;
    format(SupText[playerid], 128 , "%s", msg);
    ReportTimer[playerid] = SetTimerEx("ReportReset", 140000, false, "d", playerid);
    return 1;
}

CMD:openticket(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] > 0)
    {
        if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Openticket [SpielerID/Name]");
        if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
        if(PlayerNeedsHelp[pID] == 1)
        {
            PlayerNeedsHelp[pID] = 0;
            format(string, sizeof(string), "> Ticket < - %s hat das Ticket von %s angenommen.", GetName(playerid), GetName(pID));
            SendAdminMessage(COLOR_LIGHTGREEN, string);
            SendClientMessage(playerid, COLOR_ORANGE, "Schreibe nun mit dem Spieler. Nutze dazu einfach den normalen Chat!");
            SendClientMessage(playerid, COLOR_ORANGE, "Du kannst das Ticket mit \"/closeticket [SpielerID/Name]\" schließen.");
            format(string, sizeof(string), "> Ticket < - Dein Ticket wurde von Supporter %s angenommen.", GetName(playerid));
            SendClientMessage(pID, COLOR_LIGHTGREEN, string);
            SendClientMessage(pID, COLOR_LIGHTGREEN, "Du kannst nun mit dem Teammitglied reden. Nutze dazu einfach den normalen Chat!");
            ReportCall[pID] = playerid;
            ReportCall[playerid] = pID;
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Der Spieler hat kein Ticket geschrieben.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte!");
        return 1;
    }
    return 1;
}

CMD:tickets(playerid, params[])
{
    new string[128], str2[2048];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new bool:IsOnline;
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(PlayerNeedsHelp[i] == 1)
            {
                format(string, sizeof(string), "Name: %s (ID: %i) - Meldung: %s\n", GetName(i), i, SupText[i]);
                strcat(str2, string);
                IsOnline = true;
            }
        }
    }
    if(!IsOnline)return SendClientMessage(playerid, COLOR_RED, "Niemand hat ein Ticket geschrieben!");
    ShowPlayerDialog(playerid, DIALOG_TICKETS, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Ticket-Liste", str2, "Schließen", "");
    return 1;
}

CMD:closeticket(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Closeticket [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(ReportCall[playerid] == pID && ReportCall[pID] == playerid)
    {
        format(string, sizeof(string), "> Ticket < - %s hat dein Ticket geschlossen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTGREEN, string);
        format(string, sizeof(string), "> Ticket < - %s hat das Ticket von %s geschlossen.", GetName(playerid), GetName(pID));
        SendAdminMessage(COLOR_GREEN, string);
        ReportCall[playerid] = 999;
        ReportCall[pID] = 999;
        SaveReportData(pID,playerid);
        ShowPlayerDialog(pID,DIALOG_RATESUPPORTER,DIALOG_STYLE_MSGBOX,"Bewerte Supporter",
        "Wie hat Ihnen der Support gefallen? Wenn Ihnen die Auskunft geholfen hat, drücken Sie auf \"POSITIV\".\n\
        Wenn die Auskunft vom Supporter nicht hilfreich war, drücken Sie auf \"NEGATIV\".\n\
        Ihre Meinung ist uns richtig!","Positiv","Negativ");
    }
    else
    {
        SendClientMessage(playerid, COLOR_ORANGE, "Das Ticket von diesem Spieler wird derzeit bearbeitet oder das Ticket wurde noch nicht bearbeitet, oder es gibt keins!");
        return 1;
    }
    return 1;
}

stock SaveReportData(playerid,supporter) {
    SetPVarString(playerid, "Supporter" , GetName(supporter) );
    return 1;
}

CMD:delticket(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Delticket [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(PlayerNeedsHelp[pID] == 1)
    {
        PlayerNeedsHelp[pID] = 0;
        format(string, sizeof(string), "> Ticket < - %s hat dein Ticket gelöscht.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTGREEN, string);
        format(string, sizeof(string), "> Ticket < - %s hat das Ticket von %s gelöscht.", GetName(playerid), GetName(pID));
        SendAdminMessage(COLOR_ORANGE, string);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler hat kein Ticket geschrieben.");
        return 1;
    }
    return 1;
}

CMD:dticket(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, string[128];
    if(sscanf(params, "us[96]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Dticket [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(PlayerNeedsHelp[pID] == 1)
    {
        PlayerNeedsHelp[pID] = 0;
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" Wir haben Ihre Nachricht erhalten! Leider können Support Nachrichten");
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" dieser Art nicht vom 'im Spiel'-Support beantwortet/geklärt werden oder");
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" Sie haben Ihr Anliegen nicht direkt unter /SUP geschildert.");
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" Wenden Sie sich bei einem Teammitglied im Teamspeak oder stellen Sie Ihre Anfrage im Forum.");
        ShowPlayerDialog(pID, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "Live your Dream", "Nachricht vom SUPPORT-TEAM:\n\nWir haben Ihre Nachricht erhalten! Leider können Support Nachrichten\ndieser Art nicht vom 'im Spiel'-Support beantwortet/geklärt werden!\nWenden Sie sich bei einem Teammitglied im Teamspeak oder stellen Sie Ihre Anfrage im Forum.\n\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak Adresse: Teamspeak.LyD-Roleplay.de", "OK", "");
        format(string, sizeof(string), "> Ticket < - %s hat das Ticket von %s ermahnt und gelöscht.", GetName(playerid), GetName(pID));
        SendAdminMessage(COLOR_ORANGE, string);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler hat kein Ticket geschrieben.");
        return 1;
    }
    return 1;
}

CMD:aticket(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, string[128];
    if(sscanf(params, "us[96]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Aticket [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(PlayerNeedsHelp[pID] == 1)
    {
        PlayerNeedsHelp[pID] = 0;
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" Deine Frage wurde schon einmal uns gestellt, weshalb wir die Antwort zu dieser wichtigen Frage");
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" in unserer Hilfekonsole beantwortet haben. Uns erreichen täglich eine Vielzahl von Anfragen und Hilferufen,");
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" weshalb wir nicht auf jede Fragestellung reagieren können. Um den Support etwas zu entlasten, wurde eine Hilfekonsole eingerichtet,");
        SendClientMessage(pID, COLOR_ORANGE, "[SUPPORT-TEAM]"COLOR_HEX_ORANGE" wo viele typsiche Fragen beantwortet sind. Befehl: /Hilfekonsole");
        new string1[256];
        new string2[256];
        new string3[256];
        new string4[768];
        format(string1, sizeof(string1), "Nachricht vom SUPPORT-TEAM:\n\nWir haben deine Nachricht erhalten!\nDeine Frage wurde schon einmal uns gestellt,");
        format(string2, sizeof(string2), " weshalb wir die Antwort zu\ndieser wichtigen Frage in unserer Hilfekonsole beantwortet haben. \nUns erreichen täglich eine Vielzahl von Anfragen");
        format(string3, sizeof(string3), " und Hilferufen,\nweshalb wir nicht auf jede Fragestellung reagieren können.\nUm den Support etwas zu entlasten, wurde eine Hilfekonsole eingerichtet,");
        format(string4, sizeof(string4), "\nwo viele typische Fragen beantwortet sind.\n\nBefehl: /Hilfekonsole\n\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak Adresse: Teamspeak.LyD-Roleplay.de\nUser Panel: www.UCP.LyD-Roleplay.de");
        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
        ShowPlayerDialog(pID, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "LIVE YOUR DREAM", string4, "OK", "");
        format(string, sizeof(string), "> Ticket < - %s hat das Ticket von %s gelöscht und H. auf Hilfekonsole.", GetName(playerid), GetName(pID));
        SendAdminMessage(COLOR_ORANGE, string);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler hat kein Ticket geschrieben.");
        return 1;
    }
    return 1;
}

//HELFER-SYSTEM
/*COMMAND:experte(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,3.0,814.4642,-1345.7327,13.5320)) {
        SendClientMessage(playerid, COLOR_RED, "An diesem Ort kannst du dich nicht als 'Experte' (Neulingshelfer) freischalten!");
        return 1;
    }
    if( Spieler[playerid][pLevel] < 20 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 20 sein, um dich als Helfer freischalten zu können.");
    }
    if( Spieler[playerid][pWarns] > 2 ) {
        return SendClientMessage(playerid, COLOR_RED, "Mit mehr als zwei Admin Verwarnungen, kannst du dich nicht als Helfer freischalten!");
    }
    if(Spieler[playerid][pLottoNr] > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist bereits ein Server-Experte.");
    new
        String[128];
    format(String,sizeof(String),"[EXPERTE] %s ist nun auch ein Experte!",GetName(playerid));
    SendHelferMessage(COLOR_YELLOW,String);
    SendClientMessage(playerid, COLOR_GREEN, "[EXPERTE] Du bist nun ein Server-Experte!");
    ShowPlayerDialog(playerid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "SERVER-EXPERTE", "Du bist nun ein Server-Experte!\nDeine Aufgabe ist es, Neulingen zu helfen.\n\nDu wirst über Neuregistrierungen informiert.\nMit /Neulingfinden kannst du dir den Standort eines Neulings anzeigen lassen\nund ihm helfen. Mit /Danke kann sich der Neuling bei dir bedanken.\n", "OK", "");
    Spieler[playerid][pKFZSteuer] = 1;
    return 1;
}
COMMAND:einfuehrung(playerid,params[]) {
    if( Spieler[playerid][pLevel] > 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Nur Spieler unter Level 3 können diese Funktion nutzen");
    }
    if( !IsPlayerInRangeOfPoint(playerid,10.0,809.3212,-1339.9855,13.5408) ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kannst du nur am Neulingsspawn benutzen.");
    }
    new
        String[128];
    format(String,sizeof(String),"[EXPERTE] Neuling %s benötigt für den Start eine Einführung! Standort: Neulingsspawn",GetName(playerid));
    SendHelferMessage(COLOR_YELLOW, String);
    format(String,sizeof(String),"[EXPERTE] Neuling %s benötigt für den Start eine Einführung! Standort: Neulingsspawn",GetName(playerid));
    SendAdminMessage(COLOR_YELLOW, String);
    SendClientMessage(playerid, COLOR_GREEN, "Du möchtest eine Einführung. Alle Helfer wurden informiert. In Kürze wird einer zu dir kommen.");
    return 1;
}*/
/*
CMD:expertenausweis(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pKFZSteuer] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Server-Experte");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Expertenausweis [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if( Spieler[pID][pAdminDienst] ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst!");
    }
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s dein Abzeichen als Experten gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "==============================================");
        SendClientMessage(pID, COLOR_BLUE, "******** SERVER - EXPERTE ********");
        SendClientMessage(pID, COLOR_WHITE, "Server-Experten sind Spieler, die Spieler helfen.");
        format(string , sizeof(string), "Server-Experte: {FFFFFF}%s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "==============================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Polizeidienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}
CMD:danke(playerid, params[])
{
    new pID, string[130];
    if(Spieler[playerid][pLevel] > 3)return SendClientMessage(playerid, COLOR_RED, "Du musst unter Level 3 sein, um diesen Befehl nutzen zu können.");
    if(Spieler[playerid][pRaketen] == 1 )return SendClientMessage(playerid, COLOR_RED, "Du hast dich bereits bei einem Server-Experten bedankt.");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Danke [SpielerID/Name vom Experten]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Server-Experte ist nicht online.");
    if(!(Spieler[pID][pKFZSteuer] == 1))return SendClientMessage(playerid, COLOR_RED, "Der Spieler, bei dem du dich für die Hilfe bedanken möchtest, ist kein Server-Experte.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 15.0, x,y,z))
    {
        Spieler[playerid][pRaketen] = 1;
        format(string, sizeof(string), "Du hast dich beim Server-Experten %s für seine Hilfe bedankt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        format(string , sizeof(string), "Der Neuling %s hat sich für deine Hilfe bedankt! Du erhältst 3.000$ als Belohnung.", GetName(playerid));
        SendClientMessage(pID, COLOR_GREEN,string);
        Spieler[pID][pCash] += 3000;
        Spieler[pID][pAutomatik]++;
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Polizeidienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Server-Experte, bei dem du dich bedanken möchtest, ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}
CMD:neulingfinden(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Neulingfinden [SpielerID/Name]");
    if(!(Spieler[playerid][pKFZSteuer] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Server-Experte!");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if( Spieler[pID][pLevel] > 3 ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist kein Neuling mehr!");
    }
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z,5.0, CP_FINDEN);
    format(string, sizeof(string), "* %s wurde auf der Karte Rot markiert, Gebäude-Komplex: %d.", GetName(pID), GetPlayerInterior(pID));
    SendClientMessage(playerid, COLOR_YELLOW, string);
    return 1;
}*/

// HELFER-SYSTEM ENDE

CMD:adminwarnung(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, string[128];
    if(sscanf(params, "us[96]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Adminwarnung [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    {
        SendClientMessage(pID, COLOR_RED, "Nachricht vom MODERATOR:");
        SendClientMessage(pID, COLOR_ORANGE, "[ADMIN-TEAM]"COLOR_HEX_ORANGE" Wir haben Ihre Nachricht erhalten!");
        SendClientMessage(pID, COLOR_ORANGE, "[ADMIN-TEAM]"COLOR_HEX_ORANGE" Unsere eingerichtete Funktion '/Admin' dient nur für äußerst");
        SendClientMessage(pID, COLOR_ORANGE, "[ADMIN-TEAM]"COLOR_HEX_ORANGE" wichtigen Notfällen - Cheatermeldung, Melden von Regelverstößen und ähnlichem.");
        new string1[256];
        new string2[256];
        new string3[256];
        new string4[768];
        format(string1, sizeof(string1), "Nachricht vom MODERATOR:\n\nWir haben deine Meldung erhalten!\nBitte hab Verständnis dafür, dass der Befehl '/Admin' nur\n");
        format(string2, sizeof(string2), "für äußerst wichtige Notfälle dieser Art:\n\n- Cheatermeldung\n- Melden von Regelverstößen\n");
        format(string3, sizeof(string3), "- Melden von Spielfehlern\n\noder ähnlichem eingerichtet wurde.");
        format(string4, sizeof(string4), "\n\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak Adresse: Teamspeak.LyD-Roleplay.de\nUser Panel: www.UCP.LyD-Roleplay.de");
        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
        ShowPlayerDialog(pID, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "LIVE YOUR DREAM", string4, "OK", "");
        format(string, sizeof(string), "%s %s hat Spieler %s wegen seinem Admin-Notruf ermahnt.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID));
        SendAdminMessage(COLOR_ORANGE, string);
    }
    return 1;
}

CMD:regelwarnung(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, string[128];
    if(sscanf(params, "us[96]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Regelwarnung [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    {
        SendClientMessage(pID, COLOR_RED, "Nachricht vom MODERATOR:");
        SendClientMessage(pID, COLOR_ORANGE, "[ADMIN-TEAM]"COLOR_HEX_ORANGE" Deine Spielweise entspricht nicht den Regeln!");
        SendClientMessage(pID, COLOR_ORANGE, "[ADMIN-TEAM]"COLOR_HEX_ORANGE" Du stehst kurz davor wegen den Verstoß gegen die Regeln bestraft zu werden!");
        SendClientMessage(pID, COLOR_ORANGE, "[ADMIN-TEAM]"COLOR_HEX_ORANGE" Die Spielregeln findest du in unserem Forum unter 'Regeln'.");
        new string1[256];
        new string2[256];
        new string3[256];
        new string4[768];
        format(string1, sizeof(string1), "Nachricht vom MODERATOR:\n\nDeine Spielweise entspricht nicht den Regeln!\nDu stehst kurz davor wegen einem Regelverstoß bestraft zu werden.");
        format(string2, sizeof(string2), "\nWir fordern dich unverzüglich auf, deine Spielweise den Regeln anzupassen.\nAndernfalls musst du mit Sanktionen rechnen. Dies ist erstmals eine Ermahnung!");
        format(string3, sizeof(string3), "\nDie Spielregeln findest du in unserem Forum unter 'Regeln'.");
        format(string4, sizeof(string4), "\n\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak Adresse: Teamspeak.LyD-Roleplay.de\nUser Panel: www.UCP.LyD-Roleplay.de");
        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
        ShowPlayerDialog(pID, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "LIVE YOUR DREAM", string4, "OK", "");
        format(string, sizeof(string), "%s %s hat Spieler %s auf seine negative Spielweise hingewiesen.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID));
        SendAdminMessage(COLOR_ORANGE, string);
    }
    return 1;
}

forward ReportReset(playerid);
public ReportReset(playerid)
{
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid])
    {
        if(PlayerNeedsHelp[playerid] == 1)
        {
            PlayerNeedsHelp[playerid] = 0;
            //format(SupText[playerid], 128, " "); quatsch
            SupText[playerid][0] = '\0';
            SendClientMessage(playerid, COLOR_YELLOW, "Dein Ticket ist nicht geöffnet worden und wurde automatisch gelöscht. Erstelle ein neues!");
            KillTimer(ReportTimer[playerid]);
        }
    }
    return 1;
}


CMD:ladung(playerid, params[])
{
    new string[128];
    if(Spieler[playerid][pJob] == 3)
    {
        new vID = GetPlayerVehicleID(playerid);
        new model = GetVehicleModel(vID);
        if(model == 514)
        {
            if(IsTrailerAttachedToVehicle(vID))
            {
                if(GetVehicleModel(GetVehicleTrailer(vID)) == 584)
                {
                    new tempBenzin = Benzin[GetVehicleTrailer(vID)];
                    format(string, sizeof(string), "* Benzin-Stand: %d/8000 Liter *", tempBenzin);
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
                }
            }
        }
        else if(model == 515)
        {
            if(IsTrailerAttachedToVehicle(vID))
            {
                if(GetVehicleModel(GetVehicleTrailer(vID)) == 435)
                {
                    new tempWaren = Waren[vID];
                    format(string, sizeof(string), "* Waren-Stand: %d/2000 Waren *", tempWaren);
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
                 }
            }
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Trucker!");
        return 1;
    }
    return 1;
}

CMD:loadwaren(playerid, params[])
{
    new string[128];
    new waren;
    if(sscanf(params, "i", waren))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Loadwaren [Waren] - $5 pro Ware!");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du kannst erst in {FFFF00}%d Sekunden {FFFFFF}weiterarbeiten.", Spieler[playerid][tickJobCheckpoint] - gettime());
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    if(IsPlayerInRangeOfPoint(playerid, 10.0, 577.4390,1221.7273,11.2689))
    {
        new vID = GetPlayerVehicleID(playerid);
        new model = GetVehicleModel(vID);
        if(model == 515)
        {
        if(IsTrailerAttachedToVehicle(vID))
            {
                new
                    trailer = GetVehicleTrailer(vID);
                if(GetVehicleModel(trailer) == 435)
                {
                    new tempRechnung = waren*5;
                    if(GetPlayerMoney(playerid) < tempRechnung)
                    {
                        format(string, sizeof(string), "Du hast nicht genügend Geld. ($%s)", AddDelimiters(tempRechnung));
                        SendClientMessage(playerid, COLOR_RED, string);
                        return 1;
                    }
                    if(waren < 1 || waren > 2000)return SendClientMessage(playerid, COLOR_RED, "Du kannst mindestens 1 Ware und höchstens 2.000 Waren beladen!");
                    if(waren + Waren[vID] > 2000)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Soviele Waren passen nicht in den Transporter hinein!");
                        return 1;
                    }
                    Waren[vID] += waren;
                    GivePlayerCash(playerid, -tempRechnung);
                    format(string, sizeof(string), "* Du hast %d Waren für $%s gekauft.", waren, AddDelimiters(tempRechnung));
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
                    SendClientMessage(playerid, COLOR_YELLOW, "Mit '/Startwaren' erfährst du dein Ablieferungsort!");
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast nicht den passenden Anhänger dran.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Du hast keinen Anhänger dran.");
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du sitzt nicht in den kleinen Transportern!");
                return 1;
            }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht an der Waren-Vergabe in LV. Tippe /Navi -> Weitere Orte -> LV Waren-Vergabe.");
        return 1;
    }
    return 1;
}

CMD:loadbenzin(playerid, params[])
{
    new string[128];
    new benzin;
    if(sscanf(params, "i", benzin))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Loadbenzin [Benzin] - $6 pro Liter!");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du kannst erst in {FFFF00}%d Sekunden {FFFFFF}weiterarbeiten.", Spieler[playerid][tickJobCheckpoint] - gettime());
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    if(IsPlayerInRangeOfPoint(playerid, 20.0, 268.9609,1384.2981,10.1610))
    {
        new vID = GetPlayerVehicleID(playerid);
        new model = GetVehicleModel(vID);
        if(model == 514)
        {
            if(IsTrailerAttachedToVehicle(vID))
            {
                new
                    trailer = GetVehicleTrailer(vID);
                if(GetVehicleModel(trailer) == 584)
                {
                    new tempRechnung = benzin*6;
                    if(GetPlayerMoney(playerid) < tempRechnung)
                    {
                        format(string, sizeof(string), "Du hast nicht genügend Geld. ($%s)", AddDelimiters(tempRechnung));
                        SendClientMessage(playerid, COLOR_RED, string);
                        return 1;
                    }
                    if(benzin < 1 || benzin > 2000)return SendClientMessage(playerid, COLOR_RED, "Du kannst mindestens 1 Liter und höchstens 2000 Liter beladen!");
                    if(benzin + Benzin[trailer] > 2000)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Soviel Liter passt in den Anhänger nicht hinein!");
                        return 1;
                    }
                    Benzin[trailer] += benzin;
                    GivePlayerCash(playerid, -tempRechnung);
                    format(string, sizeof(string), "* Du hast %d Liter für $%s gekauft.", benzin, AddDelimiters(tempRechnung));
                    SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
                    SendClientMessage(playerid, COLOR_YELLOW, "Mit '/Startbenzin' erfährst du dein Ablieferungsort!");
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Du hast nicht den passenden Anhänger dran.");
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du hast keinen Anhänger dran.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du sitzt nicht im Tanker.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht an der Öl-Raffinerie. Tippe /Navi -> Weitere Orte -> Öl-Raffinerie.");
        return 1;
    }
    return 1;
}


CMD:mute(playerid, params[])
{
    new pID, grund[64], time, string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "uis[64]", pID, time, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Mute [SpielerID/Name] [Zeit in Min.] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    format(string, sizeof(string), "%s wurde von %s für %d Minuten gemutet, Grund: %s", GetName(pID), GetName(playerid), time, grund);
    SendAdminMessage(COLOR_DARKRED, string);
    SendClientMessage(pID, COLOR_WHITE, "Mit /mutetime kannst du sehen wielange du noch gemutet bist.");
    new rightTime = time*60;
    Spieler[pID][pMuteTime] = rightTime;
    Spieler[pID][pMuted] = 1;
    return 1;
}

CMD:jailtime(playerid, params[])
{
    new string[128];
    if (Spieler[playerid][pJailed] == 0) return SendClientMessage(playerid, COLOR_ORANGE, "Du bist nicht im Gefängnis.");
    new myJailTimeout = JAIL_TIMEOUT - (gettime() - GetPVarInt(playerid, "JAIL.TIMESTAMP"));
    if (myJailTimeout > Spieler[playerid][pJailTime]) myJailTimeout = Spieler[playerid][pJailTime];

    new waitingTimeString[64];
    if (Spieler[playerid][pJailed] != 1) waitingTimeString = "";
    else {
        if (myJailTimeout <= 0) waitingTimeString = " (keine Wartezeit)";
        else if (myJailTimeout == 1) waitingTimeString = " (eine Sekunde Wartezeit)";
        else format(waitingTimeString, sizeof(waitingTimeString), " (%d Sekunden Wartezeit)", myJailTimeout);
    }

    format(string, sizeof(string), "Du bist noch für %d Sekunden im Gefängnis%s.", Spieler[playerid][pJailTime], waitingTimeString);
    SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:tottime(playerid, params[])
{
    new string[128];
    if(Spieler[playerid][pTot] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Du bist nicht tot.");
    format(string, sizeof(string), "Du bist noch für %d Sekunden verletzt.", Spieler[playerid][pTotTime]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:mutetime(playerid, params[])
{
    new string[128];
    if(Spieler[playerid][pMuted] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Du bist nicht gemutet.");
    format(string, sizeof(string), "Du bist noch für %d Sekunden gemutet.", Spieler[playerid][pMuteTime]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:tban(playerid, params[])
{
    new pID, grund[64], time;
    if(sscanf(params, "uis[64]", pID, time, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tban [SpielerID/Name] [Zeit in Min.] [Grund]");
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pAdmin] > 0)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Supporter bzw. Admins bannen.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    if(time < 1 || time > 14400)return SendClientMessage(playerid, COLOR_ORANGE, "Die Zeit sollte sich zwischen 1 und 14400 liegen. (1 Minute oder 10 Tage)");
    new tBanTime = time * 60;
    tBanTime = tBanTime + gettime();
    // -> THREADED
    mysql_real_escape_string(grund,grund);
    PlayerSQLExtra(playerid,params);
    new
        query[128];
    format(query, 128, "SELECT FROM_UNIXTIME(%d, '%s.%s.%s %s')", tBanTime, "%e", "%M", "%Y", "%T");
    mysql_pquery(query,THREAD_CONVERTUNIX,playerid,gSQL,MySQLThreadOwner);
    new
        String[256];
    format(String,sizeof(String),"[TIME-BAN] %s %s hat Spieler %s für %d Minuten gebannt, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), time, grund);
    AdminLog(String);

    /*ConvertUnix(tBanTime);
    printf("User %s time banned - %s", GetName(pID), ConvertUnix(tBanTime));
    format(string, sizeof(string), "[BANNED]: Spieler %s wurde von %s für %d Minuten gebannt, Grund: %s", GetName(pID), GetName(playerid), time, grund);
    SendClientMessageToAll(COLOR_RED, string);
    format(string1, sizeof(string1), "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf wwww.LyD-Roleplay.de ein Entbannantrag!");
    SendClientMessage(pID, COLOR_RED, string1);

    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1,`TimeBan` = %d WHERE `Name` = '%s'",
        GetName(playerid),grund,tBanTime,GetName(pID));
    mysql_oquery(query,THREAD_TBAN,playerid,gSQL);

    format(query,sizeof(query),"Gebannt: %s von: %s, Grund: %s, Dauer: %s",GetName(pID),GetName(playerid),grund,ConvertUnix(tBanTime));
    BanLog( query );

    ShowPlayerBan(pID);
    Kick(pID);*/
    return 1;
}

CMD:kleidung(playerid)
{
    for(new i=1;i<MAX_BIZES;i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 30.0, Biz[i][ExitX], Biz[i][ExitY], Biz[i][ExitZ]) && GetPlayerVirtualWorld(playerid) == i)
        {
            new tempCurBiz = i;
            if(tempCurBiz == 37 || tempCurBiz == 36  || tempCurBiz == 35 )
            {
                pCurrentBiz[playerid] = tempCurBiz;
                pSkinSelection[playerid] = 1;
                FreezePlayer(playerid);
                SetPlayerPos(playerid, 257.9847,-41.5232,1002.0234);
                SetPlayerCameraPos(playerid, 255.0529,-41.4668,1002.0234);
                SetPlayerCameraLookAt(playerid, 256.2413,-41.4954,1002.0234);
                SetPlayerInterior(playerid, 14);
                SetPlayerVirtualWorld(playerid, playerid+1337);
                SetPlayerFacingAngle(playerid, 90.4982);
                if(Spieler[playerid][pFraktion] == 0)
                {
                    if(Spieler[playerid][pSex] == 1)
                    {
                        SetPlayerSkin(playerid, 2);
                        pChoosedSkin[playerid] = 2;
                    }
                    else if(Spieler[playerid][pSex] == 2)
                    {
                        SetPlayerSkin(playerid, 12);
                        pChoosedSkin[playerid] = 12;
                    }
                }
                else if(Spieler[playerid][pFraktion] == 1)
                {
                    SetPlayerSkin(playerid, 265);
                    pChoosedSkin[playerid] = 265;
                }
                else if(Spieler[playerid][pFraktion] == 2)
                {
                    SetPlayerSkin(playerid, 286);
                    pChoosedSkin[playerid] = 286;
                }
                else if(Spieler[playerid][pFraktion] == 3)
                {
                    SetPlayerSkin(playerid, 274);
                    pChoosedSkin[playerid] = 274;
                }
                else if(Spieler[playerid][pFraktion] == 4)
                {
                    SetPlayerSkin(playerid, 57);
                    pChoosedSkin[playerid] = 57;
                }
                else if(Spieler[playerid][pFraktion] == 5)
                {
                    SetPlayerSkin(playerid, 50);
                    pChoosedSkin[playerid] = 50;
                }
                else if(Spieler[playerid][pFraktion] == 6)
                {
                    SetPlayerSkin(playerid, 105);
                    pChoosedSkin[playerid] = 105;
                }
                else if(Spieler[playerid][pFraktion] == 7)
                {
                    SetPlayerSkin(playerid, 102);
                    pChoosedSkin[playerid] = 102;
                }
                else if(Spieler[playerid][pFraktion] == 8)
                {
                    SetPlayerSkin(playerid, 240);
                    pChoosedSkin[playerid] = 240;
                }
                else if(Spieler[playerid][pFraktion] == 9)
                {
                    SetPlayerSkin(playerid, 170);
                    pChoosedSkin[playerid] = 170;
                }
                else if(Spieler[playerid][pFraktion] == 10)
                {
                    SetPlayerSkin(playerid, 123);
                    pChoosedSkin[playerid] = 123;
                }
                else if(Spieler[playerid][pFraktion] == 11)
                {
                    SetPlayerSkin(playerid, 114);
                    pChoosedSkin[playerid] = 114;
                }
                else if(Spieler[playerid][pFraktion] == 12)
                {
                    SetPlayerSkin(playerid, 125);
                    pChoosedSkin[playerid] = 125;
                }
                else if(Spieler[playerid][pFraktion] == 13)
                {
                    SetPlayerSkin(playerid, 110);
                    pChoosedSkin[playerid] = 110;
                }
                else if(Spieler[playerid][pFraktion] == 14)
                {
                    SetPlayerSkin(playerid, 229);
                    pChoosedSkin[playerid] = 229;
                }
                else if(Spieler[playerid][pFraktion] == 15)
                {
                    SetPlayerSkin(playerid, 248);
                    pChoosedSkin[playerid] = 248;
                }
                else if(Spieler[playerid][pFraktion] == 16)
                {
                    SetPlayerSkin(playerid, 282);
                    pChoosedSkin[playerid] = 282;
                }
                else if(Spieler[playerid][pFraktion] == 17)
                {
                    SetPlayerSkin(playerid, 202);
                    pChoosedSkin[playerid] = 202;
                }
                else if(Spieler[playerid][pFraktion] == 18)
                {
                    SetPlayerSkin(playerid, 287);
                    pChoosedSkin[playerid] = 287;
                }
                else if(Spieler[playerid][pFraktion] == 19)
                {
                    SetPlayerSkin(playerid, 142);
                    pChoosedSkin[playerid] = 142;
                }
                else if(Spieler[playerid][pFraktion] == 20)
                {
                    SetPlayerSkin(playerid, 47);
                    pChoosedSkin[playerid] = 47;
                }
                else if(Spieler[playerid][pFraktion] == 21)
                {
                    SetPlayerSkin(playerid, 120);
                    pChoosedSkin[playerid] = 120;
                }
                else if(Spieler[playerid][pFraktion] == 22)
                {
                    SetPlayerSkin(playerid, 288);
                    pChoosedSkin[playerid] = 288;
                }
            }
            SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Drücke "COLOR_HEX_BLUE"SPRINT-TASTE "COLOR_HEX_WHITE"um den nächsten Skin anzeigen zu lassen.");
            SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Drücke "COLOR_HEX_BLUE"ENTER-TASTE "COLOR_HEX_WHITE"um den derzeitigen Skin auszuwählen.");
            SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_BLUE"INFO: "COLOR_HEX_WHITE"Wenn du doch keinen Skin wechseln möchtest, wähle einfach deinen derzeitigen Skin aus.");
        }
    }
    return 1;
}


CMD:guncheck(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Guncheck [SpielerID/Name]");
    new weapons[13][2];
    new wpName1[32], wpName2[32], wpName3[32], wpName4[32], wpName5[32], wpName6[32], wpName7[32];
    new wpName8[32], wpName9[32], wpName10[32], wpName11[32], wpName12[32], wpName13[32];
    for(new i=0;i<13;i++)
    {
        GetPlayerWeaponData(pID, i, weapons[i][0], weapons[i][1]);
    }
    GetWeaponNameEx(weapons[0][0], wpName1, 32);
    GetWeaponNameEx(weapons[1][0], wpName2, 32);
    GetWeaponNameEx(weapons[2][0], wpName3, 32);
    GetWeaponNameEx(weapons[3][0], wpName4, 32);
    GetWeaponNameEx(weapons[4][0], wpName5, 32);
    GetWeaponNameEx(weapons[5][0], wpName6, 32);
    GetWeaponNameEx(weapons[6][0], wpName7, 32);
    GetWeaponNameEx(weapons[7][0], wpName8, 32);
    GetWeaponNameEx(weapons[8][0], wpName9, 32);
    GetWeaponNameEx(weapons[9][0], wpName10, 32);
    GetWeaponNameEx(weapons[10][0], wpName11, 32);
    GetWeaponNameEx(weapons[11][0], wpName12, 32);
    GetWeaponNameEx(weapons[12][0], wpName13, 32);
    format(string, sizeof(string), "Waffen von "COLOR_HEX_BLUE"%s", GetName(pID));
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "Waffen-Slot 1: %s [%d], Waffen-Slot 2: %s [%d], Waffen-Slot 3: %s [%d]", wpName1,weapons[0][1], wpName2,weapons[1][1], wpName3,weapons[2][1]);
    SendClientMessage(playerid, COLOR_LIGHTGREY, string);
    format(string, sizeof(string), "Waffen-Slot 4: %s [%d], Waffen-Slot 5: %s [%d], Waffen-Slot 6: %s [%d]", wpName4,weapons[3][1], wpName5,weapons[4][1], wpName6,weapons[5][1]);
    SendClientMessage(playerid, COLOR_LIGHTGREY, string);
    format(string, sizeof(string), "Waffen-Slot 7: %s [%d], Waffen-Slot 8: %s [%d], Waffen-Slot 9: %s [%d]", wpName7,weapons[6][1], wpName8,weapons[7][1], wpName9,weapons[8][1]);
    SendClientMessage(playerid, COLOR_LIGHTGREY, string);
    format(string, sizeof(string), "Waffen-Slot 10: %s[%d] , Waffen-Slot 11: %s [%d], Waffen-Slot 12: %s [%d]", wpName10,weapons[9][1], wpName11,weapons[10][1], wpName12,weapons[11][1]);
    SendClientMessage(playerid, COLOR_LIGHTGREY, string);
    format(string, sizeof(string), "Waffen-Slot 13: %s [%d]", wpName13,weapons[12][1]);
    SendClientMessage(playerid, COLOR_ORANGE, string);

    return 1;
}
CMD:rufdetektiv(playerid)
{
    if(Spieler[playerid][pDuty] == 0)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
    SendClientMessage(playerid, COLOR_BLUE, "Du hast einen Detektiv angefordert! Der Detektiv wurde zum Eingangsbereich der Los Santos Polizei gerufen.");
    new string[128];
    format(string, sizeof(string), "Polizeibeamter %s benötigt ein Detektiv. Bitte beim Eingangsbereich der Los Santos Polizei melden! Vergütung: $2.000", GetName(playerid));
    SendJobMessage(14, COLOR_YELLOW, string);
    return 1;
}
CMD:vk(playerid)
{
    if(Spieler[playerid][pDuty] == 0)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
    new string[128];
    new ort[28];
    GetPlayer2DZone(playerid, ort, 28);
    new Rang[32];
    if(Spieler[playerid][pFraktion] == 1){Rang="LSPD-Officer";}
    else if(Spieler[playerid][pFraktion] == 2){Rang="Agent";}
    else if(Spieler[playerid][pFraktion] == 16){Rang="LVPD-Officer";}
    else if(Spieler[playerid][pFraktion] == 18){Rang="Soldat";}
    format(string, sizeof(string), "HQ: %s %s (ID: %d) benötigt dringend Verstärkung in %s, over.", Rang, GetName(playerid), playerid, ort);
    SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Nach 30 Sekunden verschwindet der Marker automatisch für alle Polizisten wieder.");
    SendFraktionMessage(1, COLOR_RED, string);
    SendFraktionMessage(2, COLOR_RED, string);
    SendFraktionMessage(16, COLOR_RED, string);
    SendFraktionMessage(18, COLOR_RED, string);
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2 || Spieler[i][pFraktion] == 16 || Spieler[i][pFraktion] == 18)
        {
            if(Spieler[i][pDuty] == 0)continue;
            if(i != playerid)
            {
                KillTimer(pBackupTimer[i]);
                SetPlayerCheckpointEx(i, x, y, z, 5.0, CP_BACKUP);
                pBackupTimer[i] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", i);
            }
        }
    }
    return 1;
}

CMD:bk(playerid)
{
    if(Spieler[playerid][pDuty] == 0)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
    if(!(Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 3 ))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter oder Medic.");
    new string[128];
    new ort[28];
    GetPlayer2DZone(playerid, ort, 28);
    new Rang[32];
    if(Spieler[playerid][pFraktion] == 5){Rang="Ordnungsbeamter";}
    else if(Spieler[playerid][pFraktion] == 3){Rang="Medic";}
    format(string, sizeof(string), "HQ: %s %s (ID: %d) fordert eine Polizeistreife zur Verstärkung in %s an, over.", Rang, GetName(playerid), playerid, ort);
    SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Nach 30 Sekunden verschwindet der Marker automatisch für alle Polizisten wieder.");
    SendFraktionMessage(1, COLOR_RED, string);
    SendFraktionMessage(2, COLOR_RED, string);
    SendFraktionMessage(16, COLOR_RED, string);
    SendFraktionMessage(18, COLOR_RED, string);
    SendFraktionMessage(5, COLOR_RED, string);
    SendFraktionMessage(3, COLOR_RED, string);
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2 || Spieler[i][pFraktion] == 16 || Spieler[i][pFraktion] == 18)
        {
            if(Spieler[i][pDuty] == 0)continue;
            if(i != playerid)
            {
                KillTimer(pBackupTimer[i]);
                SetPlayerCheckpointEx(i, x, y, z, 5.0, CP_BACKUP);
                pBackupTimer[i] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", i);
            }
        }
    }
    return 1;
}

forward RemoveBackupCP(playerid);
public RemoveBackupCP(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        KillTimer(pBackupTimer[playerid]);
        DisablePlayerCheckpointEx(playerid);
    }
}

/*CMD:bk(playerid)
{
    if(Spieler[playerid][pDuty] == 0)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    new string[128];
    new ort[28];
    GetPlayer2DZone(playerid, ort, 28);
    new Rang[32];
    if(Spieler[playerid][pFraktion] == 1){Rang="Officer";}
    else if(Spieler[playerid][pFraktion] == 2){Rang="Agent";}
    format(string, sizeof(string), "HQ: %s %s (ID: %d) benötigt dringend Verstärkung in %s, over.", Rang, GetName(playerid), playerid, ort);
    SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Nach 30 Sekunden verschwindet der Marker automatisch für alle LSPD/FBI Mitglieder wieder.");
    SendFraktionMessage(1, COLOR_COP_VERST, string);
    SendFraktionMessage(2, COLOR_COP_VERST, string);
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2)
        {
            if(Spieler[i][pDuty] == 0)continue;
            if(i != playerid)
            {
                KillTimer(pBackupTimer[i]);
                SetPlayerCheckpointEx(i, x, y, z, 5.0, CP_BACKUP);
                pBackupTimer[i] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", i);
            }
        }
    }
    return 1;
}*/

CMD:afk(playerid,params[])
{
    #pragma unused params
    if(Spieler[playerid][pTot] == 1 || Spieler[playerid][pTot] == 2) return SendClientMessage(playerid, COLOR_RED, "Du bist Tot.");
    if(Spieler[playerid][pJailed] == 3)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich im Admin-Prison. Diese Funktion ist hier nicht möglich.");
    if(IsAFK[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du bist bereits im AFK-Modus.");

    new Float:vhealth, vid = GetPlayerVehicleID(playerid);
    GetVehicleHealth(vid, vhealth);
    if (vid != 0 && (vhealth < 250 || GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetPlayerVehicleSpeed(playerid) > 2.0))
        return SendClientMessage(playerid, COLOR_RED, "Du kannst jetzt nicht einfach afk gehen.");
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht während du fällst AFK gehen.");

    IsAFK[playerid] = 1;
    SendClientMessage(playerid, COLOR_ORANGE, "Du bist nun im AFK-Modus. Deine Zahltag-Zeit(PayDay) läuft nun nicht mehr weiter.");
    SendClientMessage(playerid, COLOR_ORANGE, "Mit /Back verlässt du den AFK-Modus wieder.");
    paydaywait[playerid]=1;
    FreezePlayer(playerid);
    UpdateDynamic3DTextLabelText(Spieler[playerid][pAFKLabel], 0xC2A2DAFF, "Im AFK-Modus");
    Spieler[playerid][unixAFKNotice] = gettime() + 5*60 ;
    return 1;
}

CMD:back(playerid)
{
    if(Spieler[playerid][pTot] == 1 || Spieler[playerid][pTot] == 2 )return SendClientMessage(playerid, COLOR_RED, "Du bist Tot.");
    if(Spieler[playerid][pJailed] == 3)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich im Admin-Prison. Diese Funktion ist hier nicht möglich.");
    if(IsAFK[playerid] == 1)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Du bist nun nicht mehr im AFK-Modus.");
        SendClientMessage(playerid, COLOR_GREEN, "Dein Zahltag läuft nun weiter.");
        paydaywait[playerid] = 0;
        IsAFK[playerid] = 0;
        UnfreezePlayer(playerid);
        UpdateDynamic3DTextLabelText(Spieler[playerid][pAFKLabel], COLOR_PURPLE, " ");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht im AFK-Modus.");
        return 1;
    }
    return 1;
}

CMD:sethp(playerid, params[])
{
    new pID, string[128], health;
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "* Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "ui", pID, health))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sethp [SpielerID/Name] [Leben]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    SetPlayerHealth(pID, health);
    format(string, sizeof(string), "Du hast die Leben von %s auf %d gesetzt.", GetName(pID), health);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* %s %s hat das Leben von Spieler %s auf %d Prozent gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), health);
    SendAdminMessage(COLOR_YELLOW, string);
    printf("%s hat die Leben von %s auf %d gesetzt.", GetName(playerid), GetName(pID), health);
    return 1;
}
CMD:setafk(playerid,params[])
{
    new pID;
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "* Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params,"u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Setafk [SpielerID]");
    if(Spieler[pID][pTot] == 1 || Spieler[pID][pTot] == 2 )return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist Tot.");
    if(IsAFK[pID] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist bereits im AFK-Modus.");
    IsAFK[pID] = 1;
    new string[200];
    format(string,200, "Du wurdest durch %s %s in den AFK-Modus versetzt. Dein PayDay läuft nun nicht mehr weiter.", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(pID, COLOR_ORANGE,string);
    format(string,200,"Du hast den Spieler %s erfolgreich in den AFK-Modus versetzt. Sein PayDay läuft nun nicht mehr weiter.",
    GetName(pID));
    SendClientMessage(playerid, COLOR_ORANGE, string);
    paydaywait[pID]=1;
    FreezePlayer(pID);
    UpdateDynamic3DTextLabelText(Spieler[pID][pAFKLabel], 0xC2A2DAFF, "Im AFK-Modus");
    Spieler[pID][unixAFKNotice] = gettime() + 5*60 ;
    return 1;
}

CMD:setarmor(playerid, params[])
{
    new pID, string[128], health;
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "* Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "ui", pID, health))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Setarmor [SpielerID/Name] [Leben]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    SetPlayerArmour(pID, health);
    format(string, sizeof(string), "Du hast die Rüstung von %s auf %d gesetzt.", GetName(pID), health);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* %s %s hat Spieler %s eine Schutzweste (%d Prozent) gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), health);
    SendAdminMessage(COLOR_YELLOW, string);
    printf("%s hat die Rüstung von %s auf %d gesetzt.", GetName(playerid), GetName(pID), health);
    return 1;
}

CMD:freeze(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "* Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Freeze [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    FreezePlayer(pID);
    format(string, sizeof(string), "Du hast Spieler %s gefreezed.", GetName(pID));
    SendClientMessage(playerid, COLOR_ORANGE, string);
    return 1;
}

CMD:unfreeze(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "* Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Unfreeze [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    UnfreezePlayer(pID);
    Cuffed[pID] = 0;
    format(string, sizeof(string), "Du hast Spieler %s entfreezed.", GetName(pID));
    SendClientMessage(playerid, COLOR_GREEN, string);
    return 1;
}


public OnPlayerSpawn(playerid)
{
    if (!gPlayerLogged[playerid]) {
        SendClientMessage(playerid, COLOR_RED, "Du bist noch nicht eingeloggt.");
        KickDelay(playerid);
        return 1;
    }

    #if defined USE_NPCS
    if( IsPlayerNPC( playerid ) ) {
        new
            Text3D:Label,
            npcname[MAX_PLAYER_NAME];
        ResetPlayerWeapons(playerid);
        GetPlayerName(playerid, npcname, sizeof(npcname));
        SetPlayerColor(playerid,0xFFFFFFFF);
        Label = Create3DTextLabel(npcname,0x000000,0.0,0.0,0.0,45.0,0,1);
        for(new i ; i < sizeof(g_Bots) ; i++) {
            if(!strcmp(npcname,g_Bots[i][Bot_sName])) {
                if( g_Bots[i][Bot_iVehicle] > 0 ) {
                    PutPlayerInVehicle(playerid, g_Bots[i][Bot_iVehicleID],0);
                    g_Bots[i][Bot_t3dLabel] = Label;
                }
            }
        }
        Attach3DTextLabelToPlayer(Label,playerid,0.0,0.0,0.20);
        Update3DTextLabelText(Label,0xFFFFFFFF,npcname);
        return 1;
    }
    #endif

    SetPVarInt(playerid, "MP3.PLAYER", 0);
    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_ONGOING && g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER] == playerid) {
        KillTimer(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER]);
        g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] = INVALID_TIMER_ID;
        EvidenceRoomHeistFinished();
    }

    //ShowPlayerDialog(playerid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "Live your Dream - Roleplay", "LyD ist heute 2 JAHRE ALT geworden und das feiern wir mit tollen Events und Gewinnen!\nWas für Events, zu welcher Uhrzeit stattfinden, steht im Forum: www.LyD-Roleplay.de\n\nProjektdaten:\n\nServer IP: Server.LyD-Roleplay.de\nTeamspeak IP: Teamspeak.LyD-Roleplay.de\nForum Adresse: www.LyD-Roleplay.de\n\nSchau täglich auf unserem Forum vorbei, um über Neuigkeiten informiert zu sein!", "OK", "");
    GZ_OnPlayerSpawn(playerid);
    g_aiLastDamagedByPlayer[playerid] = INVALID_PLAYER_ID;

    if( Spieler[playerid][bAugenbinde]) {
        ResetAugenbinde(playerid);
        Spieler[playerid][bAugenbinde] = false;
    }
    g_aiDestroyedVehicles{playerid} = 0;
    Spieler[playerid][pEisVerkaeufer] = INVALID_PLAYER_ID;
    Spieler[playerid][pHotDogVerkaeufer] = INVALID_PLAYER_ID;
    Spieler[playerid][iKidnapID] = INVALID_PLAYER_ID;
    Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
    Spieler[playerid][bKidnapped] = false;
    Spieler[playerid][pTransportActive] = false ;
    Spieler[playerid][bNoDMZone] = false;
    g_aiLastVehicle[playerid] = INVALID_VEHICLE_ID;
    Spieler[playerid][pHureID] = INVALID_PLAYER_ID;
    if( Spieler[playerid][pTimerTaschendieb] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerTaschendieb]);
    }
    if( Spieler[playerid][pTimerKnastbefreien] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerKnastbefreien]);
    }
    Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
    KillTimer( Spieler[playerid][tAutoknacken] );

    Spieler[playerid][pTimerTaschendieb] = INVALID_TIMER_ID;
    Spieler[playerid][pTimerKnastbefreien] = INVALID_TIMER_ID;
    paydaywait[playerid] =0;
    Cuffed[playerid] = 0;
    StopAudioStreamForPlayer(playerid);
    pSkinSelection[playerid]= 0;
    pChoosedSkin[playerid]= 0;
    pCurrentBiz[playerid] = 0;
    Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
    Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
    Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    pUnderCover[playerid] = 0;
    IsPlayerSpectating[playerid]= 0;
    SpectatedPlayer[playerid]= INVALID_PLAYER_ID;
    TextDrawShowForPlayer(playerid, UhrMessage);
    TextDrawShowForPlayer(playerid, DatumMessage);
    SetPlayerSkin(playerid, Spieler[playerid][pSkin]);
    UnfreezePlayer(playerid);
    if (!Spieler[playerid][pTot]) SetPlayerInterior(playerid, 0);
    //SetPlayerColor(playerid, COLOR_WHITE & 0xFFFFFF00 );
    SetPlayerColor(playerid, COLOR_WHITE);
    SetCameraBehindPlayer(playerid);
    ResetPlayerWeapons(playerid);
    SetPlayerArmour(playerid, 0);
    SetPlayerHealth(playerid, 0x7F800000);
    SetPlayerSpawn(playerid);
    if(firstspawn[playerid]==0)
    {
        firstspawn[playerid]=1;
        new i,pfad[64];
        for(;i<50;i++)
        {
            format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
            if(fexist(pfad))
            {
                new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                fread(datei,briefstring);
                fclose(datei);
                sscanf(briefstring,"s[32]s[32]s[20]s[20]s[500]iii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                if(klasseint==0)
                {
                    SendClientMessage(playerid,COLOR_YELLOW,"Du hast ungelesene Post erhalten! Gehe zum Postamt und öffne die Post.");
                    break;
                }
            }
        }
/*      if(Spieler[playerid][ID]<=0||Spieler[playerid][ID]>=1000000000)
        {
            new specialid=100000000+random(899999999);
            Spieler[playerid][ID] = specialid;
        }*/
    }
    UpdateDynamic3DTextLabelText(Spieler[playerid][pAntiSpawnKill], 0xFFFFFFFF, "Antispawn-Kill");
    TextDrawShowForPlayer(playerid, ASKDraw);
    PlayerTextDrawShow(playerid, Gesucht[playerid]);
    //PlayerTextDrawShow(playerid, WantedBar[playerid]);
    Spieler[playerid][pAntiSpawnKillOn] = true;
    SetTimerEx("ASKTimer", PlayerIsPaintballing[playerid] ? 1000 : 10000, 0, "i", playerid);
    //SetPlayerWeather(playerid,18);
    UpdatePayDayTextdraw(playerid);
    PlayerTextDrawShow(playerid,Spieler[playerid][ptPayDay]);
    PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"BD_FIRE");
    PreloadAnimLib(playerid,"COP_AMBIENT");
    PreloadAnimLib(playerid,"CRACK");
    PreloadAnimLib(playerid,"INT_HOUSE");
    PreloadAnimLib(playerid,"INT_SHOP");
    PreloadAnimLib(playerid,"BOMBER");
    PreloadAnimLib(playerid,"MEDIC");
    PreloadAnimLib(playerid,"ATTRACTORS");
    #if defined SILVESTER_EVENT
    PreloadAnimLib(playerid,"GRENADE");
    #endif
    return 1;
}

stock IsValidSecureCode(playerid) {
    new
        query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `SecureCode` = '' OR `SecureCode` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDSECURECUDE,playerid,gSQL,MySQLThreadOwner);
    /*
    mysql_store_result();
    securecode = mysql_num_rows();
    mysql_free_result();
    if( securecode > 0 ) return 0;
    */
    return 1;
}

stock IsValidGeburtstag(playerid) {
    new
        query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `Geburtstag` = '' OR `Geburtstag` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDGEBURTSTAG,playerid,gSQL,MySQLThreadOwner);
    return 1;
}
stock IsValidVornameDB(playerid) {
    new
        query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `vorname` = '' OR `vorname` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDVORNAME,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock IsValidEmailDB(playerid) {
    new
        query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `email` = '' OR `email` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDEMAIL,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

forward ASKTimer(playerid);
public ASKTimer(playerid)
{
    UpdateDynamic3DTextLabelText(Spieler[playerid][pAntiSpawnKill], COLOR_3D_WHITE, " ");
    TextDrawHideForPlayer(playerid, ASKDraw);
    Spieler[playerid][pAntiSpawnKillOn] = false;
    SetPlayerHealth(playerid, 100);
    return 1;
}

public SetPlayerSpawn(playerid)
{
    KillTimer(Spieler[playerid][tSpawnView]);
    if( IsPlayerNPC(playerid)) return 1;
    if(IsPlayerConnected(playerid))
    {
        /*if( Spieler[playerid][pTut] == 0 &&!IsPlayerNPC(playerid) )
        {
            if( Spieler[playerid][pTutTimer] != INVALID_TIMER_ID) {
                KillTimer(Spieler[playerid][pTutTimer]);
            }
            Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",500,false,"dd",playerid,0);*/
            /*
            FreezePlayer(playerid);
            ShowPlayerDialog(playerid, DIALOG_TUT_1, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
            // SetPlayerCameraPos(playerid, 1511.7239,-1715.6687,30.0469);//Brücke Verona Beach
            // SetPlayerCameraPos(playerid, 369.8176, -1869.0303, 22.6842);//Brücke Verona Beach
            // SetPlayerCameraLookAt(playerid, 1481.4827,-1756.5393, 22.5);
            // SetPlayerPos(playerid, 1486.3573,-1749.6531,15.4453 );
            */
            //return 1;
        //}
        //gSpawned{playerid} = 1;
        if(pMakeTutorial[playerid] == 1)
        {
            SetPlayerCheckpointEx(playerid, NOOBSPAWN_STARTBONUS_POINT, 5.0, CP_TUTORIAL1);
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, "Zugfahrer sagt: Herzlich Willkommen beim Los Santos Hauptbahnhof!");
            SendClientMessage(playerid, COLOR_WHITE, "Zugfahrer sagt: Wir wünschen Ihnen eine Gute Weiterreise und viel Spaß!");
            ShowPlayerDialog(playerid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "HERZLICH WILLKOMMEN", "Du hast als Startbonus 50.000$ und den Autoführerschein erhalten.\nAm Neulingsspawn kannst du dein zusätzlichen Startbonus annehmen.\n\nBis Level 2 kannst du den Neulingschat mit /NC nutzen.\nBenötigst du Hilfe? Wir helfen dir! Nutze: /Sup\n\n\nProjektdaten:\n\nServer IP: Server.LyD-Roleplay.de\nTeamspeak IP: Teamspeak.LyD-Roleplay.de\nForum Adresse: www.LyD-Roleplay.de", "OK", "");

		}
		if(PlayerIsPaintballing[playerid] == 1)
		{
			new zuf = random(5);
			if(zuf == 0)
			{
				SetPlayerPos(playerid, 2219.4368,1553.9379,1004.7188);
				SetPlayerFacingAngle(playerid,355.2485);
			}
			else if(zuf == 1)
			{
				SetPlayerPos(playerid, 2218.3101,1614.8721,999.9827);
				SetPlayerFacingAngle(playerid,0.2854);
			}
			else if(zuf == 2)
			{
				SetPlayerPos(playerid, 2200.1055,1613.8082,999.9735);
				SetPlayerFacingAngle(playerid,270.9845);
			}
			else if(zuf == 3)
			{
				SetPlayerPos(playerid, 2189.8403,1592.9681,999.9729);
				SetPlayerFacingAngle(playerid,90.1084);
			}
			else if(zuf == 4)
			{
				SetPlayerPos(playerid, 2169.8208,1618.7504,999.9766);
				SetPlayerFacingAngle(playerid,272.3657);
			}
			Spieler[playerid][pTot] = 0;
			GivePlayerWeapon(playerid, 24, 150);
			GivePlayerWeapon(playerid, 29, 150);
			SetPlayerVirtualWorld(playerid, 39);
			SetPlayerInterior(playerid, 1);
			return 1;
		}
		if(Spieler[playerid][pTot] == 1)
		{
			SetPlayerPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
			Streamer_UpdateEx(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0,1); // Dieing of Crack
			SetPlayerCameraPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]+5);
			SetPlayerCameraLookAt(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
		    FreezePlayer(playerid);
		    //SendClientMessage(playerid,COLOR_WHITE,"SpawnPlayer()");
		    //SpawnPlayer(playerid);
		    Spieler[playerid][pTot] = 2;
		    return 1;
		}
		//Polizeiknast
		if(Spieler[playerid][pJailed] == 1)
		{
			new randSpawn = random(sizeof(lspdInterior_jailSpawnPoints));
			SetPlayerFacingAngle(playerid, 90.0);
			SetCameraBehindPlayer(playerid);
			SetPlayerPosEx(playerid, lspdInterior_jailSpawnPoints[randSpawn][ 0], lspdInterior_jailSpawnPoints[randSpawn][1], lspdInterior_jailSpawnPoints[randSpawn][2] + 0.5, MAPS_LSPDINTERIOR_INTERIOR, VW_LSPDINTERIOR);
			SetPVarInt(playerid, "JAIL.TIMESTAMP", gettime());
			SendClientMessage(playerid, COLOR_BLUE, "[INFO] Du kannst erst in 2 Minuten von einem Anwalt befreit werden.");
		    return 1;
		}
		//Hochsicherheitsgefängnis
		else if(Spieler[playerid][pJailed] == 2)
		{
			SetPlayerFacingAngle(playerid, ALCATRAZ_JAIL_SPAWN_FACING);
			SetCameraBehindPlayer(playerid);
			SetPlayerPosEx(playerid, ALCATRAZ_JAIL_SPAWN_POINT + 0.5, MAPS_ALCATRAZ_INTERIOR, VW_MAIN);
			SendClientMessage(playerid, COLOR_RED, "Du wurdest aufgrund deiner schweren Verbrechen in das Alcatraz eingesperrt!");return 1;
		}
		// Admin Prison
		else if(Spieler[playerid][pJailed] == 3)
		{
			SetPlayerVirtualWorld(playerid, VW_ADMINPRISON);
			SetPlayerInterior(playerid, 10);
			SetPlayerPosEx(playerid, 264.7464, 109.6102, 1004.6172, 10, 0);
			return 1;
		}
		// GangJail
		else if(Spieler[playerid][pJailed] == 4)
		{
			SetPlayerInterior(playerid, 0);
      		SetPlayerPosEx(playerid, 2162.6523, -102.3127, 2.7500, 0, 0);
			SetTimerEx("SetPlayerPosEx", 131, false, "dfffdd", playerid, 2162.6523, -102.3127, 2.7500, 0, 0);
		    return 1;
		}
		if( Spieler[playerid][pPrisonRun] > 0 ) {
		    new
		        String[128];
			format(String,sizeof(String),"[PRISON] Deine Strafe (Checkpoint-Lauf) wurde noch nicht beendet! %d/%d",Spieler[playerid][pPrisonRunCount],Spieler[playerid][pPrisonRun]);
			SendClientMessage(playerid,COLOR_RED,String);
			SetPlayerPrisonRun(playerid);
			return 1;
		}
		//Frakspawn

		/*if( IsValidSpawn(playerid) ) {
		    SetOldPlayerSpawn(playerid);
		    ResetPlayerSpawn(playerid);
		    return 1;
		}*/
		if(Spieler[playerid][pSpawnChange] == 0)
		{
			if(Spieler[playerid][pFraktion] == 0)
			{
				SetPlayerPos(playerid, 798.4492,-1345.5676,-0.5078);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid,798.4492,-1345.5676,-0.5078);
			}
			else if(Spieler[playerid][pFraktion] == 1)
			{
				SetPlayerPosEx(playerid, LSPD_INTERIOR_SPAWN_POINT, MAPS_LSPDINTERIOR_INTERIOR, VW_LSPDINTERIOR);
				SetPlayerFacingAngle(playerid, LSPD_INTERIOR_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 2)
			{
				SetPlayerPosEx(playerid, FBI_INTERIOR_SPAWN_POINT, MAPS_FBIINTERIOR_INTERIOR, VW_FBIINTERIOR);
				SetPlayerFacingAngle(playerid, FBI_INTERIOR_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 3)
			{
				SetPlayerPosEx(playerid, SAMD_INTERIOR_SPAWN_POINT, MAPS_SAMDINTERIOR_INTERIOR, VW_SAMDINTERIOR2);
				SetPlayerFacingAngle(playerid, SAMD_INTERIOR_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 4)
			{
				SetPlayerPosEx(playerid, SANABASE_DUTY_POINT, MAPS_SANABASE_INTERIOR, VW_MAIN);
				SetPlayerFacingAngle(playerid, SANABASE_DUTY_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 5)
			{
				SetPlayerPosEx(playerid, POO_INTERIOR_SPAWN_POINT, MAPS_POOINTERIOR_INTERIOR, VW_POOINTERIOR);
				SetPlayerFacingAngle(playerid, POO_INTERIOR_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 6)
			{
				SetPlayerPos(playerid, 2496.0542,-1709.4050,1014.7422);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, 2496.0542,-1709.4050,1014.7422);
			}
			else if(Spieler[playerid][pFraktion] == 7)
			{
				SetPlayerPos(playerid, 331.0788,1128.5469,1083.8828);
				SetPlayerInterior(playerid, 5);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, 331.0788,1128.5469,1083.8828);
			}
			else if(Spieler[playerid][pFraktion] == 8)
			{
				SetPlayerPos(playerid, -2033.1216,-117.4597,1035.1719);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, -2033.1216,-117.4597,1035.1719);
			}
			else if(Spieler[playerid][pFraktion] == 9)
			{
				SetPlayerPosEx(playerid, GOVERNMENT_INTERIOR_SPAWN_POINT, MAPS_GOVERNMENTINTERIOR_INTERIOR, VW_GOVERNMENTINTERIOR);
				SetPlayerFacingAngle(playerid, GOVERNMENT_INTERIOR_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 10)
			{
				SetPlayerPosEx(playerid, YAKUZA_INTERIOR_SPAWN_POINT, MAPS_YAKUZAINTERIOR_INTERIOR, VW_YAKUZAINTERIOR);
				SetPlayerFacingAngle(playerid, YAKUZA_INTERIOR_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 11)
			{
				SetPlayerPos(playerid, 508.3369,-84.9195,998.9609);
				SetPlayerInterior(playerid, 11);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, 508.3369,-84.9195,998.9609);
			}
			else if(Spieler[playerid][pFraktion] == 12)
			{
				SetPlayerPosEx(playerid, LCN_INTERIOR_SPAWN_POINT, MAPS_LCNINTERIOR_INTERIOR, VW_LCNINTERIOR);
				SetPlayerFacingAngle(playerid, LCN_INTERIOR_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 13)
			{
				SetPlayerPos(playerid, 2807.4153,-1165.1274,1025.5703);
				SetPlayerInterior(playerid, 8);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, 2807.4153,-1165.1274,1025.5703);
			}
			else if(Spieler[playerid][pFraktion] == 14)
			{
				SetPlayerPos(playerid, HITMANBASE_SPAWN_POINT);
				SetPlayerFacingAngle(playerid, HITMANBASE_SPAWN_POINT_FACING);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, VW_MAIN);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 15)
			{
				SetPlayerPos(playerid, NINEDEMONSBASE_SPAWN_POINT);
				SetPlayerFacingAngle(playerid, NINEDEMONSBASE_SPAWN_POINT_FACING);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, VW_MAIN);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 16)
			{
				SetPlayerPos(playerid, 2282.0840,2423.8579,3.4766);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, 2282.0840,2423.8579,3.4766);
			}
			else if(Spieler[playerid][pFraktion] == 17)
			{
				SetPlayerPosEx(playerid, WHEELMANBASE_SPAWN_POINT, MAPS_WHEELMANBASE_INTERIOR, VW_MAIN);
				SetPlayerFacingAngle(playerid, WHEELMANBASE_SPAWN_POINT_FACING);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 18)
			{
				SetPlayerPos(playerid, 305.9971,-142.0441,1004.0547);
				SetPlayerInterior(playerid, 7);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, 305.9971,-142.0441,1004.0547);
			}
			else if(Spieler[playerid][pFraktion] == 19)
			{
				SetPlayerPos(playerid, TERRORBASE_SPAWN_POINT);
				SetPlayerFacingAngle(playerid, TERRORBASE_SPAWN_POINT_FACING);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, VW_MAIN);
				SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 20)
			{
				SetPlayerPos(playerid, -2170.3818,641.4621,1052.3817);
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid, -2170.3818,641.4621,1052.3817);
			}
			else if(Spieler[playerid][pFraktion] == 21)
			{
                SetPlayerPosEx(playerid, TRIADS_INTERIOR_SPAWN_POINT, MAPS_TRIADSINTERIOR_INTERIOR, VW_TRIADSINTERIOR);
                SetPlayerFacingAngle(playerid, TRIADS_INTERIOR_SPAWN_POINT_FACING);
                SetCameraBehindPlayer(playerid);
			}
			else if(Spieler[playerid][pFraktion] == 22)
			{
				SetPlayerPos(playerid, 324.8862,309.0284,999.1484);
				SetPlayerInterior(playerid, 5);
				SetPlayerVirtualWorld(playerid, 1);
				Streamer_UpdateEx(playerid, 324.8862,309.0284,999.1484);
			}
		}
		else if(Spieler[playerid][pSpawnChange] == 1)
		{
			new pHouse = GetPlayerHouse(playerid);
			new pHotel = Spieler[playerid][pPlayerHotel];
			if( pHouse == 999 )
			{
				if( pHotel != 999) {
					// Im Hotel spawnen
					SetPlayerInterior(playerid, Hotel[pHotel][hExitInterior]);
					SetPlayerVirtualWorld(playerid, pHotel + HOTEL_OFFSET_VW );
					SetPlayerPos(playerid, Hotel[pHotel][ExitX], Hotel[pHotel][ExitY], Hotel[pHotel][ExitZ]);
				}
				else {
					Spieler[playerid][pSpawnChange] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Deine Spawn-Position wurde wieder auf die normale Position gesetzt.");
					SetPlayerSpawn(playerid);
					return 1;
				}
			}
			else {
			    new
			        index;
				index = GetHouseInteriorIndexByID( Haus[pHouse][HouseInteriorID] );
				SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior]);

                SetPlayerVirtualWorld(playerid, pHouse );
                SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);
            }
        }
        if( Spieler[playerid][pHours] < 2 ) {
            SetPlayerAttachedObject( playerid, 2, 1210, 5, 0.293532, 0.103431, 0.007843, 340.256103, 257.806579, 0.000000, 1.000000, 1.000000, 1.000000 );
        }
    }
    DeletePlayerDropItem(playerid);
    {
        if( gPlayerLogged[playerid] == 0 ) {
            // Nicht eingeloggt aber gespawnt ??
            if( Spieler[playerid][bAccountExists] ) {
                ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_GREEN"Live your Dream - Roleplay\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nSollte es dein Account sein, dann Logge dich bitte nun ein.\n \n"COLOR_HEX_ORANGE"Behalte dein Passwort immer für dich!\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", "OK", "Abbrechen");

                Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerLoginTimeout",30011,false,"d",playerid);
                Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",5003,false,"dd",playerid,1); // Muss,sonst klappt Spectate nicht
            }
            else {
                if(g_bRegSperre) {
                    static String[] = "\
                                    Wir begrüßen dich ganz Herzlich auf Live your Dream!\n\
                                    Aus aktuellem Anlass ist eine Registrierung gerade nicht möglich.\n\
                                    Schau doch einfach später nochmal vorbei!\n\n\
                                    Wir bitten vielmals um Verständnis!\n\n\
                                    Forum Adresse: www.LyD-Roleplay.de\n\
                                    Teamspeak: Teamspeak.LyD-Roleplay.de\n\
                                    User Panel: www.UCP.LyD-Roleplay.de\n\
                                    E-Mail: Admin@LyD-Roleplay.de";
                    ShowPlayerDialog(playerid, DIALOG_REGSPERRE, DIALOG_STYLE_MSGBOX, "{FF0000}Registrationssperre" , String, "Disconnect","");
                    Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerRegsperreKick",10011,false,"d",playerid);
                    for(new i;i<MAX_PLAYERS;i++)
                    {
                        if(Spieler[i][pAdmin]>=1)
                        {
                            SendClientMessage(i,COLOR_RED,"[ADMIN-INFO] Die Registrationssperre ist noch aktiviert!");
                        }
                    }
                }
                else {
                        new
                            String[512],
                            header[128];
                        strcat(String,COLOR_HEX_WHITE"Wir begrüßen dich ganz Herzlich auf Live your Dream!\n\n",sizeof(String));
                        strcat(String,"Um dein virtuelles Traumleben näher zu kommen, musst du als erstes ein Spieleraccount anlegen.\n",sizeof(String));
                        strcat(String,"Bei deiner Registration wirst du Dir auch eine kurze Einführung von unserem Server anschauen\n",sizeof(String));
                        strcat(String,"dass nur ca. 2 Minuten dauern wird.\n",sizeof(String));
                        strcat(String,"Wir bitten dich kurz die Zeit zu nehmen, damit du dich gut zurecht finden kannst bei uns!\n\n",sizeof(String));
                        strcat(String,"Um ein Spieleraccount anzulegen, drücke bitte auf 'Erstellen' ",sizeof(String));
                        format(header,sizeof(header),COLOR_HEX_LIGHTBLUE "Der Spielername %s ist noch frei!",GetName(playerid));
                        ShowPlayerDialog(playerid, DIALOG_REG_STEP_1, DIALOG_STYLE_MSGBOX, header , String, "Erstellen", "Ablehnen");
                    /*strcat(String,COLOR_HEX_WHITE"Wir begrüßen dich ganz Herzlich auf Live your Dream!\n",sizeof(String));
                    strcat(String,"\nAus aktuellem Anlass ist eine Registrierung am heutigen Tag nicht möglich.\n",sizeof(String));
                    strcat(String,"Schau doch einfach morgen nochmal vorbei!\n\nWir bitten vielmals um Verständnis!\n",sizeof(String));
                    strcat(String,"\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak: Teamspeak.LyD-Roleplay.de\n",sizeof(String));
                    strcat(String,"User Panel: www.UCP.LyD-Roleplay.de\nE-Mail: Admin@LyD-Roleplay.de",sizeof(String));
                    format(header,sizeof(header),COLOR_HEX_LIGHTBLUE "LYD - ROLEPLAY");
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_1, DIALOG_STYLE_MSGBOX, header , String, "OK", "-");
                    KickDelay(playerid);*/
                }
            }
        }
    }
    return 1;
}

public OnPlayerTot(playerid)
{
    if(Spieler[playerid][pTot] == 2)
    {
        /*SetPlayerPos(playerid,Spieler[playerid][pTotX],Spieler[playerid][pTotY],Spieler[playerid][pTotZ]);
        SetPlayerCameraPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]+5);
        SetPlayerCameraLookAt(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);*/
        if(Spieler[playerid][pTotTime] > 0)
        {
            Spieler[playerid][pTotTime] -= 1;
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0,1); // Dieing of Crack
        }
        else
        {
            SetPlayerHealth(playerid,100);
            Spieler[playerid][pTotTime] = 0;
            Spieler[playerid][pTot] = 0;
            SpawnPlayerEx(playerid);
        }
    }
    return 1;
}

public OnPlayerMute(playerid)
{
    // if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1) Wird bereits in Haupttimer geprüft
    {
        if(Spieler[playerid][pMuted] > 0)
        {
            if(Spieler[playerid][pMuteTime] > 0)
            {
                Spieler[playerid][pMuteTime] -= 1;
            }
            else
            {
                Spieler[playerid][pMuted] = 0;
                SendClientMessage(playerid, COLOR_RED, "Du bist nun nicht mehr gemutet!");
            }
        }
    }
    return 1;
}

public OnPlayerJail(playerid)
{
	// if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1) Wird bereits in Haupttimer geprüft
	{
		if( ( 0 < Spieler[playerid][pJailed] <= 3 ) )
		{
			if(Spieler[playerid][pJailTime] > 0)

			   Spieler[playerid][pJailTime] -= 1;

			else
			{
			    Spieler[playerid][pJailed] = 0;
				AnwaltPreis[playerid] = 0;
				AnwaltID[playerid] = 999;
			    GameTextForPlayer(playerid, "~g~Freiheit! Benimm dich in Zukunft!", 4000, 1);
				NeedAWALT[playerid] = 0;
			    SetPlayerFacingAngle(playerid, LSPD_INTERIOR_ENTER_FACING);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerPosEx(playerid, LSPD_INTERIOR_ENTER_COORDS +0.5, MAPS_LSPDEXTERIOR_INTERIOR, VW_MAIN);
				UnfreezePlayer(playerid);
				paydaywait[playerid]=0;
			}
		}
	}
	return 1;
}

CMD:debugpos(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 6) return 0;

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    return SCMFormatted(playerid, COLOR_WHITE, "Current Pos: %f %f %f", x, y, z);
}

public OnPlayerDeath(playerid, killerid, reason)
{
    if (!PlayerIsPaintballing[playerid]) ClearPlayerChat(playerid);
    //RemovePlayerFromVehicle(playerid);
    if (reason == 255) return 0;

    new bGangfight = 0, bGangOnGangKill = 0, bWantedKillZone = 0, bool:bPaintball = false;
    new string[128], Float:x, Float:y, Float:z, caller;

    Robbing_OnPlayerDeath(playerid);
    GetPlayerPos(playerid, x, y, z);
    Spieler[playerid][pTot] = 1;
    Spieler[playerid][pTotTime] = IsMedicOnDuty() ? 120 : 60;
    Spieler[playerid][pTotX] = x;
    Spieler[playerid][pTotY] = y;
    Spieler[playerid][pTotZ] = z;
    SetPlayerHealth(playerid,20);

    KillTimer(Spieler[playerid][tKidnap]);
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    bGangfight = GZ_OnPlayerDeath(playerid,killerid,reason);
    if( bGangfight ) {
        Spieler[playerid][pTotTime] = 20;
    }
    if( IsAFightFaction( Spieler[playerid][pFraktion] ) ) {
        if( killerid != INVALID_PLAYER_ID ) {
            if( IsAFightFaction( Spieler[killerid][pFraktion] ) ) {
                bGangOnGangKill = 1;
            }
        }
    }
    if( IsPlayerInWantedKillZone(killerid) ) {
        bWantedKillZone = 1;
    }

    if( Spieler[playerid][tTankeUnix] != 0 ) {
        Tankstelle_Ueberfall_Stop(playerid,-1,2);
    }
    DropWeapon( playerid );
    ResetPlayerWeapons(playerid);

    if( IsPlayerConnected( g_PolizeiPartner[playerid][PP_iPartner] ) ) {
        if( g_PolizeiPartner[playerid][PP_iStatus] == PolizeiPartner_Active ) {
            new
                partner,
                String[128];
            partner = g_PolizeiPartner[playerid][PP_iPartner];
            format(String,sizeof(String),"Dein Streifenpartner %s ist tot!",GetName(playerid));
            SendClientMessage( partner , COLOR_RED, String);
            ClearPolizeiPartner( partner );
            ClearPolizeiPartner( playerid );
            SetPlayerMarkerForPlayer(playerid,partner,0xFFFFFF00);
            SetPlayerMarkerForPlayer(partner,playerid,0xFFFFFF00);
        }
    }
    /*
    if(fakekilllevel != 0 ) {
        new
            String[128];
        if(fakekilllevel > 4 ) {
            format(String,sizeof(String),"Fakekill von %s an %s ( Level: %d )",GetName(playerid),GetName(killerid),fakekilllevel);
        }
        else {
            format(String,sizeof(String),"Potenzieller Fakekill von %s an %s ( Level: %d )",GetName(playerid),GetName(killerid),fakekilllevel);
        }
        SendAdminMessage(COLOR_RED, String);
    }
    */
    if( killerid != INVALID_PLAYER_ID ) {
        if( Spieler[killerid][pFraktion] == 14 ) {
            // Killer ist Hitmen
            new
                opfer,
                auftraggeber;
            auftraggeber = Spieler[killerid][pHitmenAuftragID];
            if( auftraggeber != INVALID_PLAYER_ID ) {
                opfer = Spieler[auftraggeber][pKopfgeldID];
                if( opfer == playerid ) {
                    // Zielperson wurde von Hitman gekillt!
                    new
                        kopfgeld,
                        String[128];
                    kopfgeld = Spieler[auftraggeber][pKopfgeld];
                    format(String,sizeof(String),"Du hast die Zielperson %s erfolgreich getötet. Kopfgeld: $%s",GetName(playerid), AddDelimiters(kopfgeld));
                    SendClientMessage(killerid,COLOR_GREEN,String);
                    format(String,sizeof(String),"Ein Auftragskiller hat deinen Kill-Auftrag auf %s erfolgreich ausgeführt!",GetName(playerid));
                    SendClientMessage(auftraggeber,COLOR_GREEN,String);
                    SendClientMessage(opfer,COLOR_RED,"Ein Auftragskiller hat dich getötet. Jemand hat ein Kopfgeld gegen dich gesetzt.");
                    // Geld in Fraktionskasse schieben
                    Kasse[Hitman] += Spieler[auftraggeber][pKopfgeld];
                    Spieler[killerid][pCash] += 10000;
                    GameTextForPlayer(killerid, "~g~Provision $10.000", 2000, 1);
                    Spieler[killerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
                    Spieler[auftraggeber][pKopfgeldStatus] = false;
                    Spieler[auftraggeber][pKopfgeldID] = INVALID_PLAYER_ID;
                    Spieler[auftraggeber][pKopfgeld] = 0;
                }
            }
        }
        if( PlayerIsPaintballing[killerid] == 1 ) {
            bPaintball = true;
        }
    }
    if( HasPlayerChecks(playerid) ) {
        SendClientMessage(playerid,COLOR_RED,"Du bist gestorben! Dein(e) Geldcheck(s) ist/sind dir bevor du ihn auslösen konntest verloren gegangen!");
        ResetPlayerCheck(playerid);
    }
    caller = CurrentPhone[playerid];
    if(caller != 999)
    {
        if(caller < 999)
        {
            SendClientMessage(caller, COLOR_GREY, "Die Leitung ist tot...");
            CurrentPhone[caller] = 999;
        }
        CurrentPhone[playerid] = 999;
    }

    if (reason != 255) SpawnPlayer(playerid);

    if(Spieler[playerid][pJailed] == 1)
    {
        Spieler[playerid][pTot] = 0;
        Spieler[playerid][pTotTime] = 0;
        return 1;
    }
    if( !PlayerIsPaintballing[playerid] ) {
        Store_PlayerWeapons(playerid);
    }

    if (killerid != INVALID_PLAYER_ID && !bPaintball)
        Spieler[killerid][pKills]++;

    if(killerid != INVALID_PLAYER_ID && !bPaintball && !bGangfight)
    {
        new sWeapon[32], String[128];

        GetWeaponNameEx(reason,sWeapon,sizeof(sWeapon));

        format(String,sizeof(String),"%s wurde von %s ermordet! Tatwaffe: %s",GetName(playerid),GetName(killerid),sWeapon );
        SendAdminMessage(COLOR_RED,String);
        format(String,sizeof(String),"%s wurde von\n%s ermordet!",GetName(playerid),GetName(killerid));
        if(Spieler[killerid][bMaske]==true)
        {
            format(String,sizeof(String),"%s wurde von\n<Unbekannt> ermordet!",GetName(playerid));
        }
        else if(Spieler[playerid][bMaske]==true)
        {
            format(String,sizeof(String),"<Unbekannt> wurde von\n %s ermordet!",GetName(killerid));
            Spieler[playerid][pTot] = 0;
            Spieler[playerid][pTotTime] = 0;
            DisablePlayerCheckpointEx(playerid);
            UnfreezePlayer(playerid);
            SetCameraBehindPlayer(playerid);
            ResetPlayerWeapons(playerid);
            ReStore_PlayerWeapons(playerid);
            SpawnPlayer(playerid);
        }
        if( AddDeathIcon( String, x , y, z+0.1, GetPlayerInterior(playerid) , GetPlayerVirtualWorld(playerid) ) ) {
            format(String,sizeof(String),"[POLIZEIZENTRALE] %s wurde ermordet, eine Streife bitte zum Tatort!",GetName(playerid));
            SendFraktionMessage(16, COLOR_RED, String);
        }
        if( Spieler[killerid][pLevel] <= 2 ) {
            format(String,sizeof(String),"ACHTUNG! Neuling %s(ID:%d) hat Spieler %s ermordet",GetName(killerid),killerid,GetName(playerid));
            SendAdminMessage(COLOR_RED,String);
        }
        if( Spieler[playerid][pAdmin] < 5 && Spieler[playerid][pLevel] <= 1 ) {
            format(String,sizeof(String),"[FAKEKILL] %s(ID:%d) wurde vom Server-System gebannt, Grund: Fakekill an %s",GetName(playerid),playerid,GetName(killerid));
            SendAdminMessage(COLOR_RED,String);
            Ban(playerid);
        }
        if(Spieler[killerid][pFraktion] == 1 || Spieler[killerid][pFraktion] == 2 || Spieler[killerid][pFraktion] == 16 || Spieler[killerid][pFraktion] == 18 || Spieler[killerid][pFraktion] == 22 )
        {
            if(Spieler[playerid][pWanteds] > 0)
            {
                Spieler[playerid][pTot] = 0;
                Spieler[playerid][pTotX] = 0.0;
                Spieler[playerid][pTotY] = 0.0;
                Spieler[playerid][pTotZ] = 0.0;
                Spieler[playerid][pTotTime] = 0;
                new pGehalt = (500*Spieler[playerid][pWanteds]);
                new pStaatGehalt = (3000*Spieler[playerid][pWanteds]);
                Kasse[Staat] += pStaatGehalt;
                Spieler[killerid][pPayCheck] += pGehalt;
                format(string, sizeof(string), "~r~Fluchttaeter ~g~getoetet~n~+$%s", AddDelimiters(pGehalt));
                GameTextForPlayer(killerid, string, 3000, 6);
                if(Spieler[killerid][pFraktion] == 1){format(string, sizeof(string), "HQ: LS-Polizeibeamter %s hat den Fluchttäter %s überführen können, over.", GetName(killerid), GetName(playerid));}
                else if(Spieler[killerid][pFraktion] == 2){format(string, sizeof(string), "HQ: FBI-Agent %s hat den Fluchttäter %s überführen können, over.", GetName(killerid), GetName(playerid));}
                else if(Spieler[killerid][pFraktion] == 16){format(string, sizeof(string), "HQ: LV-Polizeibeamter %s hat den Fluchttäter %s überführen können, over.", GetName(killerid), GetName(playerid));}
                else if(Spieler[killerid][pFraktion] == 18){format(string, sizeof(string), "HQ: Soldat %s hat den Fluchttäter %s überführen können, over.", GetName(killerid), GetName(playerid));}
                else if(Spieler[killerid][pFraktion] == 22){format(string, sizeof(string), "HQ: Zollbeamter %s hat den Fluchttäter %s überführen können, over.", GetName(killerid), GetName(playerid));}
                SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                if(Spieler[killerid][pFraktion] == 1){format(string, sizeof(string), ">> LS-Polizeibeamter %s hat den Verbrecher %s%s überführen können! <<", GetName(killerid), GetName(playerid), Spieler[playerid][pWanteds] > 20 ? " ins Alcatraz" : "");}
                else if(Spieler[killerid][pFraktion] == 2){format(string, sizeof(string), ">> FBI-Agent %s hat den Verbrecher %s%s überführen können! <<", GetName(killerid), GetName(playerid), Spieler[playerid][pWanteds] > 20 ? " ins Alcatraz" : "");}
                else if(Spieler[killerid][pFraktion] == 16){format(string, sizeof(string), ">> LV-Polizeibeamter %s hat den Verbrecher %s%s überführen können! <<", GetName(killerid), GetName(playerid), Spieler[playerid][pWanteds] > 20 ? " ins Alcatraz" : "");}
                else if(Spieler[killerid][pFraktion] == 18){format(string, sizeof(string), ">> Soldat %s hat den Verbrecher %s%s überführen können! <<", GetName(killerid), GetName(playerid), Spieler[playerid][pWanteds] > 20 ? " ins Alcatraz" : "");}
                else if(Spieler[killerid][pFraktion] == 22){format(string, sizeof(string), ">> Zollbeamter %s hat den Verbrecher %s%s überführen können! <<", GetName(killerid), GetName(playerid), Spieler[playerid][pWanteds] > 20 ? " ins Alcatraz" : "");}
                SendClientMessageToAll(COLOR_DARKRED, string);
                if( Spieler[playerid][pWanteds] >= 20 ) {
                    Spieler[playerid][pJailed] = 2;
                }
                else {
                    Spieler[playerid][pJailed] = 1;
                }
                Spieler[playerid][pJailTime] = 220*Spieler[playerid][pWanteds];
                Spieler[playerid][pWanteds] = 0;
                Spieler[playerid][pWantedDeaths] ++;
                GivePlayerCash(playerid, -pGehalt);
                return 1;
            }
        }
        if(!(Spieler[killerid][pFraktion] == 1 || Spieler[killerid][pFraktion] == 2 || Spieler[killerid][pFraktion] == 16 || Spieler[killerid][pFraktion] == 18 || Spieler[killerid][pFraktion] == 22))
        {
            if( bWantedKillZone ) {
                new sOrt[MAX_ZONE_NAME];
                GetPlayer2DZone(playerid,sOrt,sizeof(sOrt));

                if( bGangOnGangKill ) {
                    Spieler[killerid][pWanteds] += 1;
                    SendClientMessage(killerid, COLOR_DARKRED,"Du hast ein Verbrechen begangen! (Mord an einem Gangmitglied) Reporter: Polizeizentrale");
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[killerid][pWanteds]);
                    SendClientMessage(killerid, COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Mord an einem Gangmitglied in %s - Tatwaffe: %s, over.", GetName(killerid), killerid,sOrt,sWeapon);
                }
                else {
                    Spieler[killerid][pWanteds] += 3;
                    SendClientMessage(killerid, COLOR_DARKRED,"Du hast ein Verbrechen begangen! (Beamten/Zivilisten Mord) Reporter: Polizeizentrale");
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[killerid][pWanteds]);
                    SendClientMessage(killerid, COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Beamten-/Zivilisten Mord in %s - Tatwaffe: %s, over.", GetName(killerid), killerid,sOrt,sWeapon);
                }
                print(String);
                SendFraktionMessage(1, COLOR_LIGHTRED, string);
                SendFraktionMessage(2, COLOR_LIGHTRED, string);
                SendFraktionMessage(16, COLOR_LIGHTRED, string);
                SendFraktionMessage(18, COLOR_LIGHTRED, string);
                format(string, sizeof(string), "HQ: Reporter: Polizeizentrale, Aktuelles Wantedlevel: %d, over.", Spieler[killerid][pWanteds]);
                SendFraktionMessage(1, COLOR_LIGHTRED, string);
                SendFraktionMessage(2, COLOR_LIGHTRED, string);
                SendFraktionMessage(16, COLOR_LIGHTRED, string);
                SendFraktionMessage(18, COLOR_LIGHTRED, string);
            }
        }
    }
    if(!bPaintball) {
        GivePlayerCash(playerid, -500);
        Spieler[playerid][pDeaths]++;
        if(!bGangfight) {
            SetTimerEx("NotrufDialog", 100, false, "%i", playerid);
            //SendClientMessage(playerid,COLOR_YELLOW,"Du bist schwer verletzt! Wähle '/Service -> Rettungsdienst' um ein Notarzt zu rufen.");
        }
        SetPlayerPos(playerid,Spieler[playerid][pTotX],Spieler[playerid][pTotY],Spieler[playerid][pTotZ]);
        SetPlayerCameraPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]+5);
        SetPlayerCameraLookAt(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
    }
    return 1;
}

forward NotrufDialog(playerid);
public NotrufDialog(playerid) {
    ShowPlayerDialog(playerid,DIALOG_NOTRUF,DIALOG_STYLE_MSGBOX,"Rettungsdienst-Notruf","Du bist schwer verletzt! Wenn du ein Notarzt benötigst, dann drücke auf \"Notruf\"","Notruf","Abbrechen");
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
    //printf("OnVehicleSpawn(%d)",vehicleid);
    vehicleRefueling[vehicleid] = 0;
    if( g_aiVehicleSirene[vehicleid][0] != INVALID_OBJECT_ID ) {
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][0]);
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][1]);
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][2]);
        g_aiVehicleSirene[vehicleid][2] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][3]);
        g_aiVehicleSirene[vehicleid][3] = INVALID_OBJECT_ID;
    }

    DestroyBlinker(vehicleid,0);
    DestroyBlinker(vehicleid,1);
    //Gears_OnVehicleSpawn(vehicleid);

    if( _:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID ) {
        Delete3DTextLabel( g_t3dPolizeiKontrolle[vehicleid] );
        g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
        Delete3DTextLabel( g_t3dTaxi[vehicleid] );
        g_t3dTaxi[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    ResetKofferraum(vehicleid);
    g_fVehicleHealth[vehicleid] = 1000.0;
    //g_iVehicleFixNotification{vehicleid} = 0;
    //g_iVehicleBrokeNotification{vehicleid} = 0;
    g_iVehicleFixNotation{vehicleid} = 0;
    if( GetVehicleModel(vehicleid) == 432 ) {
        SetVehicleHealth(vehicleid,5000.0);// Panzer
    }

    if( GetVehicleModel(vehicleid) == 596 || GetVehicleModel(vehicleid) == 597 || GetVehicleModel(vehicleid) ==598 || GetVehicleModel(vehicleid) == 601 || GetVehicleModel(vehicleid) == 407
    || GetVehicleModel(vehicleid) == 599 || GetVehicleModel(vehicleid) == 497 || GetVehicleModel(vehicleid) == 490 || GetVehicleModel(vehicleid) ==433 || GetVehicleModel(vehicleid) == 427) {
        SetVehicleHealth(vehicleid, 2000.0); // LSPDcars
    }
    if( GetVehicleModel(vehicleid) == 520 ) {
        SetVehicleHealth(vehicleid,6000.0);// hydra
    }
    // Es ist ein Fahrzeug,welches aufgetankt werden muss
    if( VEH_DROGEN <= aiVehicles[vehicleid] <= VEH_KFZCARS ) {
        gGas[vehicleid] = GetMaxTank(vehicleid);
        gMaxGas[vehicleid] = GetMaxTank(vehicleid);
        UnLockCar(vehicleid);
    }
    if( aiVehicles[vehicleid] == VEH_BUS ) {
        new
            busIndex = GetBusIndex(vehicleid);
        if(busIndex != -1 ) {
            DestroyDynamic3DTextLabel(t3dBus[busIndex]);
            t3dBus[busIndex] = Text3D:INVALID_3DTEXT_ID;
        }
    }

    if( aiVehicles[vehicleid] == VEH_VERLEIH ) {
        UnLockCar(vehicleid);
    }
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(JobVehicle[i] == vehicleid)
        {
            JobVehicle[i] = INVALID_VEHICLE_ID;
        }
    }


    bestand[vehicleid] = 0;
    Benzin[vehicleid] = 0;
    Waren[vehicleid] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(vehicleid == pCar[i])
        {
            LockCar(vehicleid);
        }
    }
    for(new playerid = 0;playerid< MAX_PLAYERS ;playerid++)
    {
        if(IsPlayerConnected(playerid) )
        {
            for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
            {
                if(PlayerHaveCar[playerid][x])
                {
                    if(vehicleid == PlayerCar[playerid][x][CarId])
                    {
                        SetTimerEx("CarTuning", 700,0, "ii", playerid, x);
                    }
                }
            }
        }
    }
    // Erster Check: Es müsste ein Privatfahrzeug sein
    if( aiVehicles[vehicleid] == VEH_PRIVAT ) {
        //printf("OnVehicleSpawn(%d) VEH_PRIVAT",vehicleid);
        new
            owner;
        owner = GetCarOwner(vehicleid);
        if( IsPlayerConnected(owner) ) {
            new
                slot;
            slot = GetCarOwnerSlot(owner,vehicleid);
            if( slot != 555 ) {
                if( PlayerCar[owner][slot][CarState] == e_Vehicle_Status_Destroyed) {
                    DestroyVehicle(vehicleid);
                    printf("Vehicle zerstört! Status Destroyed");
                }
                else {
                    SetVehiclePos( vehicleid, PlayerCar[owner][slot][CarPos_x], PlayerCar[owner][slot][CarPos_y], PlayerCar[owner][slot][CarPos_z]);
                    SetVehicleZAngle( vehicleid, PlayerCar[owner][slot][CarRotate]);
                    ChangeVehicleColor( vehicleid , PlayerCar[owner][slot][CarC1] , PlayerCar[owner][slot][CarC2] );
                }
            }
        }
    }
    if( g_FraktionAbschleppen[vehicleid][FA_bAbgeschleppt] == true ) {
        SetVehiclePos(vehicleid,
            g_FraktionAbschleppen[vehicleid][FA_fX],
            g_FraktionAbschleppen[vehicleid][FA_fY],
            g_FraktionAbschleppen[vehicleid][FA_fZ]);
        SetTimerEx("SetVehicleZAngleEx",350,false,"df",vehicleid,g_FraktionAbschleppen[vehicleid][FA_fFace]);
    }
    for(new i ; i < sizeof(sireneobj[]) ; i++) {
        DestroyDynamicObject(sireneobj[vehicleid][i]);
        sireneobj[vehicleid][i] = INVALID_OBJECT_ID;
    }
    GetVehiclePos(vehicleid,g_OldVehiclePos[vehicleid][0],g_OldVehiclePos[vehicleid][1],g_OldVehiclePos[vehicleid][2]);
    return 1;
}

forward Anti_OnVehicleDeath(playerid);
public Anti_OnVehicleDeath(playerid) {
    g_aiDestroyedVehicles{playerid}--;
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    if( Spieler[killerid][pAdmin] < 3 && g_aiDestroyedVehicles{killerid} >= 3 ) {
        new
            String[128];
        format(String, sizeof(String), "[KICK]: Spieler %s wurde von Server-System gekickt, Grund: %s", GetName(killerid), ("Vehicle-Spam"));
        SendAdminMessage(COLOR_RED, String);
        Kick(killerid);
        return 0;
    }
    g_aiDestroyedVehicles{killerid}++;
    SetTimerEx("Anti_OnVehicleDeath",5003,false,"d",killerid);
    Blinker_OnVehicleDeath(vehicleid,killerid);

    DestroyDynamicObject(vSirene[vehicleid]);
    DestroyDynamicObject(vNeon[vehicleid]);
    DestroyDynamicObject(OAmtSirene[vehicleid]);
    DestroyVehicleBlitzer(vehicleid);

    DestroyBlinker(vehicleid,0);
    DestroyBlinker(vehicleid,1);

    for(new i ; i < sizeof(sireneobj[]) ; i++) {
        DestroyDynamicObject(sireneobj[vehicleid][i]);
        sireneobj[vehicleid][i] = INVALID_OBJECT_ID;
    }

    if( g_aiVehicleSirene[vehicleid][0] != INVALID_OBJECT_ID ) {
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][0]);
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][1]);
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][2]);
        g_aiVehicleSirene[vehicleid][2] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][3]);
        g_aiVehicleSirene[vehicleid][3] = INVALID_OBJECT_ID;
    }

    vSirene[vehicleid] = INVALID_OBJECT_ID;
    vNeon[vehicleid] = INVALID_OBJECT_ID;
    OAmtSirene[vehicleid] = INVALID_OBJECT_ID;
    if( aiVehicles[vehicleid] == VEH_PRIVAT ) {
        //printf("OnVehicleDeath(%d,%d) PrivatVehicle",vehicleid,killerid);
        for(new playerid = 0 ; playerid < MAX_PLAYERS ;playerid++)
        {
            if( IsPlayerConnected(playerid) )
            {
                for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
                {
                    if(PlayerHaveCar[playerid][x])
                    {
                        if(vehicleid == PlayerCar[playerid][x][CarId])
                        {
                            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon1]);
                            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon1]);
                            PlayerCar[playerid][x][ObjectIDNeon1] = INVALID_OBJECT_ID;
                            PlayerCar[playerid][x][ObjectIDNeon2] = INVALID_OBJECT_ID;

                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned1]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned2]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned3]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned4]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned5]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned6]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned7]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned8]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned9]);

                            DestroyVehicle( PlayerCar[playerid][x][CarId] );
                            aiVehicles[ PlayerCar[playerid][x][CarId] ] = VEH_INVALID;
                            PlayerHaveCar[playerid][x] = 0;

                            new
                                String[128];
                            if( Spieler[playerid][pKFZVersicherung] > gettime() ) {
                                format(String,sizeof(String),"Dein %s ist explodiert und wird in der Werkstatt wieder repariert!", CarName[ PlayerCar[playerid][x][CarModel] - 400] );
                                SendClientMessage(playerid,COLOR_YELLOW,String);
                                SendClientMessage(playerid,COLOR_YELLOW,"Die Reparaturkosten übernimmt deine abgeschlossene KFZ-Versicherung");
                            }
                            else {
                                format(String,sizeof(String),"Dein %s ist explodiert! Die Reparaturkosten in Höhe von 1.500$ musst du manuell begleichen mit /Fahrzeugreparieren.", CarName[ PlayerCar[playerid][x][CarModel] - 400] );
                                SendClientMessage(playerid,COLOR_ORANGE,String);
                                PlayerCar[playerid][x][CarState] = e_Vehicle_Status_Destroyed;
                                PlayerCar[playerid][x][CarTank] = gGas[PlayerCar[playerid][x][CarId]];
                                PlayerCar[playerid][x][CarDistance] = g_VehicleDistance[ PlayerCar[playerid][x][CarId] ];
                                DestroyVehicle(vehicleid);
                                SavePlayerCar(playerid,x);
                            }
                            PlayerCar[playerid][x][CarId] = INVALID_VEHICLE_ID;
                            PlayerCarSpawn(playerid,x);
                        }
                    }
                }
            }
        }
    }
    else if( aiVehicles[vehicleid] == VEH_PRIVATVERLEIH ) {
        // Verleihvehicle gestorben.
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if( vehicleid == Spieler[i][pVehicleVerleih] ) {
                    SendClientMessage(i,COLOR_RED,"Dein Mietfahrzeug ist explodiert und steht wieder am Fahrzeugverleih. Hol es ab!");
                }
            }
        }
    }
    else if( aiVehicles[vehicleid] == VEH_TAXICAR ) {
        // Taxi zerstört. Alle Kunden raus
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pTaxiVehicle] == vehicleid ) {
                    // SendTaxiMessage(i,COLOR_RED,"Taxi-Fahrt abgebrochen! Fahrzeug wurde zerstört!");
                    CancelTaxi(i,vehicleid,1);
                    // Spieler[i][pTaxiVehicle] = INVALID_VEHICLE_ID;
                    break;
                }
            }
        }
    }
    return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
{
    static Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    if(VectorSize(x-new_x, y-new_y,z-new_z) > 30.0)
    {
        SetVehicleToRespawn(vehicleid);
        return 0;
    }
    return 1;
}

/*public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z) {
    new
        Float:x,
        Float:y,
        Float:z;
    GetVehiclePos(vehicleid,x,y,z);
    if(VectorSize(x-new_x, y-new_y,z-new_z) > 30.0) {
    printf("OnUnoccupiedVehicleUpdate(%d,%d,%d,%.1f,%.1f,%.1f)",vehicleid, playerid, passenger_seat, new_x, new_y, new_z);
    Spieler[playerid][pVehiclePort]++;
    if( Spieler[playerid][pVehiclePort] >= 10 ) {
        new
            string[256];
        format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Vehicle-Port", GetName(playerid));
        SendAdminMessage(COLOR_RED, string);
        Spieler[playerid][pBanned] = 1;

        format(string,sizeof(string),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(playerid),("Server-System"),("Gebannt vom Server-System wegen Vehicle-Port!") );
        mysql_oquery(string,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

        format(string,sizeof(string),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
           ("Server-System"),("Vehicle-Port"),GetName(playerid));
        mysql_oquery(string,THREAD_VEHICLEPORT_HACK, INVALID_PLAYER_ID,gSQL);

        KickDelay(playerid);
        //Ban(playerid);
        }
        return 0;
    }
    return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new
        Float:fDiff,
        Float:fHealth;
    GetVehicleHealth(vehicleid,fHealth);
    fDiff = g_fVehicleHealth[vehicleid] - fHealth;
    g_fVehicleHealth[vehicleid] = fHealth;
    if( fDiff > 35.0 ) {
        new
            level;
        level = GetPlayerDrunkLevel(playerid);
        if( level < 2000 ) level = 2000;
        SetPlayerDrunkLevel(playerid, level + ( 4 * 50 ) );
    }
    if( !IsBicycle( GetVehicleModel(vehicleid)) ) {
        if( g_fVehicleHealth[vehicleid] <= 450.0 ) {
            if( g_iVehicleFixNotification{vehicleid} == 0 ) {
                g_iVehicleFixNotification{vehicleid} = 1;
                SendClientMessage(playerid,COLOR_ORANGE,"Dein Fahrzeug ist stark beschädigt! Rufe mit /Service -> KFZ-Mechaniker ein Mechaniker!");
            }
        }
        else if( g_fVehicleHealth[vehicleid] <= 350.0 ) {
            if( g_iVehicleBrokeNotification{vehicleid} == 0 ) {
                new engine, lights, alarm, doors, bonnet, boot, objective;
                GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
                g_iVehicleBrokeNotification{vehicleid} = 1;
                SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden und muss repariert werden! Rufe mit /Service einen KFZ-Mechatroniker");
                GameTextForPlayer(playerid, "~r~Motorschaden", 3, 1);
            }
        }
    }
    return 1;
}*/

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new
        Float:fDiff,
        Float:fHealth;
    GetVehicleHealth(vehicleid,fHealth);
    fDiff = g_fVehicleHealth[vehicleid] - fHealth;
    g_fVehicleHealth[vehicleid] = fHealth;
    if( fDiff > 35.0 ) {
        new
            level;
        level = GetPlayerDrunkLevel(playerid);
        if( level < 2000 ) level = 2000;
        SetPlayerDrunkLevel(playerid, level + ( 4 * 50 ) );
    }
    if( g_fVehicleHealth[vehicleid] <= 400.0 ) {
        if( g_iVehicleFixNotation{vehicleid} == 0 ) {
            g_iVehicleFixNotation{vehicleid} = 1;
            SendClientMessage(playerid,COLOR_ORANGE,"Dein Fahrzeug ist stark beschädigt! Rufe mit '/Service -> ADAC Pannenhilfe' ein Mechaniker!");
        }
    }
    return 1;
}

CMD:spec(playerid, params[])
{
    new pID, string[128];
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Spec [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selber nicht spectaten.");
    if(GetPlayerState(pID) == PLAYER_STATE_SPECTATING)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist bereits jemanden am spectaten.");
    StartSpectate(playerid, pID);
    format(string, sizeof(string), "* %s spectatet nun %s.", GetName(playerid), GetName(pID));
    SendModMessage(COLOR_YELLOW, string);
    Spieler[playerid][pHandyState] = 0;
    Spieler[playerid][pAdminDienst] = 1;
    SendClientMessage(playerid, COLOR_WHITE, "Dein Handy wurde automatisch ausgeschaltet.");
    return 1;
}

CMD:specoff(playerid)
{
    new string[128];
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(IsPlayerSpectating[playerid] == 0)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am spectaten.");
    StopSpectate(playerid);
    format(string, sizeof(string), "* %s spectatet nun nicht mehr.", GetName(playerid));
    SendModMessage(COLOR_YELLOW, string);
    Spieler[playerid][pAdminDienst] = 0;
    return 1;
}

CMD:tqspec(playerid, params[])
{
    new pID;
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Spec [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selber nicht spectaten.");
    if(GetPlayerState(pID) == PLAYER_STATE_SPECTATING)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist bereits jemanden am spectaten.");
    StartSpectate(playerid, pID);
    Spieler[playerid][pHandyState] = 0;
    Spieler[playerid][pAdminDienst] = 1;
    SendClientMessage(playerid, COLOR_WHITE, "Dein Handy wurde automatisch ausgeschaltet.");
    return 1;
}

CMD:tqspecoff(playerid)
{
    if(IsPlayerSpectating[playerid] == 0)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am spectaten.");
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    StopSpectate(playerid);
    Spieler[playerid][pAdminDienst] = 0;
    return 1;
}

public OnPlayerText(playerid, text[])
{
    new
        sName[MAX_PLAYER_NAME],
        String[180];
    GetPlayerName(playerid,sName,sizeof(sName));
    new k;
    for(;k<sizeof(word);k++)
    {
        if(strfind(text,word[k],true)!=-1)
        {
            SendClientMessage(playerid,COLOR_RED,"Beleidigungen dieser Art sind strengst verbotenen und werden mit einer dauerhaften Sperrung bestraft!");
            break;
        }
    }
    if(k<sizeof(word)-1)
    {
        return 0;
    }
    if(ReportCall[playerid] != 999)
    {
        format(String, sizeof(String), "> Ticket < - %s: %s", sName, text);
        SendClientMessage(playerid, COLOR_LIGHTGREEN, String);
        if(ReportCall[ReportCall[playerid]] == playerid)
        {
            SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN, String);
        }
        return 0;
    }
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    if( Spieler[playerid][ibInterviewStat] != 0) {
        // Im Interview
        if( Spieler[playerid][ibInterviewStat] == 2 ) {
            format(String,sizeof(String),"Reporter ( %s ):{A020F0} %s",sName,text);
        }
        else {
            format(String,sizeof(String),"Interviewter ( %s ):{A020F0} %s",sName,text);
        }
        SendClientMessageToAll(COLOR_WHITE,String);
        return 0;
    }
    if(CurrentPhone[playerid] == 999)
    {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist Gemutet.");
            return 0;
        }

        /*Spieler[playerid][pChatSpam]++;
        if( Spieler[playerid][pChatSpam] >= 7 ) {
            format(string, sizeof(string), "[KICK] Du wurdest soeben von dem Server-System gekickt. Grund: %s", ("Chat-Spam"));
            SendClientMessage(playerid, COLOR_RED, string);
            format(string, sizeof(string), "[KICK]: Spieler %s wurde von Server-System gekickt, Grund: %s", GetName(playerid), ("Chat-Spam"));
            SendAdminMessage(COLOR_RED, string);
            KickDelay(playerid);
            return 1;
        }
        else {
            SetTimerEx("Cooldown_ChatSpam",3001,false,"d",playerid);
        }*/

        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        format(String, sizeof(String), "%s sagt: %s", sName, text);
        if(Spieler[playerid][pAdminDienst]>=1){format(String, sizeof(String),COLOR_HEX_RED"%s"COLOR_HEX_WHITE" sagt: %s", sName, text);}
        SendRoundMessage(x,y,z, COLOR_LIGHTGREY, String);
        format(String, sizeof(String), "%s sagt: %s",sName, text);
        if(Spieler[playerid][pAdminDienst]>=1){format(String, sizeof(String),COLOR_HEX_RED"%s"COLOR_HEX_WHITE" sagt: %s", sName, text);}
        SetPlayerChatBubble(playerid, String, COLOR_BLUE, 40.0, 12000);

        /*new lengthtime = strlen(text);
        new time = lengthtime*100;
        ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,time);*/
    }
    // Notruf POLIZEI
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist Gemutet.");
            return 0;
        }
        new
            Meldung[128];
        format(String,sizeof(String),"Notrufsteller: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Meldung: %s",text);
        NeedCop[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2 || Spieler[i][pFraktion] == 16 ) {
                    SendClientMessage(i,COLOR_RED,"Einkommender Notruf:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        if( SetRandomPoliceTask(playerid) ) {
        }
        else {
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Ihr Notruf wird an eine verfügbare Polizeistreife weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    // Notruf RETTUNGSDIENST
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID + 1 ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist Gemutet.");
            return 0;
        }
        new
            Meldung[128];
        format(String,sizeof(String),"Notrufsteller: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Meldung: %s",text);
        NeedMedic[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 3) {
                    SendClientMessage(i,COLOR_RED,"Einkommender Notruf:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        if( SetRandomMedicTask(playerid) ) {
        }
        else {
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Ihr Notruf wird an den Rettungsdienst weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    // Notruf ORDNUNGSAMT
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID + 2 ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist Gemutet.");
            return 0;
        }
        new
            Meldung[128];
        format(String,sizeof(String),"Melder: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Meldung: %s",text);
        NeedOAMT[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 5) {
                    SendClientMessage(i,COLOR_RED,"Einkommende Meldung:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        if( SetRandomOAMTTask(playerid) ) {
        }
        else {
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Ihr Serviceruf wird an das Ordnungsamt weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    // Service Wheelmen
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID + 3 ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist Gemutet.");
            return 0;
        }
        new
            Meldung[128];
        format(String,sizeof(String),"Auftraggeber: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Sachverhalt: %s",text);
        NeedWHEEL[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 17) {
                    SendClientMessage(i,COLOR_RED,"SERVICE-RUF:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Wir haben dein Serviceruf an einen Wheelman weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    else
    {
        if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
        if( IsPlayerConnected(TelefonzelleAn[playerid]) ) {
            format(String, sizeof(String), "%s (Telefonzelle)sagt: %s", sName, text);
        }
        else {
            format(String, sizeof(String), "%s (Handy)sagt: %s", sName, text);
        }
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        SendRoundMessage(x,y,z, COLOR_LIGHTGREY, String);
        if(IsPlayerConnected(CurrentPhone[playerid]))
        {
            if(CurrentPhone[CurrentPhone[playerid]] == playerid)
            {
                format(String, sizeof(String), "(Anruf) %s sagt: %s", sName, text);
                SendClientMessage(CurrentPhone[playerid], COLOR_YELLOW, String);
                SetPlayerChatBubble(playerid, String, COLOR_RED, 40.0, 12000);
                return 0;
            }
        }
    }
    return 0;
}

stock SendRoundMessage(Float:x, Float:y, Float:z, color, text[] , Float:distance = 20.0)
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInRangeOfPoint(i, distance , x,y,z))
        {
            SendClientMessage(i, color, text);
        }
    }
    return 1;
}

CMD:me(playerid, params[])
{
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    new entry[128], string[128], Float:x, Float:y, Float:z;
    if(sscanf(params, "s[128]", entry))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Me [Nachricht]");
    format(string, sizeof(string), "** %s %s **", GetName(playerid), entry);
    GetPlayerPos(playerid, x, y, z);
    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
    return 1;
}


CMD:startlotto(playerid, params[])
{
    new entry, string[128];
    if(sscanf(params, "i", entry))
    {
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Startlotto [Nummer]");
        return 1;
    }
    if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(entry < 1 || entry > 100)return SendClientMessage(playerid, COLOR_ORANGE, "Die Nummer sollte zwischen 1 und 100 sein.");
    format(string, sizeof(string), "** [LOTTO] >> %s hat die Losziehung manuell gestartet. Nummer: %d << **", GetName(playerid), entry);
    SendClientMessageToAll(COLOR_YELLOW, string);
    Lotto(entry);
    return 1;
}

CMD:lotto(playerid, params[])
{
    new entry, string[128];
    if(sscanf(params, "i", entry))
    {
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Lotto [Nummer] - Ein Ticket kostet $1.200");
        format(string, sizeof(string), "** Lotto-Stand: $%s", AddDelimiters(Lottostand));
        SendClientMessage(playerid, COLOR_GREY, string);
        return 1;
    }
    if( Spieler[playerid][pLevel] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 3 sein, um bei der Lottoziehung teilnehmen zu können.");
    }
    if(Spieler[playerid][pLottoNr] > 0)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Lottoticket.");
    if(GetPlayerMoney(playerid) < 1200)return SendClientMessage(playerid, COLOR_ORANGE, "Ein Lottoticket kostet dich 1.200$.");
    if(entry < 1 || entry > 100)return SendClientMessage(playerid, COLOR_ORANGE, "Die Lotto-Nummer muss zwischen 1 und 100 liegen.");
    format(string, sizeof(string), "* Du hast dir ein Lottoticket mit der Nummer %d gekauft. (-$1.200)", entry);
    SendClientMessage(playerid, COLOR_GREEN, string);
    Spieler[playerid][pLottoNr] = entry;
    Lottostand += 5000;
    Kasse[Staat] += 500;
    GivePlayerCash(playerid, -1200);
    return 1;
}



CMD:supermarkt(playerid)
{
    new pVW = GetPlayerVirtualWorld(playerid);
    if(pVW == 22 || pVW == 23 || pVW == 24 || pVW == 26 || pVW == 27 || pVW == 28)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 2.2396,-29.0123,1003.5494))
        {

            ShowPlayerDialog(playerid, DIALOG_MARKT, DIALOG_STYLE_LIST, "Super Markt", "Telefonbuch ($400)\n5 Kekse ($150)\n10 Zigaretten ($225)\nBrecheisen ($3.500)\nHelm ($2.000)\nMP3-Player ($2.500)\nKoffer ($1.500)\nRadarfallen-Warnung ($15.000)\nFallschirm ($1.200)", "Kaufen", "Abbrechen");
            return 1;
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du musst dich im Supermarkt an der Kasse befinden!");
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_RED, "Du musst dich im Supermarkt an der Kasse befinden!");
    return 1;
}



CMD:finden(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Finden [SpielerID/Name]");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if( Spieler[pID][pHandyState] == 0 ) {
        return SendClientMessage(playerid,COLOR_RED,"Das Handy der gesuchten Person ist aus. Die Ortung ist daher nicht möglich!");
    }

    if( Spieler[pID][pAdminDienst] || IsPlayerSpectating[pID]) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler kann nicht geortet werden.");
    }
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z, 1.0, CP_FINDEN);
    format(string, sizeof(string), "* %s wurde auf der Karte Rot markiert, Gebäude-Komplex: %d", GetName(pID), GetPlayerInterior(pID));
    SendClientMessage(playerid, COLOR_RED, string);
    return 1;
}

CMD:drivein(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, SUBWAY_DRIVEIN_COORDS)) // Burgershot North
    {
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        new index;
        index = GetBizIndexByID(2);
        Biz[index][bKasse] += 50;
        return SendClientMessage(playerid, COLOR_ORANGE, "[DRIVE-IN] {FFFFFF}Du hast dir ein Chicken Teriyaki Sub am Drive-In bestellt.");
    }

    return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist an keinem Drive-In.");
}

CMD:essen(playerid)
{
    new pVW = GetPlayerVirtualWorld(playerid);
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 2) // Burgershot North
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[2][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[2][bKasse] += 50;
        Biz[2][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 4) // Burgershot South
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[4][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[4][bKasse] += 50;
        Biz[4][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 3) // Cluckin Bell
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[3][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[3][bKasse] += 50;
        Biz[3][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
        ClearAnimations(playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 375.5368,-119.2299,1001.4995) && pVW == 6) // Pizza Stack 1
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[6][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[6][bKasse] += 50;
        Biz[6][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 375.5368,-119.2299,1001.4995) && pVW == 7) // Pizza Stack 2
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[7][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[7][bKasse] += 50;
        Biz[7][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 8) // Burgershot 3
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[8][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[8][bKasse] += 50;
        Biz[8][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 375.5368,-119.2299,1001.4995) && pVW == 9) // Pizzastack 3
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[9][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[9][bKasse] += 50;
        Biz[9][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 10) // BS 4
    {
        if(Biz[10][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[10][bKasse] += 50;
        Biz[10][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 11) // BS 5
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[11][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[11][bKasse] += 50;
        Biz[11][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 12) // Cluckin Bell 2
    {
        if(Biz[12][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[12][bKasse] += 50;
        Biz[12][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 13) // Cluckin Bell 3
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[13][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[13][bKasse] += 50;
        Biz[13][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 14) // Cluckin Bell 4
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[14][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[14][bKasse] += 50;
        Biz[14][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 375.5368,-119.2299,1001.4995) && pVW == 15) // Pizza Stack 4
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[15][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[15][bKasse] += 50;
        Biz[15][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 16) // BS 6
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[16][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[16][bKasse] += 50;
        Biz[16][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 17) // BS 7
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[17][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[17][bKasse] += 50;
        Biz[17][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 18) // Bell 5
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[18][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[18][bKasse] += 50;
        Biz[18][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 20) // Bell 6
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[20][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[20][bKasse] += 50;
        Biz[20][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 375.5368,-119.2299,1001.4995) && pVW == 21) // Pizza Stack 5
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[21][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[21][bKasse] += 50;
        Biz[21][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 25) // Bell 7
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[25][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[25][bKasse] += 50;
        Biz[25][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 369.8342,-6.2002,1001.8589) && pVW == 29) // Bell 8
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[29][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[29][bKasse] += 50;
        Biz[29][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 375.5368,-119.2299,1001.4995) && pVW == 30) // Pizza Stack 6
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[30][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[30][bKasse] += 50;
        Biz[30][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.1597,-67.7632,1001.5151) && pVW == 31) // BS 8
    {
        SendClientMessage(playerid, COLOR_WHITE, "Verkäufer sagt: Guten Appetit! Besuchen Sie uns bald wieder.");
        if(Biz[31][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        ClearAnimations(playerid);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetPlayerHealth(playerid, 100);
        GivePlayerCash(playerid, -50);
        Biz[31][bKasse] += 50;
        Biz[31][bWaren] -= 1;
        ShowBuyInformation(playerid,"~y~Essen ~w~gekauft!");
    }

    return 1;
}

CMD:wmenu(playerid)
{
    if(HasWeaponBlock(playerid)) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst keine Waffen erwerben.");
        return SendWeaponBlockInfo(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 296.4476,-37.9833,1001.5156) && GetPlayerInterior(playerid) == 1 || IsPlayerInRangeOfPoint(playerid, 2.0, 312.1370,-165.9137,999.6010) && GetPlayerInterior(playerid) == 6 || IsPlayerInRangeOfPoint(playerid, 2.0, 295.5200,-80.3668,1001.5156) && GetPlayerInterior(playerid) == 4)
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        ShowPlayerDialog(playerid, DIALOG_WMENU, DIALOG_STYLE_LIST, "Waffenmenu", "\
        Schlagring (750$)\n\
        Baseball Schläger (900$)\n\
        Schaufel (900$)\n\
        Schutzweste (2.000$)\n\
        9mm (2.100$ - 50 Munition) [A]\n\
        Silenced 9mm (2.600$ - 50 Munition) [A]\n\
        Desert Eagle (3.300$ - 50 Munition) [A]\n\
        Shotgun (6.400$ - 20 Munition) [A]\n\
        MP5 (6.800$ - 130 Munition) [B]\n\
        M4 (11.000$ - 130 Munition) [B]\n\
        AK-47 (11.200$ - 130 Munition) [B]\n\
        Rifle (12.000$ - 30 Munition) [B]", "Kaufen", "Abbrechen");
    }
    return 1;
}

CMD:shisha(playerid, params[]) {
    if (isnull(params)) {
        for (new i = 0; i < sizeof(g_shishaPoints); i++) {
            if (IsPlayerInRangeOfPoint(playerid, 5.0, g_shishaPoints[i][0], g_shishaPoints[i][1], g_shishaPoints[i][2])) {
                new dialogText[512] = COLOR_HEX_WHITE "Sorte\t" COLOR_HEX_WHITE "Preis\n";
                for (i = 0; i < sizeof(g_shishaPipes); i++)
                    format(dialogText, sizeof(dialogText), "%s%s%s\t{FFFFFF}$%s\n", dialogText, g_shishaPipes[i][SHISHA_PIPE_HEX_COLOR], g_shishaPipes[i][SHISHA_PIPE_NAME], AddDelimiters(g_shishaPipes[i][SHISHA_PIPE_COST]));

                return ShowPlayerDialog(playerid, DIALOG_SHISHA, DIALOG_STYLE_TABLIST_HEADERS, COLOR_HEX_ORANGE "Shisha bestellen", dialogText, "Kaufen", "Abbrechen");
            }
        }

        return SendClientMessage(playerid, COLOR_RED, "Hier kannst du keine Shisha bestellen.");
    }

    if (!strcmp(params, "aus", true)) {
        if (!GetPVarInt(playerid, "SHISHA.SMOKING")) return SendClientMessage(playerid, COLOR_RED, "Du rauchst doch gar keine Shisha.");
        SetPVarInt(playerid, "SHISHA.SMOKING", 0);
        if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, 0);
        new message[128], Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x ,y ,z);
        format(message, sizeof(message), "* %s hat mit dem Shisharauchen aufgehört.", GetName(playerid));
        return SendRoundMessage(x, y, z, COLOR_PURPLE, message);
    }

    return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /shisha oder /shisha Aus");
}

CMD:clubwaffen(playerid)
{
    if(HasWeaponBlock(playerid)) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst keine Waffen erwerben.");
        return SendWeaponBlockInfo(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, CLUBINTERIORLS_WEAPONS_POINT) && GetPlayerInterior(playerid) == 9 || IsPlayerInRangeOfPoint(playerid, 2.0, -2656.1047,1416.0248,906.2734) && GetPlayerInterior(playerid) == 3)
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        ShowPlayerDialog(playerid, CDIALOG_WMENU, DIALOG_STYLE_LIST, "Club Waffenmenu", "\
        Schlagring (400$)\n\
        Baseball Schläger (600$)\n\
        Schaufel (600$)\n\
        Schutzweste (1.200$)\n\
        9mm (1.500$ - 50 Munition) [A]\n\
        Silenced 9mm (1.800$ - 50 Munition) [A]\n\
        Desert Eagle (2.600$ - 50 Munition) [A]\n\
        Shotgun (5.000$ - 20 Munition) [A]\n\
        MP5 (5.200$ - 130 Munition) [B]\n\
        M4 (8.200$ - 130 Munition) [B]\n\
        AK-47 (9.200$ - 130 Munition) [B]\n\
        Rifle (10.000$ - 30 Munition) [B]", "Kaufen", "Abbrechen");
    }
    return 1;
}

/*CMD:selltanke(playerid, params[])
{
    new
        tank_index,
        pTanke = Spieler[playerid][pTankKey];
    tank_index = GetTankIndexByID( Spieler[playerid][pTankKey] );
    if(pTanke == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt garkeine Tanke.");
    if(strcmp(GetName(playerid), Tanke[tank_index][tBesitzer], true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, Tanke[tank_index][EnterX], Tanke[tank_index][EnterY], Tanke[tank_index][EnterZ]))
        {
            new string[128];
            SendClientMessage(playerid, COLOR_GREEN, "Du hast deine Tankstelle verkauft.");
            format(string, sizeof(string), "Du hast die Hälfte des Grundpreises deiner Tankstelle erhalten. ($%d)", Tanke[tank_index][tPreis]);
            SendClientMessage(playerid, COLOR_GREEN, string);
            format(Tanke[tank_index][tBesitzer], MAX_PLAYER_NAME, "Niemand");
            Spieler[tank_index][pTankKey] = 999;
            GivePlayerCash(playerid, Tanke[tank_index][tKasse]);
            Tanke[tank_index][tKasse] = 0;
            Tanke[tank_index][tVideoueberwachung] = false;
            Tanke[tank_index][tAutomatischerNotruf] = false;
            GivePlayerCash(playerid, Tanke[tank_index][tPreis]/2);
            UpdateTankeText(tank_index);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du musst vor deiner Tankstelle stehen.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Die Tankstelle gehört dir nicht.");
        return 1;
    }
    return 1;
}

CMD:sellbiz(playerid, params[])
{
    new pBiz = Spieler[playerid][pBizKey];
    if(pBiz == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt garkein Geschäft.");
    if(strcmp(GetName(playerid), Biz[pBiz][bBesitzer], true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, Biz[pBiz][EnterX], Biz[pBiz][EnterY], Biz[pBiz][EnterZ]))
        {
            new string[128];
            SendClientMessage(playerid, COLOR_GREEN, "Du hast dein Geschäft verkauft.");
            format(string, sizeof(string), "Du hast die Hälfte des Grundpreises deines Geschäftes erhalten. ($%d)", Biz[pBiz][bPreis]/2);
            SendClientMessage(playerid, COLOR_GREEN, string);
            format(Biz[pBiz][bBesitzer], MAX_PLAYER_NAME, "Niemand");
            Biz[pBiz][bLock] = 1;
            Spieler[playerid][pBizKey] = 999;
            GivePlayerCash(playerid, Biz[pBiz][bKasse]);
            Biz[pBiz][bKasse] = 0;
            GivePlayerCash(playerid, Biz[pBiz][bPreis]/2);
            UpdateBizText(pBiz);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du musst vor deinem Geschäft stehen.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Das Geschäft gehört dir nicht!");
        return 1;
    }
    return 1;
}*/

/*CMD:hausabgeben(playerid, params[])
{
    new pHouse = Spieler[playerid][pHouseKey];
    new house_index = GetHouseIndexByID( pHouse );
    if(pHouse == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt garkein Haus.");
    if(strcmp(GetName(playerid), Haus[house_index][hBesitzer], true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, Haus[house_index][EnterX], Haus[house_index][EnterY], Haus[house_index][EnterZ]))
        {
            new string[128];
            SendClientMessage(playerid, COLOR_GREEN, "Du hast dein Haus verkauft und lebst nun wieder auf der Straße.");
            format(string, sizeof(string), "Du hast ein Drittel des Grundpreises deines Hauses erhalten. ($%d)", Haus[house_index][hPreis]);
            format(Haus[house_index][hBesitzer], MAX_PLAYER_NAME, "Niemand");
            Haus[house_index][hMieten] = 0;
            Haus[house_index][hLock] = 1;
            GivePlayerCash(playerid, Haus[house_index][hKasse]);
            Haus[house_index][hKasse] = 0;
            GivePlayerCash(playerid, Haus[house_index][hPreis]/3);
            Spieler[playerid][pSpawnChange] = 0;
            new hStr[128];
            format(hStr, sizeof(hStr), "Dieses Haus ist zu verkaufen\n\nBeschreibung: %s\nPreis: %d$\nZum kaufen tippe /Hauskaufen ein", Haus[house_index][hName], Haus[house_index][hPreis]);
            UpdateHouseText(house_index);
            new query[256];

            CreateHouseSellObject(house_index);
            format(query, sizeof(query), "UPDATE `accounts` SET \
            `UpgradeWaffenlager` = '0',\
            `UpgradeSafebox` = '0',\
            `HausWaffenlager` = '0',\
            `HausSafeboxSpice` = '0',\
            `HausSafeboxDrogen` = '0' \
            WHERE `HouseMieteKey` = %d", Spieler[playerid][pHouseKey] );
            mysql_pquery(query,THREAD_SELLHOUSE,playerid,gSQL,MySQLThreadOwner);
            Spieler[playerid][pHouseMieteKey] = 999;
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Alle Mieter aus deinem Haus wurden rausgeworfen!");
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du musst vor deinem Haus stehen.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_ORANGE, "Du bist nicht der Besitzer, kannst aber /Hausentmieten eingeben sofern du eingemietet bist.");
        return 1;
    }
    return 1;
}*/

CMD:tankekaufen(playerid, params[])
{
    if(Spieler[playerid][pPlayerTank] != 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits eine Tankstelle!");
    }
    if( Spieler[playerid][pLevel] < 5 ) {
        return SendClientMessage(playerid, COLOR_RED, "Dein Level ist zu niedrig um eine Tankstelle zu kaufen! Du musst Level 5 erreichen um eine Tankstelle kaufen zu können.");
    }
    for(new i=0;i<sizeof(Tanke);i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, Tanke[i][EnterX], Tanke[i][EnterY], Tanke[i][EnterZ]))
        {
            if(strcmp(Tanke[i][tBesitzer], "Niemand", true) == 0)
            {
                if(Spieler[playerid][pPerso] == 0)return SendClientMessage(playerid, COLOR_RED, "Du benötigst einen Personalausweis.");
                if(GetPlayerMoney(playerid) < Tanke[i][tPreis])return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld.");
                new string[128];
                Spieler[playerid][pPlayerTank] = i;
                strmid(Tanke[i][tBesitzer], GetName(playerid), 0, MAX_PLAYER_NAME, 255);
                GivePlayerCash(playerid, -Tanke[i][tPreis]);
                format(string, sizeof(string), "Du hast erfolgreich diese Tankstelle gekauft. (-$%s)", AddDelimiters(Tanke[i][tPreis]));
                SendClientMessage(playerid, COLOR_GREEN, string);
                SendClientMessage(playerid, COLOR_WHITE, "Wichtige Befehle um deine Tankstelle zu verwalten findest du unter /Help -> Geschäfts-Befehle.");
                SendClientMessage(playerid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");
                ShowBuyInformation(playerid,"~y~Tankstelle ~w~gekauft!");
                UpdateTankeText(i);
            }
            else {
                SendClientMessage(playerid,COLOR_RED,"Diese Tankstelle gehört bereits einem Spieler.");
            }
            return 1;
        }
    }
    SendClientMessage(playerid,COLOR_RED,"Du befindest dich an keiner Tankstelle.");
    return 1;
}

CMD:bizkaufen(playerid, params[])
{
    if(Spieler[playerid][pPlayerBiz] != 999 )return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Geschäft!");
    for(new i=1;i<sizeof(Biz);i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ]))
        {
            if( Spieler[playerid][pLevel] < 5 ) {
                return SendClientMessage(playerid, COLOR_RED, "Dein Level ist zu niedrig um ein Geschäft zu kaufen! Du musst Level 5 erreichen um ein Geschäft kaufen zu können.");
            }
            if(strcmp(Biz[i][bBesitzer], "Niemand", true) == 0)
            {
                if(Spieler[playerid][pPerso] == 0)return SendClientMessage(playerid, COLOR_RED, "Du benötigst einen Personalausweis.");
                if(GetPlayerMoney(playerid) < Biz[i][bPreis])return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld.");
                new string[128];
                Spieler[playerid][pPlayerBiz] = i;
                strmid(Biz[i][bBesitzer], GetName(playerid), 0, MAX_PLAYER_NAME, 255);
                GivePlayerCash(playerid, -Biz[i][bPreis]);
                if(Biz[i][bInterior] > 0)
                {
                    SetPlayerInterior(playerid, Biz[i][bInterior]);
                    SetPlayerVirtualWorld(playerid, i);
                    SetPlayerPos(playerid, Biz[i][ExitX], Biz[i][ExitY], Biz[i][ExitZ]);
                }
                format(string, sizeof(string), "Du hast erfolgreich dieses Geschäft gekauft. (-$%s)", AddDelimiters(Biz[i][bPreis]));
                SendClientMessage(playerid, COLOR_GREEN, string);
                SendClientMessage(playerid, COLOR_WHITE, "Wichtige Befehle um dein Geschäft zu verwalten findest du unter /Help -> Geschäfts-Befehle.");
                SendClientMessage(playerid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");
                ShowBuyInformation(playerid,"~y~Geschaeft ~w~gekauft!");
                UpdateBizText(i);
            }
        }
    }
    return 1;
}

CMD:hauskaufen(playerid, params[])
{
    if (Spieler[playerid][pPlayerHouse] != 999) return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Haus!");
    if (Spieler[playerid][pHouseMieteKey] != 999) return SendClientMessage(playerid, COLOR_RED, "Du bist noch in einem Haus eingemietet!");
    if (Spieler[playerid][pPlayerHotel] != 999) return SendClientMessage(playerid, COLOR_RED, "Du mietest bereits ein Hotelzimmer!");
    if (Spieler[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_RED, "Dein Level ist zu niedrig um ein Haus zu kaufen! Du musst Level 5 erreichen um ein Haus kaufen zu können.");

    for (new i = 0; i < iHaus; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]))
        {
            // new index = GetHouseIndexByID( Spieler[playerid][pHouseKey] );
            // if(Spieler[playerid][pHouseKey] != 999 && strcmp(GetName(playerid), Haus[index][hBesitzer], true) == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Haus. Verkaufe es zuerst per /sellhouse.");
            if(strcmp(Haus[i][hBesitzer], "Niemand", true) == 0)
            {
                if(Spieler[playerid][pPerso] == 0)return SendClientMessage(playerid, COLOR_RED, "Du benötigst einen Personalausweis.");
                if(GetPlayerMoney(playerid) < Haus[i][hPreis])return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld.");
                new string[128];
                Spieler[playerid][pPlayerHouse] = Haus[i][hID]; // <- Nicht Index, sondern ID
                Haus[i][hMieten] = 0;
                Haus[i][hMieterAnzahl] = 0;
                strmid(Haus[i][hBesitzer], GetName(playerid), 0, MAX_PLAYER_NAME, 255);
                GivePlayerCash(playerid, -Haus[i][hPreis]);

                new
                    index;
                index = GetHouseInteriorIndexByID( Haus[i][HouseInteriorID] );
                SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior]);
                // SetPlayerInterior(playerid, Haus[i][hInterior]);

                SetPlayerVirtualWorld(playerid, i);
                SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);
                // SetPlayerPos(playerid, Haus[i][ExitX], Haus[i][ExitY], Haus[i][ExitZ]);
                format(string, sizeof(string), "Du hast erfolgreich dieses Haus gekauft. ($-%d)", Haus[i][hPreis]);
                SendClientMessage(playerid, COLOR_GREEN, string);
                SendClientMessage(playerid, COLOR_WHITE, "Du kannst deinen Spawn-Ort per /spawnchange wechseln.");
                SendClientMessage(playerid, COLOR_WHITE, "Andere Befehle findest du unter /Help -> Hausbefehle.");
                SendClientMessage(playerid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");
                ShowBuyInformation(playerid,"~y~Haus ~w~gekauft!");
                //new hStr[128];
                //format(hStr, sizeof(hStr), "Besitzer: %s\nBeschreibung: %s", Haus[i][hBesitzer], Haus[i][hName]);
                CheckPlayerHouse(playerid);
                UpdateHouseText(i);
                DestroyHouseSellObject(i);
                return 1;
            }
            else
                return SendClientMessage(playerid, COLOR_RED, "Dieses Haus besitzt bereits jemand.");
        }
    }

    return 1;
}

CMD:hausentmieten(playerid)
{
    new pHouse = Spieler[playerid][pHouseMieteKey];
    if( pHouse == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist bereits ausgemietet.");
    new index = GetHouseIndexByID(pHouse);
    if( Spieler[playerid][pPlayerHouse] != 999 ) return SendClientMessage(playerid, COLOR_ORANGE, "Wenn du dein Haus nicht mehr haben möchtest, tippe /sellhouse.");
    Spieler[playerid][pHouseMieteKey] = 999;
    SendClientMessage(playerid, COLOR_WHITE, "Du lebst nun wieder auf der Straße!");
    ShowBuyInformation(playerid,"~y~Haus ~w~entmietet!");
    Haus[index][hMieterAnzahl]--;

    Spieler[playerid][pUpgradeWaffenlager] = 0;
    Spieler[playerid][pUpgradeSafebox] = 0;
    Spieler[playerid][pHausWaffenlager] = 0;
    Spieler[playerid][pHausSafeboxSpice] = 0;
    Spieler[playerid][pHausSafeboxDrogen] = 0;
    return 1;
}

CMD:hausmieten(playerid)
{
    if( GetPlayerHouse(playerid) != 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Haus!");
    if(Spieler[playerid][pPlayerHotel] != 999)return SendClientMessage(playerid, COLOR_RED, "Du mietest bereits ein Hotelzimmer!");
    new h = IsPlayerAtHouse(playerid);
    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    if(Haus[h][hMieten] == 0)return SendClientMessage(playerid, COLOR_RED, "Das Haus lässt Mieten nicht zu.");
    if(GetPlayerMoney(playerid) < Haus[h][hMietPreis])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
    if( Haus[h][hMieterAnzahl] >= Haus[h][hMieterMax])return SendClientMessage(playerid, COLOR_RED, "Die maximale Anzahl an Mietern für dieses Haus ist erreicht!");
    Spieler[playerid][pHouseMieteKey] = GetHouseIDByIndex(h);
    GivePlayerCash(playerid, -Haus[h][hMietPreis]);
    Haus[h][hKasse]+=Haus[h][hMietPreis];
    Haus[h][hMieterAnzahl]++;
    SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich ins Haus eingemietet und zahlst jeden Zahltag einen gewissen Betrag an Miete.");
    SendClientMessage(playerid, COLOR_WHITE, "Mit /Spawnchange kannst du deinen Spawn zwischen Haus oder Fraktion bzw. Zivi-Spawn wechseln.");
    ShowBuyInformation(playerid,"~y~Wohnung ~w~gemietet!");

    return 1;
}

CMD:hausmietung(playerid, params[])
{
    new status[12];
    if(sscanf(params, "s[12]", status))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hausmietung [An/Aus]");
    new h = GetPlayerHouse(playerid);
    if((h == 999) || (h != 999 && !IsPlayerInHouse(playerid, Haus[h][hID])) ) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    if(strcmp(status, "AN", true) == 0)
    {
        if(Spieler[playerid][pPlayerHouse] == h)
        {
            if(Haus[h][hMieten] == 0)
            {
                Haus[h][hMieten] = 1;
                Haus[h][hMietPreis] = 50;
                SendClientMessage(playerid, COLOR_WHITE, "Es kann nun gemietet werden.");
                UpdateHouseText(h);
            }
            else
            {
                SendClientMessage(playerid, COLOR_ORANGE, "Es kann bereits gemietet werden.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer des Hauses.");
            return 1;
        }
    }
    else if(strcmp(status, "AUS", true) == 0)
    {
        if(Spieler[playerid][pPlayerHouse] == h)
        {
            if(Haus[h][hMieten] == 1)
            {
                new query[128];
                format(query, sizeof(query), "UPDATE `accounts` SET `HouseMieteKey` = '999' WHERE `HouseMieteKey` = %d", Haus[h][hID] );
                mysql_pquery(query,THREAD_HAUSMIETUNGRAUS,playerid,gSQL,MySQLThreadOwner);

                Haus[h][hMieten] = 0;
                Haus[h][hMieterAnzahl] = 0;
                SendClientMessage(playerid, COLOR_GREEN, "Es kann nun nicht weiter gemietet werden.");
                UpdateHouseText(h);
            }
            else
            {
                SendClientMessage(playerid, COLOR_ORANGE, "Das Mieten ist bereits deaktiviert.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Hauses.");
            return 1;
        }
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hausmietung [An/Aus]");
    return 1;
}
CMD:warenpreis(playerid, params[])
{
    new preis, string[128];
    if(sscanf(params, "i", preis))return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Warenpreis [Betrag]");
    new b = IsPlayerAtBiz(playerid);
    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Geschäftes.");
    if(preis < 10 || preis > 20)return SendClientMessage(playerid, COLOR_ORANGE, "Der Preis muss zwischen $10 und $25 liegen!");
    if(strcmp(GetName(playerid), Biz[b][bBesitzer], true) == 0)
    {
        Biz[b][bWarenPreis] = preis;
        format(string, sizeof(string), "Du hast den Warenpreis in $%d geändert.", preis);
        SendClientMessage(playerid, COLOR_GREEN, string);
        UpdateBizText(b);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer des Geschäftes.");
        return 1;
    }
    return 1;
}

CMD:mietpreis(playerid, params[])
{
    new preis, string[128];
    if(sscanf(params, "i", preis))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Mietpreis [Betrag]");
    new h = GetPlayerHouse(playerid);
    if( h == 999 || !IsPlayerInHouse(playerid, Haus[h][hID]) )return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    if(preis < 100 || preis > 10000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Preis muss zwischen $100 und $10.000 liegen!");
    if(Spieler[playerid][pPlayerHouse] == h)
    {
        format(string, sizeof(string), "Du hast den Mietpreis in $%s geändert.", AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_GREEN, string);
        SendClientMessage(playerid, COLOR_RED, "ACHTUNG! Der Mietpreis muss fair nach Hausinterior, Zustand und Ort bestimmt werden!");
        SendClientMessage(playerid, COLOR_RED, "Zum Beispiel eine Villa in Vinewood darf kein Mietpreis von 500$, sondern muss höher sein.");
        SendClientMessage(playerid, COLOR_RED, "Bei Missachtung dieser Regel(§33) kann das Haus entzogen werden!");
        format(string,sizeof(string),"[HAUS-INFO] Dein Vermieter hat den Mietpreis von $%s auf $%s geändert.", AddDelimiters(Haus[h][hMietPreis]), AddDelimiters(preis));
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if( Spieler[i][pHouseMieteKey] == Haus[h][hID] ) {
                    SendClientMessage(playerid,COLOR_WHITE,string);
                }
            }
        }
        Haus[h][hMietPreis] = preis;
        UpdateHouseText(h);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer des Hauses.");
        return 1;
    }
    return 1;
}

CMD:hausrausalle(playerid)
{
    new h = IsPlayerAtHouse(playerid);
    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    // printf("pPlayerHouse %d h %d",Spieler[playerid][pPlayerHouse],h);
    if(Spieler[playerid][pPlayerHouse] == h)
    {
        new query[256];
        format(query, sizeof(query), "\
        UPDATE `accounts` SET \
        `HouseMieteKey` = '999', \
        `UpgradeWaffenlager` = '0',\
        `UpgradeSafebox` = '0',\
        `HausWaffenlager` = '0',\
        `HausSafeboxSpice` = '0',\
        `HausSafeboxDrogen` = '0'\
        WHERE `HouseMieteKey` = %d", Spieler[playerid][pPlayerHouse]);
        mysql_pquery(query,THREAD_HAUSRAUSALLE,playerid,gSQL,MySQLThreadOwner);
        format(query,sizeof(query),"Du hast alle Spieler (%d) aus deinem Haus rausgeschmissen.",Haus[h][hMieterAnzahl]);
        SendClientMessage(playerid, COLOR_LIGHTBLUE,query);
        Haus[h][hMieterAnzahl] = 0;
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(i != playerid)
            {
                if(IsPlayerConnected(i))
                {
                    if(Spieler[i][pHouseMieteKey] == Haus[h][hID])
                    {
                        Spieler[i][pHouseMieteKey] = 999;
                        SendClientMessage(i, COLOR_LIGHTBLUE, "Du wurdest aus deinem Haus geschmissen.");
                        // return 1;
                    }
                }
            }
        }
        UpdateHouseText(h);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Hauses.");
        return 1;
    }
    return 1;
}

CMD:hausraus(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hausraus [SpielerID/Name]");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selber nicht rausschmeißen.");
    new h = IsPlayerAtHouse(playerid);
    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[playerid][pPlayerHouse] == h )
    {
        if(Spieler[pID][pHouseMieteKey] == Haus[h][hID]) // MietKey ist Haus-ID
        {
            Spieler[pID][pHouseMieteKey] = 999;
            Spieler[pID][pSpawnChange] = 0;
            format(string, sizeof(string), "Du wurdest von %s aus deinem Haus geschmissen.", GetName(playerid));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "Du hast %s aus deinem Haus geschmissen.", GetName(pID));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            Haus[h][hMieterAnzahl]--;
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Der Spieler wohnt nicht in deinem Haus.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer des Hauses.");
        return 1;
    }
    return 1;
}

CMD:biztuer(playerid, params[])
{
    new status[12];
    if(sscanf(params, "s[12]", status))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Biztuer [Auf/Zu]");
    if(strcmp(status, "AUF", true) == 0)
    {
        for(new h = 1; h < MAX_BIZES; h++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, Biz[h][EnterX], Biz[h][EnterY], Biz[h][EnterZ]) || (IsPlayerInRangeOfPoint(playerid, 4.0, Biz[h][ExitX], Biz[h][ExitY], Biz[h][ExitZ]) && GetPlayerVirtualWorld(playerid) == h))
            {
                if(Spieler[playerid][pPlayerBiz] == h)
                {
                    if(Biz[h][bLock] == 1)
                    {
                        Biz[h][bLock] = 0;
                        GameTextForPlayer(playerid, "~w~Geschaeft ~g~Auf", 5000, 6);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_ORANGE, "Das Geschäft ist bereits offen.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dieses Geschäft gehört dir nicht.");
                    return 1;
                }
            }
        }
    }
    else if(strcmp(status, "ZU", true) == 0)
    {
        for(new h = 1; h < MAX_BIZES; h++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, Biz[h][EnterX], Biz[h][EnterY], Biz[h][EnterZ]) || (IsPlayerInRangeOfPoint(playerid, 4.0, Biz[h][ExitX], Biz[h][ExitY], Biz[h][ExitZ]) && GetPlayerVirtualWorld(playerid) == h))
            {
                if(Spieler[playerid][pPlayerBiz] == h)
                {
                    if(Biz[h][bLock] == 0)
                    {
                        Biz[h][bLock] = 1;
                        GameTextForPlayer(playerid, "~w~Geschaeft ~r~Zu", 5000, 6);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_ORANGE, "Das Geschäft ist bereits zu.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dieses Geschäft gehört dir nicht.");
                    return 1;
                }
            }
        }
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /biztuer [Auf/Zu]");
    return 1;
}

CMD:haustuer(playerid, params[])
{
    new status[12];
    new index;
    if(sscanf(params, "s[12]", status))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Haustuer [Auf/Zu]");
    if(strcmp(status, "AUF", true) == 0)
    {
        for(new h = 0; h < MAX_HOUSES; h++)
        {
            index = GetHouseInteriorIndexByID( Haus[h][HouseInteriorID] );
            if( index == 999 ) continue;
            if(IsPlayerInRangeOfPoint(playerid, 2.0, Haus[h][EnterX], Haus[h][EnterY], Haus[h][EnterZ]) || (IsPlayerInRangeOfPoint(playerid, 4.0, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]) && GetPlayerVirtualWorld(playerid) == h))
            {
                if(Spieler[playerid][pPlayerHouse] == h )
                {
                    if(Haus[h][hLock] == 1)
                    {
                        Haus[h][hLock] = 0;
                        GameTextForPlayer(playerid, "~w~Haus ~g~Auf", 5000, 6);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_ORANGE, "Das Haus ist bereits offen.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dieses Haus gehört dir nicht oder du bist nicht eingemietet.");
                    return 1;
                }
            }
        }
    }
    else if(strcmp(status, "ZU", true) == 0)
    {
        for(new h = 0; h < MAX_HOUSES; h++)
        {
            index = GetHouseInteriorIndexByID( Haus[h][HouseInteriorID] );
            if( index == 999 ) continue;
            if(IsPlayerInRangeOfPoint(playerid, 2.0, Haus[h][EnterX], Haus[h][EnterY], Haus[h][EnterZ]) || (IsPlayerInRangeOfPoint(playerid, 4.0, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]) && GetPlayerVirtualWorld(playerid) == h))
            {
                if(Spieler[playerid][pPlayerHouse] == h)
                {
                    if(Haus[h][hLock] == 0)
                    {
                        Haus[h][hLock] = 1;
                        GameTextForPlayer(playerid, "~w~Haus ~r~Zu", 5000, 6);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_ORANGE, "Das Haus ist bereits zu.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dieses Haus gehört dir nicht.");
                    return 1;
                }
            }
        }
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /haustuer [Auf/Zu]");
    return 1;
}

CMD:maxbenzin(playerid)
{
    new t = IsPlayerAtTanke(playerid);
    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
    if(strcmp(GetName(playerid), Tanke[t][tBesitzer], true) == 0)
    {
        ShowPlayerDialog(playerid, DIALOG_MAXBENZIN, DIALOG_STYLE_LIST, "Maximale Liter Anzahl ändern", "1000 Liter ($10.000)\n2000 Liter ($20.000)\n3000 Liter ($30.000)\n4000 Liter ($40.000)\n5000 Liter ($50.000)", "Auswählen", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer der Tankstelle.");
        return 1;
    }
    return 1;
}

CMD:tankpreis(playerid, params[])
{
    new
        benzin,
        Preis,
        Benzintyp[16],
        string[128];
    if(sscanf(params, "is[16]", Preis,Benzintyp))
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tankpreis [Preis] [Typ]");
    new t = IsPlayerAtTanke(playerid);
    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
    if( !strcmp(Benzintyp,"Benzin", true)) {
        benzin = 0;
    }
    else if( !strcmp(Benzintyp,"Super", true)) {
        benzin = 1;
    }
    else if( !strcmp(Benzintyp,"Diesel", true)) {
        benzin = 2;
    }
    else {
        benzin = -1;
    }
    if( benzin == -1 ) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tankpreis [Preis] [Typ ( Benzin, Diesel, Super ) ]");

    if(strcmp(GetName(playerid), Tanke[t][tBesitzer], true) == 0)
    {
        if(Preis < 100 || Preis > 400)return SendClientMessage(playerid, COLOR_ORANGE, "Der Preis muss zwischen $100 und $400 liegen.");
        Tanke[t][taiFillCost][benzin] = Preis;
        format(string, sizeof(string), "[TANKE] {FFFFFF}Du hast den Benzinpreis von %s auf $%d gesetzt.", Benzintyp,Preis);
        SendClientMessage(playerid, 0x6DC0F4FF, string);
        UpdateTankeText(t);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer der Tankstelle.");
        return 1;
    }
    return 1;
}

CMD:maxwaren(playerid, params[])
{
    new b = IsPlayerAtBiz(playerid);
    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Geschäftes.");
    if(strcmp(GetName(playerid), Biz[b][bBesitzer], true) == 0)
    {
        ShowPlayerDialog(playerid, DIALOG_MAXWAREN, DIALOG_STYLE_LIST, "Maximale Waren Anzahl ändern", "100 Waren ($5000)\n200 Waren ($10.000)\n300 Waren ($15.000)\n400 Waren ($20.000)\n500 Waren ($25.000)", "Auswählen", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Geschäftes.");
        return 1;
    }
    return 1;
}

/*CMD:innenraum(playerid, params[])
{
    new iID, string[128];
    if(sscanf(params, "i", iID))
    {
        SendClientMessage(playerid, COLOR_GREY, "* Benutze /innenraum [ID(1-11)]");
        SendClientMessage(playerid, COLOR_GREY, "Im Forum findest du eine detaillierte Liste aller verfügbaren Innenräume.");
        SendClientMessage(playerid, COLOR_GREY, "Wenn du eine falsche ID aussuchst, wird dir kein Geld erstattet!");
        return 1;
    }
    new h = IsPlayerAtHouse(playerid);
    if(h == 999)return SendClientMessage(playerid, COLOR_GREY, "Du bist nicht in der Nähe eines Hauses.");
    if(iID < 1 || iID > 11)return SendClientMessage(playerid, COLOR_GREY, "Du kannst nur Innenraum-IDs zwischen 1 und 11 auswählen.");
    if(strcmp(GetName(playerid), Haus[h][hBesitzer], true) == 0)
    {
        new interior, Float:iX, Float:iY, Float:iZ, typ[32];
        if(iID == 1)
        {
            interior = 3;
            iX = 235.508994;
            iY = 1189.169897;
            iZ = 1080.339966;
            typ = "Großes Haus";
        }
        else if(iID == 2)
        {
            interior = 2;
            iX = 225.756989;
            iY = 1240.000000;
            iZ = 1082.149902;
            typ ="Mittleres Haus";
        }
        else if(iID == 3)
        {
            interior = 1;
            iX = 223.043991;
            iY = 1289.259888;
            iZ = 1082.199951;
            typ = "Kleines Haus";
        }
        else if(iID == 4)
        {
            interior = 7;
            iX = 225.630997;
            iY = 1022.479980;
            iZ = 1084.069946;
            typ = "Großes Haus";
        }
        else if(iID == 5)
        {
            interior = 15;
            iX = 295.138977;
            iY = 1474.469971;
            iZ = 1080.519897;
            typ = "Mittleres Haus";
        }
        else if(iID == 6)
        {
            interior = 15;
            iX = 328.493988;
            iY = 1480.589966;
            iZ = 1084.449951;
            typ = "Mittleres Haus";
        }
        else if(iID == 7)
        {
            interior = 15;
            iX = 385.803986;
            iY = 1471.769897;
            iZ = 1080.209961;
            typ = "Kleines Haus";
        }
        else if(iID == 8)
        {
            interior = 1;
            iX = 244.411987;
            iY = 305.032989;
            iZ = 999.148437;
            typ = "Kleines Haus";
        }
        else if(iID == 9)
        {
            interior = 2;
            iX = 266.8322;
            iY = 304.8475;
            iZ = 999.1484;
            typ = "Kleines Haus";
        }
        else if(iID == 10)
        {
            interior = 2;
            iX = 2468.0276;
            iY = -1698.2456;
            iZ = 1013.5078;
            typ = "Mittleres Haus";
        }
        else if(iID == 11)
        {
            interior = 12;
            iX = 2324.419921;
            iY = -1145.568359;
            iZ = 1050.710083;
            typ = "Großes Haus";
        }
        Haus[h][ExitX] = iX;
        Haus[h][ExitY] = iY;
        Haus[h][ExitZ] = iZ;
        Haus[h][hInterior] = interior;
        format(string, sizeof(string), "Du hast deinen Innenraum gewechselt. (ID: %d - Typ: %s)", iID, typ);
        SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Du bist nicht der Besitzer dieses Hauses.");
        return 1;
    }
    return 1;
}*/

CMD:spawnchange(playerid)
{
    if(Spieler[playerid][pSpawnChange]== 0)
    {
        if(GetPlayerHouse(playerid) == 999 && Spieler[playerid][pPlayerHotel] == 999 ) return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Haus / Hotel eingemietet oder besitzt keins.");
        if(GetPlayerHouse(playerid) != 999 ) {
            SendClientMessage(playerid, COLOR_GREEN, "Du hast deinen Spawn auf dein Haus verlegt.");
        }
        else if(Spieler[playerid][pPlayerHotel] != 999 ) {
            SendClientMessage(playerid, COLOR_GREEN, "Du hast deinen Spawn auf dein Hotelzimer verlegt.");
        }
        Spieler[playerid][pSpawnChange] = 1;
    }
    else if(Spieler[playerid][pSpawnChange] == 1)
    {
        Spieler[playerid][pSpawnChange] = 0;
        SendClientMessage(playerid, COLOR_GREEN, "Du hast deinen Spawn auf den Fraktions bzw. Zivi-Spawn geändert.");
    }
    return 1;
}

CMD:configtanke(playerid)
{
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new t = IsPlayerAtTanke(playerid);
    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe einer Tankstelle.");
    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
    return 1;
}

CMD:confighouse(playerid)
{
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new h = IsPlayerAtHouse(playerid);
    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
    return 1;
}

CMD:configbiz(playerid)
{
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new b = IsPlayerAtBiz(playerid);
    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Geschäftes.");
    new dialogCaption[128];
    format(dialogCaption, sizeof(dialogCaption), "Konfigurieren des Geschäftes (ID: %d)", b);
    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, dialogCaption, "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungszeit", "Auswählen", "Abbrechen");
    return 1;
}

CMD:check(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID;
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Check [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    Stats(playerid, pID);
    return 1;
}

CMD:changeweather(playerid)
{
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    ChangeWeather();
    new string[128];
    format(string, sizeof(string), "Wetter wurde geändert. (ID: %d)", CurWeather);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    return 1;
}

CMD:isskeks(playerid)
{
    new string[128];
    if(Spieler[playerid][pKekse] < 1)return SendClientMessage(playerid, COLOR_RED, "Du hast keine Kekse mehr.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    new Float:health;
    GetPlayerHealth(playerid, health);
    if(damagesperre[playerid]>0)
    {
        SendClientMessage(playerid,COLOR_RED,"Da du Schaden genommen hast, kannst du erst nach 20 Sekunden deine HP wieder pushen.");
    }
    else if( Spieler[playerid][pKekseValue] >= 7 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast zu viele Kekse hintereinander gegessen!");
        ApplyAnimation( playerid , "FOOD", "EAT_Vomit_P", 4.1,0,1,1,0,-1,1);
        SetPlayerHealth(playerid, health - 7);
        Spieler[playerid][pKekse]--;
    }
    else if(health<90)
    {
        Spieler[playerid][pKekse]--;
        SetPlayerHealth(playerid, health + 2);
        format(string, sizeof(string), "* %s mampft einen Keks.", GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
        SetTimerEx("CoolDownKekse",6003,false,"dd",playerid,1);
        Spieler[playerid][pKekseValue]++;
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du kannst keine Kekse mehr essen, da du zuviel Leben hast.");
        return 1;
    }
    return 1;
}

CMD:zigweg(playerid)
{
    if (!GetPVarInt(playerid, "SMOKING_CIG")) return SendClientMessage(playerid, COLOR_RED, "Du rauchst doch gar keine Zigarette.");
    new string[128];
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    format(string, sizeof(string), "* %s wirft seine Zigarette weg.", GetName(playerid));
    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
    return 1;
}

CMD:rauchzig(playerid)
{
    new string[128];
    if(Spieler[playerid][pZigaretten] < 1)return SendClientMessage(playerid, COLOR_RED, "Du hast keine Zigaretten mehr.");
    //if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Fahrzeug.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    new Float:health;
    GetPlayerHealth(playerid, health);
    if(health>10)
    {
        Spieler[playerid][pZigaretten] --;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
        format(string, sizeof(string), "* %s zündet sich eine Zigarette an.", GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Zigweg zum wegwerfen der Zigarette.");
        SetPVarInt(playerid, "SMOKING_CIG", 1);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Dir geht es gesundheitlich zu schlecht!");
        return 1;
    }
    return 1;
}

CMD:nimmdrogen(playerid)
{
    new string[128];
    if(Spieler[playerid][pDrugs] < 1) return SendClientMessage(playerid, COLOR_RED, "Du benötigst mindestens 1g Drogen.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    new Float:health;
    GetPlayerHealth(playerid, health);
    if(damagesperre[playerid]>0)
    {
        SendClientMessage(playerid,COLOR_RED,"Da du Schaden genommen hast, kannst du erst nach 20 Sekunden deine HP wieder pushen.");
    }
    else if(health < 100.0 && health > 1.0)
    {
        pDrogenEinfluss[playerid] = 1;
        health = health >= 90.0 ? 100.0 : health + 10.0;
        SetPlayerHealth(playerid, health);
        KillTimer(DrogenTimer[playerid]);
        DrogenTimer[playerid] = SetTimerEx("Drogen_Clear", 30000, 0, "i", playerid);
        Spieler[playerid][pDrugs] -= 1;
        format(string, sizeof(string), "* %s hat sich nen Joint gedreht.", GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        SetPlayerDrunkLevel(playerid,50000);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Joint rauchen. (Leben zu hoch oder zu niedrig)");
        return 1;
    }
    return 1;
}

forward Drogen_Clear(playerid);
public Drogen_Clear(playerid) {
    KillTimer(DrogenTimer[playerid]);
    SetPlayerDrunkLevel(playerid,0);
    SetPlayerWeather(playerid,GetWeather());
    return 1;
}
CMD:post(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,10,822.3183,1.8747,1004.1797))
    {
        ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
    }
    return 1;
}
stock CreateBrief(briefabsendername[],briefempfangername[],absendertext[])
{
    SendClientMessage(GetPlayerIdFromName(briefempfangername),COLOR_YELLOW,"Du hast ungelesene Post erhalten! Gehe zum Postamt und öffne die Post.");
    new pfad[64];
    format(pfad,64,"./scriptfiles/Briefe/%s",briefabsendername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    format(pfad,64,"./scriptfiles/Briefe/%s/Abgesendete Briefe",briefabsendername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    format(pfad,64,"./scriptfiles/Briefe/%s",briefempfangername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    format(pfad,64,"./scriptfiles/Briefe/%s/Empfangene Briefe",briefempfangername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    for(new i;i<50;i++)
    {
        format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",briefabsendername,i);
        if(fexist(pfad))
        {
        }
        else
        {
            break;
        }
    }
    new absendertext2[2048];
    format(absendertext2,2048,"%s",absendertext);
    for(new leerzeichen;leerzeichen<1000;leerzeichen++)
    {
        if(strfind(absendertext2," ",true)!=-1)
        {
            strins(absendertext2,"?",strfind(absendertext2," ",true));
            strdel(absendertext2,strfind(absendertext2," ",true),strfind(absendertext2," ",true)+1);
        }
        else
        {
            leerzeichen=1000;
        }
    }
    new string[1000],bjahr,btag,bmonat,bstunde,bminute,bsekunde,datumstring[20],uhrzeitstring[20];
    getdate(bjahr,bmonat,btag),gettime(bstunde,bminute,bsekunde);
    format(datumstring,20,"%i.%i.%i",btag,bmonat,bjahr),format(uhrzeitstring,20,"%i:%i:%i",bstunde,bminute,bsekunde);
    format(string, sizeof(string), "%s %s %s %s %s 0 0 0)",
    briefabsendername,briefempfangername,datumstring,uhrzeitstring,absendertext2);
    new File:datei=fopen(pfad,io_write);
    fwrite(datei,string);
    fclose(datei);
    for(new i;i<50;i++)
    {
        format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",briefempfangername,i);
        if(fexist(pfad))
        {
        }
        else
        {
            break;
        }
    }
    new File:datei3=fopen(pfad,io_write);
    fwrite(datei3,string);
    fclose(datei3);
    //Absender, Empfänger, Datum, Uhrzeit, Textinhalt, löschena, löschene, Klasse
}

CMD:sellgun(playerid, params[])
{
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pJob] != 18) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du bist kein Waffendealer.");
    new dialogText[256];
    dialogText = "Waffe\tWaffen-ID\tWaffenteile\tMunition\n";
    for (new i; i < sizeof(g_sellGuns); i++) format(dialogText, sizeof(dialogText), "%s%s\t%d\t%d\t%d\n", dialogText, g_sellGuns[i][SELL_GUN_NAME],
        g_sellGuns[i][SELL_GUN_ID], g_sellGuns[i][SELL_GUN_MATS], g_sellGuns[i][SELL_GUN_AMMO]);

    return ShowPlayerDialog(playerid, DIALOG_SELLGUN_MAIN, DIALOG_STYLE_TABLIST_HEADERS, "{BDBDBD}Waffenverkauf - Waffenübersicht", dialogText, "Auswählen", "Abbrechen");
}

CMD:sellkekse(playerid, params[])
{
    new pID, menge, preis, Float:x, Float:y, Float:z, message[128];
    if (sscanf(params, "uii", pID, menge, preis)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Sellkekse [SpielerID/Name] [Menge] [Preis]");
    if (playerid == pID) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber keine Kekse verkaufen.");
    if (preis < 1 || preis > 100000000) return SendClientMessage(playerid, COLOR_RED, "Der Preis muss zwischen $1 und $100.000.000 liegen.");
    GetPlayerPos(pID, x, y, z);
    if (!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
    if (menge > Spieler[playerid][pKekse]) return SendClientMessage(playerid, COLOR_RED, "Soviele Kekse besitzt du nicht.");
    if (menge <= 0) return SendClientMessage(playerid, COLOR_RED, "Das macht keinen Sinn!");
    if (preis/menge < 25 || preis/menge > 45) return SendClientMessage(playerid, COLOR_RED, "Der aktuelle Stückpreis von Keksen liegt bei $25 - $45 pro Keks.");
    format(message, sizeof(message), "%i %i %i", playerid, menge, preis);
    SetPVarString(pID, "BUY_COOKIES", message);

    format(message, sizeof(message), "Du hast von %s ein Angebot für Kekse erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
    SendClientMessage(pID, COLOR_LIGHTBLUE, message);
    SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Kekse' um das Angebot anzunehmen.");
    format(message, sizeof(message), "Du hast %s deine Kekse angeboten. Menge: %d, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
    return SendClientMessage(playerid, COLOR_LIGHTBLUE, message);
}

CMD:sellwaffenteile(playerid, params[])
{
    new pID, menge, preis, Float:x, Float:y, Float:z;
    if(sscanf(params, "uii", pID, menge, preis))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sellwaffenteile [SpielerID/Name] [Menge] [Preis]");
    if (playerid == pID) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber keine Waffenteile verkaufen.");
    if(Spieler[playerid][pJob] != 18)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Waffendealer.");
    GetPlayerPos(pID, x,y,z);
    if(preis < 1 || preis > 100000000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Preis sollte zwischen $1 und $100.000.000 liegen.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
    if(menge > Spieler[playerid][pWaffenteile])return SendClientMessage(playerid, COLOR_RED, "Soviele Waffenteile besitzt du nicht.");
    if( menge < 0 ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Betrag kann nicht negativ sein!");
    }
    if(preis/menge < 20||preis/menge > 25) {
        return SendClientMessage(playerid,COLOR_RED,"Der aktuelle Stückpreis bei Waffenteilen liegt im Rahmen von 20$ bis 25$!");
    }
    // Goldkiller: WTF ist das ???? :
    // if(menge < 999999999999999 )return SendClientMessage(playerid, COLOR_RED, "Ungültige Anzahl");

    SetPVarString(playerid,"SellWTeile",params);
    /*
    pDrogenID[pID] = playerid;
    pDrogenPreis[pID] = preis;
    pDrogenMenge[pID] = menge;

    //Spieler[pID][pDrugs] += menge;
    //Spieler[playerid][pDrugs] -= menge; // dein komischer bug ( Entfernt 20.05.2013 )
    format(string, sizeof(string), "Du hast von %s eine Anfrage für Waffenteile erhalten. Menge: %d, Preis: $%d.", GetName(playerid), menge, preis);
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Waffenteile' um das Angebot anzunehmen.");
    format(string, sizeof(string), "Du hast %s deine Waffenteile angeboten. Menge: %d, Preis: $%d.", GetName(pID), menge, preis);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    */
    ShowPlayerDialog(playerid,DIALOG_SELLWTEILE,DIALOG_STYLE_MSGBOX,"Handelsinformation","\
        Der aktuelle Stückpreis bei Waffenteilen liegt zwischen 20$ bis 25$.\n\
        Höhere oder niedrigere Beträge sind unzulässig und werden nach Server Regel §11(Geldwäsche) administrativ bestraft!\n\
        Strafmaß: dauerhafte- oder zeitliche Sperrung, Admin-Verwarnung, Prison oder Inventar-/Geldentzug.\n\
        Jeder Handel wird gespeichert und geprüft!","Einverstanden","Ablehnen");
    return 1;
}

CMD:selldrogen(playerid, params[])
{
    new pID, menge, preis, Float:x, Float:y, Float:z;
    if(sscanf(params, "uii", pID, menge, preis))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Selldrogen [SpielerID/Name] [Menge] [Preis]");
    if (playerid == pID) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber keine Drogen verkaufen.");
    if(Spieler[playerid][pJob] != 17)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Drogendealer.");
    GetPlayerPos(pID, x,y,z);
    if(preis < 1 || preis > 100000000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Preis muss zwischen $1 und $100.000.000 liegen.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
    if(menge > Spieler[playerid][pDrugs])return SendClientMessage(playerid, COLOR_RED, "Soviel Gramm hast du nicht.");
    if( menge < 0 ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Betrag kann nicht negativ sein!");
    }
    if(preis/menge < 240||preis/menge > 400) {
        return SendClientMessage(playerid,COLOR_RED,"Der aktuelle Stückpreis bei Drogen liegt im Rahmen von 80$ bis 120$!");
    }
    // Goldkiller: WTF ist das ???? :
    // if(menge < 999999999999999 )return SendClientMessage(playerid, COLOR_RED, "Ungültige Anzahl");

    SetPVarString(playerid,"SellDrugs",params);
    /*
    pDrogenID[pID] = playerid;
    pDrogenPreis[pID] = preis;
    pDrogenMenge[pID] = menge;

    //Spieler[pID][pDrugs] += menge;
    //Spieler[playerid][pDrugs] -= menge; // dein komischer bug ( Entfernt 20.05.2013 )
    format(string, sizeof(string), "Du hast von %s eine Anfrage für Drogen erhalten. Menge: %d, Preis: $%d.", GetName(playerid), menge, preis);
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Drogen' um das Angebot anzunehmen.");
    format(string, sizeof(string), "Du hast %s deine Drogen angeboten. Menge: %d, Preis: $%d.", GetName(pID), menge, preis);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    */
    ShowPlayerDialog(playerid,DIALOG_SELLDRUGS,DIALOG_STYLE_MSGBOX,"Handelsinformation","\
        Der aktuelle Verkaufspreis je Gramm liegt zwischen 240$ bis 400$.\n\
        Höhere oder niedrigere Beträge sind unzulässig und werden nach Server Regel §11(Geldwäsche) administrativ bestraft!\n\
        Strafmaß: dauerhafte- oder zeitliche Sperrung, Admin-Verwarnung, Prison oder Inventar-/Geldentzug.\n\
        Jeder Drogenhandel wird gespeichert und geprüft!","Einverstanden","Ablehnen");
    return 1;
}

CMD:sellwantedcodes(playerid, params[])
{
    if (Spieler[playerid][pJob] != 21) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wanted-Hacker.");
    new pID, menge, preis, Float:x, Float:y, Float:z;
    if (sscanf(params, "uii", pID, menge, preis)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Sellwantedcodes [SpielerID/Name] [Menge] [Preis]");
    if (playerid == pID) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber keine Wantedcodes verkaufen.");
    if (preis < 1 || preis > 100000000) return SendClientMessage(playerid, COLOR_ORANGE, "Der Preis sollte zwischen $1 und $100.000.000 liegen.");
    if (!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");

    GetPlayerPos(pID, x, y, z);
    if (!IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
    if (menge < 0) return SendClientMessage(playerid,COLOR_RED,"Der Betrag kann nicht negativ sein!");
    if (menge > Spieler[playerid][pWantedCodes]) return SendClientMessage(playerid, COLOR_RED, "Soviele Wantedcodes hast du nicht.");

    if (preis / menge < 2000 || preis / menge > 2500) {
        return SendClientMessage(playerid, COLOR_RED, "Der aktuelle Stückpreis bei Wantedcodes liegt im Rahmen von 2.000$ bis 2.500$!");
    }

    SetPVarString(playerid, "SELL_WCODES", params);
    ShowPlayerDialog(playerid, DIALOG_SELLWCODES, DIALOG_STYLE_MSGBOX, "Handelsinformation","\
        Der aktuelle Verkaufspreis je Code liegt zwischen 2.000$ bis 2.500$.\n\
        Höhere oder niedrigere Beträge sind unzulässig und werden nach Server Regel §11 (Geldwäsche) administrativ bestraft!\n\
        Strafmaß: dauerhafte- oder zeitliche Sperrung, Admin-Verwarnung, Prison oder Inventar-/Geldentzug.\n\
        Jeder Wantedcodehandel wird gespeichert und geprüft!", "Einverstanden", "Ablehnen");
    return 1;
}

CMD:gmx(playerid)
{
    if(Spieler[playerid][pAdmin] < 6)return SendClientMessage(playerid, COLOR_RED, "* Du besitzt nicht die benötigten Rechte.");
    if(GMXMode == 1)
    {
        SendClientMessageToAll(COLOR_RED, "ACHTUNG! Der Server wird restartet, warte bitte einen Moment!");
        GMXMode = 0;
        KillTimer(gmxtimer);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            SpawnPlayerEx(i);
        }
    }
    else if(GMXMode == 0)
    {
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            SetPlayerPos(i, 381.1510, -1881.4520, 3.7626);
            InterpolateCameraPos(i, 369.837097, -2046.207153, 7.430351, 370.996215, -1818.170532, 8.961493, 60000);
            InterpolateCameraLookAt(i, 370.090270, -2041.220214, 7.687465, 371.139587, -1813.225585, 9.687144, 60000);
            SendClientMessage(i, COLOR_RED, "Speichere Daten ... Es kann zu starken Lags kommen!");
        }
        SaveAll();
        GMXMode = 1;
        gmxtimer = SetTimer("GMXModeTimer", 3000, 1);
        SendAdminMessage(COLOR_YELLOW, "Der Server kann nun restartet werden!");
    }
    return 1;
}

forward GMXModeTimer();
public GMXModeTimer()
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(GMXMode == 1)
        {
            FreezePlayer(i);
            GameTextForPlayer(i, "~g~SERVER RESTART!!!", 1000, 6);
            return 1;
        }
    }
    return 1;
}

CMD:zuhause(playerid, params[])
{
    if(GetPlayerHouse(playerid) == 999)return SendClientMessage(playerid, COLOR_RED, "Du hast kein Haus.");
    new pHouse = GetPlayerHouse(playerid);
    if( pHouse != 999 ) {
        SetPlayerCheckpointEx(playerid, Haus[pHouse][EnterX], Haus[pHouse][EnterY], Haus[pHouse][EnterZ], 3.0, CP_HOME);
        SendClientMessage(playerid, COLOR_SAMP, "Dein Haus wurde dir Rot auf der Karte markiert!");
    }
    return 1;
}


CMD:leave(playerid) {
    if (Spieler[playerid][pAdmin] < 6) return 1;
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (GetPlayerVirtualWorld(playerid) == VW_PAINTBALLGYMLS + playerid)
        SetPlayerPosEx(playerid, 1738.5869, -1586.3961, 13.5555, 0, VW_MAIN);

    return 1;
}

CMD:paintball(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 6) return 1;
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    SetPlayerPosEx(playerid, PAINTBALLGYMLS_INTERIOR_SPAWN_POINT, MAPS_PAINTBALLGYMLS_INTERIOR, VW_PAINTBALLGYMLS + playerid);
    SetPlayerFacingAngle(playerid, PAINTBALLGYMLS_INTERIOR_SPAWN_POINT_FACING);
    SetCameraBehindPlayer(playerid);
    // if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1735.9580, -1582.5923, 14.1573)) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du bist nicht an der Paintballarena.");
    // if (Spieler[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du musst dafür mindestens Level 3 sein.");
    // new pID;
    // if (sscanf(params, "u", pID)) return SendClientMessage(playerid, COLOR_RED, INFO_STRING "/Paintball [Spieler ID/Name]");
    // if (!IsPlayerInRangeOfPlayer(playerid, pID, 5.0)) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler ist nicht in deiner Nähe.");
    // if (Spieler[pID][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler muss mindestens Level 3 sein.");
    // // Accept stuff
    return 1;
}


CMD:paketentladen(playerid)
{
    if(Spieler[playerid][pJob] == 17)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 7.0, -258.9534,-2181.9905,29.0150))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Entlagerungspunkts.");
        if(Spieler[playerid][pLevel] < 3)return SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 3 sein!");
        new vID = GetPlayerVehicleID(playerid);
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Transporter.");
        if(bestand[vID] < 1)return SendClientMessage(playerid, COLOR_RED, "Du hast nichts beladen!");
        if( aiVehicles[vID] == VEH_DROGEN ) {
            for(new i=0;i<sizeof(drogen);i++)
            {
                if(vID == drogen[i])
                {
                    new newdrugs = bestand[vID]*5;
                    Spieler[playerid][pDrugs] += newdrugs;
                    new string[128];
                    format(string, sizeof(string), "Du hast %d Pakete abgeliefert und %d Drogen erhalten.", bestand[vID], newdrugs);
                    SendClientMessage(playerid, COLOR_GREEN, string);
                    bestand[vID] = 0;
                    PlayerSkillUpgrade(playerid,pDrogenPoints, 4,1);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Transporter!");
        return 1;
    }
    else if(Spieler[playerid][pJob] == 18)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 7.0, -1857.4130,-1618.9630,21.9022))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Entlagerungspunkts.");
        new vID = GetPlayerVehicleID(playerid);
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Transporter.");
        if(bestand[vID] < 1)return SendClientMessage(playerid, COLOR_RED, "Du hast nichts beladen!");
        if( aiVehicles[vID] == VEH_WDEALER ) {
            for(new i=0;i<sizeof(wdealer);i++)
            {
                if(vID == wdealer[i])
                {
                    new newteile = bestand[vID]*100;
                    Spieler[playerid][pWaffenteile] += newteile;
                    new string[128];
                    format(string, sizeof(string), "Du hast %d Pakete abgeliefert und %d Waffenteile erhalten.", bestand[vID], newteile);
                    SendClientMessage(playerid, COLOR_GREEN, string);
                    bestand[vID] = 0;
                    PlayerSkillUpgrade(playerid,pWaffenteilePoints,5,1);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Transporter!");
        return 1;
    }
    return 1;
}

CMD:lagerpunkt(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pJob] == 17) {
        SetPlayerCheckpointEx(playerid, -38.4148, 56.1184, 3.1172, 2.0, CP_NAVI1);
        return SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Der Lagerpunkt für Drogen wurde dir auf der Karte Rot markiert.");
    }
    else if (Spieler[playerid][pJob] == 18) {
        SetPlayerCheckpointEx(playerid, 2348.1086, -2302.4243, 13.5469, 2.0, CP_NAVI1);
        return SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Der Lagerpunkt für Waffenteile wurde dir auf der Karte Rot markiert.");
    }

    return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Für deinen Job gibt es keinen Lagerpunkt.");
}

CMD:paketeinladen(playerid, params[])
{
    if(Spieler[playerid][pJob] == 17)
    {
        new anzahl, string[128];
        if(sscanf(params, "i", anzahl))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Paketeinladen [Anzahl]");
        if(Spieler[playerid][pLevel] < 3)return SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 3 sein!");
        if(anzahl > lagerbestand)return SendClientMessage(playerid, COLOR_RED, "Der Lagerbestand ist leer oder unter deiner gewünschten Anzahl an Paketen!");
        if(anzahl < 0 )return SendClientMessage(playerid, COLOR_RED, "Ungültige Anzahl");
        new
            maxAnzahl = GetPlayerDrogenSkillValue(playerid);
        if(anzahl > maxAnzahl ) {
            new
                String[80];
            format(String,sizeof(String),"Auf Grund deines Drogen-Skills (%d) kannst du nur maximal %d Päckchen transportieren",GetPlayerDrogenSkillLevel(playerid), maxAnzahl);
            return SendClientMessage(playerid, COLOR_RED, String);
        }
        if(!IsPlayerInRangeOfPoint(playerid, 7.0, -38.4148,56.1184,3.1172))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Lagers. Das Lager wird dir mit /Lagerpunkt angezeigt.");
        new vID = GetPlayerVehicleID(playerid);
        new newgeld = anzahl*500;
        if(GetPlayerMoney(playerid) < newgeld)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        new newanzahl = anzahl+bestand[vID];
        if(newanzahl > maxAnzahl )return SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Wagen nicht überladen.");
        //if(bestand[vID] > 5)return SendClientMessage(playerid, COLOR_GREY, "Der Wagen wäre dann voll.");
        if( aiVehicles[vID] == VEH_DROGEN ) {
            for(new i=0;i<sizeof(drogen);i++)
            {
                if(vID == drogen[i])
                {
                    bestand[vID] += anzahl;
                    lagerbestand -= anzahl;
                    format(string, sizeof(string), "Der Wagen wurde mit %d Paketen aufgeladen.", anzahl);
                    SendClientMessage(playerid, COLOR_GREEN, string);
                    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte angezeigt. Bring dort die Pakete hin!");
                    SetPlayerCheckpointEx(playerid, -258.9534,-2181.9905,29.0150, 7.0, CP_SHOWJOB12);
                    GetPlayerPos(playerid,oldposx[playerid],oldposy[playerid],oldposz[playerid]);
                    playertimestamp[playerid]=gettime();
                    GivePlayerCash(playerid, -newgeld);
                    UpdateInfos(); // lagerbestand
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Drogen-Transporter.");
        return 1;
    }
    else if(Spieler[playerid][pJob] == 18)
    {
        new anzahl, string[128];
        if(sscanf(params, "i", anzahl))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Paketeinladen [Anzahl]");
        if(Spieler[playerid][pLevel] < 3)return SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 3 sein!");
        if(!IsPlayerInRangeOfPoint(playerid, 7.0, 2348.1086,-2302.4243,13.5469))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Lagers. Das Lager wird dir mit /Lagerpunkt angezeigt.");
        if(anzahl < 0 )return SendClientMessage(playerid, COLOR_RED, "Ungültige Anzahl");
        new
            maxAnzahl = GetPlayerWaffenteileSkillValue(playerid);
        if(anzahl > maxAnzahl ) {
            new
                String[120];
            format(String,sizeof(String),"Auf Grund deines Waffendealer-Skills (%d) kannst du nur maximal %d Päckchen transportieren",GetPlayerWaffenteileSkillLevel(playerid), maxAnzahl);
            return SendClientMessage(playerid, COLOR_RED, String);
        }
        new vID = GetPlayerVehicleID(playerid);
        new newgeld = anzahl*500;
        if(GetPlayerMoney(playerid) < newgeld)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
        new newanzahl = anzahl+bestand[vID];
        if(newanzahl > maxAnzahl) return SendClientMessage(playerid, COLOR_ORANGE, "Du kannst den Wagen nicht überladen.");
        if( aiVehicles[vID] == VEH_WDEALER ) {
            for(new i=0;i<sizeof(wdealer);i++)
            {
                if(vID == wdealer[i])
                {
                    bestand[vID] += anzahl;
                    format(string, sizeof(string), "Der Wagen wurde mit %d Paketen aufgeladen.", anzahl);
                    SendClientMessage(playerid, COLOR_GREEN, string);
                    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte angezeigt. Bring dort die Pakete hin!");
                    SetPlayerCheckpointEx(playerid, -1857.4130,-1618.9630,21.9022, 7.0, CP_SHOWJOB12);
                    GetPlayerPos(playerid,oldposx[playerid],oldposy[playerid],oldposz[playerid]);
                    playertimestamp[playerid]=gettime();
                    GivePlayerCash(playerid, -newgeld);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Waffen-Transporter.");
        return 1;
    }
    return 1;
}

CMD:gotopos(playerid, params[])
{
    new Float:x, Float:y, Float:z, string[128];
    if(sscanf(params, "fff", x,y,z))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gotopos [Float-X] [Float-Y] [Float-Z]");
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new vID = GetPlayerVehicleID(playerid);
    if(IsPlayerInAnyVehicle(playerid))
    {
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i])
            {
                if(GetPlayerVehicleID(i) == vID)
                {
                    new Seat = GetPlayerVehicleSeat(i);
                    SetVehiclePos(vID, x,y,z);
                    PutPlayerInVehicle(i, vID, Seat);
                    if(IsTrailerAttachedToVehicle(vID))
                    {
                        new trID = GetVehicleTrailer(vID);
                        SetVehiclePos(trID, x,y,z);
                        AttachTrailerToVehicle(trID, vID);
                    }
                }
            }
        }
    }
    else
    {
        SetPlayerPos(playerid, x,y,z);
    }
    format(string, sizeof(string), "Du hast dich zur folgenden Koordinate teleportiert: %f, %f, %f", x,y,z);
    SendClientMessage(playerid, COLOR_GREEN, string);
    return 1;
}

CMD:stadthalle(playerid)
{
    if(pCheckpoint[playerid] == CP_TUTORIAL4)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Den Personalausweis sowie deinen Job kannst du natürlich auch im späteren Verlauf aussuchen!");
        SendClientMessage(playerid, COLOR_GREEN, "Du kannst ihn natürlich auch jetzt aussuchen. Wenn du dies getan hast, gehe wieder nach draußen!");
        SetPlayerCheckpointEx(playerid, 387.5433,173.5221,1008.3828, 5.0, CP_TUTORIAL5);
    }
    if (!IsPlayerInRangeOfPoint(playerid, 2.0, CITYHALL_INTERIOR_STADTHALLE)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Stadthalle am Informationspunkt.");
    new
        String[228];
    String = COLOR_HEX_WHITE"Personalausweis beantragen"COLOR_HEX_ORANGE" ($200)"COLOR_HEX_WHITE"\n------------\nArbeitsamt:\nBerufe\nSelbstständigkeit\n------------";
    if( Spieler[playerid][pHartz4]  == 0) {
        format(String,sizeof(String),"%s\nArbeitslosengeld beantragen ( +"#HARTZ4_GELD"$ )",String);
    }
    else {
        format(String,sizeof(String),"%s\nArbeitslosengeld stornieren",String);
    }
    ShowPlayerDialog(playerid, DIALOG_STADTHALLE, DIALOG_STYLE_LIST, "Stadthalle", String, "Auswählen", "Abbrechen");
    return 1;
}

CMD:illegalejobs(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, JEFF_COORDS)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht bei Jeff.");
    SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Mh.. Du willst also dein Geld auf eine andere Weise verdienen?");
    SendClientMessage(playerid, COLOR_WHITE, "Ich hab da so einige Jobs für dich auf Lager. Schau dich um!");
    ShowPlayerDialog(playerid, DIALOG_SCHWARZBERUF, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nTaschendieb\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
    return 1;
}

CMD:mieten(playerid)
{
    if(Spieler[playerid][pLevel] > 3)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht unter Level 4.");
    if(pCar[playerid] != INVALID_VEHICLE_ID)return SendClientMessage(playerid, COLOR_WHITE, "Du hast bereits ein Fahrzeug gemietet. Tippe /Entmieten.");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, BIKERENTAL_NOOBSPAWN_COORDS) && !IsPlayerInRangeOfPoint(playerid, 2.0, BIKERENTAL_DRIVINGSCHOOL_COORDS) && !IsPlayerInRangeOfPoint(playerid, 2.0, BIKERENTAL_CITYHALL_COORDS))
    {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Verleih.");
    }
    ShowPlayerDialog(playerid, DIALOG_MIETEN, DIALOG_STYLE_LIST, "Mieten eines Fahrzeugs", "Bike - $250\nMountain Bike - $300\nBMX - $250\nFaggio - $500", "Mieten", "Abbrechen");
    return 1;
}

/*CMD:entmieten(playerid)
{
    if(pCar[playerid] == INVALID_VEHICLE_ID)return SendClientMessage(playerid, COLOR_WHITE, "Du hast kein Fahrzeug gemietet.");
    SendClientMessage(playerid, COLOR_GREEN, "Du hast dein Mietfahrzeug wieder abgegeben.");
    DestroyVehicle(pCar[playerid]);
    aiVehicles[ pCar[playerid] ] = VEH_INVALID;
    pCar[playerid] = INVALID_VEHICLE_ID;
    return 1;
}*/

CMD:entmieten(playerid)
{
    if(Spieler[playerid][pVehicleVerleih] == INVALID_VEHICLE_ID && pCar[playerid] == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_WHITE, "Du hast kein Fahrzeug gemietet.");
    SendClientMessage(playerid, COLOR_GREEN, "Du hast dein Mietfahrzeug wieder abgegeben.");
    if (pCar[playerid] != INVALID_VEHICLE_ID) {
        DestroyVehicle(pCar[playerid] );
        aiVehicles[pCar[playerid] ] = VEH_INVALID;
        pCar[playerid] = INVALID_VEHICLE_ID;
    }

    if (Spieler[playerid][pVehicleVerleih] != INVALID_VEHICLE_ID) {
        DestroyVehicle(Spieler[playerid][pVehicleVerleih]);
        aiVehicles[Spieler[playerid][pVehicleVerleih]] = VEH_INVALID;
        Spieler[playerid][pVehicleVerleih] = INVALID_VEHICLE_ID;
    }
    return 1;
}

CMD:joblock(playerid)
{
    if(Spieler[playerid][pJob] == 0)// Arbeitslos
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist Arbeitslos.");
        return 1;
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    if( !vehicleid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in einem Fahrzeug.");
    }
    // So geht es viel schneller
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if( VEH_DROGEN <= aiVehicles[vehicleid] <= VEH_KFZCARS ) {
        if(doors == VEHICLE_PARAMS_ON)
        {
            UnLockCar(vehicleid);
            GameTextForPlayer(playerid, "~w~Job-Fahrzeug~n~~g~Aufgeschlossen", 3000, 4);
        }
        else if(doors == VEHICLE_PARAMS_OFF || doors == VEHICLE_PARAMS_UNSET)
        {
            LockCar(vehicleid);
            GameTextForPlayer(playerid, "~w~Job-Fahrzeug~n~~r~Abgeschlossen", 3000, 4);
        }
    }
    return 1;
}

CMD:vlock(playerid,params[])
{
    if( Spieler[playerid][pVehicleVerleih] != INVALID_VEHICLE_ID)
    {
        new engine, lights, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx( Spieler[playerid][pVehicleVerleih], engine, lights, alarm, doors, bonnet, boot, objective);
        if(doors == VEHICLE_PARAMS_ON)
        {
            UnLockCar( Spieler[playerid][pVehicleVerleih]);
            GameTextForPlayer(playerid, "~w~Verleih-Fahrzeug~n~~g~Aufgeschlossen", 3000, 4);
        }
        else if(doors == VEHICLE_PARAMS_OFF || doors == VEHICLE_PARAMS_UNSET)
        {
            LockCar( Spieler[playerid][pVehicleVerleih]);
            GameTextForPlayer(playerid, "~w~Verleih-Fahrzeug~n~~r~Abgeschlossen", 3000, 4);
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "Du hast kein Fahrzeug geliehen.");
        return 1;
    }
    return 1;
}

COMMAND:mietlock(playerid,params[]) {
    return cmd_vlock(playerid,params);
}
COMMAND:deakaccount(playerid,params[])
{
    new pname[32];
    if(sscanf(params,"s[32]",pname))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Deakaccount [SpielerName]");
    if(Spieler[playerid][pAdmin]>=3)
    {
        new query[256];
        format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s'",pname);
        if(mysql_pquery(query , THREAD_DEAKTACC , playerid, gSQL,MySQLThreadOwner)<=0)
        {
            if(!IsPlayerConnected(GetPlayerIdFromName(pname)))
            {
                new string[200];
                format(query, sizeof(query), "UPDATE `accounts` SET `Deakacc` = '1' ,`Deakaccadmin` = '%s' WHERE `Name` = '%s'",pname);
                mysql_pquery(query ,THREAD_AKTACC , playerid, gSQL,MySQLThreadOwner);
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast den Account erfolgreich deaktiviert");
                format(string,200,"%s %s hat den Account von %s deaktiviert.", GetPlayerAdminRang(playerid), GetName(playerid), pname);
                SendUCPAktenEintrag(playerid,GetName(playerid),pname,string);
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Dieser Spieler ist online, du kannst nur Spieler die offline sind deaktivieren");
            }
        }
        else
        {
            SendClientMessage(playerid,COLOR_RED,"Du kannst nur Spieler deaktivieren!-");
        }
    }
    return 1;
}
COMMAND:aktaccount(playerid,params[])
{
    new pname[32];
    if(sscanf(params,"s[32]",pname))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Aktaccount [SpielerName]");
    if(Spieler[playerid][pAdmin]>=3)
    {
        new query[256];
        format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s'",pname);
        if(mysql_pquery(query , THREAD_AKTACC , playerid, gSQL,MySQLThreadOwner)==100)
        {
            new string[200];
            format(query, sizeof(query), "UPDATE `accounts` SET `Deakacc` = '0' WHERE `Name` = '%s'",pname);
            mysql_pquery(query ,THREAD_AKTACC , playerid, gSQL,MySQLThreadOwner);
            SendClientMessage(playerid,COLOR_YELLOW,"Du hast den Account erfolgreich aktiviert");
            format(string,200,"%s %s hat den Account von %s aktiviert.", GetPlayerAdminRang(playerid), GetName(playerid), pname);
            SendUCPAktenEintrag(playerid,GetName(playerid),pname,string);
        }
    }
    return 1;
}
COMMAND:frakwarn(playerid,params[])
{
    new spielerid,wanzahl;
    if(sscanf(params,"ui",spielerid,wanzahl))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /frakwarn [Spielername] [Anzahl]");
    if(IsPlayerConnected(spielerid))
    {
        if(wanzahl!=0)
        {
            if(Spieler[playerid][pRank] >= 5)
            {
                if(Spieler[playerid][pFraktion]==Spieler[spielerid][pFraktion])
                {
                    if(Spieler[spielerid][pRank]!=6)
                    {
                        new string[200];
                        format(string,200,"Du hast dem Spieler %s erfolgreich %i Verwarnungen erteilt.",GetName(spielerid),wanzahl);
                        Spieler[spielerid][pfrakwarn]+=wanzahl;
                        SendClientMessage(playerid,COLOR_YELLOW,string);
                        format(string,200,"Du hast von %s %i Verwarnungen bekommen, du hast nun %i Verwarnungen.",GetName(playerid),wanzahl,Spieler[spielerid][pfrakwarn]);
                        SendClientMessage(spielerid,COLOR_RED,string);
                        if(Spieler[spielerid][pfrakwarn]>=3)
                        {
                            SendClientMessage(spielerid,COLOR_RED,"Du wurdest wegen zu vielen Verwarnungen aus der Fraktion gekickt.");
                            Spieler[spielerid][pFraktion] = 0;
                            if(Spieler[spielerid][pSex] == 1){ SetPlayerSkinEx(spielerid, 2);}
                            else if(Spieler[spielerid][pSex] == 2){ SetPlayerSkinEx(spielerid, 11);}
                            Spieler[spielerid][pFrakLohn] = 0;
                            Spieler[spielerid][pRank] = 0;
                            SaveAccount(spielerid);
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du kannst den Leader nicht verwarnen.");
                    }
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der selben Fraktion wie der Spieler.");
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Co/Leader-Rank.");
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du musst mindestens eine Verwarnung erteilen.");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Angegebener Spieler ist nicht online.");
    }
    return 1;
}
COMMAND:delfrakwarn(playerid,params[])
{
    new spielerid,wanzahl;
    if(sscanf(params,"ui",spielerid,wanzahl))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /delfrakwarn [Spielername] [Anzahl]");
    if(IsPlayerConnected(spielerid))
    {
        if(wanzahl!=0)
        {
            if(Spieler[playerid][pRank] >= 5)
            {
                if(Spieler[playerid][pFraktion]==Spieler[spielerid][pFraktion])
                {
                    if(Spieler[spielerid][pRank]!=6)
                    {
                        if(Spieler[spielerid][pfrakwarn]>0)
                        {
                            if(wanzahl>Spieler[spielerid][pfrakwarn])
                            {
                                wanzahl=Spieler[spielerid][pfrakwarn];
                            }
                            new string[200];
                            format(string,200,"Du hast dem Spieler %s erfolgreich %i Verwarnungen entzogen.",GetName(spielerid),wanzahl);
                            Spieler[spielerid][pfrakwarn]-=wanzahl;
                            if(Spieler[spielerid][pfrakwarn]<0)
                            {
                                Spieler[spielerid][pfrakwarn]=0;
                            }
                            SendClientMessage(playerid,COLOR_YELLOW,string);
                            format(string,200,"Du hast von %s %i Verwarnungen entzogen bekommen, du hast nun %i Verwarnungen.",GetName(playerid),wanzahl,Spieler[spielerid][pfrakwarn]);
                            SendClientMessage(spielerid,COLOR_RED,string);
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du kannst den Leader nicht verwarnen.");
                    }
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der selben Fraktion wie der Spieler.");
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Co/Leader-Rank.");
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du musst mindestens eine Verwarnung erteilen.");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Angegebener Spieler ist nicht online.");
    }
    return 1;
}

CMD:lock(playerid)
{
    if(pCar[playerid] != INVALID_VEHICLE_ID)
    {
        new engine, lights, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx(pCar[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
        if(doors == VEHICLE_PARAMS_ON)
        {
            UnLockCar(pCar[playerid]);
            GameTextForPlayer(playerid, "~w~Miet-Fahrzeug~n~~g~Aufgeschlossen", 3000, 4);
        }
        else if(doors == VEHICLE_PARAMS_OFF || doors == VEHICLE_PARAMS_UNSET)
        {
            LockCar(pCar[playerid]);
            GameTextForPlayer(playerid, "~w~Miet-Fahrzeug~n~~r~Abgeschlossen", 3000, 4);
        }
    }
    else
    {
        // vllt /veh
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( vehicleid && aiVehicles[ vehicleid ] == VEH_CAR  ) {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                new engine, lights, alarm, doors, bonnet, boot, objective;
                GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
                if(doors == VEHICLE_PARAMS_ON)
                {
                    UnLockCar(vehicleid);
                    GameTextForPlayer(playerid, "~w~Fahrzeug~n~~g~Aufgeschlossen", 3000, 4);
                }
                else if(doors == VEHICLE_PARAMS_OFF || doors == VEHICLE_PARAMS_UNSET)
                {
                    LockCar(vehicleid);
                    GameTextForPlayer(playerid, "~w~Fahrzeug~n~~r~Abgeschlossen", 3000, 4);
                }
            }
            else {
                SendClientMessage(playerid, COLOR_WHITE, "Nur der Fahrer kann das Fahrzeug abschließen.");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_WHITE, "Du hast kein Fahrzeug gemietet.");
        }
        return 1;
    }
    return 1;
}

CMD:guthaben(playerid)
{
    new string[128];
    if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
        format(string, sizeof(string), COLOR_HEX_WHITE"Dein Handy-Guthaben beträgt "COLOR_HEX_ORANGE"$/. ( Handy-Vertrag )");
    }
    else {
        format(string, sizeof(string), COLOR_HEX_WHITE"Dein Handy-Guthaben beträgt "COLOR_HEX_ORANGE"$%s.", AddDelimiters(Spieler[playerid][pHandyGeld]));
    }
    SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:abnehmen(playerid)
{
    new string[128];
    if(CurrentPhone[playerid] != 999)
    {
        SendClientMessage(playerid, COLOR_ORANGE, "Du telefonierst bereits...");
        return 1;
    }
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(CurrentPhone[i] == playerid)
            {
                if(Spieler[playerid][pMuted]== 1) return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du kannst nicht telefonieren während zu gemuted bist");
                if(Spieler[playerid][pTot] == 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht telefonieren während du tot bist!");
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x,y,z);
                CurrentPhone[playerid] = i;
                SendClientMessage(i, COLOR_YELLOW, "Der Spieler hat den Hörer abgenommen.");
                format(string, sizeof(string), "* %s geht an sein/ihr Handy.", GetName(playerid));
                SendRoundMessage(x,y,z, COLOR_PURPLE, string);

                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );

                if( TelefonzelleAn[i] == playerid ) {
                    // Telefonzellen anrufen
                    GameTextForPlayer(i, "~r~$-150", 3000, 1);
                    GivePlayerCash(i,-150);
                }
                else {
                    SetPlayerSpecialAction( i, SPECIAL_ACTION_USECELLPHONE );
                }
            }
        }
    }
    return 1;
}

CMD:auflegen(playerid)
{
    new caller = CurrentPhone[playerid];
    if(IsPlayerConnected(caller))
    {
        if(caller != INVALID_PLAYER_ID)
        {
            if(caller != 999)
            {
                if(caller < 999)
                {
                    SendClientMessage(caller, COLOR_YELLOW, "Der Spieler hat aufgelegt ...");
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast aufgelegt.");
                    CurrentPhone[caller] = 999;
                    CurrentPhone[playerid] = 999;
                    if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
                    }
                    else {
                        Spieler[playerid][pHandyGeld] -= 100;
                        GameTextForPlayer(playerid, "~r~$-100", 3000, 1);
                    }
                    if( TelefonzelleAn[caller] == playerid ) {
                        TelefonzelleAn[caller] = INVALID_PLAYER_ID;
                        UnfreezePlayer(caller);
                    }
                    if( TelefonzelleAn[playerid] == caller ) {
                        TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
                        UnfreezePlayer(playerid);
                    }
                    SetPlayerSpecialAction( caller, SPECIAL_ACTION_STOPUSECELLPHONE );
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );

                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:sms(playerid, params[])
{
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][pHandyGeld] < 30)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht mehr genügend Handygeld. ($30)");
    if(Spieler[playerid][pPrisonRun] > 0 ) return SendClientMessage(playerid, COLOR_RED, "Du kannst niemaden anrufen oder Anrufe entgegennehmen wenn du im Straflauf bist!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du Tod bist, kannst du keine SMS schreiben.");
    if(Spieler[playerid][pHandyState] == 0)return SendClientMessage(playerid, COLOR_RED, "Dein Handy ist ausgeschaltet! Mit /Handystatus schaltest du es wieder an.");
    new pPhone, pID, string[144], text[128];
    if(sscanf(params, "is[96]", pPhone, text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sms [Nummer] [Nachricht]");
    if(pPhone == Spieler[playerid][pHandyNr])return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selbst keine Nachricht senden.");
    if(Spieler[playerid][pHandyNr] == 0 )return SendClientMessage(playerid, COLOR_RED, "Du hast noch keine Handy-Nr.");
    if( Spieler[playerid][pLevel] < 2 ) {
        return SendClientMessage(playerid, COLOR_RED, "Aus Sicherheitsgründen musst du Level 2 sein um diese Funktion nutzen zu können!");
    }
    if( Spieler[playerid][pJailed] ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst vom Gefängnis aus keine SMS verschicken!");
    }
    if( bBlockTelecom ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Telekommunikation wurde vom Staat vorübergehend abgeschaltet.");
    }
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pHandyNr] == pPhone && Spieler[i][pHandyNr] != 0 && pPhone != 0)
            {
                pID = i;
                if(Spieler[pID][pHandyState] == 0)return SendClientMessage(playerid, COLOR_RED, "Das Handy des Spielers ist aus.");
                if(IsPlayerConnected(pID))
                {
                    if(pID != INVALID_PLAYER_ID)
                    {
                        PlayAudioStreamForPlayer(pID, "http://lyd-roleplay.de/musik/sms.mp3");
                        format(string, sizeof(string), "[SMS]: %s, Von: %s (Nr. %d)", text, GetName(playerid), Spieler[playerid][pHandyNr]);
                        SendClientMessage(pID, COLOR_YELLOW, string);
                        format(string, sizeof(string), "[SMS] Nachricht versendet - %s, An: %s (Nr: %d)", text, GetName(pID), Spieler[pID][pHandyNr]);
                        SendClientMessage(playerid, COLOR_YELLOW, string);
                        if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
                        }
                        else {
                            GameTextForPlayer(playerid, "~r~$-50", 3000, 1);
                            Spieler[playerid][pHandyGeld] -= 50;
                        }
                        return 1;
                    }
                }
            }
        }
    }
    return 1;
}

CMD:nummer(playerid, params[])
{
    new pID, string[128];
    if (sscanf(params, "u", pID)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Nummer [Spieler ID/Name]");
    if (pID == INVALID_PLAYER_ID || !gPlayerLogged[pID]) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (Spieler[playerid][pPhoneBook] == 0) return SendClientMessage(playerid, COLOR_RED, "Du besitzt noch kein Telefonbuch, kaufe dir eines in einem 24/7-Shop.");
    format(string, sizeof(string), COLOR_HEX_BLUE"Name: "COLOR_HEX_WHITE"%s "COLOR_HEX_ORANGE"|"COLOR_HEX_BLUE" Nummer: "COLOR_HEX_WHITE"%d", GetName(pID), Spieler[pID][pHandyNr]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:chatoff(playerid, params[])
{
    new stra1[64], stra2[64], stra3[64], str4[256],str5[64],str6[64];
    if(pGC[playerid] == 0){stra1=COLOR_HEX_WHITE"Globaler Chat: "COLOR_HEX_RED"Ausgeschaltet";}
    else if(pGC[playerid] == 1){stra1=COLOR_HEX_WHITE"Globaler Chat: "COLOR_HEX_GREEN"Angeschaltet";}
    if(pJC[playerid] == 0){stra2=COLOR_HEX_WHITE"Job Chat: "COLOR_HEX_RED"Ausgeschaltet";}
    else if(pJC[playerid] == 1){stra2=COLOR_HEX_WHITE"Job Chat: "COLOR_HEX_GREEN"Angeschaltet";}
    if(pFC[playerid] == 0){stra3=COLOR_HEX_WHITE"Fraktions Chat: "COLOR_HEX_RED"Ausgeschaltet";}
    else if(pFC[playerid] == 1){stra3=COLOR_HEX_WHITE"Fraktions Chat: "COLOR_HEX_GREEN"Angeschaltet";}
    if(pJL[playerid] == 0){str5=COLOR_HEX_WHITE"Join/Leave Chat: "COLOR_HEX_RED"Ausgeschaltet";}
    else if(pJL[playerid] == 1){str5=COLOR_HEX_WHITE"Join/Leave Chat: "COLOR_HEX_GREEN"Angeschaltet";}
    if(pCC[playerid] == 0){str6=COLOR_HEX_WHITE"Clubmitglied Chat: "COLOR_HEX_RED"Ausgeschaltet";}
    else if(pCC[playerid] == 1){str6=COLOR_HEX_WHITE"Clubmitglied Chat: "COLOR_HEX_GREEN"Angeschaltet";}
    format(str4, sizeof(str4), "%s\n%s\n%s\n%s\n%s", stra1, stra2, stra3,str5,str6);
    ShowPlayerDialog(playerid, DIALOG_CHATOFF, DIALOG_STYLE_LIST, "Chat Status", str4, "Ändern", "Abbrechen");
    return 1;
}


CMD:handystatus(playerid, params[])
{
    new status[16];
    if(sscanf(params, "s[16]", status))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Handystatus [An/Aus]");
    if(strcmp(status, "an", true) == 0)
    {
        Spieler[playerid][pHandyState] = 1;
        SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Handy angeschaltet.");
    }
    else if(strcmp(status, "aus", true) == 0)
    {
        Spieler[playerid][pHandyState] = 0;
        SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Handy ausgeschaltet.");
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Handystatus [An/Aus]");
    return 1;
}

CMD:anrufen(playerid, params[])
{
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst niemaden anrufen oder Anrufe entgegennehmen wenn du Tod bist!");
    if(Spieler[playerid][pPrisonRun] > 0 ) return SendClientMessage(playerid, COLOR_RED, "Du kannst niemaden anrufen oder Anrufe entgegennehmen wenn du im Straflauf bist!");
    if(Spieler[playerid][pHandyState] == 0)return SendClientMessage(playerid, COLOR_RED, "Dein Handy ist ausgeschaltet! Mit /Handystatus schaltest du es wieder an.");
    new pPhone, pID, string[128];
    if(CurrentPhone[playerid] != 999)return SendClientMessage(playerid, COLOR_RED, "Du telefonierst bereits.");
    if(sscanf(params, "i", pPhone))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Anrufen [Nummer]");
    if(Spieler[playerid][pHandyNr] == 0 )return SendClientMessage(playerid, COLOR_RED, "Du hast noch keine Handy-Nr.");
    if(Spieler[playerid][pHandyGeld] < 50 && pPhone != 110 && pPhone != 112 && pPhone != 113 )return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Handyguthaben. ($50)");
    if(pPhone == Spieler[playerid][pHandyNr])return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selbst nicht anrufen.");
    if( Spieler[playerid][pLevel] < 2 ) {
        return SendClientMessage(playerid, COLOR_RED, "Aus Sicherheitsgründen musst du Level 2 sein, um diese Funktion nutzen zu können!");
    }
    if( Spieler[playerid][pJailed] ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst vom Gefängnis aus nicht telefonieren!");
    }
    if( bBlockTelecom ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Telekommunikation wurde vom Staat vorübergehend abgeschaltet.");
    }
    if(pPhone == 110 ) {
        // Notruf
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );

        SendClientMessage(playerid,COLOR_RED,"POLIZEI-NOTRUF");
        SendClientMessage(playerid,COLOR_WHITE,"Hier ist der Notruf der San Andreas Polizei!");
        SendClientMessage(playerid,COLOR_WHITE,"Schilderen Sie bitte kurz die Notsituation.");
        CurrentPhone[playerid] = INVALID_PLAYER_ID;

        // SetRandomPoliceTask(playerid);
        return 1;
    }
    else if(pPhone == 112 ) {
        // Rettungsdienst Notruf
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );

        SendClientMessage(playerid,COLOR_RED,"RETTUNGSDIENST-NOTRUF");
        SendClientMessage(playerid,COLOR_WHITE,"Hier ist die Notrufzentrale der Feuerwehr und Rettungsdienst.");
        SendClientMessage(playerid,COLOR_WHITE,"Schilderen Sie bitte kurz die Notsituation.");
        CurrentPhone[playerid] = INVALID_PLAYER_ID + 1;

        // SetRandomPoliceTask(playerid);
        return 1;
    }
    else if(pPhone == 113 ) {
        // Ordnungsamt Notruf
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );

        SendClientMessage(playerid,COLOR_RED,"ORDNUNGSAMT-SERVICERUF");
        SendClientMessage(playerid,COLOR_WHITE,"Hier ist der Serviceruf des Ordnungsamtes.");
        SendClientMessage(playerid,COLOR_WHITE,"Schilderen Sie bitte kurz den Sachverhalt.");
        CurrentPhone[playerid] = INVALID_PLAYER_ID + 2;

        // SetRandomPoliceTask(playerid);
        return 1;
    }
    else if(pPhone == 7575 ) {
        // Rettungsdienst Notruf
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );

        SendClientMessage(playerid,COLOR_YELLOW,"WHEELMEN-SERVICERUF");
        SendClientMessage(playerid,COLOR_WHITE,"Wir sind ein Befreiungs- und Personenschutzservice.");
        SendClientMessage(playerid,COLOR_WHITE,"Schildere uns bitte kurz den Sachverhalt.");
        CurrentPhone[playerid] = INVALID_PLAYER_ID + 3;

        // SetRandomPoliceTask(playerid);
        return 1;
    }
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pHandyNr] == pPhone && Spieler[i][pHandyNr] != 0 && pPhone != 0)
            {
                pID = i;
                if(Spieler[pID][pHandyState] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Das Handy des Spielers ist aus.");
                if (CurrentPhone[pID] != 999) return SendClientMessage(playerid, COLOR_ORANGE, "Die Leitung ist besetzt...");
                CurrentPhone[playerid] = pID;
                if(IsPlayerConnected(pID))
                {
                    if(pID != INVALID_PLAYER_ID)
                    {
                        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
                        SendClientMessage(playerid, COLOR_WHITE, "Es klingelt...");
                        PlayerPlaySound(pID, 20600, 0.0, 0.0, 0.0);
                        // PlayAudioStreamForPlayer(pID, "http://lyd-roleplay.de/musik/anruf.mp3");
                        format(string, sizeof(string), "Dein Handy klingelt. Anrufer: %s. Tippe '/Abnehmen' um den Anruf anzunehmen.", GetName(playerid));
                        SendClientMessage(pID, COLOR_YELLOW, string);
                        format(string, sizeof(string), "* %s's %s klingelt.", GetName(pID) , GetPlayerHandyName(pID) );
                        new Float:x, Float:y, Float:z;
                        GetPlayerPos(pID, x,y,z);
                        SendRoundMessage(x,y,z,COLOR_PURPLE, string);
                        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );
                    }
                }
            }
        }
    }
    return 1;
}

CMD:tankstand(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new benzinstand, vehicleid = GetPlayerVehicleID(playerid);
    if (!vehicleid) return SendClientMessage(playerid, COLOR_RED, "Du musst in einem Fahrzeug sein.");
    if (sscanf(params, "i", benzinstand)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/tankstand [Kraftstoffmenge]");
    gGas[vehicleid] = benzinstand;
    return SCMFormatted(playerid, COLOR_LIGHTBLUE, "* Du hast den Tankstand deines Fahrzeuges auf %i Liter gesetzt.", benzinstand);
}

CMD:auftanken(playerid, params[])
{
    if (Spieler[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new vehid;
    if (isnull(params)) {
        vehid = GetPlayerVehicleID(playerid);
        if (!vehid) return SendClientMessage(playerid, COLOR_RED, "Du musst in einem Fahrzeug sein.");
    }
    else if (sscanf(params, "i", vehid)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Auftanken [Vehicle ID]");
    new modelid = GetVehicleModel(vehid);
    if (!modelid) return SendClientMessage(playerid, COLOR_RED, "Die Fahrzeug-ID existiert nicht.");
    gGas[vehid] = GasMax[(modelid - 400)];
    return SCMFormatted(playerid, COLOR_LIGHTBLUE, "* Du hast das Fahrzeug mit der ID %i vollgetankt.", vehid);
}

CMD:configplayer(playerid, params[])
{
    new pID, string[128], entry[32], wert;
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "us[32]i", pID, entry, wert))
    {
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Configplayer [SpielerID/Name] [Eingabe] [Wert]");
        SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Level, Respektpunkte, Geld, Job, Fraktion, Fraktionsrank, Gehalt, NeonPremium, Spice, Drogen,");
        SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Safewantedcodes, Waffenteile, Wantedcodes, SafeSpice, SafeDrogen, SafeWaffenteile, Waffensperre");
        SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Bankpin, Bankkonto, Skin, Geschlecht, Premium, Spielstunden, Kekse");
        SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Alizsperre, Flizsperre, Glizsperre, Lkwlizsperre, Mlizsperre");
        return 1;
    }
    if( !IsPlayerConnected(pID)) {
        return SendClientMessage(playerid, COLOR_RED, "Spieler nicht Online");
    }
    if(strcmp(entry, "level", true) == 0)
    {
        if(wert < 1 || wert > 100)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 100 liegen.");
        Spieler[pID][pLevel] = wert;
        SetPlayerScore(pID, wert);
        format(string, sizeof(string), "Dein Level wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast das Level von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Level von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "gehalt", true) == 0)
    {
        if(wert < 0 || wert > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 100.000 liegen.");
        Spieler[pID][pPayCheck] = wert;
        format(string, sizeof(string), "Dein Gehalt wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast das Gehalt von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Gehalt von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "respektpunkte", true) == 0)
    {
        if(wert < 0 || wert > 1000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 1.000 liegen.");
        Spieler[pID][pExp] = wert;
        format(string, sizeof(string), "Deine Respektpunkte wurden von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Respektpunkte von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Respekt von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "fraktionsrank", true) == 0)
    {
        if(wert < 0 || wert > 6)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 6 liegen.");
        Spieler[pID][pRank] = wert;
        format(string, sizeof(string), "Dein Fraktionsrank wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Fraktionsrank von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Fraktionsrank von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "fraktion", true) == 0)
    {
        if(wert < 0 || wert > 22) return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 21 liegen.");
        Spieler[pID][pFraktion] = wert;
        format(string, sizeof(string), "Deine Fraktion wurde von %s %s auf %s gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), factionNames[wert]);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Fraktion von %s auf %s [%d] gesetzt.", GetName(pID), factionNames[wert], wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Fraktion von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "job", true) == 0)
    {
        if(wert < 0 || wert > 24)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 24 liegen.");
        Spieler[pID][pJob] = wert;
        format(string, sizeof(string), "Dein Job wurde von %s %s auf %s gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), jobNames[wert]);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Job von %s auf %s [%d] gesetzt.", GetName(pID), jobNames[wert], wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändern Job von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "skin", true) == 0)
    {
        if(wert < 0 || wert > 311)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 311 liegen.");
        SetPlayerSkinEx(pID, wert);
        format(string, sizeof(string), "Dein Skin wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Skin von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Skin von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "spielstunden", true) == 0)
    {
        if(wert < 0 || wert > 10000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 10.000 liegen.");
        Spieler[pID][pHours] = wert;
        format(string, sizeof(string), "Dein Spielstunden wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Spielstunden von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s setzt Spielstunden von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "geld", true) == 0)
    {
        if(wert > 999999999)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 999.999.999 liegen.");
        SetPlayerCash(pID, wert);
        format(string, sizeof(string), "Dein Geld wurde von %s %s auf $%s gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), AddDelimiters(wert));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast das Geld von %s auf $%s gesetzt.", GetName(pID), AddDelimiters(wert));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Geld von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "drogen", true) == 0)
    {
        if(wert > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 100.000 liegen.");
        Spieler[pID][pDrugs] = wert;
        format(string, sizeof(string), "Dein Drogenbestand wurde von %s %s auf %d Stk gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Drogenbestand von %s auf %d Stk gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Drogenbestand von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "waffenteile", true) == 0)
    {
        if(wert > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 100.000 liegen.");
        Spieler[pID][pWaffenteile] = wert;
        format(string, sizeof(string), "Dein Bestand an Waffenteilen wurde von %s %s auf %d Stk gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Waffenteile Bestand von %s auf %d Stk gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Matsbestand von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "spice", true) == 0)
    {
        if(wert > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 100.000 liegen.");
        Spieler[pID][pSpice] = wert;
        format(string, sizeof(string), "Dein Spicebestand wurde von %s %s auf %d Stk gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Spicebestand von %s auf %d Stk gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Spicebestand von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "bankkonto", true) == 0)
    {
        if(wert > 999999999)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 999.999.999 liegen.");
        Spieler[pID][pBank] = wert;
        format(string, sizeof(string), "Dein Geld auf der Bank wurde von %s %s auf $%s gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), AddDelimiters(wert));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast das Geld von %s Bankkonto auf $%s gesetzt.", GetName(pID), AddDelimiters(wert));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Geld auf Bankkonto von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "kekse", true) == 0)
    {
        if(wert > 999999999)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 999.999.999 liegen.");
        Spieler[pID][pKekse] = wert;
        format(string, sizeof(string), "Dein Bestand an Keksen wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Bestand an Keksen von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Bestand an Keksen von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "wantedcodes", true) == 0)
    {
        if(wert > 999999999)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 999.999.999 liegen.");
        Spieler[pID][pWantedCodes] = wert;
        format(string, sizeof(string), "Deine Wantedcodes wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Wantedcodes von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Bestand an Wantedcodes von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "safewantedcodes", true) == 0)
    {
        if(wert > 999999999)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 999.999.999 liegen.");
        Spieler[pID][pSafeWantedCodes] = wert;
        format(string, sizeof(string), "Deine Wantedcodes in der Safebox wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Wantedcodes in der Safebox von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Bestand an Wantedcodes in Safebox von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "alizsperre", true) == 0)
    {
        if(wert < 0 || wert > 10000000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 10.000.000 liegen.");
        Spieler[pID][punixFSperre] = wert;
        format(string, sizeof(string), "Deine Auto-Lizenzsperre wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Auto-Lizenzsperre von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "mlizsperre", true) == 0)
    {
        if(wert < 0 || wert > 10000000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 10.000.000 liegen.");
        Spieler[pID][punixMotoSperre] = wert;
        format(string, sizeof(string), "Deine Motorrad-Lizenzsperre wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Motorrad-Lizenzsperre von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "flizsperre", true) == 0)
    {
        if(wert < 0 || wert > 10000000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 10.000.000 liegen.");
        Spieler[pID][punixFlSperre] = wert;
        format(string, sizeof(string), "Deine Flug-Lizenzsperre wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Flug-Lizenzsperre von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "glizsperre", true) == 0)
    {
        if(wert < 0 || wert > 10000000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 10.000.000 liegen.");
        Spieler[pID][punixGunSperre] = wert;
        format(string, sizeof(string), "Deine Waffen-Lizenzsperre wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Waffen-Lizenzsperre von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "lkwlizsperre", true) == 0)
    {
        if(wert < 0 || wert > 10000000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 0 und 10.000.000 liegen.");
        Spieler[pID][punixLKWSperre] = wert;
        format(string, sizeof(string), "Deine LKW-Lizenzsperre wurde von %s %s auf %d gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die LKW-Lizenzsperre von %s auf %d gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "geschlecht", true) == 0)
    {
        if(wert < 0 || wert > 2)return SendClientMessage(playerid, COLOR_ORANGE, "Wert zwischen 1 bis 2! 1 = Männlich, 2 = Weiblich");
        Spieler[pID][pSex] = wert;
        format(string, sizeof(string), "Dein Geschlecht wurde von %s %s geändert.", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast das Geschlecht von %s geändert.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Geschlecht von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "bankpin", true) == 0)
    {
        if(wert < 0 || wert > 1)return SendClientMessage(playerid, COLOR_ORANGE, "Wert zwischen 0 bis 1! 0 = BankPIN reset, 1 = Bankkonto sperren");
        Spieler[pID][pBankKontoPin] = wert;
        format(string, sizeof(string), "Deine Bankpin wurde von %s %s resettet.", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Bankpin von %s resettet.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s reset Bankpin von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "safedrogen", true) == 0)
    {
        if(wert > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 100.000 liegen.");
        Spieler[pID][pSafeDrogen] = wert;
        format(string, sizeof(string), "Dein Drogenbestand in der Safebox wurde von %s %s auf %d Stk gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Safebox Drogenbestand von %s auf %d Stk gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Safebox Drogenbestand von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "safespice", true) == 0)
    {
        if(wert > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 100.000 liegen.");
        Spieler[pID][pSafeSpice] = wert;
        format(string, sizeof(string), "Dein Spicebestand in der Safebox wurde von %s %s auf %d Stk gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Safebox Spicebestand von %s auf %d Stk gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Safebox Spicebestand von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "safewaffenteile", true) == 0)
    {
        if(wert > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert sollte zwischen 1 und 100.000 liegen.");
        Spieler[pID][pSafeTeile] = wert;
        format(string, sizeof(string), "Dein Bestand an Waffenteilen in der Safebox wurde von %s %s auf %d Stk gesetzt.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Safebox Waffenteilenbestand von %s auf %d Stk gesetzt.", GetName(pID), wert);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert Safebox Waffenteilenbestand von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "premium", true) == 0)
    {
        if(wert < 0 || wert > 1)return SendClientMessage(playerid, COLOR_ORANGE, "Wert zwischen 0 bis 1! 0 = Keine Club, 1 = Clubstatus");
        Spieler[pID][pDonateRank] = wert;
        format(string, sizeof(string), "Dein Clubstatus wurde durch %s %s geändert.", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Clubstatus von Spieler %s geändert.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert den Premiumstatus von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "waffensperre", true) == 0)
    {
        if(wert < 0 || wert > 10000000)return SendClientMessage(playerid, COLOR_ORANGE, "Wert zwischen 0 bis 1! 0 = Entziehen, 1 = NICHTS");
        Spieler[pID][pWaffenSperre] = wert;
        format(string, sizeof(string), "Dein Waffensperre wurde durch %s %s geändert.", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die Waffensperre von Spieler %s geändert.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert den Status der Waffensperre von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if(strcmp(entry, "neonpremium", true) == 0)
    {
        if(wert < 0 || wert > 1)return SendClientMessage(playerid, COLOR_ORANGE, "Wert zwischen 0 bis 1! 0 = Keine Neon Premium, 1 = Neon Premium");
        Spieler[pID][pPremiumNeon] = wert;
        format(string, sizeof(string), "Dein Neon-Premium wurde durch %s %s geändert.", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast den Neon-Premium von Spieler %s geändert.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        printf("%s ändert den Neon Premium von %s in %d", GetName(playerid), GetName(pID), wert);
        new
            String[140];
        format(String,sizeof(String),"%s %s hat die Daten von Spieler %s überarbeitet! ( [%s gesetzt auf: %d] )", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), entry, wert);
        AdminLog(String);
        return 1;
    }
    else if (!strcmp(entry, "payday", true) && Spieler[playerid][pAdmin] >= 6)
    {
        if (wert < 0 || wert > 59) return SendClientMessage(playerid, COLOR_ORANGE, "Der Wert muss zwischen 0 und 59 liegen.");
        Spieler[pID][pPayDay] = wert;
        format(string, sizeof(string), "Deine PayDay-Zeit wurde von %s %s auf %i Minuten geändert.", GetPlayerAdminRang(playerid), GetName(playerid), wert);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du hast die PayDay-Zeit von Spieler %s auf %i Minuten geändert.", GetName(pID), wert);
        UpdatePayDayTextdraw(pID);
        return SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    }
    return 1;
}

CMD:createtanke(playerid, params[])
{
        new chName[32], Preis;
        if(sscanf(params, "is[32]", Preis, chName))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Createtanke [Preis] [Name]");
        if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
        new query[512], Float:x, Float:y, Float:z;GetPlayerPos(playerid, x,y,z);
        format(query, sizeof(query), "INSERT INTO `tanken` (`ID`,`EnterX`, `EnterY`, `EnterZ`, `Besitzer`, `Name`, `FillCost`, `Kasse`, `Benzin`, `MaxBenzin`, `Preis`) VALUES (NULL,%.2f, %.2f, %.2f, '%s', '%s', %d, %d, %d, %d, %d)", x,y,z, "Niemand", chName, 50, 0, 0, 1000, Preis);
        mysql_pquery(query,THREAD_CREATETANKE,playerid,gSQL,MySQLThreadOwner);
        /*
        -> THREADED
        if( TankeLoadID( mysql_insert_id() ) ) {
            SendClientMessage(playerid, COLOR_WHITE, "Tankstelle wurde gebaut!");
        }
        else {
            SendClientMessage(playerid, COLOR_RED,"Tankstelle wurde nicht erstellt da es keinen FreienIDs gibt.");
        }
        */

        return 1;
}

CMD:createaplatz(playerid, params[])
{
        if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
        new fische, query[256];
        if(sscanf(params, "i", fische))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Createaplatz [Fische]");
        if(fische < 0 || fische > 150)return SendClientMessage(playerid, COLOR_RED, "Die Anzahl sollte sich zwischen 0 und 150 befinden!");
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        new Float:angle;
        GetPlayerFacingAngle(playerid, angle);
        //Create Platz

        format(query, sizeof(query), "INSERT INTO `angel` (`ID`,`PosX`, `PosY`, `PosZ`, `Fische`, `FacingAngle`) VALUES (NULL,%.2f, %.2f, %.2f, %d, %.2f)", x, y, z, fische, angle);
        mysql_pquery(query,THREAD_CREATEAPLATZ,playerid,gSQL,MySQLThreadOwner);
        // -> THREADED
        return 1;
}


CMD:createhouse(playerid, params[])
{
        new chName[32], HouseType, Preis;
        if(sscanf(params, "iis[32]", HouseType, Preis, chName))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Createhouse [Haus-Typ] [Preis] [Name]");
        if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
        new query[1024], Float:x, Float:y, Float:z/* , Float:iX, Float:iY, Float:iZ*/;
        //new Float:px,Float:py,Float:pz;
        GetPlayerPos(playerid, x, y, z);
        //new interior;
        if(HouseType < 1 || HouseType > 23)return SendClientMessage(playerid, COLOR_RED, "Der Haus-Typ muss zwischen 1 und 23 liegen.");
        /*
        else if(HouseType == 1)
        {
                interior = 3;
                iX = 235.508994;
                iY = 1189.169897;
                iZ = 1080.339966;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 2)
        {
                interior = 2;
                iX = 225.756989;
                iY = 1240.000000;
                iZ = 1082.149902;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 3)
        {
                interior = 1;
                iX = 223.043991;
                iY = 1289.259888;
                iZ = 1082.199951;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 4)
        {
                interior = 7;
                iX = 225.630997;
                iY = 1022.479980;
                iZ = 1084.069946;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 5)
        {
                interior = 15;
                iX = 295.138977;
                iY = 1474.469971;
                iZ = 1080.519897;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 6)
        {
                interior = 15;
                iX = 328.493988;
                iY = 1480.589966;
                iZ = 1084.449951;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 7)
        {
                interior = 15;
                iX = 385.803986;
                iY = 1471.769897;
                iZ = 1080.209961;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 8)
        {
                interior = 1;
                iX = 244.411987;
                iY = 305.032989;
                iZ = 999.148437;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 9)
        {
                interior = 2;
                iX = 266.8322;
                iY = 304.8475;
                iZ = 999.1484;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 10)
        {
                interior = 2;
                iX = 2468.0276;
                iY = -1698.2456;
                iZ = 1013.5078;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 11)
        {
                interior = 12;
                iX = 2324.419921;
                iY = -1145.568359;
                iZ = 1050.710083;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 12)
        {
                interior = 5;
                iX = 1261.2876;
                iY = -785.7022;
                iZ = 1091.9063;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 13)
        {
                interior = 10;
                iX = 421.7847;
                iY = 2536.4045;
                iZ = 10.0000;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 14)
        {
                interior = 3;
                iX = 235.4287;
                iY = 1187.1034;
                iZ = 1080.2578;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 15)
        {
                interior = 5;
                iX = 226.7315;
                iY = 1114.2902;
                iZ = 1080.9951;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 16)
        {
                interior = 2;
                iX = 446.9980;
                iY = 1397.4573;
                iZ = 1084.3047;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 17)
        {
                interior = 10;
                iX = 23.8505;
                iY = 1340.4427;
                iZ = 1084.3750;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 18)
        {
                interior = 5;
                iX = 140.3000;
                iY = 1366.2676;
                iZ = 1083.8594;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 19)
        {
                interior = 6;
                iX = 234.0007;
                iY = 1064.0911;
                iZ = 1084.2117;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        else if(HouseType == 20)
        {
                interior = 8;
                iX = 2365.5159;
                iY = -1135.0269;
                iZ = 1050.8750;
                px = 0.0;
                py = 0.0;
                pz = 0.0;
        }
        */
        format(query, sizeof(query), "INSERT INTO `houses` (`ID`,`EnterX`, `EnterY`, `EnterZ`, `Besitzer`, `Name`, `Preis`, `Mieten`, `Lock`, `MietPreis`, `Kasse`,`SellX`,`SellY`,`SellZ`,`SellRot`) VALUES (NULL,%.2f, %.2f, %.2f, '%s', '%s', %d, %d, %d, %d, %d,0.0,0.0,0.0,0.0)", x,y,z,  "Niemand", chName, Preis, 0, 1, 100, 0 );
        mysql_pquery(query,THREAD_CREATEHOUSE,playerid,gSQL,MySQLThreadOwner);
        return 1;
}

forward Servername();
public Servername()
{
    if(serverhost == 1)
    {
        SendRconCommand("hostname [LyD] Live your Dream ~ Roleplay [STARTBONUS]");
        serverhost = 2;
    }
    else if(serverhost == 2)
    {
        SendRconCommand("hostname ** Live your Dream ~ Roleplay [STARTBONUS] **");
        serverhost = 1;
    }
}

CMD:clear(playerid, params[])
{
    new
        pID,
        punkte,
        sGrund[128],
        string[128];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(sscanf(params, "udS(Ohne Angabe)[128]", pID,punkte,sGrund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Clear [SpielerID/Name] [Punkte] [Grund]");
    if(punkte < 1 || punkte > 20)return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht mehr als 20 Wanteds aufeinmal vergeben!");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    //if(!IsPlayerInRangeOfPoint(playerid, 3.0, 238.3031,71.3587,1005.0391) || !IsPlayerInRangeOfPoint(playerid, 3.0, 251.4832,187.7063,1008.1719))return SendClientMessage(playerid, COLOR_GREY, "Du bist nicht im LSPD am Computer.");
    Spieler[pID][pWanteds] -= punkte;
    //SetPlayerWantedLevel(pID,0);
    if( Spieler[pID][pWanteds] < 0 ) {
        Spieler[pID][pWanteds] = 0;
    }
    format(string, sizeof(string), "Polizeibeamter %s hat %d Punkte deiner Akte gelöscht. ( Grund: %s )", GetName(playerid),punkte,sGrund);
    SendClientMessage(pID, COLOR_LIGHTRED2, string);
    format(string, sizeof(string), "Du hast %d Punkte in der Akte von Spieler %s gelöscht. ( Grund: %s )", punkte,GetName(pID),sGrund);
    SendClientMessage(playerid, COLOR_LIGHTRED2, string);
    format(string, sizeof(string), "Polizeibeamter %s hat %d Punkte in der Akte von Spieler %s gelöscht. ( Grund: %s )", GetName(playerid), punkte,GetName(pID),sGrund);
    SendFraktionMessage(1, COLOR_LIGHTRED2, string);
    SendFraktionMessage(2, COLOR_LIGHTRED2, string);
    SendFraktionMessage(16, COLOR_LIGHTRED2, string);
    SendFraktionMessage(18, COLOR_LIGHTRED2, string);
    return 1;
}

CMD:m(playerid, params[])
{
    new msg[96], string[128];
    if(sscanf(params, "s[96]", msg))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /M [Nachricht]");
    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 16)
    {
        format(string, sizeof(string), ">> [ POLIZEI %s: %s ] <<", GetName(playerid), msg);
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 50.0, x,y,z))
            {
                SendClientMessage(i, COLOR_YELLOW, string);
            }
        }
        return 1;
    }
    else if(Spieler[playerid][pFraktion] == 2)
    {
        format(string, sizeof(string), ">> [ FBI %s: %s ] <<", GetName(playerid), msg);
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 50.0, x,y,z))
            {
                SendClientMessage(i, COLOR_YELLOW, string);
            }
        }
        return 1;
    }
    else if(Spieler[playerid][pFraktion] == 3)
    {
        format(string, sizeof(string), ">> [ RETTUNGSDIENST %s: %s] <<", GetName(playerid), msg);
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 50.0, x,y,z))
            {
                SendClientMessage(i, COLOR_YELLOW, string);
            }
        }
        return 1;
    }
    /*else if(Spieler[playerid][pFraktion] == 4)
    {
        format(string, sizeof(string), ">> [ REPORTER %s: %s ] <<", GetName(playerid), msg);
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 50.0, x,y,z))
            {
                SendClientMessage(i, COLOR_YELLOW, string);
            }
        }
        return 1;
    }*/
    else if(Spieler[playerid][pFraktion] == 5)
    {
        format(string, sizeof(string), ">> [ O-AMT %s: %s ] <<", GetName(playerid), msg);
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 50.0, x,y,z))
            {
                SendClientMessage(i, COLOR_YELLOW, string);
            }
        }
        return 1;
    }
    else if(Spieler[playerid][pFraktion] == 18)
    {
        format(string, sizeof(string), ">> [ SOLDAT %s: %s ] <<", GetName(playerid), msg);
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 50.0, x,y,z))
            {
                SendClientMessage(i, COLOR_YELLOW, string);
            }
        }
        return 1;
    }
    else if(Spieler[playerid][pFraktion] == 22)
    {
        format(string, sizeof(string), ">> [ ZOLL %s: %s ] <<", GetName(playerid), msg);
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 50.0, x,y,z))
            {
                SendClientMessage(i, COLOR_YELLOW, string);
            }
        }
        return 1;
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du kannst das Megaphone nicht benutzen!");
        return 1;
    }
}

CMD:ueberweisen(playerid)
{
    if (!(IsPlayerInRangeOfPoint(playerid, 3.0, BANKINTERIORLS_TRANSFER_POINT) || IsPlayerInRangeOfPoint(playerid, 3.0, BANKINTERIORLV_TRANSFER_POINT))) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Bank am Überweisungsschalter.");
    if( Spieler[playerid][pLevel] < 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist unter Level 4 und kannst diese deshalb Funktion nicht nutzen!");
    }
    if( !HasBankKonto(playerid) ) {
        ShowPlayerDialog(playerid, DIALOG_BANKKONTO, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Sie haben noch kein Bankkonto eingerichtet,\n um ein Bankkonto für einmalige 1.200$ einzurichten, \nklicken Sie auf \"einrichten\"", "Einrichten", "Abbrechen");
        return 1;
    }
    if( !HasBankKontoPin(playerid) ) {
        ShowPlayerDialog(playerid, DIALOG_BANKKONTO_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Du musst für dein Bankkonto noch einen Pin festlegen.", "Absenden", "Abbrechen");
        return 1;
    }
    ShowPlayerDialog(playerid, DIALOG_UEBERWEISEN_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Überweisung", COLOR_HEX_WHITE"Bestätige zunächst mit deinem PIN", "Weiter", "Abbrechen");
    return 1;
}

CMD:einladen(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pRank] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Leader-Rank.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Einladen [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pFraktion] > 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist noch in einer Fraktion.");
    if(Spieler[pID][pFrakSperre]) {
        new
            String[128];
        format(String,sizeof(String),"%s hat versucht dich zum Leader zu machen. Du hast allerdings noch eine Fraktionssperre",GetName(playerid));
        SendClientMessage(pID,COLOR_RED,String);
        format(String,sizeof(String),"Du kannst %s nicht zum Leader machen,da er noch eine Fraktions-Sperre hat",GetName(pID));
        SendClientMessage(playerid,COLOR_RED,String);
        return 1;
    }
    if(Spieler[pID][pLevel] < 4 ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst den Spieler nicht einladen, da er unter Level 4 ist!");
        return 1;
    }
    new team[50];
    ReturnPlayerFraktion(playerid, team);
    format(string, sizeof(string), "Du wurdest von %s in die Fraktion %s eingeladen.", GetName(playerid), team);
    SendClientMessage(pID, COLOR_YELLOW, string);
    SendClientMessage(pID, COLOR_YELLOW, "Tippe '/Accept Fraktion' um die Einladung anzunehmen.");
    FrakInviteID[pID] = Spieler[playerid][pFraktion];
    format(string, sizeof(string), "Du hast %s in die Fraktion eingeladen.", GetName(pID));
    SendClientMessage(playerid, COLOR_YELLOW, string);
    printf("%s lädt %s in Fraktion %s ein.", GetName(playerid), GetName(pID), team);
    return 1;
}


CMD:feuern(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pRank] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Co/Leader-Rank.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Feuern [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(!(Spieler[pID][pFraktion] == Spieler[playerid][pFraktion]))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Fraktion.");
    if(Spieler[pID][pRank] == 6)return SendClientMessage(playerid, COLOR_RED, "Du kannst den Leader nicht aus der Fraktion schmeißen.");
    format(string, sizeof(string), "Du wurdest von %s aus der Fraktion gefeuert. Du bist nun wieder Zivilist.", GetName(playerid));
    SendClientMessage(pID, COLOR_YELLOW, string);
    format(string, sizeof(string), "Du hast %s aus der Fraktion gefeuert.", GetName(pID));
    SendClientMessage(playerid, COLOR_YELLOW, string);
    Spieler[pID][pFraktion] = 0;
    if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 2);}
    else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 11);}
    Spieler[pID][pFrakLohn] = 0;
    Spieler[pID][pRank] = 0;
    Spieler[pID][pfrakwarn]=0;
    SaveAccount(pID);
    printf("%s feuert %s aus Fraktion %d", GetName(playerid), GetName(pID), Spieler[playerid][pFraktion]);
    return 1;
}

CMD:radio(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new vID = GetPlayerVehicleID(playerid);
        new mod = GetVehicleModel(vID);
        if(IsBicycle(mod))return SendClientMessage(playerid, COLOR_ORANGE, "Du kannst kein Radio auf einem Fahrrad hören.");
        ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Radiosender", COLOR_HEX_WHITE"Radio ausschalten\n1-Live\nTechnoBase.FM\nHardBase.FM\nI Love Radio\nBreakz.us\nYouFM\nPlanet Radio\nThe Club\nNightWax\nI Love Mashup\nDas Hitradio\nI Love the Battle\nI Love 2Dance\nLogin-Musik\niTunes Hot 40", "Auswählen", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Fahrzeug sein.");
        return 1;
    }
    return 1;
}


/*CMD:givewanted(playerid, params[])
{
    new pID, wanteds, string[128], reason[64];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(sscanf(params, "uis[64]", pID, wanteds, reason))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Givewanted [SpielerID/Name] [Wanteds] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(wanteds < 1 || wanteds > 200)return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht mehr als 200 Wanteds aufeinmal vergeben!");
    // if(Spieler[pID][pFraktion] == 1 || Spieler[pID][pFraktion] == 2)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Wanteds an Beamte vergeben.");
    Spieler[pID][pWanteds] += wanteds;
    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (%s) Reporter: Polizeibeamter %s", reason, GetName(playerid));
    SendClientMessage(pID, COLOR_DARKRED, string);
    format(string, sizeof(string), "Du hast %i Wanteds erhalten!", wanteds);
    SendClientMessage(pID, COLOR_DARKRED, string);
    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[pID][pWanteds]);
    SendClientMessage(pID, COLOR_YELLOW, string);
    format(string, sizeof(string), "HQ: %s (ID: %d) hat ein Verbrechen begangen: %s, over.", GetName(pID), pID, reason, GetName(playerid));
    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
    format(string, sizeof(string), "HQ: Reporter: Polizeibeamter %s, Aktuelles Wantedlevel: %d, over.", GetName(playerid), Spieler[pID][pWanteds]);
    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
    return 1;
}*/

CMD:suicidearrest(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Suicidearrest [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (Spieler[playerid][pTot]) return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Verbrecher verhaften, während du tot bist.");
    if (Spieler[pID][pWanteds] < 4) return SendClientMessage(playerid, COLOR_RED, "Du kannst Verbrecher erst ab 4 Wanteds suizidverhaften.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x, y, z);
    if(IsPlayerInRangeOfPoint(playerid, 10, x, y, z))
    {
        if(Spieler[playerid][pFraktion] == 1)format(string, sizeof(string), ">> LS-Polizeibeamter %s hat den Verbrecher %s%s eingesperrt. <<", GetName(playerid), GetName(pID), Spieler[pID][pWanteds] > 20 ? " ins Alcatraz" : "");
        else if(Spieler[playerid][pFraktion] == 2)format(string, sizeof(string), ">> FBI-Agent %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID), Spieler[pID][pWanteds] > 20 ? " ins Alcatraz" : "");
        else if(Spieler[playerid][pFraktion] == 16)format(string, sizeof(string), ">> LV-Polizeibeamter %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID), Spieler[pID][pWanteds] > 20 ? " ins Alcatraz" : "");
        else if(Spieler[playerid][pFraktion] == 18)format(string, sizeof(string), ">> Soldat %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID), Spieler[pID][pWanteds] > 20 ? " ins Alcatraz" : "");
        else if(Spieler[playerid][pFraktion] == 22)format(string, sizeof(string), ">> Zollbeamter %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID), Spieler[pID][pWanteds] > 20 ? " ins Alcatraz" : "");
        if(Spieler[playerid][pFraktion] == 1) {
            SendJobMessage(6, COLOR_RED, string);
        }
        else {
            SendClientMessageToAll(COLOR_DARKRED, string);
        }
        SendClientMessage(pID, COLOR_GREEN, "* Da du dich gestellt hast, wirst du je Wanted 150 Sekunden anstatt 220 Sekunden je Wanted sitzen!");
        new gehalt = 200*Spieler[pID][pWanteds];
        format(string, sizeof(string), "~w~Gesuchten ~g~eingesperrt~n~+$%s", AddDelimiters(gehalt));
        GameTextForPlayer(playerid, string, 3000, 6);
        Spieler[playerid][pPayCheck] += gehalt;
        GivePlayerCash(pID, -gehalt);

        if( Spieler[pID][pWanteds] >= 20 ) {
            Spieler[pID][pJailed] = 2;
        }
        else {
                Spieler[pID][pJailed] = 1;
        }
        Spieler[pID][pTot] = 0;
        Spieler[pID][pJailTime] = 150*Spieler[pID][pWanteds];
        Spieler[pID][pCrimes] ++;
        Spieler[pID][pTot] = 0;
        Spieler[pID][pTotTime] = 0;
        Spieler[pID][pTotX] = 0.0;
        Spieler[pID][pTotY] = 0.0;
        Spieler[pID][pTotZ] = 0.0;
        Spieler[pID][pWanteds] = 0;
        SpawnPlayerEx(pID);
        if(Spieler[playerid][pFraktion] == 1){format(string, sizeof(string), "HQ: LS-Polizeibeamter %s hat den Straftäter %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
        else if(Spieler[playerid][pFraktion] == 2){format(string, sizeof(string), "HQ: FBI-Agent %s hat den Straftäter %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
        else if(Spieler[playerid][pFraktion] == 16){format(string, sizeof(string), "HQ: LV-Polizeibeamter %s hat den Straftäter %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
        else if(Spieler[playerid][pFraktion] == 18){format(string, sizeof(string), "HQ: Soldat %s hat den Straftäter %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
        else if(Spieler[playerid][pFraktion] == 22){format(string, sizeof(string), "HQ: Zollbeamter %s hat den Straftäter %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
        SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
        SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
        SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
        SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
        SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
    }
    return 1;
}

/*
stock mysql_CheckPlayerNameAccount(playername[MAX_PLAYER_NAME])
{
    new query[128], count;
    mysql_real_escape_string(playername, playername,gSQL,MAX_PLAYER_NAME);
    format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `Name` = '%s'", playername);
    mysql_pquery(query,THREAD_CHECKPLAYERNAMEACCOUNT,INVALID_PLAYER_ID,gSQL,MySQLThreadOwner);
    mysql_store_result();
    count = mysql_num_rows();
    mysql_free_result();
    return count;
}*/

CMD:arrest(playerid, params[])
{
	new pID, string[128];
	if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
	if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Arrest [SpielerID/Name]");
	if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
	if( IsPlayerInRangeOfPoint(pID, 10, LSPD_ARREST_COORDS) || IsPlayerInRangeOfPoint(pID, 10, LSPD_INTERIOR_SURRENDER_POINT) || IsPlayerInRangeOfPoint(pID, 10, 2268.1128,2448.0073,3.5313))

	{
	    if(IsPlayerInRangeOfPoint(playerid, 10, LSPD_ARREST_COORDS) || IsPlayerInRangeOfPoint(pID, 10, LSPD_INTERIOR_SURRENDER_POINT) || IsPlayerInRangeOfPoint(pID, 10, 2268.1128,2448.0073,3.5313) )
	    {
	        if(Spieler[pID][pWanteds] > 0)
	        {
				if(Spieler[playerid][pFraktion] == 1){format(string, sizeof(string), ">> LS-Polizeibeamter %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID));}
				else if(Spieler[playerid][pFraktion] == 2){format(string, sizeof(string), ">> FBI-Agent %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID));}
				else if(Spieler[playerid][pFraktion] == 16){format(string, sizeof(string), ">> LV-Polizeibeamter %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID));}
				else if(Spieler[playerid][pFraktion] == 18){format(string, sizeof(string), ">> Soldat %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID));}
				else if(Spieler[playerid][pFraktion] == 22){format(string, sizeof(string), ">> Zollbeamter %s hat den Verbrecher %s eingesperrt. <<", GetName(playerid), GetName(pID));}
	            if(Spieler[playerid][pFraktion] == 1) {
					SendJobMessage(6, COLOR_RED, string);
	            }
	            else {
					SendClientMessageToAll(COLOR_DARKRED, string);
	            }
				SendClientMessage(pID, COLOR_GREEN, "* Da du dich gestellt hast, wirst du je Wanted 150 Sekunden anstatt 220 Sekunden je Wanted sitzen!");
				new gehalt = (200*Spieler[pID][pWanteds]);
				new pStaatGehalt = (200*Spieler[pID][pWanteds]);
				Kasse[Staat] += pStaatGehalt;
				format(string, sizeof(string), "~w~Gesuchten ~g~eingesperrt~n~+$%s", AddDelimiters( gehalt));
				GameTextForPlayer(playerid, string, 3000, 6);
				Spieler[playerid][pPayCheck] += gehalt;
				GivePlayerCash(pID, -gehalt);

                if( Spieler[pID][pWanteds] >= 50 ) {
                    Spieler[pID][pJailed] = 2;
                }
                else {
                    Spieler[pID][pJailed] = 1;
                }
                Spieler[pID][pTot] = 0;
                Spieler[pID][pJailTime] = 150*Spieler[pID][pWanteds];
                Spieler[pID][pCrimes] ++;
                Spieler[pID][pTotTime] = 0;
                Spieler[pID][pTotX] = 0.0;
                Spieler[pID][pTotY] = 0.0;
                Spieler[pID][pTotZ] = 0.0;
                Spieler[pID][pWanteds] = 0;
                Cuffed[pID] = 0;
                SpawnPlayerEx(pID);
                if(Spieler[playerid][pFraktion] == 1){format(string, sizeof(string), "HQ: LS-Polizeibeamter %s hat den Gesuchten %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
                else if(Spieler[playerid][pFraktion] == 2){format(string, sizeof(string), "HQ: FBI-Agent %s hat den Gesuchten %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
                else if(Spieler[playerid][pFraktion] == 16){format(string, sizeof(string), "HQ: LV-Polizeibeamter %s hat den Gesuchten %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
                else if(Spieler[playerid][pFraktion] == 18){format(string, sizeof(string), "HQ: Soldat %s hat den Gesuchten %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
                else if(Spieler[playerid][pFraktion] == 22){format(string, sizeof(string), "HQ: Zollbeamter %s hat den Gesuchten %s verhaftet, und für %d Sekunden eingesperrt, over.", GetName(playerid), GetName(pID), Spieler[pID][pJailTime]);}
                SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht an der Einsperr-Position in der Garage.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht an der Einsperr-Position in der Garage.");
        return 1;
    }
    return 1;
}

//Animationen
CMD:animlist(playerid)
{
    SendClientMessage(playerid, COLOR_GREEN, "==> Verfügbare Animationen:");
    SendClientMessage(playerid,COLOR_WHITE,"/Handsup, /Drunk, /Bomb, /Getarrested, /Laugh, /Lookout, /Robman, /Wank, /Chairsit, /Celebrate");
    SendClientMessage(playerid,COLOR_WHITE,"/Crossarms, /Lay, /Hide, /Vomit, /Eat, /Wave[1-2], /Taichi, /Pee, /Dance[1-4], /Idles, /Buhen");
    SendClientMessage(playerid,COLOR_WHITE,"/Deal, /Smokem, /Smokef, /Groundsit[1-3], /Chat, /Fucku, /Kiss[1-6], /Angry, /Follow, /Cry");
    SendClientMessage(playerid,COLOR_WHITE,"Stoppen mit Enter");
    return 1;
}

CMD:handsup(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    return 1;
}
CMD:drunk(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
    return 1;
}
CMD:cry(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:buhen(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}
CMD:bomb(playerid)
{
    if (Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if (Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0); // Place Bomb
    return 1;
}
CMD:getarrested(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
    return 1;
}
CMD:laugh(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
    return 1;
}
CMD:lookout(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
    return 1;
}
CMD:robman(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
    return 1;
}
CMD:wank(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
    return 1;
}
CMD:angry(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.0,0,0,0,0,0);
    return 1;
}
CMD:follow(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
    return 1;
}
CMD:crossarms(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
    return 1;
}
CMD:lay(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
    return 1;
}
CMD:hide(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
    return 1;
}
CMD:vomit(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
    return 1;
}
CMD:eat(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
    return 1;
}

CMD:wave(playerid, params[])
{
    new nr;
    if(sscanf(params, "i", nr))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Wave [1-2]");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    if(nr > 2 || nr < 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Wave [1-2]");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    if(nr == 1)
    {
        LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wav
    }
    else if(nr == 2)
    {
        ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:taichi(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
    return 1;
}
CMD:pee(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
    return 1;
}
CMD:chairsit(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"PED","SEAT_idle", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:stretch(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"PLAYIDLES","stretch",4.0,0,0,0,0,0);
    return 1;
}

CMD:idles(playerid, params[])
{
    new nr;
    if(sscanf(params, "i", nr))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Idles [1-2]");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    if(nr > 2 || nr < 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Idles [1-2]");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    if(nr == 1)
    {
        LoopingAnim(playerid,"COP_AMBIENT","Coplook_shake",4.1, 1, 0, 0, 0, 0, 1);
    }
    else if(nr == 2)
    {
        LoopingAnim(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:celebrate(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"benchpress","gym_bp_celebrate", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:dance(playerid, params[])
{
    new nr;
    if(sscanf(params, "i", nr))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Dance [1-4]");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    if(nr > 4 || nr < 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Dance [1-4]");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    if(nr == 1)
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
    }
    else if(nr == 2)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
    }
    else if(nr == 3)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
    }
    else if(nr == 4)
    {
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
    }
    return 1;
}
CMD:copanim(playerid, params[])
{
    new nr;
    if(sscanf(params, "i", nr))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Copanim [1-6]");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    if(nr > 6 || nr < 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Copanim [1-6]");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    if(nr == 1)
    {
        ApplyAnimation(playerid,"POLICE", "CopTraf_Away", 4.1, 0, 0, 0, 0, 0, 1);
    }
    else if(nr == 2)
    {
        ApplyAnimation(playerid,"POLICE", "Cop_move_FWD", 4.1, 1, 1, 1, 1, 1, 1);
    }
    else if(nr == 3)
    {
        ApplyAnimation(playerid,"POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0, 1);
    }
    else if(nr == 4)
    {
        ApplyAnimation(playerid,"POLICE", "CopTraf_Stop", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(nr == 5)
    {
        ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
    }
    else if(nr == 6)
    {
        ApplyAnimation(playerid,"GANGS","leanIN",50.0,0,1,1,1,1);
    }
    return 1;
}
CMD:fallover(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new nr;
    if(sscanf(params, "i", nr))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fallover [1-5]");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    if(nr > 5 || nr < 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fallover [1-5]");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    if(nr == 1)
    {
        ApplyAnimation(playerid,"PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
    }
    else if(nr == 2)
    {
        ApplyAnimation(playerid,"PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
    }
    else if(nr == 3)
    {
        ApplyAnimation(playerid,"PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
    }
    else if(nr == 4)
    {
        ApplyAnimation(playerid,"PED","getup",4.0,0,0,0,0,0);
    }
    else if(nr == 5)
    {
        ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
    }
    return 1;
}
CMD:deal(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
    return 1;
}
CMD:smokem(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Smoke
    return 1;
}
CMD:smokef(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    LoopingAnim(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); // Female Smoking
    return 1;
}

CMD:groundsit(playerid, params[])
{
    new nr;
    if(sscanf(params, "i", nr))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Groundsit [1-3]");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    if(nr > 3 || nr < 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Groundsit [1-3]");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    if(nr == 1)
    {
        LoopingAnim(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(nr == 2)
    {
        ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(nr == 3)
    {
        ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:chatanim(playerid)
{
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du bist noch nicht eingeloggt!");
    new bUseChatAnim = GetPVarInt(playerid, "USE_CHAT_ANIM");
    SetPVarInt(playerid, "USE_CHAT_ANIM", !bUseChatAnim);
    if (bUseChatAnim) return SendClientMessage(playerid, COLOR_PURPLE, "Du hast die Chat-Animation ausgeschaltet.");
    return SendClientMessage(playerid, COLOR_GREEN, "Du hast die Chat-Animation eingeschaltet.");
}

CMD:chat(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
    return 1;
}
CMD:fucku(playerid)
{
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
    return 1;
}
CMD:kiss(playerid, params[])
{
    new nr;
    if(sscanf(params, "i", nr))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kiss [1-6]");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    if(nr > 6 || nr < 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kiss [1-6]");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    if(nr == 1)
    {
        ApplyAnimation(playerid,"KISSING", "Grlfrd_Kiss_01 ", 1.800001, 1, 0, 0, 1, 600);
    }
    else if(nr == 2)
    {
        ApplyAnimation(playerid,"KISSING", "Grlfrd_Kiss_02", 1.800001, 1, 0, 0, 5300, 600);
    }
    else if(nr == 3)
    {
        ApplyAnimation(playerid,"KISSING", "Grlfrd_Kiss_03", 1.800001, 1, 0, 0, 1, 600);
    }
    else if(nr == 4)
    {
        ApplyAnimation(playerid,"KISSING", "Playa_Kiss_01", 1.800001, 1, 0, 0, 1, 600);
    }
    else if(nr == 5)
    {
        ApplyAnimation(playerid,"KISSING", "Playa_Kiss_02", 1.800001, 1, 0, 0, 1, 600);
    }
    else if(nr == 6)
    {
        ApplyAnimation(playerid,"KISSING", "Playa_Kiss_03", 1.800001, 1, 0, 0, 1, 600);
    }
    return 1;
}
//Clubmitglied Animationen
CMD:clubdance1(playerid)
{
    if(!(Spieler[playerid][pDonateRank] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:clubdance2(playerid)
{
    if(!(Spieler[playerid][pDonateRank] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:clubdance3(playerid)
{
    if(!(Spieler[playerid][pDonateRank] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:clubdance4(playerid)
{
    if(!(Spieler[playerid][pDonateRank] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:clubdance5(playerid)
{
    if(!(Spieler[playerid][pDonateRank] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:clubdance6(playerid)
{
    if(!(Spieler[playerid][pDonateRank] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
CMD:clubdance7(playerid)
{
    if(!(Spieler[playerid][pDonateRank] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    if(Spieler[playerid][pTot] == 1)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Animationen ausführen während du verletzt bist.");
    if(Cuffed[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Während du gefesselt bist kannst du keine Animationen ausführen.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)return 1;
    if (IsPlayerFalling(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur eine Animation ausführen, wenn du auf dem Boden bist.");
    MakeAnimation[playerid] = 1;
    TextDrawShowForPlayer(playerid, Leer);
    ApplyAnimation(playerid,"DANCING", "dnce_M_e", 4.0, 1, 0, 0, 0, 0);
    return 1;
}

//Animationen Ende
stock HasBankKonto(playerid) {
    if( Spieler[playerid][pBankKonto] == 0 ) {
        return 0;
    }
    return 1;
}

stock HasBankKontoPin(playerid) {
    if( Spieler[playerid][pBankKontoPin] == INVALID_BANK_PIN ) {
        return 0;
    }
    return 1;
}
CMD:automat(playerid,params[])
{
    #pragma unused params
    if(!IsPlayerAtATM(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist an keinem Bankautomat.");
    SetPlayerAutomatAnim(playerid);
    if( !HasBankKonto(playerid) ) {
        ShowPlayerDialog(playerid, DIALOG_BANKKONTO, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Sie haben noch kein Bankkonto eingerichtet,\n um ein Bankkonto für einmalige 1.200$ einzurichten, \nklicken Sie auf \"einrichten\"", "Einrichten", "Abbrechen");
        return 1;
    }
    if( !HasBankKontoPin(playerid) ) {
        ShowPlayerDialog(playerid, DIALOG_BANKKONTO_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Du musst für dein Bankkonto noch einen Pin festlegen.", "Absenden", "Abbrechen");
        return 1;
    }
    // ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Geld abheben\nGeld anlegen\nKontostand\nBankpin\nGeldcheck einlösen", "Ausführen", "Abbrechen");
    ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Geld abheben\nGeld anlegen\nKontostand\nOnlineBanking", "Ausführen", "Abbrechen");
    return 1;
}

CMD:kanister(playerid)
{
    new vID = GetPlayerVehicleID(playerid);
    if (!vID) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist in keinem Fahrzeug.");
    if (Spieler[playerid][pKanister] == 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt keinen Kanister.");
    if (Refueling[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du tankst gerade!");
    if (vehicleRefueling[vID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Das Fahrzeug wird bereits betankt!");
    if (gGas[vID] == gMaxGas[vID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Das Fahrzeug ist bereits vollgetankt.");
    Spieler[playerid][pKanister]--;
    gGas[vID] += 10;
    if (gGas[vID] > gMaxGas[vID]) gGas[vID] = gMaxGas[vID];
    return SendClientMessage(playerid, COLOR_GREEN, "[INFO] {FFFFFF}Du hast 10 Liter aufgefüllt.");
}

CMD:tanken(playerid)
{
    new t = IsPlayerAtTanke(playerid);
    if (t == 999) return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
    if (!strcmp(Tanke[t][tBesitzer], "Niemand", true)) return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat keinen Besitzer.");
    new vehid = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehid);
    if (!vehid) {
        UnfreezePlayer(playerid);
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Fahrzeug.");
    }

    if (Refueling[playerid] || vehicleRefueling[vehid]) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird bereits betankt.");
    if (IsBicycle(model)) return SendClientMessage(playerid, COLOR_RED, "Fahrräder können nicht aufgetankt werden.");

    LoadTankKraftstoff(playerid,t);
    return 1;
}
/*
CMD:carsellto(playerid, params[])
{
    new pID, string[128], price;
    if(sscanf(params, "ui", pID, price))return SendClientMessage(playerid, COLOR_GREY, "* Benutze /carsellto [SpielerID/Name] [Preis]");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_GREY, "Du kannst dir selbst kein Auto schenken.");
    if(price < 20000 || price > 15000000)return SendClientMessage(playerid, COLOR_GREY, "Der Preis sollte zwischen $20.000 und $15.000.000 liegen.");
    new Float:tempX, Float:tempY, Float:tempZ;
    GetPlayerPos(pID, tempX, tempY, tempZ);
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, tempX, tempY, tempZ))return SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht in deiner Nähe.");
    if(PlayerHaveCar[playerid][PlayerKey[playerid]])
    {
        if(!PlayerHaveCar[pID][PlayerKey[pID]])
        {
            format(string, sizeof(string), "* %s hat dir sein Fahrzeug \"%s\" für $%d angeboten.", GetName(playerid), CarName[PlayerCar[playerid][0][CarModel]-400], price);
            SendClientMessage(pID, COLOR_YELLOW, string);
            format(string, sizeof(string), "* Du hast dein Fahrzeug \"%s\" für $%d für %s angeboten.", CarName[PlayerCar[playerid][0][CarModel]-400], price, GetName(pID));
            SendClientMessage(playerid, COLOR_YELLOW, string);
            SendClientMessage(pID, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Tippe \"/accept carsell\" um den Fahrzeug-Kauf anzunehmen.");
            AcceptCarSell[pID] = playerid;
            AcceptCarSellPreis[pID] = price;
        }
        else
        {
            SendClientMessage(playerid, COLOR_GREY, "Der Spieler hat auf dem Schlüssel bereits ein Fahrzeug.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Du hast auf dem Schlüssel kein Fahrzeug.");
        return 1;
    }
    return 1;
}
*/
stock CreatePlayerCar(playerid,Float:x,Float:y,Float:z,Float:rot,model,color1,color2) {
    new
        query[650];
    format(query,sizeof(query),"INSERT INTO `playercar` (`id`, `owner`, `model`, `posX`, `posY`, `posZ`, `rot`, `nitro`, `hyd`, `wheel`, `ausp`, `sideL`, `sideR`, `fb`, `rb`, `spoiler`, `roof`, `hood`, `vents`, `lamps`, `pj`, `c1`, `c2`, `preis`, `tank`, `state`, `neon1`, `neon2`, `specialtuned`, `numberplate`,`peilsender`,`distance`,`tuv`) VALUES (NULL, '%s', %d, %.2f, %.2f, %.2f, %.2f, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d,'', %d, %d, %d);",
        GetName(playerid),
        model,
        x,
        y,
        z,
        rot,
        0,0,0,0,0,0,0,0,0,0,0,0,0,
        -1,color1,color2,
        0,0,0,
        0,
        0,0,0,0,0,0,0);
    mysql_pquery(query,THREAD_CREATEPLAYERCAR,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock SavePlayerCar(playerid,slot) {
    new
        query[600];
    format(query,sizeof(query),"UPDATE `playercar` SET \
        `owner` = '%s',\
        `model` = %d,\
        `posX` = %.2f,\
        `posY` = %.2f,\
        `posZ` = %.2f,\
        `rot` = %.2f,\
        `nitro` = %d,\
        `hyd` = %d,\
        `wheel` = %d,\
        `ausp` = %d,\
        `sideL` = %d,\
        `sideR` = %d,\
        `fb` = %d,\
        `rb` = %d,\
        `spoiler` = %d,",
        PlayerCar[playerid][slot][CarOwner],
        PlayerCar[playerid][slot][CarModel],
        PlayerCar[playerid][slot][CarPos_x],
        PlayerCar[playerid][slot][CarPos_y],
        PlayerCar[playerid][slot][CarPos_z],
        PlayerCar[playerid][slot][CarRotate],
        PlayerCar[playerid][slot][CarNitro],
        PlayerCar[playerid][slot][CarHyd],
        PlayerCar[playerid][slot][CarWheel],
        PlayerCar[playerid][slot][CarAusp],
        PlayerCar[playerid][slot][CarSideL],
        PlayerCar[playerid][slot][CarSideR],
        PlayerCar[playerid][slot][CarFB],
        PlayerCar[playerid][slot][CarRB],
        PlayerCar[playerid][slot][CarSpoiler]);
    format(query,sizeof(query),"%s \
        `roof` = %d,\
        `hood` = %d,\
        `vents` = %d,\
        `lamps` = %d,\
        `pj` = %d,\
        `c1` = %d,\
        `c2` = %d,\
        `preis` = %d,\
        `tank` = %d,\
        `state` = %d,\
        `neon1` = %d,\
        `neon2` = %d,\
        `numberplate` = '%s',\
        `peilsender` = %d,\
        `specialtuned` = %d, \
        `tuv` = %d, \
        `distance` = %d \
        WHERE `id` = %d",
        query,
        PlayerCar[playerid][slot][CarRoof],
        PlayerCar[playerid][slot][CarHood],
        PlayerCar[playerid][slot][CarVents],
        PlayerCar[playerid][slot][CarLamps],
        PlayerCar[playerid][slot][CarPJ],
        PlayerCar[playerid][slot][CarC1],
        PlayerCar[playerid][slot][CarC2],
        PlayerCar[playerid][slot][CarPreis],
        /*PlayerCar[playerid][slot][CarTank]*/ gGas[ PlayerCar[playerid][slot][CarId] ] ,
        PlayerCar[playerid][slot][CarState],
        PlayerCar[playerid][slot][CarNeon1],
        PlayerCar[playerid][slot][CarNeon2],
        PlayerCar[playerid][slot][CarNumberplate],
        PlayerCar[playerid][slot][CarPeilsender],
        PlayerCar[playerid][slot][isSpecialTuned],
        PlayerCar[playerid][slot][TUV],
        g_VehicleDistance[ PlayerCar[playerid][slot][CarId] ],
        PlayerCar[playerid][slot][Id]);
    mysql_oquery(query,THREAD_SAVEPLAYERCAR,playerid,gSQL);
    return 1;
}

CMD:givecar(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, vID, color1, color2, neon, stuned;
    if(sscanf(params, "uiiiii", pID, vID, color1, color2, neon, stuned)){SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Givecar [SpielerID/Name] [Vehicle-ID] [Color-1] [Color-2] [Neon] [Special-Tuned]"); SendClientMessage(playerid, COLOR_ORANGE, "Neon-Farben: 0 = Keins, 1 = Blau, 2 = Rot, 3 = Grün, 4 = Weiß, 5 = Pink, 6 = Gelb"); SendClientMessage(playerid, COLOR_ORANGE, "Special-Tuned Typen: 1 = Infernus-Tuned"); return 1;}
    if (vID > 611 || vID < 400) return SendClientMessage(playerid, COLOR_RED, "Die Fahrzeug ID muss zwischen 400 und 611 liegen.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    if(!PlayerHaveCar[pID][PlayerKey[pID]])
    {
        CreatePlayerCar(pID,x,y,z,0.0,vID,color1,color2);
        PlayerCar[pID][PlayerKey[pID]][Id]=0;
        PlayerCar[pID][PlayerKey[pID]][CarId]=0;
        PlayerCar[pID][PlayerKey[pID]][CarOwner]=GetName(pID);
        PlayerCar[pID][PlayerKey[pID]][CarModel]=vID;
        PlayerCar[pID][PlayerKey[pID]][CarPos_x]=x;
        PlayerCar[pID][PlayerKey[pID]][CarPos_y]=y;
        PlayerCar[pID][PlayerKey[pID]][CarPos_z]=z;
        PlayerCar[pID][PlayerKey[pID]][CarRotate]=0.0;
        PlayerCar[pID][PlayerKey[pID]][CarNitro]=0;
        PlayerCar[pID][PlayerKey[pID]][CarHyd]=0;
        PlayerCar[pID][PlayerKey[pID]][CarWheel]=0;
        PlayerCar[pID][PlayerKey[pID]][CarAusp]=0;
        PlayerCar[pID][PlayerKey[pID]][CarSideL]=0;
        PlayerCar[pID][PlayerKey[pID]][CarSideR]=0;
        PlayerCar[pID][PlayerKey[pID]][CarFB]=0;
        PlayerCar[pID][PlayerKey[pID]][CarRB]=0;
        PlayerCar[pID][PlayerKey[pID]][CarSpoiler]=0;
        PlayerCar[pID][PlayerKey[pID]][CarRoof]=0;
        PlayerCar[pID][PlayerKey[pID]][CarHood]=0;
        PlayerCar[pID][PlayerKey[pID]][CarVents]=0;
        PlayerCar[pID][PlayerKey[pID]][CarLamps]=0;
        PlayerCar[pID][PlayerKey[pID]][CarPJ]=-1;
        PlayerCar[pID][PlayerKey[pID]][CarC1]=color1;
        PlayerCar[pID][PlayerKey[pID]][CarC2]=color2;
        PlayerCar[pID][PlayerKey[pID]][CarPreis]=0;
        PlayerCar[pID][PlayerKey[pID]][CarState]=0;
        format(PlayerCar[pID][PlayerKey[pID]][CarNumberplate] ,32, KEIN_KENNZEICHEN );

        PlayerCar[pID][PlayerKey[pID]][CarId] = CreateVehicle(PlayerCar[pID][PlayerKey[pID]][CarModel],PlayerCar[pID][PlayerKey[pID]][CarPos_x],PlayerCar[pID][PlayerKey[pID]][CarPos_y],PlayerCar[pID][PlayerKey[pID]][CarPos_z],PlayerCar[pID][PlayerKey[pID]][CarRotate],PlayerCar[pID][PlayerKey[pID]][CarC1],PlayerCar[pID][PlayerKey[pID]][CarC2], -1);/*vehicle spawn*/
        aiVehicles[ PlayerCar[pID][PlayerKey[pID]][CarId] ] = VEH_PRIVAT;
        // printf("CarId %d",PlayerCar[pID][PlayerKey[pID]][CarId]);
        // new vnp[46];
        // format(vnp, sizeof(vnp), "{CB1107}%s", GetName(pID));
        SetVehicleNumberPlate(PlayerCar[pID][PlayerKey[pID]][CarId], "");
        PlayerHaveCar[pID][PlayerKey[pID]] = 1;
        //DestroyPeilsender(playerid, PlayerKey[playerid] );
        gGas[PlayerCar[pID][PlayerKey[pID]][CarId]] = GetMaxTank(PlayerCar[pID][PlayerKey[pID]][CarId]);
        gMaxGas[PlayerCar[pID][PlayerKey[pID]][CarId]] = GetMaxTank(PlayerCar[pID][PlayerKey[pID]][CarId]);
        PlayerCar[pID][PlayerKey[pID]][CarTank] = GetMaxTank(PlayerCar[pID][PlayerKey[pID]][CarId]);
        g_VehicleDistance[ PlayerCar[pID][PlayerKey[pID]][CarId] ] = 0;
        PlayerCar[pID][PlayerKey[pID]][TUV] = 0;

        LockCar(PlayerCar[pID][PlayerKey[pID]][CarId]);

        PutPlayerInVehicle(pID, PlayerCar[pID][PlayerKey[pID]][CarId], 0);
        if(stuned == 0)
        {
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned1] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned2] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned3] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned4] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned5] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned6] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned7] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned8] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned9] = INVALID_OBJECT_ID;
            SendClientMessage(playerid, COLOR_YELLOW, "Kein Spezial-Tuning ausgewählt!");
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 0;
        }
        else if(stuned == 1)
        {
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 1;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned1] = CreateDynamicObject(1166, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned2] = CreateDynamicObject(1168, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned3] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned4] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned5] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned6] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned7] = CreateDynamicObject(1091, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned8] = CreateDynamicObject(1164, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned9] = CreateDynamicObject(1034, 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1], PlayerCar[pID][PlayerKey[pID]][CarId], 1.024999, 2.080000, -0.090000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned2], PlayerCar[pID][PlayerKey[pID]][CarId],-1.066002, -1.774998, -0.130000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned3], PlayerCar[pID][PlayerKey[pID]][CarId],-0.946998, 0.149999, -0.589998, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned4], PlayerCar[pID][PlayerKey[pID]][CarId], -0.981998, -0.169999, -0.589998, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned5], PlayerCar[pID][PlayerKey[pID]][CarId],1.008000, -0.169999, -0.589998, 0.000001, -179.995712, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned6], PlayerCar[pID][PlayerKey[pID]][CarId],0.978000, 0.174999, -0.589998, 0.000001, -179.995712, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned7], PlayerCar[pID][PlayerKey[pID]][CarId],-0.006999, 0.244999, 0.648500, 0.000001, -0.000116, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned8], PlayerCar[pID][PlayerKey[pID]][CarId], 0.000000, -2.470009, 0.368500, 0.000001, -0.000116, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned9], PlayerCar[pID][PlayerKey[pID]][CarId],-0.009999, -0.240000, -0.106499, 0.000001, -0.000116, 0.000000);
            SendClientMessage(playerid, COLOR_YELLOW, "Spezial-Tuning für Infernus ausgewählt. (Tuning: 1)");
        }
        else if(stuned == 2)
        {
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 2;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned1] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned2] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned3] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned4] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned5] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned6] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned2], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned3], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned4], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned5], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned6], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            SendClientMessage(playerid, COLOR_YELLOW, "Spezial-Tuning für Infernus ausgewählt. (Tuning: 2)");
        }
        else if(stuned == 3)
        {
            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 3;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned1] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned2] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned3] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][SpecialTuned4] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned3], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned4], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            SendClientMessage(playerid, COLOR_YELLOW, "Spezial-Tuning für Infernus ausgewählt. (Tuning: 3)");
        }
        if(neon == 0)
        {
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = INVALID_OBJECT_ID;
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] = INVALID_OBJECT_ID;
            SendClientMessage(playerid, COLOR_YELLOW, "Kein Neon ausgewählt!");
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 0;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 0;
        }
        else if(neon == 1)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18648;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18648;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon1], 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] =CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon2], 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        }
        else if(neon == 2)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18647;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18647;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon1], 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] =CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon2], 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        }
        else if(neon == 3)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18649;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18649;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon1], 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] =CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon2], 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        }
        else if(neon == 4)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18652;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18652;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon1], 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] =CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon2], 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        }
        else if(neon == 5)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18651;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18651;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon1], 0,0,0,0,0,0,0);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] =CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon2], 0,0,0,0,0,0,0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        }
        else if(neon == 6)
        {
            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 18650;
            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 18650;
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon1], 0,0,0,0,0,0,0);print("Object1 erstellt");
            PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] =CreateDynamicObject(PlayerCar[pID][PlayerKey[pID]][CarNeon2], 0,0,0,0,0,0,0);print("Object2 erstellt");
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);print("Object1 angeheftet");
            AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);print("Object2 angeheftet");
        }
        new
            String[128];
        format(String,sizeof(String),"%s %s hat Spieler %s das Fahrzeug (%d) gesetzt", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), vID);
        AdminLog(String);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "* Der Spieler hat auf dem Autoschlüssel bereits ein Fahrzeug.");
        return 1;
    }
    return 1;
}

CMD:carlock(playerid)
{
    new Float:X1, Float:Y1, Float:Z1;
    if(PlayerHaveCar[playerid][PlayerKey[playerid]])
    {
        new engine, light, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx(PlayerCar[playerid][PlayerKey[playerid]][CarId], engine, light, alarm, doors, bonnet, boot, objective);
        new State = doors;
        GetVehiclePos(PlayerCar[playerid][PlayerKey[playerid]][CarId], X1, Y1, Z1);
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i, 20.0, X1,Y1,Z1))
            {
                PlayerPlaySound(i, 1147, X1,Y1,Z1);
            }
        }
        //printf("CMD: carlock State = %d ",State);
        if(State == VEHICLE_PARAMS_OFF || State == VEHICLE_PARAMS_UNSET)
        {
            GameTextForPlayer(playerid, "~w~Fahrzeug~n~~r~abgeschlossen", 3000, 4);
            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            LockCar(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
        }
        else if(State == VEHICLE_PARAMS_ON)
        {
            GameTextForPlayer(playerid, "~w~Fahrzeug~n~~g~aufgeschlossen", 3000, 4);
            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            UnLockCar(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Auf dem ausgewählten Schlüssel ist kein Fahrzeug.");
        return 1;
    }
    return 1;
}

CMD:carkey(playerid)
{
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht eingeloggt.");
    new dialogText[1024], statusText[128], numberPlate[32], hasLicence;
    dialogText = "{FFFFFF}Slot\t{FFFFFF}Fahrzeug\t{FFFFFF}Status\t{FFFFFF}Kennzeichen\n";
    for (new i = 0; i < MaxVehicles(playerid); i++) {
        if (PlayerHaveCar[playerid][i]) {
            switch (PlayerCar[playerid][i][CarState]) {
                case e_Vehicle_Status_Towed: statusText = COLOR_HEX_ORANGE "abgeschleppt";
                case e_Vehicle_Status_Destroyed: statusText = COLOR_HEX_RED "in Reparatur";
                case e_Vehicle_Status_Normal: statusText = COLOR_HEX_GREEN "fahrtüchtig";
            }

            hasLicence = HasVehicleLicence(playerid, i);
            format(numberPlate, sizeof(numberPlate), "[%s]", PlayerCar[playerid][i][CarNumberplate]);
            format(dialogText, sizeof(dialogText), "%s%d)\t%s\t%s\t%s%s\n", dialogText, i + 1, CarName[PlayerCar[playerid][i][CarModel] - 400], statusText,\
                !hasLicence ? COLOR_HEX_RED : COLOR_HEX_WHITE, !hasLicence ? "[Keine Zulassung]" : numberPlate);
        }
        else format(dialogText, sizeof(dialogText), "%s%d)\t{00AA00}- %sSchlüssel frei -\n", dialogText, i + 1, i == 5 ? "Premium " : "");
    }

    ShowPlayerDialog(playerid, DIALOG_CARKEY, DIALOG_STYLE_TABLIST_HEADERS, "Privatfahrzeugübersicht", dialogText, "Auswählen", "Abbrechen");
    return 1;
}

CMD:findcar(playerid)
{
    if(PlayerHaveCar[playerid][PlayerKey[playerid]])
    {
        if(PlayerCar[playerid][PlayerKey[playerid]][CarState] == e_Vehicle_Status_Destroyed )
        {
            SendClientMessage(playerid,COLOR_RED,"Dein Fahrzeug ist für 1.500$ in Reparatur.");
            SendClientMessage(playerid,COLOR_RED,"Mit /Fahrzeugreparieren zahlst du die Kosten und erhältst dein Fahrzeug.");
        }
        new Float:x, Float: y, Float:z;
        GetVehiclePos(PlayerCar[playerid][PlayerKey[playerid]][CarId], x, y, z);
        SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_FINDCAR);
        SendClientMessage(playerid, COLOR_WHITE, "Dein Fahrzeug wurde geortet.");
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "Auf diesem Schlüssel ist kein Fahrzeug belegt.");
        return 1;
    }
    return 1;
}
/*CMD:findcar(playerid)
{
    SendClientMessage(playerid, COLOR_ORANGE, "Dieser Befehl wurde deaktiviert! Besorge dir einen Peilsender. (/Navi -> Tuning-Garagen -> Peilsender Verkauf)");
    return 1;
}*/

CMD:findmietcar(playerid)
{
    if(Spieler[playerid][pVehicleVerleih]!=INVALID_VEHICLE_ID)
    {
        new Float:x, Float: y, Float:z;
        GetVehiclePos(Spieler[playerid][pVehicleVerleih],x,y,z);
        SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_FINDCAR);
        SendClientMessage(playerid, COLOR_WHITE, "Dein Mietfahrzeug wurde geortet.");
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "Du besitzt kein Mietfahrzeug.");
        return 1;
    }
    return 1;
}

CMD:parken(playerid)
{
    if(PlayerHaveCar[playerid][PlayerKey[playerid]])
    {
            new newcar = GetPlayerVehicleID(playerid);
            if(newcar == PlayerCar[playerid][PlayerKey[playerid]][CarId])
            {
                new Float:X, Float:Y,Float:Z;
                new Float:z_rot;
                GetPlayerPos(playerid, X,Y,Z);
                GetVehicleZAngle(newcar, z_rot);
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_x] = X;
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_y] = Y;
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_z] = Z;
                PlayerCar[playerid][PlayerKey[playerid]][CarRotate] = z_rot;
                SendClientMessage(playerid, COLOR_YELLOW, "Dein Fahrzeug wurde erfolgreich geparkt.");
                SavePlayerCar( playerid, PlayerKey[playerid] );
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du bist nicht in deinem Fahrzeug oder du hast keinen Schlüssel.");
                return 1;
            }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Fahrzeug.");
        return 1;
    }
    return 1;
}

CMD:sellcar(playerid) return cmd_carsell(playerid);

CMD:carsell(playerid)
{
    if(PlayerHaveCar[playerid][PlayerKey[playerid]])
    {
        if(PlayerCar[playerid][PlayerKey[playerid]][CarState] != e_Vehicle_Status_Normal) {
            SendClientMessage(playerid,COLOR_RED,"Du kannst dein Fahrzeug nicht verkaufen, da es zerstört oder abgeschleppt ist.");
            return 1;
        }
        new dialogText[512];
        format(dialogText, sizeof(dialogText),
        "{FFFFFF}Bist du sicher, dass du das Fahrzeug verkaufen willst?\n\n\
        {3592D7}Fahrzeug: {FFFFFF}%s\n\
        {3592D7}Kennzeichen: {FFFFFF}%s\n\
        {3592D7}Slot: {FFFFFF}%d \n\
        {3592D7}Verkaufspreis: {FFFFFF}$%s",
            CarName[PlayerCar[playerid][PlayerKey[playerid]][CarModel] - 400], PlayerCar[playerid][PlayerKey[playerid]][CarNumberplate],
            PlayerKey[playerid] + 1, AddDelimiters(PlayerCar[playerid][PlayerKey[playerid]][CarPreis]));
        return ShowPlayerDialog(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "Fahrzeug verkaufen", dialogText, "Verkaufen", "Abbrechen");
    }

    return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Fahrzeug oder auf dem Schlüssel ist kein Fahrzeug.");
}

CMD:prison(playerid, params[])
{
    new pID, time, string[256], reason[64];
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "uis[64]", pID, time, reason))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Prison [SpielerID/Name] [Zeit in Min.] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    new MinuteTime = time;
    format(string, sizeof(string), "[PRISON] Spieler %s wurde von %s %s für %d Minuten ins Prison eingesperrt, Grund: %s", GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid), MinuteTime, reason);
    SendAdminMessage(COLOR_DARKRED, string);
    format(string, sizeof(string), "[PRISON] Du wurdest von %s %s für %d Minuten ins Prison eingesperrt, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), MinuteTime, reason);
    SendClientMessage(pID, COLOR_DARKRED, string);
    Spieler[pID][pJailed] = 3;
    Spieler[pID][pJailTime] = time*60;
    SpawnPlayerEx(pID);
    paydaywait[pID]=1;

    format(string,sizeof(string),"%s wurde von %s %s für %d Minuten ins Admin-Prison gesteckt, Grund: %s", GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid), time, reason);
    SendUCPAktenEintrag( playerid,GetName(playerid) , GetName(pID) , string );
    return 1;
}

CMD:goto(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Goto [SpielerID/Name]");
    new Float:x, Float:y, Float:z;
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (playerid == pID) return SendClientMessage(playerid, COLOR_RED, "Warum willst du dich zu dir selbst teleportieren?");
    GetPlayerPos(pID, x,y,z);
    new pVW, pInt;
    pVW = GetPlayerVirtualWorld(pID);
    pInt = GetPlayerInterior(pID);
    new vID = GetPlayerVehicleID(playerid);
    if(IsPlayerInAnyVehicle(playerid))
    {
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i])
            {
                if(GetPlayerVehicleID(i) == vID)
                {
                    new Seat = GetPlayerVehicleSeat(i);
                    SetPlayerInterior(i, pInt);
                    SetPlayerVirtualWorld(i, pVW);
                    LinkVehicleToInterior(vID, pInt);
                    SetVehiclePos(vID, x,y,z);
                    SetVehicleVirtualWorld(vID, pVW);
                    PutPlayerInVehicle(i, vID, Seat);
                    if(IsTrailerAttachedToVehicle(vID))
                    {
                        new trID = GetVehicleTrailer(vID);
                        LinkVehicleToInterior(trID, pInt);
                        SetVehicleVirtualWorld(trID, pVW);
                        SetVehiclePos(trID, x,y,z);
                        AttachTrailerToVehicle(trID, vID);
                    }
                }
            }
        }
    }
    else
    {
        SetPlayerPos(playerid, x,y,z);
        SetPlayerInterior(playerid, pInt );
        SetPlayerVirtualWorld(playerid, pVW );
        Streamer_UpdateEx(playerid,x,y,z,pVW,pInt);
    }
    format(string, sizeof(string), "%s %s hat sich zu Spieler %s teleportiert.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID));
    SendAdminMessage(COLOR_BLUE, string);
    format(string, sizeof(string), "%s %s hat sich zu dir teleportiert.", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(pID, COLOR_DARKRED, string);
    return 1;
}

CMD:gethere(playerid, params[])
{
    new pID, string[128];
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if (sscanf(params, "u", pID)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Gethere [SpielerID/Name]");
    if (pID == INVALID_PLAYER_ID || !gPlayerLogged[pID]) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (pID == playerid) return SendClientMessage(playerid, COLOR_RED, "Warum willst du dich selbst zu dir teleportieren?");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    new vID = GetPlayerVehicleID(pID);
    new pInt = GetPlayerInterior(playerid);
    new pVW = GetPlayerVirtualWorld(playerid);
    if(IsPlayerInAnyVehicle(pID))
    {
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i])
            {
                if(GetPlayerVehicleID(i) == vID)
                {
                    new Seat = GetPlayerVehicleSeat(i);
                    SetPlayerInterior(i, pInt);
                    SetPlayerVirtualWorld(i, pVW);
                    LinkVehicleToInterior(vID, pInt);
                    SetVehiclePos(vID, x,y,z);
                    SetVehicleVirtualWorld(vID, pVW);
                    PutPlayerInVehicle(i, vID, Seat);
                    if(IsTrailerAttachedToVehicle(vID))
                    {
                        new trID = GetVehicleTrailer(vID);
                        LinkVehicleToInterior(trID, pInt);
                        SetVehicleVirtualWorld(trID, pVW);
                        SetVehiclePos(trID, x,y,z);
                        AttachTrailerToVehicle(trID, vID);
                    }
                }
            }
        }
    }
    else
    {
        SetPlayerPos(pID, x,y,z);
        SetPlayerInterior(pID, GetPlayerInterior(playerid));
        SetPlayerVirtualWorld(pID, GetPlayerVirtualWorld(playerid));
    }
    format(string, sizeof(string), "%s hat %s zu sich teleportiert.", GetName(playerid), GetName(pID));
    SendAdminMessage(COLOR_BLUE, string);
    SendClientMessage(pID, COLOR_LIGHTGREY,"Du wurdest teleportiert.");
    return 1;
}


CMD:spawncar(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new vehid;
    if (sscanf(params, "i", vehid)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Spawncar [VehicleID]");
    if (!SetVehicleToRespawn(vehid)) return SendClientMessage(playerid, COLOR_RED, "Die Fahrzeug-ID gibt es nicht.");
    new message[128];
    format(message, sizeof(message), "%s %s hat ein Fahrzeug respawnt (CarID: %i)", GetPlayerAdminRang(playerid), GetName(playerid), vehid);
    SendAdminMessage(COLOR_YELLOW, message);
    return 1;
}

CMD:veh(playerid, params[])
{
    new string[128];
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new vID, color1, color2, Float:x, Float:y, Float:z, Float:angle;
    if(sscanf(params, "iii", vID, color1, color2))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Veh [VehicleID] [Color 1] [Color 2]");
    GetPlayerFacingAngle(playerid, angle);
    GetPlayerPos(playerid, x,y,z);
    new vehicle;
    vehicle = CreateVehicle(vID, x,y,z, angle, color1, color2, -1);
    PutPlayerInVehicle(playerid, vehicle, 0);
    gGas[vehicle] = GetMaxTank(vehicle);
    gMaxGas[vehicle] = GetMaxTank(vehicle);
    aiVehicles[ vehicle ] = VEH_CAR;
    format(string, sizeof(string), "%s %s hat ein Fahrzeug gespawnt (CarID: %d)", GetPlayerAdminRang(playerid), GetName(playerid), vID);
    SendAdminMessage(COLOR_YELLOW, string);
    return 1;
}

CMD:supcar(playerid, params[]) return cmd_supauto(playerid, "");

CMD:supauto(playerid, params[])
{
    new string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new Float:x, Float:y, Float:z, Float:angle;
    GetPlayerFacingAngle(playerid, angle);
    GetPlayerPos(playerid, x,y,z);
    new vehicle;
    vehicle = CreateVehicle(560, x, y, z, angle, 3, 3, -1);
    PutPlayerInVehicle(playerid, vehicle, 0);
    gGas[vehicle] = GetMaxTank(vehicle);
    gMaxGas[vehicle] = GetMaxTank(vehicle);
    aiVehicles[ vehicle ] = VEH_CAR;
    format(string, sizeof(string), "%s %s hat einen Sultan gespawnt (CarID: 560)", GetPlayerAdminRang(playerid), GetName(playerid));
    SendAdminMessage(COLOR_YELLOW, string);
    return 1;
}

CMD:makeadmin(playerid, params[])
{
    new pID, admid, string[128];
    if(!IsPlayerAdmin(playerid))return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "ui", pID, admid))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Makeadmin [SpielerID/Name] [Admin-Rank]");
    if(!IsPlayerConnected(playerid))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(admid >= 0 && admid <= 7)
    {
        Spieler[pID][pAdmin] = admid;
        format(string, sizeof(string), "[ADMIN]: %s wurde von %s zum %s ernannt.", GetName(pID), GetName(playerid), GetPlayerAdminRang(pID));
        return SendClientMessageToAll(COLOR_DARKRED, string);
    }

    return SendClientMessage(playerid, COLOR_RED, "Der Rank muss zwischen 0 und 7 liegen.");
}

CMD:makebmod(playerid, params[])
{
    new pID, bmodid, string[128];
    if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "ui", pID, bmodid))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Makebmod [SpielerID/Name] [Rank 0-2]");
    if(!IsPlayerConnected(playerid))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(bmodid >= 0 || bmodid <= 2)
    {
        new bmodname[30];
        if(bmodid == 0){ bmodname="Normalen Spieler";}
        else if(bmodid == 1){ bmodname ="Beschwerdemoderator";}
        else if(bmodid == 2){ bmodname ="Beschwerdemoderator-Leiter";}
        Spieler[pID][pBMOD] = bmodid;
        format(string, sizeof(string), "%s %s hat %s zum %s ernannt.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), bmodname );
        SendAdminMessage(COLOR_DARKRED, string);
    }
    return 1;
}

CMD:spawn(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Spawn [SpielerID/Name] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pTot] == 1)
    {
        Spieler[pID][pTot] = 0;
        Spieler[pID][pTotTime] = 0;
    }
    SpawnPlayerEx(pID);
    SendClientMessage(pID, COLOR_LIGHTGREY, "Du wurdest von einem Teammitglied gespawnt!");
    format(string, sizeof(string), "* %s %s hat Spieler %s gespawnt.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID));
    SendAdminMessage(COLOR_YELLOW, string);
    return 1;
}

CMD:afkick(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Afkick [SpielerID/Name]");
    if(!IsPlayerConnected(playerid))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pFraktion] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist bereits Zivilist.");
    Spieler[pID][pFraktion] = 0;
    Spieler[pID][pRank] = 0;
    Spieler[pID][pFrakLohn] = 0;
    if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 2);}
    else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 11);}
    format(string, sizeof(string), "* Du wurdest von %s %s zum Zivilist gemacht.", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(pID, COLOR_DARKRED, string);
    format(string, sizeof(string), "* Du hast %s zum Zivilist gemacht.", GetName(pID));
    SendClientMessage(playerid, COLOR_DARKRED, string);
    SaveAccount(pID);
    return 1;
}

CMD:makeleader(playerid, params[])
{
    new pID, frakid, string[128], fname[50];
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "ui", pID, frakid))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Makeleader [SpielerID/Name] [Frak-ID]");
    if(!IsPlayerConnected(playerid))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pFraktion] > 0)return SendClientMessage(playerid, COLOR_RED, "* Der Spieler ist noch in einer Fraktion. Benutze erst /Afkick");
    if(Spieler[pID][pLevel] < 4 ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst den Spieler nicht einladen, da er unter Level 4 ist!");
        return 1;
    }
    if(Spieler[pID][pFrakSperre]) {
        new
            String[128];
        format(String,sizeof(String),"%s hat versucht dich zum Leader zu machen. Du hast allerdings noch eine Fraktionssperre!",GetName(playerid));
        SendClientMessage(pID,COLOR_RED,String);
        format(String,sizeof(String),"Du kannst %s nicht zum Leader machen, da er noch eine Fraktions-Sperre hat!",GetName(pID));
        SendClientMessage(playerid,COLOR_RED,String);
        return 1;
    }
    if(frakid >= 1 || frakid <= 22)
    {
        ReturnFraktionByID(frakid, fname);
        Spieler[pID][pFraktion] = frakid;
        Spieler[pID][pRank] = 6;
        printf("%s %s hat Spieler %s zum Leader von %s gemacht. (FrakID %i)", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), fname, frakid);
        format(string, sizeof(string), "Du hast %s Leaderrechte der Fraktion \"%s\" gegeben.", GetName(pID), fname);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "Du bist nun Leader von \"%s\". Bitte gebe gut Acht auf deinen Leaderposten.", fname);
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        if(frakid == 1){ if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 283); } else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 150); } }
        else if(frakid == 2){if (Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 288); } else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 150); } }
        else if(frakid == 3){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 70); } else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 211); } }
        else if(frakid == 4){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 57); } else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 55); } }
        else if(frakid == 5){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 71); } else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 192); } }
        else if(frakid == 6){if(Spieler[pID][pSex] == 1){SetPlayerSkinEx(pID, 271); } else if(Spieler[pID][pSex] == 2){ SetPlayerSkinEx(pID, 65); } }
        else if(frakid == 7){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 102);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 195);} }
        else if(frakid == 8){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 240);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 194);} }
        else if(frakid == 9){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 295);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 150);} }
        else if(frakid == 10){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 122);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 169);} }
        else if(frakid == 11){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 114);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 114);} }
        else if(frakid == 12){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 120);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 120);} }
        else if(frakid == 13){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 108);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 108);} }
        else if(frakid == 14){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 229);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 229);} }
        else if(frakid == 15){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 248);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 248);} }
        else if(frakid == 16){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 282);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 150);} }
        else if(frakid == 17){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 217);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 89);} }
        else if(frakid == 18){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 287);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 287);} }
        else if(frakid == 19){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 220);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 220);} }
        else if(frakid == 20){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 47);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 47);} }
        else if(frakid == 21){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 120);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 120);} }
        else if(frakid == 22){if(Spieler[pID][pSex] == 1){ SetPlayerSkinEx(pID, 288);}else if(Spieler[pID][pSex] == 2){SetPlayerSkinEx(pID, 288);} }
        SaveAccount(pID);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Die Fraktions-ID sollte zwischen 1 und 18 liegen.");
        return 1;
    }
    return 1;
}

CMD:sban(playerid, params[])
{
    new pID, grund[64], string[128], string1[128];
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "us[64]", pID, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sban [SpielerID/Name] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pAdmin] > 0)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Supporter bzw. Admins bannen.");
    format(string, sizeof(string), "[BANNED]: Spieler %s wurde vom Server-System dauerhaft gebannt, Grund: %s", GetName(pID), grund);
    SendAdminMessage(COLOR_RED, string);
    format(string, sizeof(string), "[BANNED] Sie wurden soeben von Server-System dauerhaft gebannt. Grund: %s", grund);
    SendClientMessage(pID, COLOR_RED, string);
    format(string1, sizeof(string1), "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf www.LyD-Roleplay.de ein Entbannantrag!");
    SendClientMessage(pID, COLOR_RED, string1);
    mysql_real_escape_string(grund,grund);
    new
        query[256];
    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
        ("Server-System"),grund,GetName(pID));
    mysql_pquery(query,THREAD_SBAN,pID,gSQL,MySQLThreadOwner);

    format(query,sizeof(query),"Gebannt: %s von: %s, Grund: %s, Dauer: %s",GetName(pID),("Server-System"),grund,("Immer"));
    BanLog( query );

    format(query,sizeof(query),"%s wurde vom Server-System dauerhaft gebannt, Grund: %s",GetName(pID) , grund );
    SendUCPAktenEintrag( playerid, ("Server-System") , GetName(pID) , query );

    //Kick(pID); -> Threaded
    return 1;
}

CMD:ban(playerid, params[])
{
    new pID, grund[64], string[128], string1[128];
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if (sscanf(params, "us[64]", pID, grund)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Ban [SpielerID/Name] [Grund]");
    if (!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (gPlayerLogged[playerid] != 1 && Spieler[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist noch nicht eingeloggt."); // Spieler nicht bannen wenn noch nicht eingeloggt?
    if (Spieler[pID][pAdmin] > 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Supporter bzw. Admins bannen.");
    if (Spieler[pID][pLevel] > 3 && Spieler[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur Spieler von Level 1-3 bannen.");

    #if defined USE_NPCS
        if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif

    format(string, sizeof(string), "[BANNED]: Spieler %s wurde von %s %s dauerhaft aus dem Server gebannt, Grund: %s", GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid), grund);
    SendAdminMessage(COLOR_RED, string);
    format(string, sizeof(string), "[BANNED] Du wurdest soeben von %s %s dauerhaft aus dem Server gebannt. Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), grund);
    SendClientMessage(pID, COLOR_RED, string);
    format(string1, sizeof(string1), "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf www.LyD-Roleplay.de ein Entbannantrag!");
    SendClientMessage(pID, COLOR_RED, string1);
    //Ban(pID);
    mysql_real_escape_string(grund,grund);
    new query[256];
    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
        GetName(playerid),grund,GetName(pID));
    mysql_pquery(query,THREAD_BAN,pID,gSQL,MySQLThreadOwner);

    format(query,sizeof(query),"Gebannt: %s von: %s, Grund: %s, Dauer: %s",GetName(pID),GetName(playerid),grund,("Immer"));
    BanLog( query );

    format(query,sizeof(query),"%s wurde von %s %s dauerhaft gebannt, Grund: %s", GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid), grund);
    SendUCPAktenEintrag( playerid,GetName(playerid) , GetName(pID) , query );

    new String[256];
    format(String,sizeof(String),"%s %s hat Spieler %s dauerhaft gebannt, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), grund);
    AdminLog(String);

    //Kick(pID); -> Threaded
    return 1;
}

CMD:ipban(playerid, params[])
{
    new pID, grund[64], string[128], string1[128];
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "us[64]", pID, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ipban [SpielerID/Name] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pAdmin] > 0)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Supporter bzw. Admins bannen.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    format(string, sizeof(string), "[BANNED]: Spieler %s wurde von %s %s dauerhaft aus dem Server gebannt, Grund: %s", GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid), grund);
    SendAdminMessage(COLOR_RED, string);
    format(string, sizeof(string), "[BANNED] Du wurdest soeben von %s %s dauerhaft aus dem Server gebannt. Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), grund);
    SendClientMessage(pID, COLOR_RED, string);
    format(string1, sizeof(string1), "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf www.LyD-Roleplay.de ein Entbannantrag!");
    SendClientMessage(pID, COLOR_RED, string1);
    mysql_real_escape_string(grund,grund);
    new
        query[256];
    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
        GetName(playerid),grund,GetName(pID));
    mysql_pquery(query,THREAD_IPBAN,pID,gSQL,MySQLThreadOwner);

    format(query,sizeof(query),"Gebannt: %s von: %s, Grund: %s, Dauer: %s, IP-Sperre",GetName(pID),GetName(playerid),grund,("Immer"));
    BanLog( query );

    new
        String[160];
    format(String,sizeof(String),"%s %s hat Spieler %s dauerhaft mit einer IP-Sperre gebannt, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), GetName(pID), grund);
    AdminLog(String);

    format(query,sizeof(query),"%s wurde von %s %s dauerhaft gebannt mit IP-Sperre, Grund: %s", GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid), grund);
    SendUCPAktenEintrag( playerid,GetName(playerid) , GetName(pID) , query );

    //Kick(pID); -> Threaded
    return 1;
}

CMD:kick(playerid, params[])
{
    new pID, grund[64], string[128];
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "us[64]", pID, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kick [SpielerID/Name] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pAdmin] > 0 && Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Supporter bzw. Admins kicken.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    mysql_real_escape_string(grund,grund);
    format(string, sizeof(string), "[KICK]: Spieler %s wurde von %s aus dem Server gekickt, Grund: %s", GetName(pID), GetName(playerid), grund);
    SendAdminMessage(COLOR_RED, string);
    format(string, sizeof(string), "[KICK] Du wurdest soeben von %s %s aus dem Server gekickt. Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), grund);
    SendClientMessage(pID, COLOR_RED, string);

    new String[256];
    format(String,sizeof(String),"Sie wurden aufgrund eines Regelverstoßes (oder einem anderen Grund) aus dem Server gekickt!\nSie wurdest vom %s %s aus dem Server gekickt!\nGrund: %s", GetPlayerAdminRang(playerid), GetName(playerid), grund);
    ShowPlayerDialog(pID,0,DIALOG_STYLE_MSGBOX,"Kick Information",String,"Exit","");

    KickDelay(pID);
    return 1;
}

//FS TORE============
CMD:fstorauf(playerid, params[])
{
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 8 || Spieler[playerid][pFraktion] == 18))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer oder Polizist!");
	if(IsPlayerInRangeOfPoint(playerid,10, 1185.3404, -1842.3459, 13.1983))
	{
		MoveDynamicObject(fstor[0], 1185.3404, -1842.3459, 13.1983,1, 0.0000, 0.0000, 0.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1185.3404, -1762.5439, 13.1983))
	{
		MoveDynamicObject(fstor[1], 1185.3404, -1762.5439, 13.1983,1, 0.0000, 0.0000, 0.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1169.5295, -1762.5439, 13.1983))
	{
		MoveDynamicObject(fstor[2], 1169.5295, -1762.5439, 13.1983,1, 0.0000, 0.0000, 180.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1169.5295, -1842.3459, 13.1983))
	{
		MoveDynamicObject(fstor[3], 1169.5295, -1842.3459, 13.1983,1, 0.0000, 0.0000, 180.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1213.4050, -1842.1458, 13.0299))
	{
		MoveDynamicObject(fstor[4], 1213.4050, -1842.1458, 13.0299-10,4);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1270.3653, -1842.2629, 13.0299))
	{
		MoveDynamicObject(fstor[5], 1270.3653, -1842.2629, 13.0299-10,4);
		return 1;
	}
 	return SendClientMessage(playerid, COLOR_RED,"Du bist nicht in der Nähe!");
}
CMD:fstorzu(playerid, params[])
{
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 8 || Spieler[playerid][pFraktion] == 18))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer oder Polizist!");
	if(IsPlayerInRangeOfPoint(playerid,10, 1185.3404, -1842.3459, 13.1983))
	{
		MoveDynamicObject(fstor[0], 1185.3404, -1842.3459, 13.1983,1, 0.0000, -90.0000, 0.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1185.3404, -1762.5439, 13.1983))
	{
		MoveDynamicObject(fstor[1], 1185.3404, -1762.5439, 13.1983,1, 0.0000, -90.0000, 0.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1169.5295, -1762.5439, 13.1983))
	{
		MoveDynamicObject(fstor[2], 1169.5295, -1762.5439, 13.1983,1, 0.0000, -90.0000, 180.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1169.5295, -1842.3459, 13.1983))
	{
		MoveDynamicObject(fstor[3], 1169.5295, -1842.3459, 13.1983,1, 0.0000, -90.0000, 180.0000);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1213.4050, -1842.1458, 13.0299))
	{
		MoveDynamicObject(fstor[4], 1213.4050, -1842.1458, 13.0299,4);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,10, 1270.3653, -1842.2629, 13.0299))
	{
		MoveDynamicObject(fstor[5], 1270.3653, -1842.2629, 13.0299,4);
		return 1;
	}
 	return SendClientMessage(playerid, COLOR_RED,"Du bist nicht in der Nähe!");
}

/*CMD:stadtamttuer(playerid, params[])
{
	new entry[12];
	if(sscanf(params, "s[12]", entry))return SendClientMessage(playerid, COLOR_GREY, "* Benutze /stadtamttuer [Auf/Zu]");
	if(strcmp(entry, "auf", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, 356, 171.5, 1007.4000244141))//stadtamt1
	    {
	        if(!(Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 9))
	        {
				return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Stadtamt/Regierungs Mitglied.");
			}
			MoveDynamicObject(stadttor[0], 356, 171.5, 1007.4000244141, 3);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10, 354.39999389648, 175.80000305176, 1007.4000244141))//stadtamt 2
		{
			if(!(Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 9))
	        {
				return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Stadtamt/Regierungs Mitglied.");
			}
		    MoveDynamicObject(stadttor[1], 354.39999389648, 175.80000305176, 1007.4000244141-10, 3);
		}
    }
 	else if(strcmp(entry, "zu", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10, 356, 171.5, 1007.4000244141))//stadtamt 1
	    {
	        if(!(Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 9))
	        {
				return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Stadtamt/Regierungs Mitglied.");
			}
			MoveDynamicObject(stadttor[0], 356, 171.5, 1007.4000244141, 0, 0, 272, 3);
	    }
	 	else if(IsPlayerInRangeOfPoint(playerid, 10, 354.39999389648, 175.80000305176, 1007.4000244141))//stadtamt 2
		{
			if(!(Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 9))
	        {
				return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Stadtamt/Regierungs Mitglied.");
			}
		    MoveDynamicObject(stadttor[1], 354.39999389648, 175.80000305176, 1007.4000244141, 3);
		}
    }
    return 1;
}*/
stock GZ_OnPlayerSpawn(playerid) {
    new
        frak = Spieler[playerid][pFraktion];
    if( IsAFightFaction(frak) ) {
        if( IsGangInFight(frak)) {

        }
        return 1;
    }
    return 0;
}

stock GZ_OnPlayerDeath(playerid,killerid,reason) {
    #pragma unused reason
    if( killerid != INVALID_PLAYER_ID ) {
        new
            frak = Spieler[playerid][pFraktion];
        if(IsAFightFaction(frak)) {
            if( IsGangInFight(frak)) {
                new
                    fightid,
                    index = GetPlayerGangZone(playerid);
                if( index != -1 ) {
                    fightid = GetGangFight(frak);
                    if( fightid == index ) {
                        new
                            cur_level,
                            new_level,

                            String[128],
                            killerfraktion;
                        permissionleavegz[playerid]=0;
                        killerfraktion = Spieler[killerid][pFraktion];
                        if( killerfraktion == frak ) {
                            // teamkill
                            if( killerfraktion == g_GangZone[index][GZ_iAttacker]) {
                                g_GangZone[index][GZ_iOwnerScore] += 3;
                            }
                            else if( killerfraktion == g_GangZone[index][GZ_iOwner]) {
                                g_GangZone[index][GZ_iAttackerScore] += 3;
                            }
                            format(String,sizeof(String),"->TEAMKILL<- {FF8800}%s hat sein Partner %s im Gangfight getötet! {00CC00}(3P. an die gegnerische Gang)",GetName(killerid),GetName(playerid),GetFactionNameOfFaction(killerfraktion));
                            SendFraktionMessage( killerfraktion , COLOR_YELLOW,String);
                            SendFraktionMessage( frak , COLOR_YELLOW,String);
                            GameTextForPlayer(killerid, "~r~TEAMKILL",1550,6);
                        }
                        else {
                            Spieler[killerid][pKillsGangFightSession]++;
                            cur_level = GetPlayerGangFightSkillLevel(killerid);
                            Spieler[killerid][pKillsGangFight]++;
                            new_level = GetPlayerGangFightSkillLevel(killerid);
                            if( new_level > cur_level ) {
                                // Skill Upgrade
                                format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Gangfight"),new_level);
                                SendClientMessage(killerid,COLOR_YELLOW,String);
                                format(String,sizeof(String),"~y~GANGFIGHT-SKILL ~g~%d ~y~erreicht!",new_level);
                                SkillUpgrade(killerid,String);
                                format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(killerid),("Gangfight"),new_level);
                                SkillLog(String);
                            }

                            if( killerfraktion == g_GangZone[index][GZ_iAttacker]) {
                                g_GangZone[index][GZ_iAttackerScore] += 3;
                            }
                            else if( killerfraktion == g_GangZone[index][GZ_iOwner]) {
                                g_GangZone[index][GZ_iOwnerScore] += 3;
                            }
                            format(String,sizeof(String),"->GANGFIGHTKILL<- {0088FF}%s Gangfightkill an %s {00CC00}(3P. an die %s)",GetName(killerid),GetName(playerid),GetFactionNameOfFaction(killerfraktion));
                            SendFraktionMessage( killerfraktion , COLOR_YELLOW,String);
                            SendFraktionMessage( frak , COLOR_YELLOW,String);
                            GameTextForPlayer(killerid, "~g~GANGFIGHTKILL + 5000$",1550,6);
                            Spieler[killerid][pCash] += 5000;
                        }
                        if( g_GangZone[index][GZ_iFlaggePlayer] == playerid) {
                            g_GangZone[index][GZ_iFlaggeEnd] = 0;
                            g_GangZone[index][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                        }
                        UpdateGangFightInfo(index);
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

stock Gang_OnPlayerEnterDynamicArea(playerid,areaid)
{
    /*new val = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( val == 1909 )
    {*/
    for(new i ; i < iGangZones ; i++)
    {
        if( areaid == g_GangZone[i][GZ_iAreaID] )
        {
            if( g_GangZone[i][GZ_iStatus] == 1 )
            {
                // In Diese Zone & gangfight
                new
                    frak,
                    String[256];
                frak = Spieler[playerid][pFraktion];
                if( frak == g_GangZone[i][GZ_iAttacker] || frak == g_GangZone[i][GZ_iOwner])
                {
                    TextDrawShowForPlayer(playerid,tdGangZoneHeader);
                    TextDrawShowForPlayer(playerid,g_GangZone[i][GZ_tdInfo]);
                    permissionleavegz[playerid]=1;
                }
                else
                {
                    format(String,sizeof(String),"Achtung: {FFFFFF}Hier findet zur Zeit ein Gangwar zwischen %s und %s statt!",GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]),GetFactionNameOfFaction(g_GangZone[i][GZ_iAttacker]));
                    SendClientMessage(playerid,COLOR_RED,String);
                }
                break;
            }
        }
    }
//  }
    return 1;
}

stock Gang_OnPlayerLeaveDynamicArea(playerid,areaid)
{
/*  new val = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( val == 1909 )
    {*/
    for(new i ; i < iGangZones ; i++)
    {
        if( areaid == g_GangZone[i][GZ_iAreaID] )
        {
            TextDrawHideForPlayer(playerid,tdGangZoneHeader);
            TextDrawHideForPlayer(playerid,g_GangZone[i][GZ_tdInfo]);
            if(permissionleavegz[playerid]==1&&IsPlayerConnected(playerid))
            {
                if( g_GangZone[i][GZ_iStatus] == 1 )
                {
                    SetTimerEx("gpermissionleave",5000,false,"ii",playerid,areaid);
                    permissionleavegz[playerid]=2;
                    new gfrakname[20];
                    if(Spieler[playerid][pFraktion]==g_GangZone[i][GZ_iOwner])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[i][GZ_iAttacker]));
                    }
                    else if(Spieler[playerid][pFraktion]==g_GangZone[i][GZ_iAttacker])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]));
                    }
                    new string[250];
                    GameTextForPlayer(playerid,"~r~GANGFIGHT-FLUCHT",3000,3);
                    format(string,250,"Solltest du dich länger als 5 Sekunden außerhalb des Gebiets befinden, gehen 5 Punkte an die %s.",gfrakname);
                    SendClientMessage(playerid,COLOR_RED,string);
                }
            }
            break;
        }
    }
//  }
    return 1;
}

forward gpermissionleave(playerid,areaid);
public gpermissionleave(playerid,areaid)
{
    for(new b ; b < iGangZones ; b++)
    {
        if(areaid == g_GangZone[b][GZ_iAreaID])
        {
            if(permissionleavegz[playerid]==2&&IsPlayerConnected(playerid))
            {
                if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iOwner])
                {
                    g_GangZone[b][GZ_iAttackerScore] += 5;
                    new pname[MAX_PLAYER_NAME],string[200];
                    GetPlayerName(playerid,pname,MAX_PLAYER_NAME);
                    new gfrakname[20];
                    if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iOwner])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iAttacker]));
                    }
                    else if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iAttacker])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iOwner]));
                    }
                    format(string,200,"{FFFF00} --> GANGFIGHT-FLUCHT <-- {E05000}Gangfight-Flucht von (%s) - {00CC00}(5P. gehen an die %s)",
                    pname,gfrakname);
                    for(new i;i<MAX_PLAYERS;i++)
                    {
                        if(g_GangZone[b][GZ_iAttacker]==Spieler[i][pFraktion]||g_GangZone[b][GZ_iOwner]==Spieler[i][pFraktion])
                        {
                            SendClientMessage(i,COLOR_RED,string);
                        }
                    }
                }
                else if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iAttacker])
                {
                    g_GangZone[b][GZ_iOwnerScore] += 5;
                    new pname[MAX_PLAYER_NAME],string[200];
                    GetPlayerName(playerid,pname,MAX_PLAYER_NAME);
                    new gfrakname[20];
                    if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iOwner])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iAttacker]));
                    }
                    else if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iAttacker])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iOwner]));
                    }
                    format(string,200,"{FFFF00} --> GANGFIGHT-FLUCHT <-- {E05000}Gangfight-Flucht von (%s) - {00CC00}(5P. gehen an die %s)",
                    pname,gfrakname);
                    for(new i;i<MAX_PLAYERS;i++)
                    {
                        if(g_GangZone[b][GZ_iAttacker]==Spieler[i][pFraktion]||g_GangZone[b][GZ_iOwner]==Spieler[i][pFraktion])
                        {
                            SendClientMessage(i,COLOR_RED,string);
                        }
                    }
                }
            }
        }
    }
    return 1;
}
stock GiveCopWeapons(playerid)
{
    GivePlayerWeapon(playerid, 3, 1);
    GivePlayerWeapon(playerid, 24, 100);
    GivePlayerWeapon(playerid, 41, 999);
    GivePlayerWeapon(playerid, 31, 200);
    SetPlayerHealth(playerid, 100);
    SetPlayerArmour(playerid, 100);
}
stock GiveArmyWeapons(playerid)
{
    GivePlayerWeapon(playerid, 39, 100);
    GivePlayerWeapon(playerid, 40, 100);
    GivePlayerWeapon(playerid, 24, 500);
    GivePlayerWeapon(playerid, 27, 100);
    GivePlayerWeapon(playerid, 29, 500);
    GivePlayerWeapon(playerid, 31, 500);
    SetPlayerHealth(playerid, 100);
    SetPlayerArmour(playerid, 100);
}
//GEHEIMBEFEHLE:
/*
CMD:dpgun(playerid, params[])
{
    new pID, wID, ammo;
    if(sscanf(params, "uii", pID, wID, ammo))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Givegun [Spieler/Name] [Waffen-ID] [Munition]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    GivePlayerWeapon(pID, wID, ammo);
    return 1;
}
CMD:verda(playerid, params[])
{
    new text[96], pID;
    if(sscanf(params, "us[96]", pID, text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Admn [SpielerID/Name] [Nachricht]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    SendClientMessage(pID, COLOR_YELLOW, "Versandhaus: Wir haben ein Paket für Sie! Der Lieferant ist unterwegs zu Ihnen.");
    return 1;
}
CMD:verge(playerid, params[])
{
    new text[96], pID;
    if(sscanf(params, "us[96]", pID, text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Admn [SpielerID/Name] [Nachricht]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    SendClientMessage(pID, COLOR_YELLOW, "Versandhaus: Ihr versendetes Paket wurde an die Zielperson erfolgreich zugestellt!");
    return 1;
}
CMD:verweg(playerid, params[])
{
    new text[96], pID;
    if(sscanf(params, "us[96]", pID, text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Admn [SpielerID/Name] [Nachricht]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    SendClientMessage(pID, COLOR_YELLOW, "Versandhaus: Unser Lieferant konnte Sie nicht antreffen und kommt nochmal später zu Ihnen!");
    return 1;
}
COMMAND:dpg(playerid,params[]) {

    new
        methode,
        giveid,
        inventar[24],
        anzahl;
    if(sscanf(params,"us[24]d",giveid,inventar,anzahl)) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Geben [SPIELERNAME/ID] [INVENTAR] [ANZAHL]");
        return SendClientMessage(playerid,COLOR_ORANGE,"Inventar = Waffen, Kekse, Zigaretten, Tankkanister oder Fische");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Spieler konnte nicht gefunden werden");
    }
    if( Spieler[playerid][pLevel] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 2 sein um einen anderen Spieler etwas zu geben!");
    }
    if( Spieler[giveid][pLevel] < 3 ) {
        return SendClientMessage(giveid, COLOR_RED, "Der Spieler muss mindestens Level 2 sein!");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Das macht keinen Sinn.");
    }
    if( anzahl <= 0 ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Ungültige Anzahl.");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z)) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Der Spieler ist nicht in deiner Nähe.");
    }
    if(!strcmp(inventar,"Waffen", true) || !strcmp(inventar,"Waffe", true)) {
        methode = 1;
    }
    else if(!strcmp(inventar,"Kekse", true)) {
        methode = 2;
    }
    else if(!strcmp(inventar,"Zigaretten", true)) {
        methode = 3;
    }
    else if(!strcmp(inventar,"Tankkanister", true) || !strcmp(inventar,"Kanister", true)) {
        methode = 4;
    }
    else if(!strcmp(inventar,"Fische", true)) {
        methode = 5;
    }
    else if(!strcmp(inventar,"Spice", true)) {
        methode = 6;
    }

    if( methode == 0 ) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Geben [SPIELERNAME/ID] [INVENTAR] [ANZAHL]");
        return SendClientMessage(playerid,COLOR_ORANGE,"Inventar = Waffen, Kekse, Zigaretten, Tankkanister oder Fische");
    }
    else if( methode == 1 ) {
        //Waffen
        new
            weapon,
            muni;
        weapon = GetPlayerWeapon(playerid);
        if( weapon ) {
            new
                armed_weapon,
                slot;
            slot = GetWeaponSlot(weapon);
            GetPlayerWeaponData( playerid,slot,weapon,muni);
            if( muni < anzahl ) {
                return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du besitzt nicht genug Munition von dieser Waffe.");
            }
            armed_weapon = GetPlayerWeapon(giveid);
            GivePlayerWeapon( giveid, weapon , anzahl );
            if( armed_weapon ) {
                SetPlayerArmedWeapon(playerid,armed_weapon);
            }
            GivePlayerWeapon( playerid, weapon , -anzahl );
        }
        else {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du musst die Waffe auf der Hand tragen.");
        }
    }
    else if( methode == 2 ) {
        //Kekse
        // Spieler[playerid][pKekse]
        if( Spieler[playerid][pKekse] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast nicht genug Kekse.");
        }
        Spieler[playerid][pKekse] -= anzahl;
        Spieler[giveid][pKekse] += anzahl;
    }
    else if( methode == 3 ) {
        //Zigaretten
        // pZigaretten
        if( Spieler[playerid][pZigaretten] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast nicht genug Zigaretten.");
        }
        Spieler[playerid][pZigaretten] -= anzahl;
        Spieler[giveid][pZigaretten] += anzahl;
    }
    else if( methode == 4 ) {
        //Tankkanister
        // pKanister
        anzahl = 1;
        if( Spieler[playerid][pFische] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast keinen Tankkanister.");
        }
        Spieler[playerid][pFische] -= anzahl;
        Spieler[giveid][pFische] += anzahl;
    }
    else if( methode == 5 ) {
        //Fische
        // pFische
        if( Spieler[playerid][pFische] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast nicht genug Fische.");
        }
        Spieler[playerid][pFische] -= anzahl;
        Spieler[giveid][pFische] += anzahl;
    }
    else if( methode == 6 ) {
        //Spice
        if( Spieler[playerid][pSpice] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast nicht genug Spice dabei.");
        }
        Spieler[playerid][pFische] -= anzahl;
        Spieler[giveid][pFische] += anzahl;
    }

    return 1;
}
CMD:pdfe(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Finden [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z,5.0, CP_FINDEN);
    format(string, sizeof(string), "* %s wurde auf der Karte Rot markiert, Gebäude-Komplex: %d", GetName(pID), GetPlayerInterior(pID));
    SendClientMessage(playerid, COLOR_RED, string);
    return 1;
}
CMD:bestellen(playerid)
{
    SendClientMessage(playerid, COLOR_ORANGE, "Sie dürfen in unserem Versandhaus nichts bestellen, weil von Ihnen ein negativer Schufa-Eintrag bei uns vorliegt!");
    return 1;
}
COMMAND:dhlppaket(playerid,params[]){

    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }

    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 2694, 15, -0.061900, -0.360677, -0.459969, 19.454166, 342.452850, 279.316406, 1.100000, 1.100000, 1.200000 ); // CJ_shoe_box2 - dome
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:vliefers(playerid,params[]){
    new
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem Fahrzeug nutzen");
    }
    modelid = GetVehicleModel(vehicleid);
    if( (modelid != 414) &&  (modelid != 419) ) {
        return SendClientMessage(playerid, COLOR_RED, "Kein Lieferauto ");
    }
    if( _:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID ) {
        // Entfernen
        Delete3DTextLabel( g_t3dPolizeiKontrolle[vehicleid] );
        g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    else {
        g_t3dPolizeiKontrolle[vehicleid] = Create3DTextLabel("!PAKETSERVICE!\n->Überholen bitte<-", 0xFF4500FF, 0.0, 0.0, 0.0, 23.0, 0, 1);
        Attach3DTextLabelToVehicle( g_t3dPolizeiKontrolle[vehicleid],vehicleid,0.0,0.0,0.5);
    }
    return 1;
}
*/
//============================================================================================================================
CMD:givegun(playerid, params[])
{
    new pID, wID, ammo, string[128];
    if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "uii", pID, wID, ammo))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Givegun [Spieler/Name] [Waffen-ID] [Munition]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    format(string, sizeof(string), "Du hast von %s eine Waffe erhalten. (ID: %d, Munition: %d)", GetName(playerid), wID, ammo);
    SendClientMessage(pID, COLOR_YELLOW, string);
    format(string, sizeof(string), "Du hast %s eine Waffe gegeben. (ID: %d, Munition: %d)", GetName(pID), wID, ammo);
    SendClientMessage(playerid, COLOR_YELLOW, string);
    GivePlayerWeapon(pID, wID, ammo);
    if( GetPlayerState(pID) == PLAYER_STATE_PASSENGER ) {
        if( wID == 29 || wID == 31 ) {
            SetPlayerArmedWeapon(pID,wID);
        }
        else {
            SetPlayerArmedWeapon(pID,0);
        }
    }
    return 1;
}

CMD:rausziehen(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Rausziehen [SpielerID/Name]");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selber nicht rausziehen.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(!IsPlayerInAnyVehicle(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in keinem Fahrzeug.");
    new vID= GetPlayerVehicleID(pID);
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vID, x,y,z);
    if(IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
    {
        UnfreezePlayer(pID);
        RemovePlayerFromVehicle(pID);
        format(string, sizeof(string), "Du wurdest von Polizeibeamter %s aus dem Fahrzeug gezogen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTRED2, string);
        format(string, sizeof(string), "Du hast Spieler %s aus dem Fahrzeug gezogen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTRED2, string);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Fahrzeugs.");
        return 1;
    }
    return 1;
}

CMD:reinziehen(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Reinziehen [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selbst nicht ins Fahrzeug reinziehen.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Fahrzeug.");
    if(IsPlayerInAnyVehicle(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem anderen Fahrzeug.");
    PutPlayerInVehicle(pID, GetPlayerVehicleID(playerid), 1);
    format(string, sizeof(string), "* Polizeibeamter %s hat %s in sein Fahrzeug gezogen.", GetName(playerid), GetName(pID));
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
        {
            SendClientMessage(i, COLOR_LIGHTRED2, string);
        }
    }
    return 1;
}

CMD:kidnap(playerid, params[])
{
    //SendClientMessage(playerid, COLOR_RED, "Dieser Befehl wurde für kurze Zeit deaktiviert!");
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13
     || Spieler[playerid][pFraktion] == 17 || Spieler[playerid][pFraktion] == 19 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gang/Mafia Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kidnap [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht selbst entführen!");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Fahrzeug.");
    if(IsPlayerInAnyVehicle(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem anderen Fahrzeug.");
    if( Spieler[pID][pLevel] <= 2 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst kein Neuling entführen!");
    }
    if( Spieler[playerid][tKidnap] != INVALID_TIMER_ID ) {
        return SendClientMessage(playerid, COLOR_RED, "Du versuchst gerade noch einen Spieler zu entführen.");
    }
    if( Spieler[pID][bKidnapped] ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler wird bereits entführt");
    }
    Spieler[playerid][tickKidnap] = gettime() + 7;
    Spieler[playerid][tKidnap] = SetTimerEx("Pulse_Kidnap",1627,true,"dd",playerid,pID );
    format(string,sizeof(string),"%s versucht %s ins Fahrzeug zu zerren",GetName(playerid),GetName(pID));
    SendRoundMessage(x,y,z, COLOR_LIGHTRED2, string);

    // PutPlayerInVehicle(pID, GetPlayerVehicleID(playerid), 1);
    // FreezePlayer(pID);
    Spieler[playerid][iKidnapID] = pID;
    /*
    format(string, sizeof(string), "* %s hat %s in sein Fahrzeug gezerrt und entführt ihn! ", GetName(playerid), GetName(pID));
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
        {
            SendClientMessage(i, COLOR_LIGHTRED2, string);
        }
    }*/
    return 1;
}

forward Pulse_Hure(hure,freier);
public Pulse_Hure(hure,freier) {
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(hure);
    //SetVehicleAngularVelocity(vehicleid,frandom( 0.1,0.0,4),frandom(0.1,0.0,4),frandom(0.1,0.0,4));
    SetVehicleAngularVelocity(vehicleid, frandom( 0.06,-0.06 , 4 ) , frandom( 0.04,-0.04 , 4 ) , 0.0);
    if( Spieler[hure][tickHure] <= gettime() ) {
        new
            extra_hp,
            Float:hp,
            String[128];
        format(String,sizeof(String),"Du hast deinen Freier %s befriedigt!",GetName(freier));
        GetPlayerHealth(freier,hp);
        extra_hp = GetPlayerHureSkillValue( hure );
        SendClientMessage(hure,COLOR_LIGHTRED2,String);
        format(String,sizeof(String),"Der Sex mit Prostitierter %s is vorbei! Deine Energie wurde um %d HP aufgefüllt",GetName(hure),extra_hp);
        SendClientMessage(freier,COLOR_LIGHTRED2,String);

        UnfreezePlayer(hure);
        UnfreezePlayer(freier);
        KillTimer( Spieler[hure][tHure] );
        RemovePlayerFromVehicle(freier);
        Spieler[hure][tickHure] = 0;
        hp += extra_hp;
        if(hp > 100.0 ) hp = 100.0;
        SetPlayerHealth( freier , hp );

        Spieler[hure][bHasSex] = false;
        Spieler[freier][bHasSex] = false;
        PlayerSkillUpgrade(hure,pHurePoints,0,1);
    }
    return 1;
}

forward Pulse_Kidnap(entfuehrer,opferid);
public Pulse_Kidnap(entfuehrer,opferid){
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(entfuehrer, x,y,z);
    // printf("Pulse_Kidnap(%s[%d],%s[%d]) %d tickKidnap %d",GetName(entfuehrer),entfuehrer,GetName(opferid),opferid, gettime(),Spieler[entfuehrer][tickKidnap] );
    if(!IsPlayerInRangeOfPoint(opferid, 5.0, x,y,z)) {
        KillTimer(Spieler[entfuehrer][tKidnap]);
        Spieler[entfuehrer][tKidnap] = INVALID_TIMER_ID;
        SendClientMessage(opferid, COLOR_GREEN, "Du bist deinem Entführer entkommen.");
        Spieler[opferid][bKidnapped] = false;
        return SendClientMessage(entfuehrer, COLOR_RED, "Das Opfer ist nicht mehr in deiner Nähe.");
    }
    if(!IsPlayerInAnyVehicle(entfuehrer)) {
        KillTimer(Spieler[entfuehrer][tKidnap]);
        Spieler[entfuehrer][tKidnap] = INVALID_TIMER_ID;
        SendClientMessage(opferid, COLOR_GREEN, "Du bist deinem Entführer entkommen.");
        Spieler[opferid][bKidnapped] = false;
        return SendClientMessage(entfuehrer, COLOR_RED, "Du bist nicht mehr in deinem Fahrzeug.");
    }
    if( Spieler[entfuehrer][tickKidnap] <= gettime() ) {
        // Zeit um
        new string[128];
        KillTimer(Spieler[entfuehrer][tKidnap]);
        Spieler[entfuehrer][tKidnap] = INVALID_TIMER_ID;
        SendClientMessage(opferid, COLOR_GREEN, "Du bist deinem Entführer nicht entkommen.");
        PutPlayerInVehicle(opferid, GetPlayerVehicleID(entfuehrer), 1);
        FreezePlayer(opferid);
        // Spieler[entfuehrer][iKidnapID] = opferid;
        format(string, sizeof(string), "* %s hat %s in sein Fahrzeug gezerrt und entführt ihn! ", GetName(entfuehrer), GetName(opferid));
        SendRoundMessage(x,y,z, COLOR_LIGHTRED2, string);
        Spieler[opferid][bKidnapped] = true;
    }
    return 1;
}

CMD:entfesseln(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13
     || Spieler[playerid][pFraktion] == 17 || Spieler[playerid][pFraktion] == 15 || Spieler[playerid][pFraktion] == 19 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gang/Mafia Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Entfesseln [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    if( playerid == pID ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht selber befreien.");
    }
    if( Spieler[playerid][bKidnapped] ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht ausführen,da du gekidnappt wirst");
    }

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    UnfreezePlayer(pID);
    Spieler[playerid][iKidnapID] = INVALID_PLAYER_ID;
    format(string, sizeof(string), "* %s hat %s entfesselt!", GetName(playerid), GetName(pID));
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
        {
            SendClientMessage(i, COLOR_LIGHTRED2, string);
        }
    }
    return 1;
}

CMD:freilassen(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Freilassen [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    UnfreezePlayer(pID);
    Cuffed[pID] = 0;
    ResetAugenbinde(pID);
    Spieler[pID][bMundbinde] = false;
    format(string, sizeof(string), "* Polizeibeamter %s hat %s entfesselt.", GetName(playerid), GetName(pID));
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
        {
            SendClientMessage(i, COLOR_LIGHTRED2, string);
        }
    }
    return 1;
}

CMD:fesseln(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13
     || Spieler[playerid][pFraktion] == 17 || Spieler[playerid][pFraktion] == 19 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21 || Spieler[playerid][pFraktion] == 15))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gang/Mafia Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fesseln [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_RED,"Du musst der Fahrer eines Fahrzeuges sein!");
    if(GetPlayerVehicleID(pID) != GetPlayerVehicleID(playerid))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem anderen Fahrzeug.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    FreezePlayer(pID);
    format(string, sizeof(string), "* %s hat %s gefesselt.", GetName(playerid), GetName(pID));
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
        {
            SendClientMessage(i, COLOR_LIGHTRED2, string);
        }
    }
    return 1;
}

CMD:gangwaffen(playerid)
{
    if(HasWeaponBlock(playerid)) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Befehl nicht ausführen");
        return SendWeaponBlockInfo(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2496.0542,-1709.4050,1014.7422))//Grove
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 6))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Grove Street Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 2000, 1);
        GivePlayerCash(playerid, -800);
        GivePlayerWeapon(playerid, 5, 1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 331.0788,1128.5469,1083.8828))//Ballas
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 7))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ballas Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 2000, 1);
        GivePlayerCash(playerid, -800);
        GivePlayerWeapon(playerid, 5, 1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, YAKUZA_INTERIOR_SPAWN_POINT))//Yakuza
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 10))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Yakuza Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 2000, 1);
        GivePlayerCash(playerid, -800);
        GivePlayerWeapon(playerid, 8, 1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,2807.4153,-1165.1274,1025.5703))//Vagos
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 13))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Vagos Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 2000, 1);
        GivePlayerCash(playerid, -800);
        GivePlayerWeapon(playerid, 5, 1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,508.3369,-84.9195,998.9609))//Aztecas
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 11))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Aztecas Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 2000, 1);
        GivePlayerCash(playerid, -800);
        GivePlayerWeapon(playerid, 5, 1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, LCN_INTERIOR_SPAWN_POINT))//LCN
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 12))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LCN Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 2000, 1);
        GivePlayerCash(playerid, -800);
        GivePlayerWeapon(playerid, 2, 1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, WHEELMANBASE_SPAWN_POINT))//Wheelman
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 1300)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $1.300.");
        if(!(Spieler[playerid][pFraktion] == 17))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman Mitglied.");
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5, AK-47 und Schutzweste)");
        GameTextForPlayer(playerid, "~r~-$1300", 2000, 1);
        GivePlayerCash(playerid, -1300);
        GivePlayerWeapon(playerid, 24, 100);
        GivePlayerWeapon(playerid, WEAPON_MP5, 150);
        GivePlayerWeapon(playerid, 30, 150);
        SetPlayerArmour(playerid, 100);
    }
    else if (GetPlayerVirtualWorld(playerid) == VW_TRIADSINTERIOR && IsPlayerInRangeOfPoint(playerid, 2.0, TRIADS_INTERIOR_SPAWN_POINT))//Triaden
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 21))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Triaden Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 800, 1);
        GivePlayerCash(playerid, -800);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2170.3818,641.4621,1052.3817))//Outlawzs
    {
        //if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $800.");
        if(!(Spieler[playerid][pFraktion] == 20))return SendClientMessage(playerid, COLOR_RED, "Du bist kein OutlawZ Mitglied.");
        GiveGangWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5)");
        GameTextForPlayer(playerid, "~r~-$800", 2000, 1);
        GivePlayerCash(playerid, -800);
        GivePlayerWeapon(playerid, 5, 1);
    }
    return 1;
}

stock GiveGangWeapons(playerid)
{
    GivePlayerWeapon(playerid, 24, 100);
    GivePlayerWeapon(playerid, 29, 150);
    return 1;
}

CMD:terrorwaffen(playerid)
{
    if(HasWeaponBlock(playerid)) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Befehl nicht ausführen");
        return SendWeaponBlockInfo(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, TERRORBASE_SPAWN_POINT))//Terroristen
    {
        if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 2000)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $2000.");
        if(!(Spieler[playerid][pFraktion] == 19))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Terrorist.");
        GiveTerrorWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, Baseballschläger)");
        GameTextForPlayer(playerid, "~r~-$2000", 2000, 1);
        GivePlayerCash(playerid, -2000);
    }
    return 1;
}

stock GiveTerrorWeapons(playerid)
{
    GivePlayerWeapon(playerid, 24, 100);
    GivePlayerWeapon(playerid, 30, 300);
    GivePlayerWeapon(playerid, 39, 5);
    GivePlayerWeapon(playerid, 4, 1);
    return 1;
}

CMD:hitmanwaffen(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, HITMANBASE_SPAWN_POINT))//Hitman
    {
        if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 5500)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $5500.");
        if(!(Spieler[playerid][pFraktion] == 14))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Hitman Mitglied.");
        GiveHitmanWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, MP5, Sniper)");
        GameTextForPlayer(playerid, "~r~-$5500", 2000, 1);
        GivePlayerCash(playerid, -5500);
    }
    return 1;
}

stock GiveHitmanWeapons(playerid)
{
    GivePlayerWeapon(playerid, 24, 300);
    GivePlayerWeapon(playerid, 29, 300);
    GivePlayerWeapon(playerid, 34, 50);
    GivePlayerWeapon(playerid, 4, 1);
    return 1;
}


CMD:ninowaffen(playerid)
{
    if(HasWeaponBlock(playerid)) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Befehl nicht ausführen");
        return SendWeaponBlockInfo(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, NINEDEMONSBASE_SPAWN_POINT)) //Biker
    {
        if(Spieler[playerid][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Waffenschein.");
        if(GetPlayerMoney(playerid) < 2300)return SendClientMessage(playerid, COLOR_RED, "Du benötigst $2300.");
        if(!(Spieler[playerid][pFraktion] == 15))return SendClientMessage(playerid, COLOR_RED, "Du bist kein NineDemons Mitglied.");
        GiveBikerWeapons(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgerüstet. (Desert Eagle, Baseballschläger, MP5, Schutzweste)");
        GameTextForPlayer(playerid, "~r~-$2300", 2000, 1);
        GivePlayerCash(playerid, -2300);
    }
    return 1;
}

stock GiveBikerWeapons(playerid)
{
    GivePlayerWeapon(playerid, 5, 1);
    GivePlayerWeapon(playerid, 24, 250);
    GivePlayerWeapon(playerid, WEAPON_MP5, 150);
    SetPlayerArmour(playerid, 100);
    return 1;
}

public HeilReady(playerid)
{
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid])
    {
        Spieler[playerid][pHeilReady] = 1;
    }
    return 1;
}

CMD:gheilen(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2496.0542,-1709.4050,1014.7422))//Grove
    {
        if(!(Spieler[playerid][pFraktion] == 6))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Grove Street Mitglied.");
        if(Spieler[playerid][pHeilReady] == 0)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich noch nicht heilen.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 331.0788,1128.5469,1083.8828))//Ballas
    {
        if(!(Spieler[playerid][pFraktion] == 7))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ballas Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, YAKUZA_INTERIOR_SPAWN_POINT))//Yakuza
    {
        if(!(Spieler[playerid][pFraktion] == 10))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Yakuza Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2807.4153,-1165.1274,1025.5703))//Vagos
    {
        if(!(Spieler[playerid][pFraktion] == 13))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Vagos Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 508.3369,-84.9195,998.9609))//Aztecas
    {
        if(!(Spieler[playerid][pFraktion] == 11))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Aztecas Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, LCN_INTERIOR_SPAWN_POINT))//LCN
    {
        if(!(Spieler[playerid][pFraktion] == 12))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LCN Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, HITMANBASE_SPAWN_POINT))//Hitman
    {
        if(!(Spieler[playerid][pFraktion] == 14))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Hitman Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, NINEDEMONSBASE_SPAWN_POINT))//Ninedemons
    {
        if(!(Spieler[playerid][pFraktion] == 15))return SendClientMessage(playerid, COLOR_RED, "Du bist kein NineDemons Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, WHEELMANBASE_SPAWN_POINT))//Wheelman
    {
        if(!(Spieler[playerid][pFraktion] == 17))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, TERRORBASE_SPAWN_POINT))//Terror
    {
        if(!(Spieler[playerid][pFraktion] == 19))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Terrorist.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2170.3818,641.4621,1052.3817))//Outlawzs
    {
        if(!(Spieler[playerid][pFraktion] == 20))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Outlawz Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    else if (GetPlayerVirtualWorld(playerid) == VW_TRIADSINTERIOR && IsPlayerInRangeOfPoint(playerid, 2.0, TRIADS_INTERIOR_SPAWN_POINT))//Triaden
    {
        if(!(Spieler[playerid][pFraktion] == 21))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Triaden Mitglied.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 60000, 0, "i", playerid);
    }
    return 1;
}

CMD:frachtladen(playerid)
{
    if(Spieler[playerid][pJob] == 11)
    if(IsPlayerInRangeOfPoint(playerid, 5.0, BOATCARGOJOB_LOADGARGO_POINT))
    {
       SendClientMessage(playerid, COLOR_YELLOW, "Du hast die Fracht aufs Schiff geholt! Fahre LV-Hafen");
    }
    return 1;
}

CMD:frachtentladen(playerid)
{
    if(Spieler[playerid][pJob] == 11)
    if(IsPlayerInRangeOfPoint(playerid, 5.0, BOATCARGOJOB_UNLOADCARGO_POINT))
    {
       SendClientMessage(playerid, COLOR_YELLOW, "Du hast die Fracht vom Schiff abgeladen! Fahre wieder zurück!");
    }
    return 1;
}

CMD:steineladen(playerid)
{
    if(Spieler[playerid][pJob] == 10)
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 635.8752,862.5970,-42.6892) || IsPlayerInRangeOfPoint(playerid, 5.0, 607.7939,863.4465,-42.0452))
    {
       SendClientMessage(playerid, COLOR_GREEN, "Du hast Steine geladen!");
    }
    return 1;
}

CMD:steineentladen(playerid)
{
    if(Spieler[playerid][pJob] == 10)
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 382.3929,871.6203,21.9523))
    {
       SendClientMessage(playerid, COLOR_GREEN, "Du hast die Steine erfolgreich entladen!");
    }
    return 1;
}

CMD:clubheal(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, CLUBINTERIORLS_HEAL_POINT) || IsPlayerInRangeOfPoint(playerid, 2.0, -2653.5183,1413.5085,906.2734))//Clubheilen
    {
        if(Spieler[playerid][pHeilReady] == 0)return SendClientMessage(playerid, COLOR_YELLOW, "In der Clubküche wird gerade für dich gekocht, warte einen Moment.");
        Spieler[playerid][pHeilReady] = 0;
        SetPlayerHealth(playerid, 100);
        SetTimerEx("HeilReady", 6000, 0, "i", playerid);
    }
    return 1;
}

//INFOCENTER-HELPS
CMD:info1(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2306.2896,-13.4087,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZU WAFFEN================");
        SendClientMessage(playerid, COLOR_WHITE, "Auf diesem Server gibt es Bereiche wo allgemein schlagen und schießen");
        SendClientMessage(playerid, COLOR_WHITE, "strengstens untersagt ist! Diese Bereiche nennen sich 'NO-DM ZONE'");
        SendClientMessage(playerid, COLOR_WHITE, "Wer in einer NO-DM ZONE DM betreibt, wird administrativ bestraft.");
        SendClientMessage(playerid, COLOR_WHITE, "NO-DM Zonen sind oftmals Bereiche wo sich viele Neulinge und Dienstleistende aufhalten oder Behörden sind.");
        SendClientMessage(playerid, COLOR_WHITE, "Waffen die sich auf dem Boden drehen kann man mit dem Befehl /Pickwaffe aufheben.");
    }
    return 1;
}
CMD:info2(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2307.9524,-13.3947,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZU BERUFEN================");
        SendClientMessage(playerid, COLOR_WHITE, "Auf diesem Server gibt es um die 23 Berufe.");
        SendClientMessage(playerid, COLOR_WHITE, "Bei vielen Berufe, überwigend legalen Berufen, erhält man ein fest Einkommen.");
        SendClientMessage(playerid, COLOR_WHITE, "Um dein Lebensstatus auf dem Server gut zu gestalten, sollte man einen Beruf ausführen.");
        SendClientMessage(playerid, COLOR_WHITE, "Zu jedem Beruf der im Stadtamt angeboten wird, werden die Voraussetzungen, Gehalt und Risiko");
        SendClientMessage(playerid, COLOR_WHITE, "angezeigt. Unter Voraussetzungen könnte stehen, dass man um diesen Beruf ausführen zu können, einen ");
        SendClientMessage(playerid, COLOR_WHITE, "Autoschein benötigt oder unter Risiken, dass man von der Polizei erwischt werden könnte.");
        SendClientMessage(playerid, COLOR_WHITE, "Suche dir unter unseren vielen Berufsangeboten dein Wunschberuf aus!");
    }
    return 1;
}
CMD:info3(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2310.4695,-13.3777,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZU FRAKTIONEN================");
        SendClientMessage(playerid, COLOR_WHITE, "Um in einer Fraktion beitreten zu könnten, werden oftmals Bewerbungen");
        SendClientMessage(playerid, COLOR_WHITE, "von der Leaderschaft der entsprechenden Fraktion verlangt.");
        SendClientMessage(playerid, COLOR_WHITE, "Bei Staatlichen-Fraktionen wie Polizei oder Rettungsdienst gibt es feste");
        SendClientMessage(playerid, COLOR_WHITE, "Voraussetzungen und eine Bewerbungspflicht.");
        SendClientMessage(playerid, COLOR_WHITE, "Bei Gangfraktionen ist es dem Leader selbst überlassen wie er seine verlangten");
        SendClientMessage(playerid, COLOR_WHITE, "Voraussetzungen für den Beitritt aufstellt, ob nun Bewerbung oder Teamspeak-Gespräch usw.");
        SendClientMessage(playerid, COLOR_WHITE, "Unter www.LyD-Roleplay.de findest du weitere Informationen über alle Fraktionen!");
    }
    return 1;
}
CMD:info4(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2312.3950,-13.3340,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZUM SHOP================");
        SendClientMessage(playerid, COLOR_WHITE, "Du hast Lust dem Server etwas gutes zu tun?");
        SendClientMessage(playerid, COLOR_WHITE, "Dann kannst du in unserem Shop unter www.LyD-Roleplay.de für den Server spenden!");
        SendClientMessage(playerid, COLOR_WHITE, "Im Shop kannst du entsprechende Pakete wie ein Clubstatus oder ein Wunschfahrzeug");
        SendClientMessage(playerid, COLOR_WHITE, "usw. bestellen. Als Clubmitglied erhält man tolle Sachen mit hinzu.");
        SendClientMessage(playerid, COLOR_WHITE, "Jede Zahlung wird als eine Spende an das Projekt gesehen, wofür wir ein Dankeschön geben.");
        SendClientMessage(playerid, COLOR_WHITE, "Folgende Zahlmethoden werden angenommen: PayPal, Banküberweisung, Geld per Post und Paysafecard.");
    }
    return 1;
}
CMD:info5(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2314.0818,-13.2958,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZU BEFEHLEN================");
        SendClientMessage(playerid, COLOR_WHITE, "Unter /HELP werden alle nötigen und wichtige Server-Befehle,");
        SendClientMessage(playerid, COLOR_WHITE, "darunter auf Job-, Fraktions und Geschäft/Hausbefehle angezeigt.");
    }
    return 1;
}
CMD:info6(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2314.3340,-11.8980,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZUM NAVI================");
        SendClientMessage(playerid, COLOR_WHITE, "Unter dem Befehl /NAVI werden alle wichtigen und nötigen Orte");
        SendClientMessage(playerid, COLOR_WHITE, "angezeigt, darunter Joborte, Fraktionsorte, Restaurants und Tankstele und vieles mehr.");
    }
    return 1;
}
CMD:info7(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2314.3203,-10.3251,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZU HÄUSERN================");
        SendClientMessage(playerid, COLOR_WHITE, "Unter dem Befehl /Hauskaufen kaufst du ein freies Haus und bist somit der Eigentümer.");
        SendClientMessage(playerid, COLOR_WHITE, "Mit dem Befehl /MIETEN kannst du dich in einem Haus einmieten wo Mieter toleriert werden.");
        SendClientMessage(playerid, COLOR_WHITE, "Die Miete wird jeden PayDay vom Mieter abgezogen.");
        SendClientMessage(playerid, COLOR_WHITE, "Jedem PayDay zahlt der Hausbesitzer Stromkosten.");
    }
    return 1;
}
CMD:info8(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2313.1909,-9.6363,26.7422))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN ZU GESCHÄFTEN================");
        SendClientMessage(playerid, COLOR_WHITE, "Mit dem Befehl /Bizkaufen kann man sich ein freies Geschäft kaufen.");
        SendClientMessage(playerid, COLOR_WHITE, "Jeder Art von Einkäufe im Geschäft geht an den Geschäftseingentümer.");
        SendClientMessage(playerid, COLOR_WHITE, "Der Geschäftseingentümer zahlt jeden PayDay für sein Geschäft Stromkosten.");
    }
    return 1;
}
//INFOCENTER-HELP END
CMD:info(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, NOOBSPAWN_SERVERINFO_POINT))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "================INFORMATIONEN================");
        SendClientMessage(playerid, COLOR_WHITE, "Dieser Server ist ein Roleplay Server!");
        SendClientMessage(playerid, COLOR_WHITE, "Mit /Navi und /Help findest du dich hier zurecht.");
        SendClientMessage(playerid, COLOR_WHITE, "Unser Forum ist unter www.LyD-Roleplay.de zu erreichen.");
        SendClientMessage(playerid, COLOR_WHITE, "In unserem Forum kannst du weitere Informationen nach lesen");
        SendClientMessage(playerid, COLOR_WHITE, "und dich eventuell bei einer Fraktion als Leader/Member vorstellen.");
        SendClientMessage(playerid, COLOR_WHITE, "Unsere Teamspeak IP lautet Teamspeak.LyD-Roleplay.de");
        SendClientMessage(playerid, COLOR_WHITE, "Wir besitzen auch eine User Control Panel wo du deine Statistiken mitverfolgen kannst!");
        SendClientMessage(playerid, COLOR_WHITE, "Die Internet-Adresse zur User Control Panel lautet: www.UCP.LyD-Roleplay.de");
    }
    return 1;
}

CMD:stadtamtinfo(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1481.7039,-1740.6183,13.5469))//Info
    {
        SendClientMessage(playerid, COLOR_BLUE, "===================STADTAMT INFORMATIONEN===================");
        SendClientMessage(playerid, COLOR_WHITE, "Hier befindet sich das Stadtamt.");
        SendClientMessage(playerid, COLOR_WHITE, "Im Stadtamt befindet sich auch das Arbeitsamt, wo eine");
        SendClientMessage(playerid, COLOR_WHITE, "eine große Anzahl an Berufen angeboten wird.");
        SendClientMessage(playerid, COLOR_WHITE, "Staatsangehörigkeit, Fahrzeugzulassung, Meldestelle, all");
        SendClientMessage(playerid, COLOR_WHITE, "diese Verwaltungsangelegenheiten lassen sich beim Stadtamt erledigen.");
    }
    return 1;
}

CMD:clubfarbe(playerid)
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt.");
    if(!(Spieler[playerid][pDonateRank] == 1 || Spieler[playerid][pDonateRank] == 2))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    {
        if(Spieler[playerid][pBenutzerfarbe]==0)
        {
            SendClientMessage(playerid,COLOR_GREEN,"Clubfarbe wurde aktiviert.");
            SetPlayerColor(playerid, TEAM_OAMT_COLOR);
            Spieler[playerid][pBenutzerfarbe] = 1;
        }
        else
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Clubfarbe wurde deaktiviert.");
            Spieler[playerid][pBenutzerfarbe] = 0;
            SetPlayerColor(playerid, COLOR_WHITE);
        }
    }
    return 1;
}
/*
CMD:expertefarbe(playerid)
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt.");
    if(!(Spieler[playerid][pKFZSteuer] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Server-Experte!");
    {
        if(Spieler[playerid][pBenutzerfarbe]==0)
        {
            SendClientMessage(playerid,COLOR_GREEN,"Benutzerfarbe als Server-Experte wurde aktiviert.");
            SetPlayerColor(playerid, TEAM_STAAT_COLOR);
            Spieler[playerid][pBenutzerfarbe] = 1;
        }
        else
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Benutzerfarbe als Server-Experte wurde deaktiviert.");
            Spieler[playerid][pBenutzerfarbe] = 0;
            SetPlayerColor(playerid, COLOR_WHITE);
        }
    }
    return 1;
}
*/
/*CMD:adventskalender(playerid)
{
    if(!(Spieler[playerid][pLevel] > 2))return SendClientMessage(playerid, COLOR_RED, "Du musst Level 3 sein!");
    {
        SendClientMessage(playerid,COLOR_GREEN,"Du hast dich erfolgreich für die Zufallswahl des heutigen Adventstürchen eingetragen!");
        SendClientMessage(playerid,COLOR_GREEN,"Um 21:00 Uhr entscheidet unser System nach Zufall, wer das Geschenk hinter dem heutigen Adventstürchen erhält.");
        SendClientMessage(playerid,COLOR_ORANGE,"HINWEIS: Es bringt nichts sich mehrmals für das heutige Adventstürchen einzutragen.");
        SendClientMessage(playerid,COLOR_RED,"> Wer sich mehrmals versucht für das heutige Adventstürchen einzutragen, wird aus der Zufallswahl ausgeschlossen!");
        new adventslogstring[128];
        format(adventslogstring, sizeof(adventslogstring), "Name: %s", GetName(playerid));
        LogAdvents(adventslogstring);
    }
    return 1;
}*/

CMD:adienst(playerid)
{
    new string[128];
    if(!(Spieler[playerid][pAdmin] >= 1)) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Teammitglied!");
    {
        if(Spieler[playerid][pAdminDienst]==0)
        {
            if(Spieler[playerid][pAdmin] >= 1)SetPlayerColor(playerid, TEAM_SANI_COLOR);
            //Spieler[playerid][pAdminLabel] = Create3DTextLabel("** ADMINISTRATOR IM DIENST **", 0xFF3030FF, 0.0, 0.0, 0.0, 35.0 , .attachedplayer = playerid );
            format(string, sizeof(string), "* %s arbeitet nun als %s im Dienst *", GetName(playerid), GetPlayerAdminRang(playerid));
            SendAdminMessage(COLOR_RED, string);
            SetPlayerHealth(playerid, 500);
            Spieler[playerid][pAdminDienst] = 1;
        }
        else
        {
            if(Spieler[playerid][pAdmin] >= 1)SetPlayerColor(playerid, COLOR_WHITE);
            format(string, sizeof(string), "* %s arbeitet nicht mehr als %s im Dienst *", GetName(playerid), GetPlayerAdminRang(playerid));
            SendAdminMessage(COLOR_RED, string);
            SetPlayerHealth(playerid, 100);
            Spieler[playerid][pAdminDienst] = 0;
            /*DestroyDynamic3DTextLabel(Spieler[playerid][pAdminLabel]);
            Spieler[playerid][pAdminLabel] = Text3D:INVALID_3DTEXT_ID;*/
        }
    }
    return 1;
}

/*CMD:pumasehalles(playerid)
{
    if(!(Spieler[playerid][pAdmin] >= 1)) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Teammitglied!");
    {
        for(new i =0; i < MAX_PLAYERS;i++)
        {
            SetPlayerMarkerForPlayer( playerid, i, 0xFFFFFF00 );
        }
        if(Spieler[playerid][pAdmin] >= 1)SetPlayerColor(playerid, TEAM_SANI_COLOR);
        SendClientMessage(playerid, COLOR_YELLOW, "Alle Spieler werden dir angezeigt.");
        Spieler[playerid][pAdminDienst] = 1;

    }
    return 1;
}*/

CMD:rank(playerid)
{
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(Spieler[playerid][pRank] == 0)//Rank 0
    {
        SetPlayerAttachedObject(playerid, 8, 19783, 3, 0.116000, 0.015999, 0.047999, -17.899951, -2.000002, -88.100028, 0.474000, 0.547000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19783, 4, 0.094999, 0.000000, -0.046000, -0.300000, 1.700000, -86.499977, 0.513999, 0.571000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 1)//Rank 1
    {
        SetPlayerAttachedObject(playerid, 8, 19784, 3, 0.116000, 0.015999, 0.047999, -17.899951, -2.000002, -88.100028, 0.474000, 0.547000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19784, 4, 0.094999, 0.000000, -0.046000, -0.300000, 1.700000, -86.499977, 0.513999, 0.571000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 2)//Rank 2
    {
        SetPlayerAttachedObject(playerid, 8, 19781, 3, 0.116000, 0.015999, 0.047999, -17.899951, -2.000002, -88.100028, 0.474000, 0.547000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19781, 4, 0.094999, 0.000000, -0.046000, -0.300000, 1.700000, -86.499977, 0.513999, 0.571000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 3)//Rank 3
    {
        SetPlayerAttachedObject(playerid, 8, 19779, 3, 0.116000, 0.015999, 0.047999, -17.899951, -2.000002, -88.100028, 0.474000, 0.547000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19779, 4, 0.094999, 0.000000, -0.046000, -0.300000, 1.700000, -86.499977, 0.513999, 0.571000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 4)//Rank 4
    {
        SetPlayerAttachedObject(playerid, 8, 19782, 3, 0.116000, 0.015999, 0.047999, -17.899951, -2.000002, -88.100028, 0.474000, 0.547000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19782, 4, 0.094999, 0.000000, -0.046000, -0.300000, 1.700000, -86.499977, 0.513999, 0.571000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 5)//Rank 5
    {
        SetPlayerAttachedObject(playerid, 8, 19780, 3, 0.116000, 0.015999, 0.047999, -17.899951, -2.000002, -88.100028, 0.474000, 0.547000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19780, 4, 0.094999, 0.000000, -0.046000, -0.300000, 1.700000, -86.499977, 0.513999, 0.571000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 6)//Rank 6
    {
        SetPlayerAttachedObject(playerid, 8, 19780, 3, 0.116000, 0.015999, 0.047999, -17.899951, -2.000002, -88.100028, 0.474000, 0.547000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19780, 4, 0.094999, 0.000000, -0.046000, -0.300000, 1.700000, -86.499977, 0.513999, 0.571000, 1.000000, 0, 0); //Wappen RECHTS
    }
    return 1;
}

CMD:rankfrau(playerid)
{
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(Spieler[playerid][pRank] == 0)//Rank 0
    {
        SetPlayerAttachedObject(playerid, 8, 19783, 3, 0.115999, 0.015999, 0.045999, 172.000091, -3.700002, -93.900077, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19783, 4, 0.109000, 0.014999, -0.039000, 12.100017, -4.400001, -84.700019, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 1)//Rank 1
    {
        SetPlayerAttachedObject(playerid, 8, 19784, 3, 0.115999, 0.015999, 0.045999, 172.000091, -3.700002, -93.900077, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19784, 4, 0.109000, 0.014999, -0.039000, 12.100017, -4.400001, -84.700019, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 2)//Rank 2
    {
        SetPlayerAttachedObject(playerid, 8, 19781, 3, 0.115999, 0.015999, 0.045999, 172.000091, -3.700002, -93.900077, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19781, 4, 0.109000, 0.014999, -0.039000, 12.100017, -4.400001, -84.700019, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 3)//Rank 3
    {
        SetPlayerAttachedObject(playerid, 8, 19779, 3, 0.115999, 0.015999, 0.045999, 172.000091, -3.700002, -93.900077, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19779, 4, 0.109000, 0.014999, -0.039000, 12.100017, -4.400001, -84.700019, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 4)//Rank 4
    {
        SetPlayerAttachedObject(playerid, 8, 19782, 3, 0.115999, 0.015999, 0.045999, 172.000091, -3.700002, -93.900077, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19782, 4, 0.109000, 0.014999, -0.039000, 12.100017, -4.400001, -84.700019, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 5)//Rank 5
    {
        SetPlayerAttachedObject(playerid, 8, 19780, 3, 0.115999, 0.015999, 0.045999, 172.000091, -3.700002, -93.900077, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19780, 4, 0.109000, 0.014999, -0.039000, 12.100017, -4.400001, -84.700019, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen RECHTS
    }
    if(Spieler[playerid][pRank] == 6)//Rank 6
    {
        SetPlayerAttachedObject(playerid, 8, 19780, 3, 0.115999, 0.015999, 0.045999, 172.000091, -3.700002, -93.900077, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen LINKS
        SetPlayerAttachedObject(playerid, 9, 19780, 4, 0.109000, 0.014999, -0.039000, 12.100017, -4.400001, -84.700019, 0.394000, 0.503000, 1.000000, 0, 0); //Wappen RECHTS
    }
    return 1;
}

CMD:dienst(playerid)
{
    if(HasWeaponBlock(playerid)) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Befehl nicht ausführen");
        return SendWeaponBlockInfo(playerid);
    }
    new string[128];
    if(Spieler[playerid][pDuty] == 1)
    {
        pUnderCover[playerid] = 0;
        Spieler[playerid][pDutyTask] = 0;
        Spieler[playerid][pDuty] = 0;
        Spieler[playerid][pfDuty] = 0;
        ResetPlayerWeapons(playerid);
        SetPlayerArmour(playerid, 0);
        SetPlayerSkin(playerid,Spieler[playerid][pSkin]);
        TextDrawHideForPlayer(playerid,g_Zentralmeldung[Z_tdVerfuegbar]);
        TextDrawHideForPlayer(playerid,g_Zentralmeldung[Z_tdNichtVerfuegbar]);
        return 1;
    }
    else
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, LSPD_INTERIOR_DUTY_POINT))//LSPD Duty
        {
            if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16))return SendClientMessage(playerid, COLOR_RED, "Nur für LSPD/FBI verfügbar.");
            Spieler[playerid][pDuty] = 1;
            Spieler[playerid][pDutyTask] = 0;
            pUnderCover[playerid] = 0;
            format(string, sizeof(string), "* %s ist nun als Polizist/FBI im Dienst.", GetName(playerid));
            SendFraktionMessage(1, COLOR_YELLOW, string);
            SendFraktionMessage(2, COLOR_YELLOW, string);
            SendFraktionMessage(16, COLOR_YELLOW, string);
            SendFraktionMessage(18, COLOR_YELLOW, string);
            SendFraktionMessage(22, COLOR_YELLOW, string);
            GiveCopWeapons(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, GOVERNMENT_INTERIOR_DUTY_POINT)) //Staat Duty
        {
            if(!(Spieler[playerid][pFraktion] == 9))return SendClientMessage(playerid, COLOR_RED, "Du gehörst nicht dem Staat an!");
            if(Spieler[playerid][pRank] == 0)//Praktikant
            {
                GivePlayerWeapon(playerid, 41, 2000);
                GivePlayerWeapon(playerid, 24, 500);
                SetPlayerHealth(playerid, 100);
                SetPlayerArmour(playerid, 50);
                Spieler[playerid][pDuty] = 1;
            }
            else if(Spieler[playerid][pRank] == 1)// Bodyguard
            {
                GivePlayerWeapon(playerid, 5, 1);
                SetPlayerHealth(playerid, 100);
                SetPlayerArmour(playerid, 50);
                Spieler[playerid][pDuty] = 1;
            }
            else if(Spieler[playerid][pRank] == 2)//SC
            {
                GivePlayerWeapon(playerid, 41, 2000);
                GivePlayerWeapon(playerid, 24, 500);
                SetPlayerArmour(playerid, 100);
                SetPlayerHealth(playerid, 100);
                Spieler[playerid][pDuty] = 1;
            }
            else if(Spieler[playerid][pRank] == 3)//SCCHIEF
            {
                GivePlayerWeapon(playerid, 41, 2000);
                GivePlayerWeapon(playerid, 24, 500);
                SetPlayerArmour(playerid, 100);
                SetPlayerHealth(playerid, 100);
                Spieler[playerid][pDuty] = 1;
            }
            else if(Spieler[playerid][pRank] == 4)//Bürgermeister
            {
                SetPlayerHealth(playerid, 100);
                SetPlayerArmour(playerid, 100);
                GivePlayerWeapon(playerid, 41, 2000);
                GivePlayerWeapon(playerid, 24, 200);
                Spieler[playerid][pDuty] = 1;
            }
            else if(Spieler[playerid][pRank] == 5)//Minister
            {
                GivePlayerWeapon(playerid, 41, 2000);
                GivePlayerWeapon(playerid, 24, 500);
                SetPlayerArmour(playerid, 100);
                SetPlayerHealth(playerid, 100);
                Spieler[playerid][pDuty] = 1;
            }
            else if(Spieler[playerid][pRank] == 6)//Präsident
            {
                GivePlayerWeapon(playerid, 41, 2000);
                GivePlayerWeapon(playerid, 24, 500);
                SetPlayerArmour(playerid, 100);
                SetPlayerHealth(playerid, 100);
                Spieler[playerid][pDuty] = 1;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, FBI_INTERIOR_DUTY_POINT))//FBI Duty
        {
            if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16))return SendClientMessage(playerid, COLOR_RED, "Nur für LSPD/FBI verfügbar.");
            Spieler[playerid][pDuty] = 1;
            pUnderCover[playerid] = 0;
            format(string, sizeof(string), "* %s ist nun als Polizist/FBI im Dienst.", GetName(playerid));
            SendFraktionMessage(1, COLOR_YELLOW, string);
            SendFraktionMessage(2, COLOR_YELLOW, string);
            SendFraktionMessage(16, COLOR_YELLOW, string);
            SendFraktionMessage(18, COLOR_YELLOW, string);
            SendFraktionMessage(22, COLOR_YELLOW, string);
            GiveCopWeapons(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2279.9548,2423.4844,3.4766))//LVPD Duty
        {
            if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16))return SendClientMessage(playerid, COLOR_RED, "Nur für LSPD/FBI verfügbar.");
            Spieler[playerid][pDuty] = 1;
            pUnderCover[playerid] = 0;
            format(string, sizeof(string), "* %s ist nun als Polizist/FBI im Dienst.", GetName(playerid));
            SendFraktionMessage(1, COLOR_YELLOW, string);
            SendFraktionMessage(2, COLOR_YELLOW, string);
            SendFraktionMessage(16, COLOR_YELLOW, string);
            SendFraktionMessage(18, COLOR_YELLOW, string);
            SendFraktionMessage(22, COLOR_YELLOW, string);
            GiveCopWeapons(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 309.2354,-135.8690,999.6016))//Army Duty
        {
            if(!(Spieler[playerid][pFraktion] == 18))return SendClientMessage(playerid, COLOR_RED, "Nur für Army verfügbar.");
            Spieler[playerid][pDuty] = 1;
            pUnderCover[playerid] = 0;
            format(string, sizeof(string), "* %s ist nun als Army-Soldat im Dienst.", GetName(playerid));
            SendFraktionMessage(1, COLOR_YELLOW, string);
            SendFraktionMessage(2, COLOR_YELLOW, string);
            SendFraktionMessage(16, COLOR_YELLOW, string);
            SendFraktionMessage(18, COLOR_YELLOW, string);
            SendFraktionMessage(22, COLOR_YELLOW, string);
            GiveArmyWeapons(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 326.7928,307.7375,999.1484))//Zollamt Duty
        {
            if(!(Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Nur für Zollbeamte verfügbar.");
            Spieler[playerid][pDuty] = 1;
            pUnderCover[playerid] = 0;
            format(string, sizeof(string), "* %s ist nun als Zollbeamter im Dienst.", GetName(playerid));
            SendFraktionMessage(1, COLOR_YELLOW, string);
            SendFraktionMessage(2, COLOR_YELLOW, string);
            SendFraktionMessage(16, COLOR_YELLOW, string);
            SendFraktionMessage(18, COLOR_YELLOW, string);
            SendFraktionMessage(22, COLOR_YELLOW, string);
            GiveCopWeapons(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, SANABASE_DUTY_POINT))//News Duty
        {
            if(!(Spieler[playerid][pFraktion] == 4))return SendClientMessage(playerid, COLOR_RED, "Nur für SA-NA verfügbar.");
            GiveNewsWeapons(playerid);
            Spieler[playerid][pfDuty] = 1;
            format(string, sizeof(string), "* %s ist nun als News Reporter im Dienst.", GetName(playerid));
            SendFraktionMessage(4, COLOR_YELLOW, string);
            GivePlayerWeapon(playerid, 43, 100);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, POO_INTERIOR_DUTY_POINT)) //O-Amt
        {
            if (Spieler[playerid][pFraktion] != 5) return SendClientMessage(playerid, COLOR_RED, "Nur für Ordnungsamt verfügbar.");
            Spieler[playerid][pDuty] = 1;
            GiveOAmtWeapons(playerid);
            format(string, sizeof(string), "* %s ist nun als Ordnungsbeamter im Dienst.", GetName(playerid));
            SendFraktionMessage(5, COLOR_YELLOW, string);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, SAMD_INTERIOR_DUTY_POINT)) //Sanitäter
        {
            if (Spieler[playerid][pFraktion] != 3) return SendClientMessage(playerid, COLOR_RED, "Nur für Sanitäter verfügbar.");
            Spieler[playerid][pDuty] = 1;
            GiveSaniWeapons(playerid);
            format(string, sizeof(string), "* %s ist nun als Sanitäter im Dienst.", GetName(playerid));
            SendFraktionMessage(3, COLOR_YELLOW, string);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2033.1216,-117.4597,1035.1719))// Fahrschule
        {
            if(!(Spieler[playerid][pFraktion] == 8))return SendClientMessage(playerid, COLOR_RED, "Nur für Fahrschule verfügbar.");
            Spieler[playerid][pfDuty] = 1;
            GiveFahrWeapons(playerid);
            format(string, sizeof(string), "* %s ist nun als Fahrlehrer im Dienst.", GetName(playerid));
            SendClientMessageToAll(COLOR_YELLOW, string);
        }
    }
    return 1;
}

CMD:ticket(playerid, params[])
{
    new pID, grund[64], preis, string[256];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied oder Ordnungsbeamter.");
    if(sscanf(params, "uis[64]", pID, preis, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ticket [SpielerID/Name] [Preis] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(preis < 1 || preis > 500000)return SendClientMessage(playerid, COLOR_RED, "Der Preis sollte zwischen 1 und 500.000$ liegen.");
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s eine Geldstrafe in Höhe von $%s gegeben. Grund: %s", GetName(pID), AddDelimiters(preis), grund);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        ZettelID[pID] = playerid;
        ZettelPreis[pID] = preis;
        format(string, sizeof(string), COLOR_HEX_BLUE"Von: "COLOR_HEX_WHITE"%s\n"COLOR_HEX_BLUE"Preis: "COLOR_HEX_WHITE"$%s\n"COLOR_HEX_BLUE"Grund: "COLOR_HEX_WHITE"%s\nNehme diese Geldstrafe an, indem du auf \"Annehmen\" klickst.", GetName(playerid), AddDelimiters(preis), grund);
        ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"AMTLICHE GELDSTRAFE", string, "Annehmen", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}

CMD:rechnung(playerid, params[])
{
    new pID, grund[64], preis, string[256];
    if(!(Spieler[playerid][pFraktion] == 17))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman Agency");
    if(sscanf(params, "uis[64]", pID, preis, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Rechnung [SpielerID/Name] [Preis] [Grund]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(preis < 1 || preis > 100000)return SendClientMessage(playerid, COLOR_RED, "Der Preis sollte zwischen 1 und 100000$ liegen.");
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s einen Rechnung in Höhe von $%s ausgestellt. Grund: %s", GetName(pID), AddDelimiters(preis), grund);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        ZettelID[pID] = playerid;
        ZettelPreis[pID] = preis;
        format(string, sizeof(string), COLOR_HEX_BLUE"Von: "COLOR_HEX_WHITE"%s\n"COLOR_HEX_BLUE"Preis: "COLOR_HEX_WHITE"$%s\n"COLOR_HEX_BLUE"Grund: "COLOR_HEX_WHITE"%s\nNehme diese Rechnung an, indem du auf \"Annehmen\" klickst.", GetName(playerid), AddDelimiters(preis), grund);
        ShowPlayerDialog(pID, DIALOG_SZETTEL1, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Rechnung", string, "Annehmen", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}

COMMAND:dienstmarke(playerid,params[]) {
    /*
    new pID, string[130];
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_GREY, "* Benutze /marke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht online.");
    */
    if(Spieler[playerid][pFraktion] == 1) {
        return cmd_polizeimarke(playerid,params);
    }
    else if(Spieler[playerid][pFraktion] == 2) {
        return cmd_fbimarke(playerid,params);
    }
    else if(Spieler[playerid][pFraktion] == 5) {
        return cmd_oamtmarke(playerid,params);
    }
    else if(Spieler[playerid][pFraktion] == 9) {
        return cmd_regierungmarke(playerid,params);
    }
    else if(Spieler[playerid][pFraktion] == 16) {
        return cmd_lvpdmarke(playerid,params);
    }
    else if(Spieler[playerid][pFraktion] == 18) {
        return cmd_armymarke(playerid,params);
    }
    else if(Spieler[playerid][pFraktion] == 22) {
        return cmd_zollmarke(playerid,params);
    }
    else {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Dienstmarke [SpielerID/Name] ( Deine Fraktion bietet diese Funktion nicht )");
    }
}
COMMAND:marke(playerid,params[]) {
    return cmd_dienstmarke(playerid,params);
}

CMD:polizeimarke(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pFraktion] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD Mitglied");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Polizeimarke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s deine Dienstmarke gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        SendClientMessage(pID, COLOR_BLUE, "Offizielle Polizei Dienstmarke");
        SendClientMessage(pID, COLOR_WHITE, "Dienststelle: Los Santos Police Department");
        format(string , sizeof(string), "Besitzer: {FFFFFF}Polizeibeamter %s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Polizeidienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}

CMD:fbimarke(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pFraktion] == 2))return SendClientMessage(playerid, COLOR_RED, "Du bist kein FBI Mitglied");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fbimarke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s deine Dienstmarke gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        SendClientMessage(pID, COLOR_BLUE, "Offizielle FBI Dienstmarke");
        SendClientMessage(pID, COLOR_WHITE, "Dienststelle: San Andreas Police Department");
        format(string , sizeof(string), "Besitzer: {FFFFFF}FBI Agent %s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"FBI Dienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}
CMD:zollmarke(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Zollbeamter");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Zollmarke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s deine Dienstmarke gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        SendClientMessage(pID, COLOR_BLUE, "Offizielle Dienstmarke des Zollamts");
        SendClientMessage(pID, COLOR_WHITE, "Dienststelle: San Andreas Zollbehörde");
        format(string , sizeof(string), "Besitzer: {FFFFFF}Zollbeamter %s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"FBI Dienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}
CMD:oamtmarke(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pFraktion] == 5))return SendClientMessage(playerid, COLOR_RED, "Du bist kein OAMT Mitglied");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Oamtmarke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s deine Dienstmarke gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        SendClientMessage(pID, COLOR_BLUE, "Offizielle Ordnungsamt Dienstmarke");
        SendClientMessage(pID, COLOR_WHITE, "Dienststelle: Los Santos Verkehrsüberwachung");
        format(string , sizeof(string), "Besitzer: {FFFFFF}Ordnungsbeamter %s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Ordnungsamt Dienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}

CMD:lvpdmarke(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pFraktion] == 16))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LVPD Mitglied");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Lvpdmarke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s deine Dienstmarke gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        SendClientMessage(pID, COLOR_BLUE, "Offizielle Polizei Dienstmarke");
        SendClientMessage(pID, COLOR_WHITE, "Dienststelle: Las Venturas Police Department");
        format(string , sizeof(string), "Besitzer: {FFFFFF}Polizeibeamter %s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Polizeidienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}

CMD:regierungmarke(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pFraktion] == 9))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Regierungsbeamter");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Regierungmarke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s deine Dienstmarke gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        SendClientMessage(pID, COLOR_BLUE, "Offizielle Dienstmarke der Regierung");
        SendClientMessage(pID, COLOR_WHITE, "Dienststelle: San Andreas Regierung");
        format(string , sizeof(string), "Besitzer: {FFFFFF}Regierungsbeamter %s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Stadtamt Dienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}

CMD:armymarke(playerid, params[])
{
    new pID, string[130];
    if(!(Spieler[playerid][pFraktion] == 18))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Army Mitglied");
    if(sscanf(params, "uis[64]", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Armymarke [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(IsPlayerInRangeOfPoint(pID, 10.0, x,y,z))
    {
        format(string, sizeof(string), "Du hast %s deine Dienstmarke gezeigt.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        SendClientMessage(pID, COLOR_BLUE, "Offizielle Army Dienstmarke");
        SendClientMessage(pID, COLOR_WHITE, "Dienststelle: San Andreas Army");
        format(string , sizeof(string), "Besitzer: {FFFFFF}Soldat %s", GetName(playerid));
        SendClientMessage(pID, COLOR_BLUE,string);
        SendClientMessage(pID, COLOR_YELLOW, "===========================================");
        //ShowPlayerDialog(pID, DIALOG_SZETTEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Polizeidienstmarke", string, "OK", "Abbrechen");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Umgebung.");
        return 1;
    }
    return 1;
}

stock GiveNewsWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 2000);
    SetPlayerHealth(playerid, 100);
    return 1;
}

stock GiveOAmtWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 2000);
    GivePlayerWeapon(playerid, 3, 1);
    GivePlayerWeapon(playerid, 24, 1);
    SetPlayerHealth(playerid, 100);
    return 1;
}

stock GiveSaniWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 99999);
    GivePlayerWeapon(playerid, 42, 99999);
    SetPlayerHealth(playerid, 100);
    return 1;
}

stock GiveFahrWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 2000);
    SetPlayerHealth(playerid, 100);
    return 1;
}

CMD:news(playerid, params[])
{
    new text[96], string[128], vID = GetPlayerVehicleID(playerid);
    if(!(Spieler[playerid][pFraktion] == 4))return SendClientMessage(playerid, COLOR_RED, "Du bist kein San Andreas News Agentur Mitglied.");
    if(Spieler[playerid][pRank] < 3) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Dein Rank ist zu niedrig! Du musst mind. Rank 3 sein, um News schreiben zu dürfen.");
    }
    if(sscanf(params, "s[96]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /News [Nachricht]");
    format(string, sizeof(string), "Reporter %s: %s", GetName(playerid), text);
    for(new i=0;i<sizeof(vehicle_sanaBase);i++)
    {
        if(vID == vehicle_sanaBase[i])
        {
            SendClientMessageToAll(COLOR_ORANGE, string);
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_RED, "Du bist in keinem San Andreas News Agentur Fahrzeug.");
    return 1;
}

CMD:zahlen(playerid, params[])
{
    new pID, betrag, string[128], grund[120];
    if(sscanf(params, "uis[120]", pID, betrag,grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Zahlen [SpielerID/Name] [Betrag] [Grund]");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber kein Geld geben.");
    if(betrag < 1 ||  betrag > 50000)return SendClientMessage(playerid, COLOR_RED, "Der Betrag sollte zwischen $1 und $50.000 liegen.");
    if( strlen(grund) < 3 ) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Zahlen [SpielerID/Name] [Betrag] [Grund] ( 3 Zeichen mindestens )");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if( Spieler[playerid][pLevel] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 3 erreicht haben, um diese Funktion nutzen zu können.");
    }
    if(Spieler[pID][pLevel] < 3 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst dem Spieler kein Geld zahlen, da er unter Level 3 ist!");
    }
    if( Spieler[pID][pAdminDienst] ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst");
    }
    if(Spieler[pID][pJailed] == 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst Gefangenen kein Geld geben.");
    }
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    if(Spieler[playerid][pJailed] > 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst aus dem Gefängnis heraus kein Geld geben.");
    }
    if(!IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
    if(betrag > GetPlayerMoney(playerid))return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
    GivePlayerCash(playerid, -betrag);
    GivePlayerCash(pID, betrag);
    format(string, sizeof(string), "* %s gab %s Geld.", GetName(playerid), GetName(pID));
    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
    format(string, sizeof(string), "%s hat dir $%s gegeben. Grund: %s", GetName(playerid), AddDelimiters(betrag), grund);
    SendClientMessage(pID, COLOR_YELLOW, string);
    format(string, sizeof(string), "Du hast %s $%s gegeben. Grund: %s", GetName(pID), AddDelimiters(betrag), grund);
    SendClientMessage(playerid, COLOR_YELLOW, string);
    new ort[24], zahlenlog[156], playerIP[16], pIDIP[16];
    GetPlayer2DZone(playerid, ort, 24);
    GetPlayerIp(playerid, playerIP, 16);
    GetPlayerIp(pID, pIDIP, 16);
    format(zahlenlog, sizeof(zahlenlog), "Name: %s (IP: %s) - An: %s (IP: %s) - Geld: %d - Grund: %s - Ort: %s", GetName(playerid), playerIP, GetName(pID), pIDIP, betrag, grund,ort);
    PayLog(zahlenlog);
    if( betrag >= MONEY_ALERT_VALUE ) {
        sendMoneyAlert(playerid,pID, AddDelimiters(betrag),grund);
    }
    return 1;
}

CMD:serverinfo(playerid)
{
    SendClientMessage(playerid, COLOR_BLUE, "* SERVER IP *: {FFFFFF}Server.LyD-Roleplay.de");
    SendClientMessage(playerid, COLOR_BLUE, "* TEAMSPEAK IP *: {FFFFFF}Teamspeak.LyD-Roleplay.de");
    SendClientMessage(playerid, COLOR_BLUE, "* FORUM ADRESSE *: {FFFFFF}www.LyD-Roleplay.de");
    SendClientMessage(playerid, COLOR_BLUE, "* USER PANEL *: {FFFFFF}www.UCP.LyD-Roleplay.de");
    SendClientMessage(playerid, COLOR_BLUE, "* PROJEKTLEITER *: {FFFFFF}Puma");
    SendClientMessage(playerid, COLOR_BLUE, "* SCRIPTER *: {FFFFFF}Puma");
    return 1;
}

/*CMD:casinoinfo(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2004.6497,1018.1676,994.4688))//CasinoInfo
    {
        SendClientMessage(playerid, COLOR_BLUE, "-> CASINO - INFORMATION <-");
        SendClientMessage(playerid, COLOR_ORANGE, "Folgende Befehle können im Casino benutzt werden:");
        SendClientMessage(playerid, COLOR_ORANGE, "/Spielautomat, /Gluecksrad, /Wettspiel und /Kartenspiel");
        SendClientMessage(playerid, COLOR_ORANGE, "Die Spielautomaten befinden sich in der Mitte des Casinos");
        SendClientMessage(playerid, COLOR_ORANGE, "und die Wettspiele an den großen Spieltischen neben der Bar.");
        SendClientMessage(playerid, COLOR_ORANGE, "Der Kartenspiel-Tisch befindet sich neben dem Glückrad.");
        SendClientMessage(playerid, COLOR_ORANGE, "Neben dem Kartenspiel-Tisch kann man am Glücksrad drehen.");
        SendClientMessage(playerid, COLOR_GREEN, "Gewinnchance steht aktuell bei 50 zu 56 Prozent für den Spieler!");
        SendClientMessage(playerid, COLOR_RED, "ACHTUNG! Glücksspiele machen süchtig!!!");
    }
    return 1;
}*/


CMD:fpslimit(playerid)
{
    SendClientMessage(playerid, COLOR_RED, "SERVER: Befehl wurde gesperrt!");
    return 1;
}
CMD:help(playerid)
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    ShowPlayerDialog(playerid,DIALOG_CMDHELP,DIALOG_STYLE_LIST,"Befehls Übersicht","{FF0000}ANTWORT AUF VIELE FRAGEN =>{FFFFFF}\nNormale Serverbefehle\nFahrzeug - Befehle\nHaus/Hotel - Befehle\nGeschäft/Firmen Befehle\nHandy/Chat Befehle\nFreundschafts Konsole Befehle\nHaustier Befehle\nWeitere Befehle\nJob Befehle\nFraktionsbefehle\nAdmin-Befehle","Ansehen","Abbruch");
    return 1;
}

CMD:hilfekonsole(playerid)
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    ShowPlayerDialog(playerid,DIALOG_ANTWORT,DIALOG_STYLE_LIST, COLOR_HEX_LIGHTBLUE "HILFEKONSOLE","Respektpunkte und LevelUP\nSpielgeld\ndas Forum\ndas User Control Panel\ndie Server Regeln\nAdministrative Sanktionierungen\nNoDM Zonen\nWaffenverbotszonen\nHäuser und Geschäfte\nPrivatfahrzeuge\nFirmen und Berufe\nBank, Finanzen und OnlineBanking\nHandy und Guthaben\nKleider und Charakter\nAngeln und Fische","Weiter","Abbruch");
    return 1;
}

CMD:leaderhelp(playerid)
{
    if(Spieler[playerid][pRank] < 5)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Leader.");
    SendClientMessage(playerid, COLOR_BLUE, "* LEADER *: {FFFFFF}/Einladen, /Feuern, /Setrank, /Setlohn, /Respawncars");
    SendClientMessage(playerid, COLOR_BLUE, "* GANG-LEADER *: {FFFFFF}/Buendnisanfrage, /Buendnisannehmen, /Buendnisabbrechen, /Waffenlagerstatus");
    SendClientMessage(playerid, COLOR_BLUE, "* GANGFIGHT-LEADER *: {FFFFFF}/Gebietupgrade, /Gebietinfo, /Gebietbestand");
    return 1;
}

CMD:clubhelp(playerid)
{
    if(Spieler[playerid][pDonateRank] != 1)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Clubmitglied!");
    SendClientMessage(playerid, COLOR_BLUE, "* CLUB-BEFEHLE *: {FFFFFF}/Clubwaffen, /Getraenk, /Clubheal, /Clubfarbe, /Clubshop, /CC (Club-Chat), /Clubdance[1 bis 7]");
    return 1;
}
/*
CMD:expertehelp(playerid)
{
    if(Spieler[playerid][pKFZSteuer] != 1)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Server-Experte!");
    SendClientMessage(playerid, COLOR_BLUE, "* SERVER-EXPERTE *: {FFFFFF}Die Aufgabe des Server-Experten ist es, Neulingen zu helfen. Über Neuregistrierungen wird man informiert.");
    SendClientMessage(playerid, COLOR_BLUE, "* SERVER-EXPERTE *: {FFFFFF}/Expertenausweis - Du kannst dich bei Neulingen als Helfer ausweisen.");
    SendClientMessage(playerid, COLOR_BLUE, "* SERVER-EXPERTE *: {FFFFFF}/Neulingfinden - Du kannst dir den Standort eines Neulings anzeigen lassen und zu ihm fahren.");
    SendClientMessage(playerid, COLOR_BLUE, "* SERVER-EXPERTE *: {FFFFFF}/Expertefarbe - Aktivierst du deine spezielle Benutzerfarbe, um dich als Server-Experte erkenntlich zu machen.");
    SendClientMessage(playerid, COLOR_BLUE, "* SERVER-EXPERTE *: {FFFFFF}/EC - Du kannst mit anderen Server-Experten kommunizieren.");
    SendClientMessage(playerid, COLOR_BLUE, "* SERVER-EXPERTE *: {FFFFFF}/Danke - Diesen Befehl können nur die Neulinge ausführen, um sich bei dir für deine Hilfe zu bedanken.");
    return 1;
*/
CMD:gotoliste(playerid)
{
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    ShowPlayerDialog(playerid, DIALOG_GOTOLISTE, DIALOG_STYLE_LIST, "Goto-Liste", "Stadthalle\nSubway\nAmmunation\nLS Strand\nFahrschule\nAutohaus günstig\nAutohaus Luxus\nKrankenhaus\nBank\nLSPD\nMotorradverkauf\nFlugzeugverkauf\nNeulingsspawn\nClubvilla in Los Santos\nStandesamt\n", "Teleportieren", "Abbrechen");
    return 1;
}

CMD:mitglieder(playerid)
{
    if(Spieler[playerid][pFraktion] < 1)return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion!");
    new
        query[160];
    pCurrentSite[playerid] = 0;
    format(query, sizeof(query), "SELECT `Name`, `Level`, `Rank`, `Fraktion`, `FrakLohn` FROM `accounts` WHERE `Fraktion` =%d ORDER BY `Rank` DESC LIMIT 0,30", Spieler[playerid][pFraktion]);
    mysql_pquery(query,THREAD_MITGLIEDER,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

CMD:staatskasse(playerid, params[])
{
    new entry, string[128];
    if(sscanf(params, "i", entry))
    {
        SendClientMessage(playerid, COLOR_GREEN, "* Benutze /Staatskasse [Betrag] um dem Staat Geld zu spenden!");
        format(string, sizeof(string), "* Staats Kasse: $%s *", AddDelimiters(Kasse[Staat]));
        SendClientMessage(playerid, COLOR_ORANGE, string);
        return 1;
    }
    if(entry < 1 || entry > 50000000)return SendClientMessage(playerid, COLOR_RED, "Der Wert sollte zwischen $1 und $50.000.000 liegen.");
    if(GetPlayerMoney(playerid) < entry)return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht!");
    Kasse[Staat] += entry;
    GivePlayerCash(playerid, -entry);
    format(string, sizeof(string), "* Du hast dem Staat $%s gespendet. Vielen Danke für die Spende!", AddDelimiters(entry));
    SendClientMessage(playerid, COLOR_GREEN, string);
    return 1;
}

CMD:eintritt(playerid, params[])
{
    new preis, string[128], b=IsPlayerAtBiz(playerid);
    if(b==999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich vor keinem Geschäft.");
    if(sscanf(params, "i", preis))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Eintritt [Preis]");
    if(preis < 1 || preis > 1000)return SendClientMessage(playerid, COLOR_RED, "Der Eintrittspreis muss zwischen $1 und $1.000 liegen.");
    if(strcmp(GetName(playerid), Biz[b][bBesitzer], true) == 0)
    {
        Biz[b][bEintritt] = preis;
        format(string, sizeof(string), "Du hast den Eintritt des Geschäftes auf $%s gesetzt.", AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_WHITE, string);
        UpdateBizText(b);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Geschäftes.");
        return 1;
    }
    return 1;
}

CMD:tankkassestand(playerid)
{
    new t = IsPlayerAtTanke(playerid);
    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
    if(strcmp(GetName(playerid), Tanke[t][tBesitzer], true) == 0)
    {
        new string[128];
        format(string, sizeof(string), "* Tankstellen-Kasse: $%s *", AddDelimiters(Tanke[t][tKasse]));
        SendClientMessage(playerid, COLOR_GREEN, string);
        SendClientMessage(playerid, COLOR_WHITE, "Um Geld von der Kasse zu nehmen oder anzulegen tippe /Tankkasse [Anlegen/Nehmen].");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Da du nicht der Besitzer bist, kannst du auch nicht auf die Kasse schauen.");
        return 1;
    }
    return 1;
}

CMD:bizkassestand(playerid)
{
    new h=IsPlayerAtBiz(playerid);
    if(h==999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich vor keinem Geschäft.");
    if(strcmp(GetName(playerid), Biz[h][bBesitzer], true) == 0)
    {
        new string[128];
        format(string, sizeof(string), "* Geschäfts-Kasse: $%s *", AddDelimiters(Biz[h][bKasse]));
        SendClientMessage(playerid, COLOR_GREEN, string);
        SendClientMessage(playerid, COLOR_WHITE, "Um Geld von der Kasse zu nehmen oder anzulegen tippe /Bizkasse [Anlegen/Nehmen].");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Da du nicht der Besitzer bist, kannst du auch nicht auf die Kasse schauen.");
        return 1;
    }
    return 1;
}

CMD:hauskassestand(playerid)
{
    new h=IsPlayerAtHouse(playerid);
    if(h==999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich vor keinem Haus.");
    if(Spieler[playerid][pPlayerHouse] == h )
    {
        new string[128];
        format(string, sizeof(string), "* Haus-Kasse: $%s *", AddDelimiters(Haus[h][hKasse]));
        SendClientMessage(playerid, COLOR_GREEN, string);
        SendClientMessage(playerid, COLOR_WHITE, "Um Geld von der Kasse zu nehmen oder anzulegen tippe /Hauskasse [Anlegen/Nehmen].");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Da du nicht der Besitzer bist, kannst du auch nicht auf die Kasse schauen.");
        return 1;
    }
    return 1;
}

CMD:tankkasse(playerid, params[])
{
    new entry, string[128], eingabe[16];
    if(sscanf(params, "s[16]i", eingabe, entry))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tankkasse [Anlegen/Nehmen] [Betrag]");
    new t = IsPlayerAtTanke(playerid);
    if(entry < 1 || entry > 100000000)return SendClientMessage(playerid, COLOR_RED, "Der Betrag sollte zwischen $1 und $100.000.000 liegen.");
    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich vor keiner Tankstelle.");
    if(strcmp(eingabe, "anlegen", true) == 0)
    {
        if(GetPlayerMoney(playerid) < entry)return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
        if(strcmp(GetName(playerid), Tanke[t][tBesitzer], true) == 0)
        {
            GivePlayerCash(playerid, -entry);
            Tanke[t][tKasse] += entry;
            format(string, sizeof(string), "Du hast $%s in die Tankstellenkasse eingezahlt. Neuer Stand: $%s.", AddDelimiters(entry), AddDelimiters(Tanke[t][tKasse]));
            SendClientMessage(playerid, COLOR_WHITE ,string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieser Tankstelle.");
            return 1;
        }
    }
    else if(strcmp(eingabe, "nehmen", true) == 0)
    {
        if(strcmp(GetName(playerid), Tanke[t][tBesitzer], true) == 0)
        {
            if(entry > Tanke[t][tKasse])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            GivePlayerCash(playerid, entry);
            Tanke[t][tKasse] -= entry;
            format(string, sizeof(string), "Du hast $%s aus der Tankstellenkasse ausgezahlt. Neuer Stand: $%s.", AddDelimiters(entry), AddDelimiters(Tanke[t][tKasse]));
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieser Tankstelle.");
            return 1;
        }
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tankkasse [Anlegen/Nehmen] [Betrag]");
    return 1;
}

CMD:bizkasse(playerid, params[])
{
    new entry, string[128], eingabe[16];
    if(sscanf(params, "s[16]i", eingabe, entry))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Bizkasse [Anlegen/Nehmen] [Betrag]");
    new h=IsPlayerAtBiz(playerid);
    if(h==999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich vor keinem Geschäft.");
    if(entry < 1 || entry > 100000000)return SendClientMessage(playerid, COLOR_RED, "Der Betrag sollte zwischen $1 und $100.000.000 liegen.");
    if(strcmp(eingabe, "anlegen", true) == 0)
    {
        if(GetPlayerMoney(playerid) < entry)return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
        if(strcmp(GetName(playerid), Biz[h][bBesitzer], true) == 0)
        {
            GivePlayerCash(playerid, -entry);
            Biz[h][bKasse] += entry;
            format(string, sizeof(string), "Du hast $%s in die Geschäftskasse eingezahlt. Neuer Stand: $%s.", AddDelimiters(entry), AddDelimiters(Biz[h][bKasse]));
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Geschäftes.");
            return 1;
        }
    }
    else if(strcmp(eingabe, "nehmen", true) == 0)
    {
        if(strcmp(GetName(playerid), Biz[h][bBesitzer], true) == 0)
        {
            if(entry > Biz[h][bKasse])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            GivePlayerCash(playerid, entry);
            Biz[h][bKasse] -= entry;
            format(string, sizeof(string), "Du hast $%s aus der Geschäftskasse ausgezahlt. Neuer Stand: $%s.", AddDelimiters(entry), AddDelimiters(Biz[h][bKasse]));
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Geschäftes.");
            return 1;
        }
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Bizkasse [Anlegen/Nehmen] [Betrag]");
    return 1;
}

CMD:hauskasse(playerid, params[])
{
    new entry, string[128], eingabe[16];
    if(sscanf(params, "s[16]i", eingabe, entry))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hauskasse [Anlegen/Nehmen] [Betrag]");
    new h=IsPlayerAtHouse(playerid);
    if(h==999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich vor keinem Haus.");
    if(entry < 1 || entry > 100000000)return SendClientMessage(playerid, COLOR_RED, "Der Betrag sollte zwischen $1 und $100.000.000 liegen.");
    if(strcmp(eingabe, "anlegen", true) == 0)
    {
        if(GetPlayerMoney(playerid) < entry)return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
        if(Spieler[playerid][pPlayerHouse] == h )
        {
            GivePlayerCash(playerid, -entry);
            Haus[h][hKasse] += entry;
            format(string, sizeof(string), "Du hast $%s in die Hauskasse eingezahlt. Neuer Stand: $%s.", AddDelimiters(entry), AddDelimiters(Haus[h][hKasse]));
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Hauses.");
            return 1;
        }
    }
    else if(strcmp(eingabe, "nehmen", true) == 0)
    {
        if(Spieler[playerid][pPlayerHouse] == h )
        {
            if(entry > Haus[h][hKasse])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            GivePlayerCash(playerid, entry);
            Haus[h][hKasse] -= entry;
            format(string, sizeof(string), "Du hast $%s aus der Hauskasse ausgezahlt. Neuer Stand: $%s.", AddDelimiters(entry), AddDelimiters(Haus[h][hKasse]));
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer dieses Hauses.");
            return 1;
        }
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hauskasse [Anlegen/Nehmen] [Betrag]");
    return 1;
}

CMD:kassenstand(playerid)
{
    new stand, string[128];
    if(Spieler[playerid][pFraktion] == 0)return SendClientMessage(playerid, COLOR_YELLOW, "Tippe /Staatskasse ein.");
    else if(Spieler[playerid][pFraktion] == 1)return SendClientMessage(playerid, COLOR_YELLOW, "Tippe /Staatskasse ein.");
    else if(Spieler[playerid][pFraktion] == 2)return SendClientMessage(playerid, COLOR_YELLOW, "Tippe /Staatskasse ein.");
    else if(Spieler[playerid][pFraktion] == 3){ stand = Kasse[Samd]; }
    else if(Spieler[playerid][pFraktion] == 4){ stand = Kasse[Sana]; }
    else if(Spieler[playerid][pFraktion] == 5){ stand = Kasse[Oamt]; }
    else if(Spieler[playerid][pFraktion] == 6){ stand = Kasse[Grove]; }
    else if(Spieler[playerid][pFraktion] == 7){ stand = Kasse[Ballas]; }
    else if(Spieler[playerid][pFraktion] == 8){ stand = Kasse[Fahrschule]; }
    else if(Spieler[playerid][pFraktion] == 9){ stand = Kasse[Staat]; }
    else if(Spieler[playerid][pFraktion] == 10){ stand = Kasse[Yakuza];}
    else if(Spieler[playerid][pFraktion] == 11){ stand = Kasse[Aztecas];}
    else if(Spieler[playerid][pFraktion] == 12){ stand = Kasse[LCN];}
    else if(Spieler[playerid][pFraktion] == 13){ stand = Kasse[Vagos];}
    else if(Spieler[playerid][pFraktion] == 14){ stand = Kasse[Hitman];}
    else if(Spieler[playerid][pFraktion] == 15){ stand = Kasse[BBikerZ];}
    else if(Spieler[playerid][pFraktion] == 16)return SendClientMessage(playerid, COLOR_YELLOW, "Tippe /Staatskasse ein.");
    else if(Spieler[playerid][pFraktion] == 17){ stand = Kasse[Wheelmenk];}
    else if(Spieler[playerid][pFraktion] == 18)return SendClientMessage(playerid, COLOR_YELLOW, "Tippe /Staatskasse ein.");
    else if(Spieler[playerid][pFraktion] == 19){ stand = Kasse[TerrorK];}
    else if(Spieler[playerid][pFraktion] == 20){ stand = Kasse[OutlawzK];}
    else if(Spieler[playerid][pFraktion] == 21){ stand = Kasse[ndgradethaK];}
    else if(Spieler[playerid][pFraktion] == 22)return SendClientMessage(playerid, COLOR_YELLOW, "Tippe /Staatskasse ein.");
    format(string, sizeof(string), "* Fraktionskasse: $%s *", AddDelimiters(stand));
    SendClientMessage(playerid, COLOR_GREEN, string);
    return 1;
}

CMD:kasse(playerid, params[])
{
    new entry, string[128], eingabe[32];
    if(sscanf(params, "s[32]i", eingabe, entry))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kasse [Anlegen/Nehmen]");
    if(entry < 1 || entry > 10000000)return SendClientMessage(playerid, COLOR_RED, "Der Betrag sollte zwischen $1 und $10.000.000 liegen.");
    if(strcmp(eingabe, "anlegen", true) == 0)
    {
        if(GetPlayerMoney(playerid) < entry)return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht!");
        if(Spieler[playerid][pFraktion] == 0)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatskasse [Betrag]");
        else if(Spieler[playerid][pFraktion] == 1)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatskasse [Betrag]");
        else if(Spieler[playerid][pFraktion] == 2)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatskasse [Betrag]");
        else if(Spieler[playerid][pFraktion] == 3)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Samd] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 4)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Sana] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 5)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Oamt] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 6)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Grove] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 7)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Ballas] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 8)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Fahrschule] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 9)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Staat] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 10)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Yakuza] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 11)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Aztecas] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 12)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[LCN] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 13)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Vagos] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 14)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Hitman] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 15)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[BBikerZ] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 16)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatskasse [Betrag]");
        else if(Spieler[playerid][pFraktion] == 17)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Wheelmenk] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 18)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatskasse [Betrag]");
        else if(Spieler[playerid][pFraktion] == 19)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[TerrorK] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 20)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[OutlawzK] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 21)
        {
            GivePlayerCash(playerid, -entry);
            format(string, sizeof(string), "* Du hast $%s in die %s Kasse eingezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[ndgradethaK] += entry;
        }
        else if(Spieler[playerid][pFraktion] == 22)return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatskasse [Betrag]");
    }
    else if(strcmp(eingabe, "nehmen", true) == 0)
    {
        if(Spieler[playerid][pRank] != 6)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Leader!");
        if(Spieler[playerid][pFraktion] == 0)return SendClientMessage(playerid, COLOR_RED, "* Du kannst nichts von der Staatskasse nehmen.");
        else if(Spieler[playerid][pFraktion] == 1)return SendClientMessage(playerid, COLOR_RED, "* Du kannst nichts von der Staatskasse nehmen.");
        else if(Spieler[playerid][pFraktion] == 2)return SendClientMessage(playerid, COLOR_RED, "* Du kannst nichts von der Staatskasse nehmen.");
        else if(Spieler[playerid][pFraktion] == 3)
        {
            if(entry > Kasse[Samd])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Samd] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 4)
        {
            if(entry > Kasse[Sana])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Sana] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 5)
        {
            if(entry > Kasse[Oamt])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Oamt] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 6)
        {
            if(entry > Kasse[Grove])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Grove] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 7)
        {
            if(entry > Kasse[Ballas])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Ballas] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 8)
        {
            if(entry > Kasse[Fahrschule])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Fahrschule] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 9)
        {
            if(entry > Kasse[Staat])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Staatskasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Staat] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 10)
        {
            if(entry > Kasse[Yakuza])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Yakuza] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 11)
        {
            if(entry > Kasse[Aztecas])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Aztecas] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 12)
        {
            if(entry > Kasse[LCN])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[LCN] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 13)
        {
            if(entry > Kasse[Vagos])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Vagos] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 14)
        {
            if(entry > Kasse[Hitman])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Hitman] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 15)
        {
            if(entry > Kasse[BBikerZ])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[BBikerZ] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 16)return SendClientMessage(playerid, COLOR_RED, "* Du kannst nichts von der Staatskasse nehmen.");
        else if(Spieler[playerid][pFraktion] == 17)
        {
            if(entry > Kasse[Wheelmenk])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[Wheelmenk] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 18)return SendClientMessage(playerid, COLOR_RED, "* Du kannst nichts von der Staatskasse nehmen.");
        else if(Spieler[playerid][pFraktion] == 19)
        {
            if(entry > Kasse[TerrorK])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[TerrorK] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 20)
        {
            if(entry > Kasse[OutlawzK])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[OutlawzK] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 21)
        {
            if(entry > Kasse[ndgradethaK])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld ist auf der Kasse nicht vorhanden.");
            format(string, sizeof(string), "* Du hast $%s aus der %s Kasse ausgezahlt.", AddDelimiters(entry), factionNames[Spieler[playerid][pFraktion]]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Kasse[ndgradethaK] -= entry;
            GivePlayerCash(playerid, entry);
        }
        else if(Spieler[playerid][pFraktion] == 22)return SendClientMessage(playerid, COLOR_RED, "* Du kannst nichts von der Staatskasse nehmen.");
    }
    else return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /kasse [Anlegen/Nehmen/Stand]");
    return 1;
}

CMD:respawnanhanger(playerid)
{
    new string[128];
    if(Spieler[playerid][pRank] < 1)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Co-/Leader.");
    else if(Spieler[playerid][pFraktion] == 8)
    {
        for(new i=0;i<sizeof(fsacars);i++)
        {
            if(!IsVehicleOccupied(fsacars[i]))
            {
                SetVehicleToRespawn(fsacars[i]);
            }
        }
        format(string, sizeof(string), "* Die Fahrschul Anhänger wurden von %s respawnt.", GetName(playerid));
        SendFraktionMessage(8, COLOR_DARKRED, string);
        return 1;
    }
    return 1;
}

stock RespawnJobCars(jobID) {
    switch (jobID) {
        case 1:     { for (new i = 0; i < sizeof(combines); i++) if (!IsVehicleOccupied(combines[i])) SetVehicleToRespawn(combines[i]); }
        case 2:     { for (new i = 0; i < sizeof(vehicle_busStation); i++) if (!IsVehicleOccupied(vehicle_busStation[i])) SetVehicleToRespawn(vehicle_busStation[i]); }
        case 3:     {
            new trailerid, bool:excludeVehicles[MAX_VEHICLES];
            for (new i = 0; i < 9; i++) if (IsVehicleOccupied(vehicle_truckerBase[i]) && (trailerid = GetVehicleTrailer(vehicle_truckerBase[i]))) excludeVehicles[trailerid] = true;
            for (new i = 0; i < sizeof(vehicle_truckerBase); i++) if (!IsVehicleOccupied(vehicle_truckerBase[i]) && !excludeVehicles[vehicle_truckerBase[i]]) SetVehicleToRespawn(vehicle_truckerBase[i]);
        }
        case 4:     { for (new i = 0; i < sizeof(vehicle_airportLs); i++) if (!IsVehicleOccupied(vehicle_airportLs[i])) SetVehicleToRespawn(vehicle_airportLs[i]); }
        case 5:     { for (new i = 0; i < sizeof(kfzcars); i++) if (!IsVehicleOccupied(kfzcars[i])) SetVehicleToRespawn(kfzcars[i]); }
        case 7:     { for (new i = 0; i < sizeof(reinigung); i++) if (!IsVehicleOccupied(reinigung[i])) SetVehicleToRespawn(reinigung[i]); }
        case 8:     { for (new i = 0; i < sizeof(muell); i++) if (!IsVehicleOccupied(muell[i])) SetVehicleToRespawn(muell[i]); }
        case 9:     { for (new i = 0; i < sizeof(vehicle_gardenerBase); i++) if (!IsVehicleOccupied(vehicle_gardenerBase[i])) SetVehicleToRespawn(vehicle_gardenerBase[i]); }
        case 10:    { for (new i = 0; i < sizeof(bauarb); i++) if (!IsVehicleOccupied(bauarb[i])) SetVehicleToRespawn(bauarb[i]); }
        case 11:    { for (new i = 0; i < sizeof(vehicle_boatCargoJob); i++) if (!IsVehicleOccupied(vehicle_boatCargoJob[i])) SetVehicleToRespawn(vehicle_boatCargoJob[i]); }
        case 12:    { for (new i = 0; i < sizeof(geldt); i++) if (!IsVehicleOccupied(geldt[i])) SetVehicleToRespawn(geldt[i]); }
        case 13:    { for (new i = 0; i < sizeof(eismann); i++) if (!IsVehicleOccupied(eismann[i])) SetVehicleToRespawn(eismann[i]); }
        case 15:    { for (new i = 0; i < sizeof(pizzacar); i++) if (!IsVehicleOccupied(pizzacar[i])) SetVehicleToRespawn(pizzacar[i]); }
        case 16:    { for (new i = 0; i < sizeof(vehicle_taxiStations); i++) if (!IsVehicleOccupied(vehicle_taxiStations[i])) SetVehicleToRespawn(vehicle_taxiStations[i]); }
        case 17:    { for (new i = 0; i < sizeof(drogen); i++) if (!IsVehicleOccupied(drogen[i])) SetVehicleToRespawn(drogen[i]); }
        case 18:    { for (new i = 0; i < sizeof(wdealer); i++) if (!IsVehicleOccupied(wdealer[i])) SetVehicleToRespawn(wdealer[i]); }
        case 21:    { for (new i = 0; i < sizeof(vehicle_wantedHackerBase); i++) if (!IsVehicleOccupied(vehicle_wantedHackerBase[i])) SetVehicleToRespawn(vehicle_wantedHackerBase[i]); }
        case 23:    { for (new i = 0; i < sizeof(zugb); i++) if (!IsVehicleOccupied(zugb[i])) SetVehicleToRespawn(zugb[i]); }
        case 24:    { for (new i = 0; i < sizeof(hotdogcar); i++) if (!IsVehicleOccupied(hotdogcar[i])) SetVehicleToRespawn(hotdogcar[i]); }
        default:    { return 0; }
    }

    return 1;
}

stock RespawnFactionCars(playerid, factionID) {
	new string[128];
	new trailerid, bool:excludeVehicles[MAX_VEHICLES];

    for (new i = 0; i < sizeof(vehicle_pooExterior); i++)
        if (IsVehicleOccupied(vehicle_pooExterior[i]) && (trailerid = GetVehicleTrailer(vehicle_pooExterior[i])))
            excludeVehicles[trailerid] = true;
    
    if (factionID == 1)
	{
		for (new i=0;i<sizeof(vehicle_lspdExterior);i++)
			if (!IsVehicleOccupied(vehicle_lspdExterior[i]))
				SetVehicleToRespawn(vehicle_lspdExterior[i]);


		format(string, sizeof(string), "* Die LSPD Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(1, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 2)
	{
		for (new i=0;i<sizeof(vehicle_fbiExterior);i++)
			if (!IsVehicleOccupied(vehicle_fbiExterior[i]))
				SetVehicleToRespawn(vehicle_fbiExterior[i]);


		format(string, sizeof(string), "* Die FBI Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(2, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 3)
	{
		for (new i=0;i<sizeof(vehicle_samdExterior);i++)
			if (!IsVehicleOccupied(vehicle_samdExterior[i]))
				SetVehicleToRespawn(vehicle_samdExterior[i]);


		format(string, sizeof(string), "* Die Sanitäter Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(3, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 4)
	{
		for (new i=0;i<sizeof(vehicle_sanaBase);i++)
			if (!IsVehicleOccupied(vehicle_sanaBase[i]) && !excludeVehicles[vehicle_sanaBase[i]])
				SetVehicleToRespawn(vehicle_sanaBase[i]);
        
		format(string, sizeof(string), "* Die SA-NA Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(4, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 5)
	{
		for (new i=0;i<sizeof(vehicle_pooExterior);i++)
			if (!IsVehicleOccupied(vehicle_pooExterior[i]))
				SetVehicleToRespawn(vehicle_pooExterior[i]);

		format(string, sizeof(string), "* Die Ordnungsamt Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(5, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 6)
	{
		for (new i=0;i<sizeof(grovecars);i++)
			if (!IsVehicleOccupied(grovecars[i])&& !excludeVehicles[grovecars[i]])
				SetVehicleToRespawn(grovecars[i]);
        
		format(string, sizeof(string), "* Die Grove Street Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(6, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 7)
	{
		for (new i=0;i<sizeof(ballascars);i++)
			if (!IsVehicleOccupied(ballascars[i])&& !excludeVehicles[ballascars[i]])
				SetVehicleToRespawn(ballascars[i]);
        
		format(string, sizeof(string), "* Die Ballas Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(7, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 8)
	{
		for(new i=0;i<sizeof(fscars);i++)
		{
			if(!IsVehicleOccupied(fscars[i]))
			{
				SetVehicleToRespawn(fscars[i]);
			}
		}

		for(new i=0;i<sizeof(fsacars);i++)
		{
			if(!IsVehicleOccupied(fsacars[i]))
			{
				SetVehicleToRespawn(fsacars[i]);
			}
		}
		format(string, sizeof(string), "* Die Fahrschul Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(8, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 9)
	{
		for(new i=0;i<sizeof(vehicle_governmentExterior);i++)
		{
			if(!IsVehicleOccupied(vehicle_governmentExterior[i]))
			{
				SetVehicleToRespawn(vehicle_governmentExterior[i]);
			}
		}
		format(string, sizeof(string), "* Die Staats Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(9, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 10)
	{
		for(new i=0;i<sizeof(vehicle_yakuzaExterior);i++)
		{
			if(!IsVehicleOccupied(vehicle_yakuzaExterior[i])&& !excludeVehicles[vehicle_yakuzaExterior[i]])
			{
				SetVehicleToRespawn(vehicle_yakuzaExterior[i]);
			}
		}
		format(string, sizeof(string), "* Die Yakuza Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(10, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 11)
	{
		for(new i=0;i<sizeof(aztcars);i++)
		{
			if(!IsVehicleOccupied(aztcars[i])&& !excludeVehicles[aztcars[i]])
			{
				SetVehicleToRespawn(aztcars[i]);
			}
		}
		format(string, sizeof(string), "* Die Aztecas Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(11, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 12)
	{
		for(new i=0;i<sizeof(vehicle_lcnExterior);i++)
		{
			if(!IsVehicleOccupied(vehicle_lcnExterior[i])&& !excludeVehicles[vehicle_lcnExterior[i]])
			{
				SetVehicleToRespawn(vehicle_lcnExterior[i]);
			}
		}
		format(string, sizeof(string), "* Die LCN Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(12, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 13)
	{
		for(new i=0;i<sizeof(vagoscars);i++)
		{
			if(!IsVehicleOccupied(vagoscars[i])&& !excludeVehicles[vagoscars[i]])
			{
				SetVehicleToRespawn(vagoscars[i]);
			}
		}
		format(string, sizeof(string), "* Die Vagos Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(13, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 14)
	{
		for(new i=0;i<sizeof(vehicle_hitmanBase);i++)
		{
			if(!IsVehicleOccupied(vehicle_hitmanBase[i])&& !excludeVehicles[vehicle_hitmanBase[i]])
			{
				SetVehicleToRespawn(vehicle_hitmanBase[i]);
			}
		}
		format(string, sizeof(string), "* Die Hitman Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(14, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 15)
	{
		for(new i=0;i<sizeof(vehicle_nineDemonsBase);i++)
		{
			if(!IsVehicleOccupied(vehicle_nineDemonsBase[i])&& !excludeVehicles[vehicle_nineDemonsBase[i]])
			{
				SetVehicleToRespawn(vehicle_nineDemonsBase[i]);
			}
		}
		format(string, sizeof(string), "* Die NineDemons Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(15, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 16)
	{
		for(new i=0;i<sizeof(lvpdcars);i++)
		{
			if(!IsVehicleOccupied(lvpdcars[i]))
			{
				SetVehicleToRespawn(lvpdcars[i]);
			}
		}
		format(string, sizeof(string), "* Die LVPD Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(16, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 17)
	{
		for(new i=0;i<sizeof(vehicle_wheelmanBase);i++)
		{
			if(!IsVehicleOccupied(vehicle_wheelmanBase[i])&& !excludeVehicles[vehicle_wheelmanBase[i]])
			{
				SetVehicleToRespawn(vehicle_wheelmanBase[i]);
			}
		}
		format(string, sizeof(string), "* Die Wheelman Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(17, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 18)
	{
		for(new i=0;i<sizeof(armycars);i++)
		{
			if(!IsVehicleOccupied(armycars[i]))
			{
				SetVehicleToRespawn(armycars[i]);
			}
		}
		format(string, sizeof(string), "* Die Army Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(18, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 19)
	{
		for(new i=0;i<sizeof(vehicle_terrorBase);i++)
		{
			if(!IsVehicleOccupied(vehicle_terrorBase[i])&& !excludeVehicles[vehicle_terrorBase[i]])
			{
				SetVehicleToRespawn(vehicle_terrorBase[i]);
			}
		}
		format(string, sizeof(string), "* Die Terroristen Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(19, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 20)
	{
		for(new i=0;i<sizeof(outlawzscars);i++)
		{
			if(!IsVehicleOccupied(outlawzscars[i])&& !excludeVehicles[outlawzscars[i]])
			{
				SetVehicleToRespawn(outlawzscars[i]);
			}
		}
		format(string, sizeof(string), "* Die Outlawz Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(20, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 21)
	{
		for(new i=0;i<sizeof(vehicle_triadsExterior);i++)
		{
			if(!IsVehicleOccupied(vehicle_triadsExterior[i])&& !excludeVehicles[vehicle_triadsExterior[i]])
			{
				SetVehicleToRespawn(vehicle_triadsExterior[i]);
			}
		}
		format(string, sizeof(string), "* Die Triaden Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(21, COLOR_DARKRED, string);
		return 1;
	}
	else if(factionID == 22)
	{
		for(new i=0;i<sizeof(zollcars);i++)
		{
			if(!IsVehicleOccupied(zollcars[i]))
			{
				SetVehicleToRespawn(zollcars[i]);
			}
		}
		format(string, sizeof(string), "* Die Zoll Fahrzeuge wurden von %s respawnt.", GetName(playerid));
		SendFraktionMessage(22, COLOR_DARKRED, string);
		return 1;
	}

    return 1;
}

CMD:fraktionen(playerid) {
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new dialogText[512];
    for (new i = 0; i < sizeof(factionNames); i++) format(dialogText, sizeof(dialogText), "%sID: %i\t%s\n", dialogText, i, factionNames[i]);
    return ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_LIST, "{FFFFFF}Fraktionsübersicht", dialogText, "Schließen", "");
}

CMD:jobs(playerid) {
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new dialogText[512];
    for (new i = 0; i < sizeof(jobNames); i++) format(dialogText, sizeof(dialogText), "%sID: %i\t%s\n", dialogText, i, jobNames[i]);
    return ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_LIST, "{FFFFFF}Jobübersicht", dialogText, "Schließen", "");
}

CMD:rjobcars(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");

    new jobID;
    if (sscanf(params, "%i", jobID)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Rjobcars [Job-ID]");
    if (!RespawnJobCars(jobID)) return SendClientMessage(playerid, COLOR_RED, "Keine gültige Job-ID oder der Job hat keine Fahrzeuge, siehe /Jobs.");

    new message[128];
    format(message, sizeof(message), "%s hat die Jobfahrzeuge des Jobs %s [ID: %i] respawnt." , GetName(playerid), jobNames[jobID], jobID);
    return SendAdminMessage(COLOR_YELLOW, message);
}

CMD:rfrakcars(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");

    new factionID;
    if (sscanf(params, "%i", factionID)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Rfrakcars [Fraktions-ID]");
    if (factionID < 1 || factionID > 22) return SendClientMessage(playerid, COLOR_ORANGE, "Keine gültige Fraktions-ID, siehe /Fraktionen.");

    RespawnFactionCars(playerid, factionID);
    new message[128];
    format(message, sizeof(message), "%s hat die Fraktionsfahrzeuge der Fraktion %s [ID: %i] respawnt." , GetName(playerid), factionNames[factionID], factionID);
    return SendAdminMessage(COLOR_YELLOW, message);
}

CMD:respawncars(playerid)
{
    if (Spieler[playerid][pRank] < 4 || Spieler[playerid][pFraktion] < 1 || Spieler[playerid][pFraktion] > 21)
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht Rang 4 oder Co-/Leader einer Fraktion.");

    RespawnFactionCars(playerid, Spieler[playerid][pFraktion]);
    return 1;
}

CMD:respawncar(playerid)
{
    if(Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new vID;
    vID = GetPlayerVehicleID(playerid);
    if(IsPlayerInAnyVehicle(playerid))
    {
        SetVehicleToRespawn(vID);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Fahrzeug.");
        return 1;
    }
    return 1;
}

CMD:jailtimeout(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 6) return 0;
    new newTimeout;
    if (sscanf(params, "i", newTimeout)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Jailtimeout [Sekunden]");
    JAIL_TIMEOUT = newTimeout;
    new message[128];
    format(message, sizeof(message), "Du hast das Jail-Timeout auf %i Sekunden gesetzt.", JAIL_TIMEOUT);
    return SendClientMessage(playerid, COLOR_YELLOW, message);
}

CMD:befreien(playerid, params[])
{
    if (Spieler[playerid][pJob] != 6) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Anwalt.");
    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst niemanden befreien wenn du im Gefängnis bist.");

    new pID;
    if (sscanf(params, "u", pID)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Befreien [SpielerID/Name]");
    if (pID == playerid) return SendClientMessage(playerid, COLOR_RED, "Du kannst dich natürlich nicht selbst befreien.");
    if (!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (Spieler[pID][pJailed] == 0) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht im Gefängnis.");
    if (Spieler[pID][pJailed] > 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst den Spieler nicht befreien.");

    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x, y, z);
    if (!IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");

    new message[145], unixtimeNow = gettime(), lawyerTimeout = 10 - (unixtimeNow - GetPVarInt(playerid, "LAWYER.RELEASE"));
    if (lawyerTimeout > 0) {
        if (lawyerTimeout == 1) message = "Du kannst erst in {FFFFFF}einer Sekunde {FBB420}wieder ein Befreiungsangebot stellen.";
        else format(message, sizeof (message), "Du kannst erst in {FFFFFF}%d Sekunden {FBB420}wieder ein Befreiungsangebot stellen.", lawyerTimeout);
        return SendClientMessage(playerid, COLOR_ORANGE, message);
    }

    new playerJailTimeout = JAIL_TIMEOUT - (unixtimeNow - GetPVarInt(pID, "JAIL.TIMESTAMP"));
    if (playerJailTimeout > 0) {
        if (playerJailTimeout == 1) message = "Der Spieler kann erst in {FFFFFF}einer Sekunde {FFFF00}befreit werden.";
        else format(message, sizeof(message), "Der Spieler kann erst in {FFFFFF}%d Sekunden {FFFF00}befreit werden.", playerJailTimeout);
        return SendClientMessage(playerid, COLOR_YELLOW, message);
    }

    if (Spieler[pID][pJailTime] > GetPlayerLawyerSkillValue(playerid)) {
        format(message,sizeof(message),"Dein Anwalt-Skill ist Level %d und damit kannst du nur Inhaftierte bis zu einer Haftzeit von %d Sekunden befreien.", GetPlayerLawyerLevel(playerid), GetPlayerLawyerSkillValue(playerid));
        return SendClientMessage(playerid, COLOR_ORANGE, message);
    }

    SetPVarInt(playerid, "LAWYER.RELEASE", unixtimeNow);
    new preis = floatround(Spieler[pID][pJailTime] / 60, floatround_ceil) * 280;
    format(message, sizeof(message), "* Anwalt %s hat dir eine Befreiung angeboten. (Preis: $%s)", GetName(playerid), AddDelimiters(preis));
    SendClientMessage(pID, COLOR_LIGHTBLUE, message);
    format(message, sizeof(message), "* Du hast %s eine Befreiung für $%s (40 Prozent Staatskosten) angeboten.", GetName(pID), AddDelimiters(preis));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, message);
    SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe nun '/Accept Anwalt' um die Befreiung anzunehmen.");
    AnwaltID[pID] = playerid;
    AnwaltPreis[pID] = floatround(Spieler[pID][pJailTime] / 60 * 200, floatround_ceil);
    return 1;
}

forward GetCarOwnerSlot(playerid,veh);
public GetCarOwnerSlot(playerid,veh)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(PlayerCar[playerid][x][CarId] == veh)
        {
            return x;
        }
    }
    return 555;
}

forward GetCarOwner(veh);
public GetCarOwner(veh)
{
    new
        j,
        x;
    for(new i = 0; i < MAX_PLAYERS ;i++) {
        if( IsPlayerConnected(i)) {
            for(x = 0 , j = MaxVehicles(i) ; x < j;x++) {
                if(PlayerCar[i][x][CarId] == veh){
                    return i;
                }
            }
        }
    }
    return INVALID_PLAYER_ID;
}

CMD:ofreistellen(playerid, params[]) {
    if (Spieler[playerid][pFraktion] != 5) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Ordnungsbeamter.");
    new vehicleid;
    if (!isnull(params)) {
        if (sscanf(params, "i", vehicleid)) {
            SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Ofreistellen [Fahrzeug-ID]");
            return SendClientMessage(playerid, COLOR_BLUE, "[INFO] {FFFFFF}Du kannst auch in dem Fahrzeug sitzen.");
        }

        if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du musst eine gültige Fahrzeug-ID angeben.");
    }
    else {
        vehicleid = GetPlayerVehicleID(playerid);
        if (!vehicleid) {
            SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Ofreistellen [Fahrzeug-ID]");
            return SendClientMessage(playerid, COLOR_BLUE, "[INFO] {FFFFFF}Du kannst auch in dem Fahrzeug sitzen.");
        }
    }

    new besitzer = GetCarOwner(vehicleid);
    if (besitzer == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Das Fahrzeug gehört keinem Spieler.");

    new slot = GetCarOwnerSlot(besitzer, vehicleid);
    if (slot == 555) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Das Fahrzeug gehört keinem Spieler.");
    if (PlayerCar[besitzer][slot][CarState] != e_Vehicle_Status_Towed)
        return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Das Fahrzeug ist nicht abgeschleppt.");

    PlayerCar[besitzer][slot][CarState] = e_Vehicle_Status_Normal;
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast das Fahrzeug wieder freigestellt.");
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Es muss nun wieder per /Parken ordentlich geparkt werden.");
    Spieler[playerid][pPayCheck] -= 700;
    ShowBuyInformation(playerid,"~y~Fahrzeug ~w~freigestellt!");
    SCMFormatted(besitzer, COLOR_LIGHTBLUE, "Ordnungsbeamter %s hat dein Fahrzeug wieder freigestellt.", GetName(playerid));
    return 1;
}

CMD:oparken(playerid)
{
    if(!(Spieler[playerid][pFraktion] == 5))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter.");
    if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
    {
        if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
        {
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                new trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
                new besitzer = GetCarOwner(trailerid);
                if( IsPlayerConnected(besitzer)) {
                    new Slot = GetCarOwnerSlot(besitzer,trailerid);
                    if(trailerid == PlayerCar[besitzer][Slot][CarId])
                    {
                        if(PlayerCar[besitzer][Slot][CarState] == 1)return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug ist bereits abgeschleppt!");
                        new Float:vX, Float:vY, Float:vZ;
                        GetVehiclePos(trailerid, vX, vY, vZ);
                        PlayerCar[besitzer][Slot][CarPos_x] = vX;
                        PlayerCar[besitzer][Slot][CarPos_y] = vY;
                        PlayerCar[besitzer][Slot][CarPos_z] = vZ;
                        PlayerCar[besitzer][Slot][CarState] = e_Vehicle_Status_Towed; //Abgeschleppt
                        new str[128];
                        format(str, sizeof(str), "Dein Fahrzeug wurde aufgrund einer Ordnungswidrigkeit abgeschleppt!");
                        SendClientMessage(besitzer, COLOR_RED, str);
                        format(str, sizeof(str), "Ordnungsbeamter %s hat dein Fahrzeug kostenpflichtig abgeschleppt! Kaufe es am Ordnungsamt wieder frei!", GetName(playerid));
                        SendClientMessage(besitzer, COLOR_RED, str);
                        Spieler[playerid][pPayCheck] += 700;
                        GameTextForPlayer(playerid, "~g~+$700", 2000, 1);
                        SavePlayerCar(besitzer,Slot);
                        format(str,sizeof(str),"Ordnungsbeamter %s hat das Fahrzeug von %s abgeschleppt!",GetName(playerid),GetName(besitzer));
                        SendFraktionMessage(5, COLOR_RED, str);

                        format(str,sizeof(str),"[OAMT] Ordnungsbeamter: %s , Fahrzeughalter: %s",GetName(playerid),GetName(besitzer));
                        OamtLog(str);
                        return 1;
                    }
                }
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du hast kein Fahrzeug am Haken.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Ordnungsamt-Fahrzeug.");
        return 1;
    }
    return 1;
}

CMD:mparkkralle(playerid)
{
    if(Spieler[playerid][pFraktion] != 5)
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter.");
    }
    else
    {
        for(new v;v<MAX_VEHICLES;v++)
        {
            if(IsABike(GetVehicleModel(v))==1)
            {
                new Float:vx,Float:vy,Float:vz;
                GetVehiclePos(v,vx,vy,vz);
                new Float:px,Float:py,Float:pz;
                GetPlayerPos(playerid,px,py,pz);
                if(IsPlayerInRangeOfPoint(playerid,4,vx,vy,vz))
                {
                    new trailerid = v;
                    new besitzer = GetCarOwner(v);
                    if( IsPlayerConnected(besitzer))
                    {
                        new Slot = GetCarOwnerSlot(besitzer,trailerid);
                        if(trailerid == PlayerCar[besitzer][Slot][CarId])
                        {
                            if(PlayerCar[besitzer][Slot][CarState] == 1)return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug ist bereits abgeschleppt!");
                            new Float:vX, Float:vY, Float:vZ;
                            GetVehiclePos(trailerid, vX, vY, vZ);
                            PlayerCar[besitzer][Slot][CarPos_x] = vX;
                            PlayerCar[besitzer][Slot][CarPos_y] = vY;
                            PlayerCar[besitzer][Slot][CarPos_z] = vZ;
                            PlayerCar[besitzer][Slot][CarState] = e_Vehicle_Status_Towed; //Abgeschleppt
                            new str[128];
                            format(str, sizeof(str), "Dein Fahrzeug wurde aufgrund einer Ordnungswidrigkeit abgeschleppt!");
                            SendClientMessage(besitzer, COLOR_RED, str);
                            format(str, sizeof(str), "Ordnungsbeamter %s hat dein Fahrzeug kostenpflichtig abgeschleppt! Kaufe es am Ordnungsamt wieder frei!", GetName(playerid));
                            SendClientMessage(besitzer, COLOR_RED, str);
                            Spieler[playerid][pPayCheck] += 700;
                            GameTextForPlayer(playerid, "~g~+$700", 2000, 1);
                            SavePlayerCar(besitzer,Slot);
                            format(str,sizeof(str),"Ordnungsbeamter %s hat das Fahrzeug von %s abgeschleppt!",GetName(playerid),GetName(besitzer));
                            SendFraktionMessage(5, COLOR_RED, str);
                            format(str,sizeof(str),"[OAMT] Ordnungsbeamter: %s , Fahrzeughalter: %s",GetName(playerid),GetName(besitzer));
                            OamtLog(str);
                            break;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid,COLOR_RED,"Der Besitzer ist nicht Online!");
                    }
                }
            }
        }
    }
    return 1;
}

CMD:jc(playerid, params[])
{
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    new text[96];
    if(pJC[playerid] == 0)return SendClientMessage(playerid, COLOR_RED, "Du hast den Job Chat für dich deaktiviert, tippe /Chatoff.");
    if(sscanf(params, "s[96]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Jc [Nachricht]");
    if(Spieler[playerid][pJob] >= 1)
    {
        new string[128], pjob[50];
        ReturnPlayerJob(playerid, pjob);
        format(string, sizeof(string), "* %s %s sagt: %s, over *", pjob, GetName(playerid), text);
        SendJobMessage(Spieler[playerid][pJob], COLOR_CHAT_JOB, string);
        format(string, sizeof(string), "Job: %s - Name: %s - %s", pjob, GetName(playerid), text);
        LogJobChat(string);
    }
    return 1;
}

CMD:cc(playerid, params[])
{
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][pDonateRank] != 1) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Clubmitglied");
    new text[96];
    if(sscanf(params, "s[96]", text)) return SendClientMessage(playerid, COLOR_BLUE, "* Club-Chat:"COLOR_HEX_GREENA" /CC [Nachricht]");
    if(pCC[playerid] == 0)return SendClientMessage(playerid, COLOR_RED, "Du hast den Clubmitglied Chat für dich deaktiviert, tippe /Chatoff.");
    new string[128];
    format(string, sizeof(string), "* Clubmitglied %s sagt: %s *", GetName(playerid), text);
    SendClubMessage(COLOR_CLUB,string);
    return 1;
}

CMD:fc(playerid, params[])
{
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    new text[96];
    if(pFC[playerid] == 0)return SendClientMessage(playerid, COLOR_RED, "Du hast den Fraktions Chat für dich deaktiviert, tippe /Chatoff.");
    if(sscanf(params, "s[96]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fc [Nachricht]");
    if(Spieler[playerid][pFraktion] >= 1)
    {
        new string[128];
        new rk[35];
        ReturnPlayerRank(playerid, rk);
        format(string, sizeof(string), "** %s %s sagt: %s. **", rk, GetName(playerid), text);
        if( Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 ) {
            SendFraktionMessage(1, COLOR_CHAT_FRAKTION, string);
            SendFraktionMessage(2, COLOR_CHAT_FRAKTION, string);
            SendFraktionMessage(16, COLOR_CHAT_FRAKTION, string);
            SendFraktionMessage(18, COLOR_CHAT_FRAKTION, string);
            SendFraktionMessage(22, COLOR_CHAT_FRAKTION, string);
        }
        else {
            SendFraktionMessage(Spieler[playerid][pFraktion], COLOR_CHAT_FRAKTION, string);
        }
        new frakname[50];
        ReturnPlayerFraktion(playerid, frakname);
        format(string, sizeof(string), "Frak: %s - Name: %s - %s", frakname, GetName(playerid), text);
        LogFrakChat(string);
    }
    return 1;
}

CMD:bc(playerid, params[])
{
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    new text[96];
    if(pBC[playerid] == 0)return SendClientMessage(playerid, COLOR_RED, "Du hast den Beamten Chat für dich deaktiviert, tippe /Chatoff.");
    if(sscanf(params, "s[96]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Bc [Nachricht]");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 9 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Nur für SAPD, FBI, SA-MD, Zollbeamte und O-AMT verfügbar.");
    new string[128];
    new rk[50];
    if(Spieler[playerid][pFraktion] == 1){rk ="LSPD Beamter";}
    else if(Spieler[playerid][pFraktion] == 2){rk ="FBI-Agent";}
    else if(Spieler[playerid][pFraktion] == 3){rk ="Sanitäter";}
    else if(Spieler[playerid][pFraktion] == 5){rk ="Verkehrsüberwachung";}
    else if(Spieler[playerid][pFraktion] == 9){rk ="Regierung";}
    else if(Spieler[playerid][pFraktion] == 16){rk ="LVPD Beamter";}
    else if(Spieler[playerid][pFraktion] == 18){rk ="Soldat";}
    else if(Spieler[playerid][pFraktion] == 22){rk ="Zollbeamter";}
    format(string, sizeof(string), "((** %s %s sagt: %s. **))", rk, GetName(playerid), text);
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(pBC[i] == 1)
            {
                if(Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2 || Spieler[i][pFraktion] == 3 || Spieler[i][pFraktion] == 5 || Spieler[i][pFraktion] == 9 || Spieler[i][pFraktion] == 16 || Spieler[i][pFraktion] == 18 || Spieler[i][pFraktion] == 22)
                {
                    SendClientMessage(i, COLOR_BCHAT, string);
                }
            }
        }
    }
    printf("[BC] [%s]: %s", GetName(playerid), text);
    return 1;
}


CMD:ac(playerid, params[])
{
    new text[128];
    if(sscanf(params, "s[128]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ac [Nachricht]");
    if(Spieler[playerid][pAdmin] > 2)
    {
        new string[144];
        format(string, sizeof(string), "( ** %s %s sagt: %s ** )", GetPlayerAdminRang(playerid), GetName(playerid), text);
        SendModMessage(COLOR_YELLOW, string);
        format(string, sizeof(string), "Name: %s - %s", GetName(playerid), text);
        LogAdminChat(string);
    }
    return 1;
}

CMD:sc(playerid, params[])
{
    new text[128];
    if(sscanf(params, "s[128]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sc [Nachricht]");
    if(Spieler[playerid][pAdmin] > 0)
    {
        new string[144];
        format(string, sizeof(string), "( [SUPPORTER-CHAT] %s %s sagt: %s )", GetPlayerAdminRang(playerid), GetName(playerid), text);
        SendAdminMessage(COLOR_DARKYELLOW, string);
        format(string, sizeof(string), "Name: %s - %s", GetName(playerid), text);
        LogAdminChat(string);
    }
    return 1;
}

CMD:gcoff(playerid)
{
    new string[128];
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(GCOff == 0)
    {
        GCOff = 1;
        format(string, sizeof(string), "Der Globale Chat wurde von %s %s deaktiviert.", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessageToAll(COLOR_GREEN, string);
    }
    else if(GCOff == 1)
    {
        GCOff = 0;
        format(string, sizeof(string), "Der Globale Chat wurde von %s %s aktiviert.", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessageToAll(COLOR_GREEN, string);
    }
    return 1;
}



CMD:gc(playerid, params[])
{
    new text[128], string[144];
    if(sscanf(params, "s[128]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gc [Nachricht]");
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if( Spieler[playerid][pLevel] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 3 sein um im globalen Chat zu schreiben!");
    }
    if(Spieler[playerid][pAdmin] < 3)
    {
        if(GCOff == 1)return SendClientMessage(playerid, COLOR_RED, "Der Globale Chat ist derzeit deaktiviert.");
        if(!pGC[playerid])return SendClientMessage(playerid, COLOR_YELLOW, "Du hast den Globalen Chat für dich deaktiviert, tippe /chatoff.");
        format(string, sizeof(string), "(( %s: %s ))", GetName(playerid), text);
        SendGlobalMessage(COLOR_CHAT_GC_NONADM, string);
    }
    else
    {
        if(!pGC[playerid])return SendClientMessage(playerid, COLOR_YELLOW, "Du hast den Globalen Chat für dich deaktiviert, tippe /chatoff.");
        format(string, sizeof(string), "(( %s: %s ))", GetName(playerid), text);
        SendGlobalMessage(COLOR_CHAT_GC_ADM, string);
    }
    format(string, sizeof(string), "Name: %s - %s", GetName(playerid), text);
    LogGlobalChat(string);
    return 1;
}



CMD:admn(playerid, params[])
{
    if(!(Spieler[playerid][pAdmin] >= 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Teammitglied!");
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    new text[96], pID, string[128];
    if(sscanf(params, "us[96]", pID, text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Admn [SpielerID/Name] [Nachricht]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[playerid][pAdmin] == 0)
    {
        if(Spieler[pID][pAdmin] < 1)
        {
            SendClientMessage(playerid, COLOR_RED, "Du kannst nur an Teammitgliedern schreiben.");
            return 1;
        }
    }
    format(string, sizeof(string), "[ADMIN] %s schrieb dir: %s", GetName(playerid), text);
    SendClientMessage(pID, COLOR_LIGHTRED, string);
    format(string, sizeof(string), "[ADMIN] %s schrieb zu %s: %s", GetName(playerid), GetName(pID), text);
    SendAdminMessage(COLOR_LIGHTRED, string);
    return 1;
}

CMD:setsteuern(playerid, params[])
{
    new steuern, string[128];
    if(sscanf(params, "i", steuern))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Setsteuern [Steuern]");
    if(Spieler[playerid][pFraktion] == 9)
    {
        if(Spieler[playerid][pRank] > 4)
        {
            if(steuern < 0 || steuern > 50)return SendClientMessage(playerid, COLOR_RED, "Die Steuern sollten zwischen 0 Prozent und 50 Prozent liegen.");
            gSteuern = steuern;
            format(string, sizeof(string), COLOR_HEX_ORANGE"[STAATS-NACHRICHT] "COLOR_HEX_WHITE"Regierungsbeamter %s hat die Steuern auf {FF0000}%d Prozent{FFFFFF} gesetzt!", GetName(playerid), steuern);
            SendClientMessageToAll(COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist kein Regierungsbeamter.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du gehörst nicht dem Staat an.");
        return 1;
    }
    return 1;
}

CMD:smsg(playerid, params[])
{
    new text[126], string[128];
    if(sscanf(params, "s[96]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Smsg [Nachricht]");
    if(Spieler[playerid][pFraktion] == 9)
    {
        if(Spieler[playerid][pRank] >= 5)
        {
            new rname[35];
            ReturnPlayerRank(playerid, rname);
            format(string, sizeof(string), COLOR_HEX_ORANGE"[REGIERUNG] %s %s: "COLOR_HEX_WHITE"%s", rname, GetName(playerid), text);
            SendClientMessageToAll(COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist kein Bürgermeister bzw. Präsident.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du gehörst nicht dem Staat an.");
        return 1;
    }
    return 1;
}

CMD:pmsg(playerid, params[])
{
    new text[256], string[256];
    if(sscanf(params, "s[96]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Pmsg [Nachricht]");
    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 18)
    {
        if(Spieler[playerid][pRank] >= 5)
        {
            new rname[35];
            ReturnPlayerRank(playerid, rname);
            format(string, sizeof(string), COLOR_HEX_ORANGE"[STAAT] %s %s: "COLOR_HEX_WHITE"%s", rname, GetName(playerid), text);
            SendClientMessageToAll(COLOR_WHITE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist kein hoher Polizist!");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du gehörst nicht dem Staat an.");
        return 1;
    }
    return 1;
}

CMD:gmsg(playerid, params[])
{
    new text[128];
    if(sscanf(params, "s[128]", text))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gmsg [Nachricht]");
    if(Spieler[playerid][pAdmin] > 3)
    {
        new string[256];
        format(string, sizeof(string), "** %s %s sagt: %s **", GetPlayerAdminRang(playerid), GetName(playerid), text);
        SendClientMessageToAll(COLOR_PINK, string);
    }
    return 1;
}

CMD:autofasas(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1378.3748,-1643.1202,13.5469))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe der Automatischen Fahrschule.");
    if(pMakeTutorial[playerid] == 0)return SendClientMessage(playerid, COLOR_RED, "Nur für Spieler im Tutorial verfügbar.");
    if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Fahrschul-Auto erstellen lassen!");
    pFahrschulCar[playerid] = CreateVehicle(405, 1370.7351,-1634.2760,12.9573,180.6515,1,1,-1);
    aiVehicles[ pFahrschulCar[playerid] ] = VEH_FAHRSCHULCAR;
    SetPlayerCheckpointEx(playerid, 1418.3213,-1648.3510,13.2559,5.0,CP_FAHRSCHULE1);
    SendClientMessage(playerid, COLOR_SAMP, "Fahre nun die Strecke ab. Achte dabei auf folgende Dinge!");
    SendClientMessage(playerid, COLOR_SAMP, "Innerorts maximal 80 km/h. Außerorts maximal 120 km/h.");
    SendClientMessage(playerid, COLOR_SAMP, "Von 19 bis 6 Uhr muss das Licht angeschaltet sein.");
    SendClientMessage(playerid, COLOR_SAMP, "Viel Erfolg! PS: Steige nicht aus!");
    PutPlayerInVehicle(playerid, pFahrschulCar[playerid], 0);
    LockCar(pFahrschulCar[playerid]);
    gGas[pFahrschulCar[playerid]] = GetMaxTank(pFahrschulCar[playerid]);
    return 1;
}

CMD:scheine(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))
    {
        Scheine(playerid, playerid);
        if (Spieler[playerid][pLevel] < 4) SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Scheine [SpielerID/Name] um jemandem die Scheine zu zeigen!");
        return 1;
    }
    if( Spieler[pID][pAdminDienst] ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst");
    }
    if(IsPlayerConnected(pID) && gPlayerLogged[pID] == 1)
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        if(IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))
        {
            format(string, sizeof(string), "* %s zeigt dir seine Scheine.", GetName(playerid));
            SendClientMessage(pID, COLOR_PURPLE, string);
            format(string, sizeof(string), "Du hast %s deine Scheine gezeigt.", GetName(pID));
            SendClientMessage(playerid, COLOR_PURPLE, string);
            Scheine(pID, playerid);
        }
    }
    return 1;
}

CMD:stats(playerid, params[])
{
    if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht eingeloggt!");
    new pID;
    if(sscanf(params, "u", pID))
    {
        Stats(playerid, playerid);
        if (Spieler[playerid][pLevel] < 4) SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Stats [SpielerID/Name] um jemandem die Stats zu zeigen!");
        return 1;
    }
    if(IsPlayerConnected(pID) && gPlayerLogged[pID] == 1)
    {
        if( Spieler[pID][pAdminDienst] ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst.");
        }
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        if(IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))
        {
            new string[128];
            format(string, sizeof(string), "%s hat dir angeboten seine/ihre Statistiken anzuschauen.", GetName(playerid));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "Du hast %s angeboten deine Statistiken anzuschauen.", GetName(pID));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Nutze '/Accept Stats' um dir die Statistiken anzuschauen.");
            AcceptStats[pID] = playerid;
            return 1;
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "* Der Spieler ist nicht in deiner Nähe.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "* Der Spieler ist nicht eingeloggt.");
        return 1;
    }
}

forward Delay_Wiederbeleben(playerid, giveid);
public Delay_Wiederbeleben(playerid, giveid) {
    new string[128];
    ClearAnimations(playerid,1);

    Spieler[giveid][pTot] = 0;
    Spieler[giveid][pTotTime] = 0;
    format(string, sizeof(string), "Du wurdest von Sanitäter %s wiederbelebt.", GetName(playerid));
    SendClientMessage(giveid, COLOR_GREEN, string);
    format(string, sizeof(string), "[NOTRUFZENTRALE] Sanitäter %s hat den Verletzten %s wiederbelebt.", GetName(playerid), GetName(giveid));
    SendFraktionMessage(3, COLOR_YELLOW, string);
    DisablePlayerCheckpointEx(playerid);
    UnfreezePlayer(giveid);
    SetCameraBehindPlayer(giveid);

    ResetPlayerWeapons(giveid);
    ReStore_PlayerWeapons(giveid);
    Spieler[giveid][pWiederbelebung] = 0;
    Spieler[playerid][pWiederbelebung] = 0;
    SetPlayerHealth(giveid,100);
    return 1;
}

forward sprechen(playerid);
public sprechen(playerid) {
    ClearAnimations(playerid);
    return 1;
}

CMD:wiederbeleben(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 3))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter.");
    if (!Spieler[playerid][pDuty]) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Wiederbeleben [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pTot] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht tot.");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht selbst wiederbeleben!");
    //if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selber nicht wiederbeleben.");
    if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst zu Fuß unterwegs sein.");
    }
    if( Spieler[playerid][pWiederbelebung] == 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du belebst bereits einen Spieler wieder.");
    }
    if( Spieler[pID][pWiederbelebung] == 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler wird gerade bereits wiederbelebt.");
    }
    if(IsPlayerInRangeOfPoint(playerid, 10.0, Spieler[pID][pTotX], Spieler[pID][pTotY], Spieler[pID][pTotZ]))
    {
        ApplyAnimation(playerid,"MEDIC","CPR", 4.0, 1, 0, 0, 0, 0,1);
        SetTimerEx("Delay_Wiederbeleben",3003,0,"dd",playerid,pID);
        Spieler[pID][pTotTime] += 5;
        if( HasKrankenversicherung(pID) ) {
            format(string, sizeof(string), "* Du belebst %s gerade wieder. (Krankenversicherung)", GetName(pID));
        }
        else {
            Spieler[playerid][pPayCheck] += 500;
            Kasse[Samd] += 500;
            format(string, sizeof(string), "* Du belebst %s gerade wieder. (+$500 beim PayDay)", GetName(pID));
        }
        SendClientMessage(playerid, COLOR_GREEN, string);
        Spieler[pID][pWiederbelebung] = 1;
        Spieler[playerid][pWiederbelebung] = 1;
    }
    return 1;
}

CMD:awb(playerid, params[]) return cmd_awiederbeleben(playerid, params);

CMD:awiederbeleben(playerid, params[])
{
    new pID, string[128];
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Awiederbeleben [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pTot] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht tot.");

    format(string, sizeof(string), "* Du hast %s wiederbelebt.", GetName(pID));
    SendClientMessage(playerid, COLOR_GREEN, string);
    Spieler[pID][pTot] = 0;
    Spieler[pID][pTotTime] = 0;
    format(string, sizeof(string), "Du wurdest von %s %s wiederbelebt.", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(pID, COLOR_GREEN, string);
    UnfreezePlayer(pID);
    SetCameraBehindPlayer(pID);

    ResetPlayerWeapons(pID);
    ReStore_PlayerWeapons(pID);
    SetPlayerHealth(pID, 100.0);
    return 1;
}

new Float:DOC_BAG_POS[][][] = {
    {
        {0.333000, 0.030000, 0.042000, 0.000000, -98.400009, -19.999998, 1.055999, 0.523000, 1.271001},
        {0.357000, 0.030000, 0.033000, 0.000000, -98.400009, 4.100003, 1.055999, 0.523000, 1.271001}
    },
    {
        {0.297000, 0.030000, 0.030000, 0.000000, -98.400009, -19.999998, 1.055999, 0.523000, 1.271001},
        {0.335000, 0.030000, 0.045000, -14.200003, -98.400009, 4.100003, 1.055999, 0.523000, 1.271001}
    }
};

CMD:dtasche(playerid, params[]) {
    new doctorBag = GetPVarInt(playerid, "DOCTOR_BAG"), bone = 6;
    if (Spieler[playerid][pFraktion] != 3 && !doctorBag) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter.");
    if (!Spieler[playerid][pDuty] && !doctorBag) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");

    if (!strcmp(params, "links", true)) bone = 5;
    if (!doctorBag || doctorBag != bone && Spieler[playerid][pFraktion] == 3) {
        new skinIndex, handIndex, playerSkin = GetPlayerSkin(playerid);
        if (279 >= playerSkin >= 277) skinIndex = 1;
        if (bone == 5) handIndex = 1;
        SetPlayerAttachedObject(playerid, 4, 11738, bone, DOC_BAG_POS[skinIndex][handIndex][0], DOC_BAG_POS[skinIndex][handIndex][1], DOC_BAG_POS[skinIndex][handIndex][2],
            DOC_BAG_POS[skinIndex][handIndex][3], DOC_BAG_POS[skinIndex][handIndex][4], DOC_BAG_POS[skinIndex][handIndex][5], DOC_BAG_POS[skinIndex][handIndex][6],
            DOC_BAG_POS[skinIndex][handIndex][7], DOC_BAG_POS[skinIndex][handIndex][8]);

        new message[128];
        format(message, sizeof(message), "Du hast deine Doktortasche in die %s Hand genommen.", bone == 5 ? "linke" : "rechte");
        SendClientMessage(playerid, COLOR_GREEN, message);
    }
    else {
        RemovePlayerAttachedObject(playerid, 4);
        SendClientMessage(playerid, COLOR_ORANGE, "Du hast deine Doktortasche weggesteckt.");
    }

    SetPVarInt(playerid, "DOCTOR_BAG", doctorBag == bone ? 0 : bone);
    return 1;
}

CMD:samdgarage(playerid, params[]) {
	if (Spieler[playerid][pFraktion] != 3) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter.");
	if (!IsPlayerInRangeOfPoint(playerid, 20.0, SAMD_GARAGE_FOR_RANGE_COORDS)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Garagentores.");

	new Float:fX, Float:fY, Float:fZ;
	GetDynamicObjectPos(object_samdExterior_garageDoor, fX, fY, fZ);

	if (fZ == SAMD_GARAGE_OPEN_Z)
		MoveDynamicObject(object_samdExterior_garageDoor, fX, fY, SAMD_GARAGE_CLOSED_Z, 2.0);
	else
		MoveDynamicObject(object_samdExterior_garageDoor, fX, fY, SAMD_GARAGE_OPEN_Z, 2.0);

	return 1;
}

CMD:sfinden(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 3))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter.");
    if (!Spieler[playerid][pDuty]) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sfinden [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pTot] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht tot.");
    SetPlayerCheckpointEx(playerid, Spieler[pID][pTotX], Spieler[pID][pTotY], Spieler[pID][pTotZ], 5.0, CP_TOT);
    format(string, sizeof(string), "* %s wurde auf der Karte makiert, Gebäude-Komplex: %d. Fahre schnell zu ihm/ihr!", GetName(pID), GetPlayerInterior(pID));
    SendClientMessage(playerid, COLOR_LIGHTRED2, string);
    return 1;
}

CMD:sheilen(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 3))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter.");
    if (!Spieler[playerid][pDuty]) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sheilen [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selber nicht heilen.");
    new vID = GetPlayerVehicleID(playerid);
    new pvID = GetPlayerVehicleID(pID);
    if(pvID == vID)
    {
        if(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(pID))
        {
            if( aiVehicles[vID] == VEH_SANICARS ) {
                new Float:health;
                GetPlayerHealth(pID, health);
                if(health >= 90)
                {
                    return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler hat noch genug Leben.");
                }
                new seat1 = GetPlayerVehicleSeat(playerid);
                new seat2 = GetPlayerVehicleSeat(pID);
                if( seat1 != 2 && seat1 != 3 && seat2 != 2 && seat2 != 3 ) {
                    return SendClientMessage(playerid, COLOR_ORANGE, "Für die Behandlung müssen Arzt und Patient im Behandlungsbereich des Wagens sein");
                }
                format(string, sizeof(string), "Sanitäter %s bietet Ihnen eine ärztliche Behandlung für 100$ an. Mit '/Accept Arzt' können Sie dem einwilligen!", GetName(playerid));
                SendClientMessage(pID, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "Du hast %s angeboten,ihn zu heilen.", GetName(pID));
                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                /*
                format(string, sizeof(string), "Sanitäter %s hat dich geheilt.", GetName(playerid));
                format(string, sizeof(string), "Du hast %s geheilt.", GetName(pID));
                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                */
                Spieler[pID][pSHeilen] = playerid;
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du oder der andere Spieler seit nicht im selben Fahrzeug.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deinem Fahrzeug.");
        return 1;
    }
    return 1;
}

forward Pulse_SHeilen(arztid,giveid,vehicleid);
public Pulse_SHeilen(arztid,giveid,vehicleid) {
    new String[128];
    format(String,sizeof(String),"* Die Heilung durch %s wurde erfolgreich abgeschlossen",GetName(arztid));
    SendClientMessage(giveid,COLOR_GREEN,String);
    format(String,sizeof(String),"* Du hast Spieler %s erfolgreich geheilt",GetName(giveid));
    SendClientMessage(arztid,COLOR_YELLOW,String);
    SetPlayerHealth(giveid,100.0);
    TogglePlayerControllable(giveid,true);
    TogglePlayerControllable(arztid,true);
    return 1;
}

CMD:accept(playerid, params[])
{
    new entry[30], string[128];
    if(sscanf(params, "s[30]", entry))
    {
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Accept [Aktion]");
        SendClientMessage(playerid, COLOR_ORANGE, "* Aktionen: Stats, Repair, Heilung, Fraktion, Spice, Drogen, Waffenteile, Wantedcodes");
        SendClientMessage(playerid, COLOR_ORANGE, "* Aktionen: Waffen, Angelstats, Eis, Antrag, Pizza, Hotdog, Taxi, Anwalt, Vertrag, Kekse");
        return 1;
    }
    if(!strcmp(entry,"vertrag", true)) {
        new
            vertragspartner;
        vertragspartner = GetPlayerVertragsPartner(playerid);
        if( !IsPlayerConnected(vertragspartner)) {
            return SendClientMessage(playerid, COLOR_RED, "Dir wurde kein Vertrag angeboten");
        }
        new
            String[180],
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        if( !IsPlayerInRangeOfPoint(vertragspartner,6.0,x,y,z) ) {
            return SendClientMessage(playerid,COLOR_RED,"Dein Vertragspartner ist zu weit entfernt von dir");
        }
        format(String,sizeof(String),"Spieler %s hat den Vertrag unterschrieben und ist mit der Einigung einverstanden!",GetName(playerid));
        SendClientMessage(vertragspartner,COLOR_YELLOW,String);
        format(String,sizeof(String),"Du bist mit der Vertragseinigung einverstanden und hast den Vertrag unterschrieben!");
        SendClientMessage(playerid,COLOR_YELLOW,String);

        format(String,sizeof(String),"Vertragspartner: %s , %s . Bedingung: %s",GetName(vertragspartner),GetName(playerid),Spieler[vertragspartner][pVertragText]);
        VertragLog(String);

        Spieler[vertragspartner][pVertragText][0] = '\0';
        Spieler[vertragspartner][pVertragID] = INVALID_PLAYER_ID;
    }
    if(strcmp(entry, "stats", true) == 0)
    {
        if(!(AcceptStats[playerid] == 999))
        {
            Stats(playerid, AcceptStats[playerid]);
            format(string, sizeof(string), "%s sieht sich deine Statistiken an.", GetName(playerid));
            SendClientMessage(AcceptStats[playerid], COLOR_LIGHTBLUE, string);
            AcceptStats[playerid] = 999;
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du hast keine Anfrage erhalten.");
            return 1;
        }
        return 1;
    }
    else if(strcmp(entry,"hitman",true) == 0 ) {
        if(Spieler[playerid][pFraktion] != 14 ) {
            SendClientMessage(playerid, COLOR_RED, "Du bist kein Hitman");
            return 1;
        }
        if(Spieler[playerid][pHitmenAuftragID] != INVALID_PLAYER_ID ) {
            new
                auftraggeber = Spieler[playerid][pHitmenAuftragID],
                opfer = Spieler[auftraggeber][pKopfgeldID],
                String[128];
            format(String, sizeof(String), "Auftraggeber: %s Mordopfer: %s ($%s)", GetName(auftraggeber), GetName(opfer), AddDelimiters(Spieler[auftraggeber][pKopfgeld]));
            SendClientMessage(playerid, COLOR_YELLOW, String );
            return 1;
        }
        ShowPlayerHitmenList(playerid);
        return 1;
    }
    else if(strcmp(entry, "angelstats", true) == 0)
    {
        new pID, pTimestamp, pVarString[40];
        GetPVarString(playerid, "SHOW.ANGELSTATS", pVarString, sizeof(pVarString));
        if (isnull(pVarString) || sscanf(pVarString, "%i %i", pID, pTimestamp))
            return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Niemand hat dir seine Angelstatistiken angeboten.");

        if (Spieler[pID][pLoginTimestamp] != pTimestamp) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht mehr online.");
        ShowAngelStats(playerid, pID);
        SCMFormatted(pID, COLOR_YELLOW, "[INFO] {FFFFFF}%s sieht sich deine Angelstatistiken an.", GetName(playerid));
        SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du siehst dir die Angelstatistiken von %s an.", GetName(pID));
        DeletePVar(playerid, "SHOW.ANGELSTATS");
    }
    else if(strcmp(entry, "carsell", true) == 0)
    {
        if(AcceptCarSell[playerid] != 999)
        {
            if(AcceptCarSellPreis[playerid] > 0)
            {
                new pID = AcceptCarSell[playerid];
                new Float:x, Float:y, Float:z;
                GetPlayerPos(pID, x,y,z);
                if(IsPlayerConnected(pID) && gPlayerLogged[pID])
                {
                    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
                    if(PlayerHaveCar[pID][PlayerKey[playerid]])
                    {
                        if(!PlayerHaveCar[playerid][PlayerKey[pID]])
                        {
                            if(GetPlayerMoney(playerid) < AcceptCarSellPreis[playerid])return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                            format(string, sizeof(string), "* %s hat dir sein Fahrzeug gegeben.", GetName(playerid));
                            SendClientMessage(playerid, COLOR_YELLOW, string);
                            format(string, sizeof(string), "* Du hast dein Fahrzeug an %s gegeben.", GetName(pID));
                            SendClientMessage(pID, COLOR_YELLOW, string);
                            // new oldname[128], newname[128];
                            new Float:tx, Float:ty, Float:tz;
                            GetPlayerPos(playerid, tx, ty, tz);
                            // format(oldname, sizeof(oldname), "/Autos/%s_Car_%d.ini", GetName(pID), PlayerKey[pID]);
                            // format(newname, sizeof(newname), "/Autos/%s_Car_%d.ini", GetName(playerid), PlayerKey[playerid]);
                            // fcopy(oldname, newname);
                            // fremove(oldname);
                            if(PlayerCar[pID][PlayerKey[pID]][CarNeon1] > 0 || PlayerCar[pID][PlayerKey[pID]][CarNeon2] > 0)
                            {
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2]);
                                PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon1] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][ObjectIDNeon2] = INVALID_OBJECT_ID;
                            }
                            if(PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] > 0)
                            {
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned2]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned3]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned4]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned5]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned6]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned7]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned8]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned9]);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned1] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned2] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned3] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned4] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned5] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned6] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned7] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned8] = INVALID_OBJECT_ID;
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned9] = INVALID_OBJECT_ID;
                            }
                            if(vSirene[PlayerCar[pID][PlayerKey[pID]][CarId]] != INVALID_OBJECT_ID)
                            {
                                DestroyDynamicObject(vSirene[PlayerCar[pID][PlayerKey[pID]][CarId]]);
                            }
                            if(vNeon[PlayerCar[pID][PlayerKey[pID]][CarId]] != INVALID_OBJECT_ID)
                            {
                                DestroyDynamicObject(vNeon[PlayerCar[pID][PlayerKey[pID]][CarId]]);
                            }
                            if(OAmtSirene[PlayerCar[pID][PlayerKey[pID]][CarId]] != INVALID_OBJECT_ID)
                            {
                                DestroyDynamicObject(OAmtSirene[PlayerCar[pID][PlayerKey[pID]][CarId]]);
                            }

                            DestroyVehicle(PlayerCar[pID][PlayerKey[pID]][CarId]);
                            g_Parkschein[PlayerCar[pID][PlayerKey[pID]][CarId]] = 0;
                            //DestroyPeilsender(pID, PlayerKey[pID] );
                            aiVehicles[ PlayerCar[pID][PlayerKey[pID]][CarId] ] = VEH_INVALID;
                            PlayerHaveCar[pID][PlayerKey[pID]]  =0;
                            PlayerCar[playerid][PlayerKey[playerid]][CarId]         =0;

                            format(PlayerCar[playerid][PlayerKey[playerid]][CarOwner],MAX_PLAYER_NAME,GetName(playerid) );
                            PlayerCar[playerid][PlayerKey[playerid]][Id]            =PlayerCar[pID][PlayerKey[pID]][Id];
                            PlayerCar[playerid][PlayerKey[playerid]][CarModel]      =PlayerCar[pID][PlayerKey[pID]][CarModel];
                            PlayerCar[playerid][PlayerKey[playerid]][CarPos_x]      =tx;
                            PlayerCar[playerid][PlayerKey[playerid]][CarPos_y]      =ty;
                            PlayerCar[playerid][PlayerKey[playerid]][CarPos_z]      =tz;
                            PlayerCar[playerid][PlayerKey[playerid]][CarRotate]     =0.0;
                            PlayerCar[playerid][PlayerKey[playerid]][CarNitro]      =PlayerCar[pID][PlayerKey[pID]][CarNitro];
                            PlayerCar[playerid][PlayerKey[playerid]][CarHyd]        =PlayerCar[pID][PlayerKey[pID]][CarHyd];
                            PlayerCar[playerid][PlayerKey[playerid]][CarWheel]      =PlayerCar[pID][PlayerKey[pID]][CarWheel];
                            PlayerCar[playerid][PlayerKey[playerid]][CarAusp]       =PlayerCar[pID][PlayerKey[pID]][CarAusp];
                            PlayerCar[playerid][PlayerKey[playerid]][CarSideL]      =PlayerCar[pID][PlayerKey[pID]][CarSideL];
                            PlayerCar[playerid][PlayerKey[playerid]][CarSideR]      =PlayerCar[pID][PlayerKey[pID]][CarSideR];
                            PlayerCar[playerid][PlayerKey[playerid]][CarFB]         =PlayerCar[pID][PlayerKey[pID]][CarFB];
                            PlayerCar[playerid][PlayerKey[playerid]][CarRB]         =PlayerCar[pID][PlayerKey[pID]][CarRB];
                            PlayerCar[playerid][PlayerKey[playerid]][CarSpoiler]    =PlayerCar[pID][PlayerKey[pID]][CarSpoiler];
                            PlayerCar[playerid][PlayerKey[playerid]][CarRoof]       =PlayerCar[pID][PlayerKey[pID]][CarRoof];
                            PlayerCar[playerid][PlayerKey[playerid]][CarHood]       =PlayerCar[pID][PlayerKey[pID]][CarHood];
                            PlayerCar[playerid][PlayerKey[playerid]][CarVents]      =PlayerCar[pID][PlayerKey[pID]][CarVents];
                            PlayerCar[playerid][PlayerKey[playerid]][CarLamps]      =PlayerCar[pID][PlayerKey[pID]][CarLamps];
                            PlayerCar[playerid][PlayerKey[playerid]][CarPJ]         =PlayerCar[pID][PlayerKey[pID]][CarPJ];
                            PlayerCar[playerid][PlayerKey[playerid]][CarC1]         =PlayerCar[pID][PlayerKey[pID]][CarC1];
                            PlayerCar[playerid][PlayerKey[playerid]][CarC2]         =PlayerCar[pID][PlayerKey[pID]][CarC2];
                            PlayerCar[playerid][PlayerKey[playerid]][CarPreis]      =PlayerCar[pID][PlayerKey[pID]][CarPreis];
                            PlayerCar[playerid][PlayerKey[playerid]][CarState]      =PlayerCar[pID][PlayerKey[pID]][CarState];
                            PlayerCar[playerid][PlayerKey[playerid]][CarNeon1]      =PlayerCar[pID][PlayerKey[pID]][CarNeon1];
                            PlayerCar[playerid][PlayerKey[playerid]][CarNeon2]      =PlayerCar[pID][PlayerKey[pID]][CarNeon2];
                            PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned]=PlayerCar[pID][PlayerKey[pID]][isSpecialTuned];
                            PlayerCar[playerid][PlayerKey[playerid]][CarId] = CreateVehicle(PlayerCar[playerid][PlayerKey[pID]][CarModel], tx, ty, tz, 0.0, PlayerCar[pID][PlayerKey[pID]][CarC1], PlayerCar[pID][PlayerKey[pID]][CarC2], -1);
                            PlayerCar[playerid][PlayerKey[playerid]][TUV]       =PlayerCar[pID][PlayerKey[pID]][TUV];
                            aiVehicles[ PlayerCar[playerid][PlayerKey[playerid]][CarId] ] = VEH_PRIVAT;
                            PlayerCar[pID][PlayerKey[pID]][Id] = 0;
                            SavePlayerCar(playerid,PlayerKey[playerid]);
                            if(PlayerCar[playerid][PlayerKey[playerid]][CarNeon1] > 0 || PlayerCar[playerid][PlayerKey[playerid]][CarNeon2] > 0)
                            {
                                PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][CarNeon1], 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon2] = CreateDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][CarNeon2], 0,0,0,0,0,0,0);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon1], PlayerCar[playerid][PlayerKey[playerid]][CarId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon2], PlayerCar[playerid][PlayerKey[playerid]][CarId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                            }
                            if(PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] > 0)
                            {
                                PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] = 1;
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1] = CreateDynamicObject(1166, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned2] = CreateDynamicObject(1168, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned3] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned4] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned5] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned6] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned7] = CreateDynamicObject(1091, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned8] = CreateDynamicObject(1164, 0,0,0,0,0,0,0);
                                PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned9] = CreateDynamicObject(1034, 0,0,0,0,0,0,0);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1], PlayerCar[playerid][PlayerKey[playerid]][CarId], 1.024999, 2.080000, -0.090000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned2], PlayerCar[playerid][PlayerKey[playerid]][CarId],-1.066002, -1.774998, -0.130000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned3], PlayerCar[playerid][PlayerKey[playerid]][CarId],-0.946998, 0.149999, -0.589998, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned4], PlayerCar[playerid][PlayerKey[playerid]][CarId], -0.981998, -0.169999, -0.589998, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned5], PlayerCar[playerid][PlayerKey[playerid]][CarId],1.008000, -0.169999, -0.589998, 0.000001, -179.995712, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned6], PlayerCar[playerid][PlayerKey[playerid]][CarId],0.978000, 0.174999, -0.589998, 0.000001, -179.995712, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned7], PlayerCar[playerid][PlayerKey[playerid]][CarId],-0.006999, 0.244999, 0.648500, 0.000001, -0.000116, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned8], PlayerCar[playerid][PlayerKey[playerid]][CarId], 0.000000, -2.470009, 0.368500, 0.000001, -0.000116, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned9], PlayerCar[playerid][PlayerKey[playerid]][CarId],-0.009999, -0.240000, -0.106499, 0.000001, -0.000116, 0.000000);
                            }
                            if(PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] > 0)
                            {
                                PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 2;
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned1] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned2] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned3] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned4] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned5] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned6] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned2], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned3], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned4], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned5], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned6], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                            }
                            if(PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] > 0)
                            {
                                PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 3;
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                DestroyDynamicObject(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1]);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned1] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned2] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned3] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                                PlayerCar[pID][PlayerKey[pID]][SpecialTuned4] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned1], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned2], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned3], PlayerCar[pID][PlayerKey[pID]][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                                AttachDynamicObjectToVehicle(PlayerCar[pID][PlayerKey[pID]][SpecialTuned4], PlayerCar[pID][PlayerKey[pID]][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                            }
                            PlayerHaveCar[playerid][PlayerKey[playerid]] = 1;
                            LockCar(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
                            PlayerCar[pID][PlayerKey[pID]][CarNeon1] = 0;
                            PlayerCar[pID][PlayerKey[pID]][CarNeon2] = 0;
                            PlayerCar[pID][PlayerKey[pID]][isSpecialTuned] = 0;
                            GivePlayerCash(playerid, -AcceptCarSellPreis[playerid]);
                            GivePlayerCash(pID, AcceptCarSellPreis[playerid]);
                            AcceptCarSell[playerid] = 999;
                            AcceptCarSellPreis[playerid] = 0;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_RED, "Der Spieler hat auf dem Schlüssel bereits ein Fahrzeug.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast auf dem Schlüssel kein Fahrzeug.");
                        return 1;
                    }
                }
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Niemand hat dir angeboten, ein Fahrzeug zu kaufen.");
            return 1;
        }
    }
    else if(strcmp(entry, "waffen", true) == 0)
    {
        new offerString[64], pID, sessionStamp, gID, price;
        GetPVarString(playerid, "SELL.GUN.OFFER", offerString, sizeof(offerString));
        if (isnull(offerString)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Dir liegt kein Angebot für Waffen vor.");
        if (sscanf(offerString, "k<playername> i i i", pID, sessionStamp, gID, price) || pID == INVALID_PLAYER_ID
            || Spieler[pID][pLoginTimestamp] != sessionStamp) {
            DeletePVar(playerid, "SELL.GUN.OFFER");
            return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Das Angebot ist nicht mehr gültig.");
        }

        if (HasWeaponBlock(playerid)) {
            DeletePVar(playerid, "SELL.GUN.OFFER");
            return SendWeaponBlockInfo(playerid);
        }

        if (Spieler[playerid][pCash] < price)
            return SCMFormatted(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Du brauchst $%s auf der Hand um das Angebot anzunehmen.", AddDelimiters(price));

        if (!IsPlayerInRangeOfPlayer(playerid, pID, 8.0)) return SCMFormatted(playerid, COLOR_RED, "[INFO] {FFFFFF}%s ist nicht mehr in deiner Nähe.", GetName(pID));
        if (Spieler[pID][pJob] != 18) {
            DeletePVar(playerid, "SELL.GUN.OFFER");
            return SCMFormatted(playerid, COLOR_RED, "[INFO] {FFFFFF}%s ist kein Waffendealer mehr. Das Angebot ist nichtig.", GetName(pID));
        }

        if (Spieler[pID][pWaffenteile] < g_sellGuns[gID][SELL_GUN_MATS])
            return SCMFormatted(pID, COLOR_RED, "[INFO] {FFFFFF}%s hat nicht mehr genügend Waffenteile dabei.", GetName(pID));

        Spieler[pID][pWaffenteile] -= g_sellGuns[gID][SELL_GUN_MATS];
        GivePlayerWeapon(playerid, g_sellGuns[gID][SELL_GUN_ID], g_sellGuns[gID][SELL_GUN_AMMO]);
        GivePlayerCash(playerid, -price);
        GivePlayerCash(pID, price);
        SCMFormatted(playerid, COLOR_LIGHTBLUE, "[INFO] {FFFFFF}Du hast von %s %s %s für $%s gekauft.", GetName(pID), g_sellGuns[gID][SELL_GUN_INDEF_ARTICLE],\
            g_sellGuns[gID][SELL_GUN_NAME], AddDelimiters(price));

        SCMFormatted(pID, COLOR_LIGHTBLUE, "[INFO] {FFFFFF}%s hat dir %s %s für $%s abgekauft.", GetName(playerid), g_sellGuns[gID][SELL_GUN_INDEF_ARTICLE],\
            g_sellGuns[gID][SELL_GUN_NAME], AddDelimiters(price));

        DeletePVar(playerid, "SELL.GUN.OFFER");
        new logString[128], location[24];
        GetPlayer2DZone(playerid, location, sizeof(location));
        format(logString, sizeof(logString), "Name: %s - Käufer: %s - Waffe: %s - Geld: $%s - Ort: %s", GetName(pID), GetName(playerid), g_sellGuns[gID][SELL_GUN_NAME],
            AddDelimiters(price), location);

        LogWDealer(logString);
        return 1;
    }
    else if(strcmp(entry, "drogen", true) == 0)
    {
        if(!(pDrogenID[playerid] == 999))
        {
            if(IsPlayerConnected(pDrogenID[playerid]))
            {
                if(Spieler[pDrogenID[playerid]][pDrugs]>=pDrogenMenge[playerid])
                {
                    if(GetPlayerMoney(playerid) < pDrogenPreis[playerid])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
                    GivePlayerCash(playerid, -pDrogenPreis[playerid]);
                    GivePlayerCash(pDrogenID[playerid], pDrogenPreis[playerid]);
                    //Spieler[pDrogenID[playerid]][pDrugs] -= pDrogenMenge[playerid];
                    Spieler[playerid][pDrugs] += pDrogenMenge[playerid];
                    Spieler[ pDrogenID[playerid] ][pDrugs] -= pDrogenMenge[playerid];
                    format(string, sizeof(string), "Du hast %d Gramm Drogen von %s für $%s abgekauft.", pDrogenMenge[playerid], GetName(pDrogenID[playerid]), AddDelimiters(pDrogenPreis[playerid]));
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "%s hat dir %d Gramm Drogen für $%s abgekauft.", GetName(playerid), pDrogenMenge[playerid], AddDelimiters(pDrogenPreis[playerid]));
                    SendClientMessage(pDrogenID[playerid], COLOR_LIGHTBLUE, string);
                    new ort[24], ddealerlog[128];
                    GetPlayer2DZone(playerid, ort, 24);
                    // ??? format(ddealerlog, sizeof(ddealerlog), "Name: %s - Käufer: %s - Drogen: %d - Geld: %d - Ort: %s", GetName(pDrogenID[playerid]), GetName(playerid), pDrogenMenge[playerid], pDrogenPreis[playerid], ort);
                    format(ddealerlog,sizeof(ddealerlog),"%s hat %s %d Gramm für $%s verkauft.",GetName( pDrogenID[playerid] ) , GetName(playerid), pDrogenMenge[playerid] , AddDelimiters(pDrogenPreis[playerid]) );
                    DrugLog(ddealerlog);
                    pDrogenID[playerid] = 999;
                    pDrogenMenge[playerid] = 0;
                    pDrogenPreis[playerid] = 0;
                    return 1;
                }
                else
                {
                    SendClientMessage(pDrogenID[playerid], COLOR_RED, "Du besitzt nicht mehr die Menge an Drogen, die du verkaufen wolltest.");
                    SendClientMessage(playerid, COLOR_RED, "Der Verkäufer besitzt nicht mehr die Menge an Drogen, die er verkaufen wollte.");
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
                return 1;
            }
        }
    }
    else if(strcmp(entry, "kekse", true) == 0)
    {
        new pVarString[128], pID, menge, preis;
        GetPVarString(playerid, "BUY_COOKIES", pVarString, sizeof(pVarString));
        if (sscanf(pVarString, "uii", pID, menge, preis)) return SendClientMessage(playerid, COLOR_RED, "Du hast kein Angebot für Kekse erhalten.");
        if(IsPlayerConnected(pID))
        {
            if(Spieler[pID][pKekse] >= menge)
            {
                if(GetPlayerMoney(playerid) < preis) return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
                GivePlayerCash(playerid, -preis);
                GivePlayerCash(pID, preis);
                Spieler[playerid][pKekse] += menge;
                Spieler[pID][pKekse] -= menge;
                format(pVarString, sizeof(pVarString), "Du hast %d Kekse von %s für $%s abgekauft.", menge, GetName(pID), AddDelimiters(preis));
                SendClientMessage(playerid, COLOR_LIGHTBLUE, pVarString);
                format(pVarString, sizeof(pVarString), "%s hat dir %d Kekse für $%s abgekauft.", GetName(playerid), menge, AddDelimiters(preis));
                SendClientMessage(pID, COLOR_LIGHTBLUE, pVarString);
                new ort[24], ddealerlog[128];
                GetPlayer2DZone(playerid, ort, 24);
                // ??? format(ddealerlog, sizeof(ddealerlog), "Name: %s - Käufer: %s - Drogen: %d - Geld: %d - Ort: %s", GetName(pDrogenID[playerid]), GetName(playerid), pDrogenMenge[playerid], pDrogenPreis[playerid], ort);
                format(ddealerlog,sizeof(ddealerlog),"%s hat %s %d Kekse für $%s verkauft.", GetName(pID) , GetName(playerid), menge, AddDelimiters(preis));
                CookiesLog(ddealerlog);
                DeletePVar(playerid, "BUY_COOKIES");

                return 1;
            }
            else
            {
                SendClientMessage(pID, COLOR_RED, "Du besitzt nicht mehr die Menge an Keksen, die du verkaufen wolltest.");
                SendClientMessage(playerid, COLOR_RED, "Der Verkäufer besitzt nicht mehr die Menge an Keksen, die er verkaufen wollte.");
                return 1;
            }
        }
        else
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    else if(strcmp(entry, "wantedcodes", true) == 0)
    {
        new pVarString[128], pID, menge, preis;
        GetPVarString(playerid, "BUY_WCODES", pVarString, sizeof(pVarString));
        if (sscanf(pVarString, "uii", pID, menge, preis)) return SendClientMessage(playerid, COLOR_RED, "Du hast kein Angebot für Wantedcodes erhalten.");
        if(IsPlayerConnected(pID))
        {
            if(Spieler[pID][pWantedCodes] >= menge)
            {
                if(GetPlayerMoney(playerid) < preis) return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
                GivePlayerCash(playerid, -preis);
                GivePlayerCash(pID, preis);
                Spieler[playerid][pWantedCodes] += menge;
                Spieler[pID][pWantedCodes] -= menge;
                format(pVarString, sizeof(pVarString), "Du hast %d Wantedcodes von %s für $%s abgekauft.", menge, GetName(pID), AddDelimiters(preis));
                SendClientMessage(playerid, COLOR_LIGHTBLUE, pVarString);
                format(pVarString, sizeof(pVarString), "%s hat dir %d Wantedcodes für $%s abgekauft.", GetName(playerid), menge, AddDelimiters(preis));
                SendClientMessage(pID, COLOR_LIGHTBLUE, pVarString);
                new ort[24], ddealerlog[128];
                GetPlayer2DZone(playerid, ort, 24);
                // ??? format(ddealerlog, sizeof(ddealerlog), "Name: %s - Käufer: %s - Drogen: %d - Geld: %d - Ort: %s", GetName(pDrogenID[playerid]), GetName(playerid), pDrogenMenge[playerid], pDrogenPreis[playerid], ort);
                format(ddealerlog,sizeof(ddealerlog),"%s hat %s %d Codes für $%s verkauft.", GetName(pID) , GetName(playerid), menge, AddDelimiters(preis));
                WCodeLog(ddealerlog);
                DeletePVar(playerid, "BUY_WCODES");
            }
            else
            {
                SendClientMessage(pID, COLOR_RED, "Du besitzt nicht mehr die Menge an Wantedcodes, die du verkaufen wolltest.");
                SendClientMessage(playerid, COLOR_RED, "Der Verkäufer besitzt nicht mehr die Menge an Wantedcodes, die er verkaufen wollte.");
            }
        }
        else
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    else if(strcmp(entry, "waffenteile", true) == 0)
    {
        if(!(pWTeileID[playerid] == 999))
        {
            if(IsPlayerConnected(pWTeileID[playerid]))
            {
                if(Spieler[pWTeileID[playerid]][pWaffenteile]>=pWTeileMenge[playerid])
                {
                    if(GetPlayerMoney(playerid) < pWTeilePreis[playerid])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
                    GivePlayerCash(playerid, -pWTeilePreis[playerid]);
                    GivePlayerCash(pWTeileID[playerid], pWTeilePreis[playerid]);
                    //Spieler[pDrogenID[playerid]][pDrugs] -= pDrogenMenge[playerid];
                    Spieler[playerid][pWaffenteile] += pWTeileMenge[playerid];
                    Spieler[ pWTeileID[playerid] ][pWaffenteile] -= pWTeileMenge[playerid];
                    format(string, sizeof(string), "Du hast %d Stk. Waffenteile von %s für $%s abgekauft.", pWTeileMenge[playerid], GetName(pWTeileID[playerid]), AddDelimiters(pWTeilePreis[playerid]));
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "%s hat dir %d Stk. Waffenteile für $%s abgekauft.", GetName(playerid), pWTeileMenge[playerid], AddDelimiters(pWTeilePreis[playerid]));
                    SendClientMessage(pWTeileID[playerid], COLOR_LIGHTBLUE, string);
                    new ort[24], waffenteilelog[128];
                    GetPlayer2DZone(playerid, ort, 24);
                    // ??? format(ddealerlog, sizeof(ddealerlog), "Name: %s - Käufer: %s - Drogen: %d - Geld: %d - Ort: %s", GetName(pDrogenID[playerid]), GetName(playerid), pDrogenMenge[playerid], pDrogenPreis[playerid], ort);
                    format(waffenteilelog,sizeof(waffenteilelog),"%s hat %s %dstk. Waffenteile für $%s verkauft.",GetName( pWTeileID[playerid] ) , GetName(playerid), pWTeileMenge[playerid] , AddDelimiters(pWTeilePreis[playerid]) );
                    WaffenteileLog(waffenteilelog);
                    pWTeileID[playerid] = 999;
                    pWTeileMenge[playerid] = 0;
                    pWTeilePreis[playerid] = 0;
                }
                else
                {
                    SendClientMessage(pWTeileID[playerid],COLOR_RED,"Du besitzt nicht mehr die Menge an Waffenteilenm die du verkaufen wolltest.");
                    SendClientMessage(playerid,COLOR_RED,"Der Verkäufer besitzt nicht mehr die Menge an Waffenteilen, die er verkaufen wollte.");
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
                return 1;
            }
        }
    }
    else if(strcmp(entry, "spice", true) == 0)
    {
        if(!(pSpiceID[playerid] == 999))
        {
            if(IsPlayerConnected(pSpiceID[playerid]))
            {
                if(GetPlayerMoney(playerid) < pSpicePreis[playerid])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
                if(pSpiceMenge[playerid]>Spieler[pSpiceID[playerid]][pSpice])return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer besitzt nicht die benötigte Menge an Spice");
                GivePlayerCash(playerid, -pSpicePreis[playerid]);
                GivePlayerCash(pSpiceID[playerid], pSpicePreis[playerid]);
                //Spieler[pDrogenID[playerid]][pDrugs] -= pDrogenMenge[playerid];
                Spieler[playerid][pSpice] += pSpiceMenge[playerid];
                Spieler[pSpiceID[playerid]][pSpice] -= pSpiceMenge[playerid];
                format(string, sizeof(string), "Du hast %d Gramm Spice von %s für $%s abgekauft.", pSpiceMenge[playerid], GetName(pSpiceID[playerid]), AddDelimiters(pSpicePreis[playerid]));
                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "%s hat dir %d Gramm Spice für $%s abgekauft.", GetName(playerid), pSpiceMenge[playerid], AddDelimiters(pSpicePreis[playerid]));
                SendClientMessage(pSpiceID[playerid], COLOR_LIGHTBLUE, string);
                new ort[24], ddealerlog[128];
                GetPlayer2DZone(playerid, ort, 24);
                format(ddealerlog, sizeof(ddealerlog), "Name: %s - Käufer: %s - Spice: %d - Geld: %d - Ort: %s", GetName(pSpiceID[playerid]), GetName(playerid), pSpiceMenge[playerid], pSpicePreis[playerid], ort);
                pSpiceID[playerid] = 999;
                pSpiceMenge[playerid] = 0;
                pSpicePreis[playerid] = 0;
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
                return 1;
            }
        }
    }
    else if(strcmp(entry, "anwalt", true) == 0)
    {

        if(!(AnwaltID[playerid] == 999))
        {
            if(IsPlayerConnected(AnwaltID[playerid]))
            {
                if(Spieler[playerid][pJailed] != 1)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich im Admin Prison und kannst daher nicht von einem Anwalt befreit werden!");
                if(GetPlayerMoney(playerid) < AnwaltPreis[playerid])return SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht.");
                GivePlayerCash(playerid, -AnwaltPreis[playerid]);
                GivePlayerCash(AnwaltID[playerid], AnwaltPreis[playerid]);
                new anwaltlog[128];
                new stateshare = 40; //GetPlayerLawyerStateShare( AnwaltID[playerid] );
                new staatsanteil = floatround((stateshare / 100.0 ) * AnwaltPreis[playerid]);
                Spieler[ AnwaltID[playerid] ][pLawyerPoints]++;
                format(anwaltlog, sizeof(anwaltlog), "Name: %s - Befreiter: %s - Geld: %d", GetName(AnwaltID[playerid]), GetName(playerid), AnwaltPreis[playerid] + staatsanteil);
                LogAnwalt(anwaltlog);
                format(string, sizeof(string), "Du hast die Befreiung von %s angenommen. (-$%d)", GetName(AnwaltID[playerid]), AnwaltPreis[playerid] + staatsanteil);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "%s hat deine Befreiung angenommen. (+$%d)", GetName(playerid), AnwaltPreis[playerid] + staatsanteil);
                SendClientMessage(AnwaltID[playerid], COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "Davon erhält die Staatskasse $%d aufgrund deines Anwalt-Skills.", staatsanteil);
                SendClientMessage(AnwaltID[playerid], COLOR_LIGHTBLUE, string);
                GivePlayerCash(playerid,-staatsanteil);
                Kasse[Staat] += staatsanteil;
                AnwaltPreis[playerid] = 0;
                AnwaltID[playerid] = 999;
                Spieler[playerid][pJailTime] = 0;
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Niemand hat dir eine Befreiung angeboten.");
            return 1;
        }
    }
    else if(strcmp(entry, "fraktion", true) == 0)
    {
        if(!(FrakInviteID[playerid] == 999))
        {
            Spieler[playerid][pFraktion] = FrakInviteID[playerid];
            new frakid = FrakInviteID[playerid];
            if(frakid == 1){ if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 280); } else if(Spieler[playerid][pSex] == 2){ SetPlayerSkinEx(playerid, 150); } }
            else if(frakid == 2){if (Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 286); } else if(Spieler[playerid][pSex] == 2){ SetPlayerSkinEx(playerid, 150); } }
            else if(frakid == 3){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 276); } else if(Spieler[playerid][pSex] == 2){ SetPlayerSkinEx(playerid, 26); } }
            else if(frakid == 4){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 57); } else if(Spieler[playerid][pSex] == 2){ SetPlayerSkinEx(playerid, 55); } }
            else if(frakid == 5){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 71); } else if(Spieler[playerid][pSex] == 2){ SetPlayerSkinEx(playerid, 71); } }
            else if(frakid == 6){if(Spieler[playerid][pSex] == 1){SetPlayerSkinEx(playerid, 105); } else if(Spieler[playerid][pSex] == 2){ SetPlayerSkinEx(playerid, 65); } }
            else if(frakid == 7){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 102);}else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 195);} }
            else if(frakid == 8){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 240);}else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 194);} }
            else if(frakid == 9){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 164);}else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 170);} }
            else if(frakid == 10){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 122); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 169);} }
            else if(frakid == 11){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 116); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 116);} }
            else if(frakid == 12){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 126); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 126);} }
            else if(frakid == 13){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 110); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 110);} }
            else if(frakid == 14){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 229); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 110);}}
            else if(frakid == 15){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 248); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 248);}}
            else if(frakid == 16){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 282); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 194);}}
            else if(frakid == 17){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 202); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 89);}}
            else if(frakid == 18){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 287); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 287);}}
            else if(frakid == 19){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 220); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 220);}}
            else if(frakid == 20){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 48); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 48);}}
            else if(frakid == 21){if(Spieler[playerid][pSex] == 1){ SetPlayerSkinEx(playerid, 111); } else if(Spieler[playerid][pSex] == 2){SetPlayerSkinEx(playerid, 111);}}
            FrakInviteID[playerid] = 999;
            SpawnPlayerEx(playerid);
            SaveAccount(playerid);
        }
    }
    else if(strcmp(entry, "refill", true) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(!(RefillCar[playerid] == 999))
            {
                if(IsPlayerConnected(RefillCar[playerid]))
                {
                    if(GetPlayerMoney(playerid) >= RefillCarPreis[playerid])
                    {
                        new vID = GetPlayerVehicleID(playerid);
                        GivePlayerCash(playerid, -RefillCarPreis[playerid]);
                        GivePlayerCash(RefillCar[playerid], RefillCarPreis[playerid]);
                        format(string, sizeof(string), "* %s hat die Tankfüllung angenommen. Du erhältst $%s", GetName(playerid), AddDelimiters(RefillCarPreis[playerid]));
                        SendClientMessage(RefillCar[playerid], COLOR_BLUE, string);
                        SendClientMessage(playerid, COLOR_BLUE, "* Du hast die Tankfüllung angenommen.");
                        RefillCarPreis[playerid] = 0;
                        RefillCar[playerid] = 999;
                        gGas[vID] = GetMaxTank(vID);
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld dabei.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
                    RefillCarPreis[playerid] = 0;
                    RefillCar[playerid] = 999;
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du hast keine Anfrage erhalten.");
                return 1;
            }
        }
    }
    else if(strcmp(entry, "antrag",true) == 0 ) {
        new
            String[128],
            giveid;
        giveid = Spieler[playerid][pHeiratsantragID];

        if(giveid == INVALID_PLAYER_ID) {
            return SendClientMessage(playerid, COLOR_RED, "Dir wurde kein Heiratsantrag gemacht.");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht mehr online.");
        }
        if( Spieler[playerid][pMarriage] != INVALID_MARRIAGE ) {
            return SendClientMessage(playerid, COLOR_RED, "Du bist bereits verheiratet.");
        }
        if( Spieler[giveid][pMarriage] != INVALID_MARRIAGE ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist bereits verheiratet.");
        }
        if( IsPlayerInAnyVehicle(playerid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht in einem Fahrzeug heiraten.");
        }
        if( IsPlayerInAnyVehicle(giveid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Spieler in einem Fahrzeug heiraten.");
        }
        if( !IsPlayerInRangeOfPoint(playerid,5.0, WEDDING_COORDS) ) {
            return SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht am Trau-Platz.");
        }
        if( !IsPlayerInRangeOfPoint(giveid,5.0, WEDDING_COORDS) ) {
            return SendClientMessage(playerid, COLOR_RED, "Dein Partner befindet sich nicht am Trau-Platz.");
        }
        new
            geschlecht_playerid,
            geschlecht_giveid;
        geschlecht_playerid = Spieler[playerid][pSex];
        geschlecht_giveid = Spieler[giveid][pSex];
        if( geschlecht_playerid == geschlecht_giveid ) {
            if( geschlecht_playerid == 1 ) {
                format(String,sizeof(String),"[HOCHZEITSMELDUNG] Wir haben ein neues Schwulenpaar, "#COLOR_HEX_GREENA"%s und "#COLOR_HEX_GREENA"%s "#COLOR_HEX_YELLOW"sind nun verheiratet!",GetName(giveid),GetName(playerid));
            }
            else if( geschlecht_playerid == 2 ) {
                format(String,sizeof(String),"[HOCHZEITSMELDUNG] Wir haben ein neues Lesbenpaar, "#COLOR_HEX_GREENA"%s und "#COLOR_HEX_GREENA"%s "#COLOR_HEX_YELLOW"sind nun verheiratet!",GetName(giveid),GetName(playerid));
            }
        }
        else {
            format(String,sizeof(String),"[HOCHZEITSMELDUNG] Wir haben ein neues Hochzeitspaar, "#COLOR_HEX_GREENA"%s und "#COLOR_HEX_GREENA"%s "#COLOR_HEX_YELLOW"sind nun verheiratet!",GetName(giveid),GetName(playerid));
        }
        SendClientMessageToAll(COLOR_YELLOW,String);
        Spieler[playerid][pHeiratsantragID] = INVALID_PLAYER_ID;

        Spieler[playerid][pMarriage] = Spieler[giveid][ID];
        Spieler[giveid][pMarriage] = Spieler[playerid][ID];
        format(Spieler[playerid][pMarriageName],32,"%s",GetName(giveid));
        format(Spieler[giveid][pMarriageName],32,"%s",GetName(playerid));

        // SQL Vorsichtshalber
        format(String,sizeof(String),"UPDATE `accounts` SET `Marriage` = '%d' ,`MarriageName` = '%s' WHERE `ID` = %d",Spieler[playerid][pMarriage],Spieler[playerid][pMarriageName],Spieler[playerid][ID]);
        mysql_pquery(String,THREAD_ACCEPTMARRIAGE,playerid,gSQL,MySQLThreadOwner);
        format(String,sizeof(String),"UPDATE `accounts` SET `Marriage` = '%d' ,`MarriageName` = '%s' WHERE `ID` = %d",Spieler[giveid][pMarriage],Spieler[giveid][pMarriageName],Spieler[giveid][ID]);
        mysql_pquery(String,THREAD_ACCEPTMARRIAGE,giveid,gSQL,MySQLThreadOwner);
        return 1;
    }
    else if(strcmp(entry, "eis",true,3) == 0 ) {
        new
            String[128],
            vehicleid,
            preis,
            Float:X,
            Float:Y,
            Float:Z,
            giveid;
        giveid = Spieler[playerid][pEisVerkaeufer];
        if(giveid == INVALID_PLAYER_ID) {
            return SendClientMessage(playerid, COLOR_RED, "Dir wurde kein Eis zum Kauf angeboten.");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht mehr online.");
        }
        vehicleid = GetPlayerVehicleID(giveid);
        if( !IsEismannVehicle(vehicleid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Eisverkäufer ist nicht mehr im Eismann-Fahrzeug");
        }
        GetPlayerPos(playerid,X,Y,Z);
        if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Eisverkäufer befindet sich nicht mehr in deiner Nähe.");
        }
        preis = Spieler[playerid][pEisPreis];
        if( GetPlayerMoney(playerid) < preis ) {
            format(String,sizeof(String),"Du besitzt nicht genug Geld um das Eis zu kaufen (Preis: $%s)", AddDelimiters(preis));
            return SendClientMessage(playerid, COLOR_RED, String);
        }
        new
            Float:fHealth;
        GetPlayerHealth(playerid,fHealth);
        fHealth += 40.0;
        if( fHealth > 100.0 ) fHealth = 100.0;
        GivePlayerCash(playerid,-preis);
        GivePlayerCash(giveid,preis);
        format(String,sizeof(String),"Du hast das Eis für $%s gekauft. Deine Energie wurde aufgefüllt", AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_BLUE, String);
        format(String,sizeof(String),"Du hast ein Eis an %s für $%s verkauft. ",GetName(playerid), AddDelimiters(preis));
        SendClientMessage(giveid, COLOR_BLUE, String);

        Spieler[playerid][pEisVerkaeufer] = INVALID_PLAYER_ID;
        Spieler[playerid][pEisPreis] = 0;
        switch( random(3) ) {
            case 0: ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.0, 0, 0, 0, 0, 1); // 
            case 1: ApplyAnimation(playerid, "FOOD", "EAT_BURGER", 4.0, 0, 0, 0, 0, 1); // 
            case 2: ApplyAnimation(playerid, "FOOD", "EAT_CHICKEN", 4.0, 0, 0, 0, 0, 1); // 
        }
        return 1;
    }
    else if(strcmp(entry, "hotdog",true,3) == 0 ) {
        new
            String[128],
            vehicleid,
            preis,
            Float:X,
            Float:Y,
            Float:Z,
            giveid;
        giveid = Spieler[playerid][pHotDogVerkaeufer];
        if(giveid == INVALID_PLAYER_ID) {
            return SendClientMessage(playerid, COLOR_RED, "Dir wurde kein Hotdog zum Kauf angeboten.");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht mehr online.");
        }
        vehicleid = GetPlayerVehicleID(giveid);
        if( !IsHotDogVehicle(vehicleid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Hotdog-Verkäufer ist nicht mehr in seinem Fahrzeug!");
        }
        GetPlayerPos(playerid,X,Y,Z);
        if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Hotdog-Verkäufer befindet sich nicht mehr in deiner Nähe.");
        }
        preis = Spieler[playerid][pHotDogPreis];
        if( GetPlayerMoney(playerid) < preis ) {
            format(String,sizeof(String),"Du besitzt nicht genug Geld um den Hotdog zu kaufen (Preis: $%s)", AddDelimiters(preis));
            return SendClientMessage(playerid, COLOR_RED, String);
        }
        new
            Float:fHealth;
        GetPlayerHealth(playerid,fHealth);
        fHealth += 40.0;
        if( fHealth > 100.0 ) fHealth = 100.0;
        GivePlayerCash(playerid,-preis);
        GivePlayerCash(giveid,preis);
        format(String,sizeof(String),"Du hast ein Hotdog für $%s gekauft. Deine Energie wurde aufgefüllt", AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_BLUE, String);
        format(String,sizeof(String),"Du hast ein Hotdog an %s für $%s verkauft. ",GetName(playerid), AddDelimiters(preis));
        SendClientMessage(giveid, COLOR_BLUE, String);

        Spieler[playerid][pHotDogVerkaeufer] = INVALID_PLAYER_ID;
        Spieler[playerid][pHotDogPreis] = 0;
        switch( random(3) ) {
            case 0: ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.0, 0, 0, 0, 0, 1); // 
            case 1: ApplyAnimation(playerid, "FOOD", "EAT_BURGER", 4.0, 0, 0, 0, 0, 1); // 
            case 2: ApplyAnimation(playerid, "FOOD", "EAT_CHICKEN", 4.0, 0, 0, 0, 0, 1); // 
        }
        return 1;
    }
    else if( strcmp(entry,"arzt",true) == 0 ) {
        if( Spieler[playerid][pSHeilen] != INVALID_PLAYER_ID) {
            new
                arzt = Spieler[playerid][pSHeilen];
            if( IsPlayerConnected(arzt) ) {
                new vID = GetPlayerVehicleID(playerid);
                new pvID = GetPlayerVehicleID(arzt);
                if(pvID == vID) {
                    if( aiVehicles[vID] == VEH_SANICARS ) {
                        // Angenommen und alles iO
                        if( Spieler[playerid][pCash] < 100 ) {
                            return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld (100$)");
                        }
                        new seat1 = GetPlayerVehicleSeat(playerid);
                        new seat2 = GetPlayerVehicleSeat(arzt);
                        if( seat1 != 2 && seat1 != 3 && seat2 != 2 && seat2 != 3 ) {
                            return SendClientMessage(playerid, COLOR_ORANGE, "Für die Behandlung müssen Arzt und Patient im Behandlungsbereich des Wagens sein");
                        }
                        new
                            String[128];
                        format(String,sizeof(String),"* Du lässt dich nun von %s verarzten!",GetName(arzt));
                        SendClientMessage(playerid,COLOR_YELLOW,String);
                        format(String,sizeof(String),"* %s nimmt das Angebot an. Er möchte nun verarztet werden.",GetName(playerid));
                        SendClientMessage(arzt,COLOR_YELLOW,String);
                        Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
                        Spieler[playerid][tSHeilen] = SetTimerEx("Pulse_SHeilen",2003,false,"ddd",arzt,playerid,vID);
                        Spieler[playerid][pCash] -= 100;
                        Kasse[Samd] += 100;
                        SetCameraBehindPlayer(playerid);
                        SetCameraBehindPlayer(arzt);
                        TogglePlayerControllable(playerid,false);
                        TogglePlayerControllable(arzt,false);
                    }
                    else {
                        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht in einem Sanitärs Fahrzeug");
                    }
                }
                else {
                    return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im gleichem Fahrzeug wie der Arzt");
                }
            }
            else {
                Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
                return SendClientMessage(playerid,COLOR_RED,"Der Arzt ist nicht mehr Online");
            }
        }
        else {
            Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
            return SendClientMessage(playerid,COLOR_RED,"Dir wurde nicht angeboten dich zu heilen");
        }
    }
    else if(strcmp(entry, "sex",true) == 0 ) {
        new
            String[128],
            vehicleid,
            preis,
            Float:X,
            Float:Y,
            Float:Z,
            giveid;
        giveid = Spieler[playerid][pHureID];
        if(giveid == INVALID_PLAYER_ID) {
            return SendClientMessage(playerid, COLOR_RED, "Dir wurde kein Sex angeboten.");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht mehr online.");
        }
        vehicleid = GetPlayerVehicleID(giveid);
        if( !IsACar( GetVehicleModel(vehicleid)) ) {
            return SendClientMessage(playerid, COLOR_RED, "Die Prostituierte ist nicht mehr in ihrem Auto.");
        }
        if( GetPlayerState(giveid) != PLAYER_STATE_DRIVER ) {
            return SendClientMessage(playerid, COLOR_RED, "Die Prostituierte ist nicht mehr die Fahrer.");
        }
        GetPlayerPos(playerid,X,Y,Z);
        if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
            return SendClientMessage(playerid, COLOR_RED, "Die Prostituierte befindet sich nicht mehr in deiner Nähe.");
        }
        preis = Spieler[playerid][pHurePreis];
        if( GetPlayerMoney(playerid) < preis ) {
            format(String,sizeof(String),"Du besitzt nicht genug Geld um die Sex-Dienstleistung entgegen zu nehmen (Preis: $%s)", AddDelimiters(preis));
            return SendClientMessage(playerid, COLOR_RED, String);
        }
        if( Spieler[playerid][bHasSex] ) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast bereits Sex.");
        }
        GivePlayerCash(playerid,-preis);
        GivePlayerCash(giveid,preis);

        format(String,sizeof(String),"Du hast die Dienstleistung entgegen genommen.Warte 30 Sekunden im Fahrzeug");
        SendClientMessage(playerid, COLOR_BLUE, String);
        format(String,sizeof(String),"Du bietest nun für 30 Sekunden %s deine Dienst für $%s an. ",GetName(playerid), AddDelimiters(preis));
        SendClientMessage(giveid, COLOR_BLUE, String);

        Spieler[playerid][pHureID] = INVALID_PLAYER_ID;
        Spieler[playerid][pHurePreis] = 0;

        Spieler[giveid][tickHure] = gettime() + 30;
        KillTimer( Spieler[giveid][tHure] );
        Spieler[giveid][tHure] = SetTimerEx("Pulse_Hure",683,true,"dd",giveid,playerid);

        PutPlayerInVehicle(playerid,vehicleid,1);

        Spieler[playerid][bHasSex] = true;
        Spieler[giveid][bHasSex] = true;

        FreezePlayer(giveid);
        FreezePlayer(playerid);
        return 1;
    }
    else if(strcmp(entry, "pizza",true,3) == 0 ) {
        new
            String[128],
            vehicleid,
            preis,
            Float:X,
            Float:Y,
            Float:Z,
            giveid;
        giveid = Spieler[playerid][pPizzaVerkaeufer];
        if(giveid == INVALID_PLAYER_ID) {
            return SendClientMessage(playerid, COLOR_RED, "Dir wurde keine Pizza zum Kauf angeboten.");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht mehr online.");
        }
        vehicleid = GetPlayerVehicleID(giveid);
        if( !IsPizzaVehicle(vehicleid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Pizzalieferant sitzt nicht auf seinem Pizza-Roller");
        }
        GetPlayerPos(playerid,X,Y,Z);
        if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Pizzalieferant befindet sich nicht mehr in deiner Nähe.");
        }
        preis = Spieler[playerid][pPizzaPreis];
        if( GetPlayerMoney(playerid) < preis ) {
            format(String,sizeof(String),"Du besitzt nicht genug Geld um die Pizza zu bezahlen (Preis: $%s)", AddDelimiters(preis));
            return SendClientMessage(playerid, COLOR_RED, String);
        }
        new
            Float:fHealth;
        GetPlayerHealth(playerid,fHealth);
        fHealth += 50.0;
        if( fHealth > 100.0 ) fHealth = 100.0;
        GivePlayerCash(playerid,-preis);
        GivePlayerCash(giveid,preis);
        format(String,sizeof(String),"Du hast die Pizza für $%s gekauft. Deine Energie wurde aufgefüll!t", AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_BLUE, String);
        format(String,sizeof(String),"Du hast eine Pizza an %s für $%s verkauft. ",GetName(playerid), AddDelimiters(preis));
        SendClientMessage(giveid, COLOR_BLUE, String);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen

        Spieler[playerid][pPizzaVerkaeufer] = INVALID_PLAYER_ID;
        Spieler[playerid][pPizzaPreis] = 0;
        return 1;
    }
    else if(strcmp(entry, "repair", true) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) {
                SendClientMessage(playerid, COLOR_RED, "Du musst der Fahrer sein.");
                return 1;
            }
            if(!(RepairCar[playerid] == 999))
            {
                if(IsPlayerConnected(RepairCar[playerid]))
                {
                    if(GetPlayerMoney(playerid) >= RepairCarPreis[playerid])
                    {
                        if( GetPlayerState( RepairCar[playerid] ) != PLAYER_STATE_ONFOOT ) {
                            SendClientMessage(playerid, COLOR_RED, "Der Mechaniker ist gerade nicht zu Fuß.");
                            return 1;
                        }
                        new vID = GetPlayerVehicleID(playerid);
                        new engine,lights,doors,bonnet,boot,objective,alarm;
                        GetVehicleParamsEx( vID ,engine,lights,alarm,doors,bonnet,boot,objective);
                        if(bonnet != 1 ) {
                            SendClientMessage(playerid, COLOR_RED, "Die Motorhaube ist nicht mehr geöffnet");
                            return 1;
                        }
                        new
                            Float:X,
                            Float:Y,
                            Float:Z;
                        GetVehiclePos( vID , X,Y,Z);
                        if( !IsPlayerInRangeOfPoint( RepairCar[playerid] , 7.0 , X,Y,Z) ) {
                            SendClientMessage(playerid, COLOR_RED, "Der Mechaniker ist zu weit entfern vom Fahrzeug");
                            return 1;
                        }
                        GivePlayerCash(playerid, -RepairCarPreis[playerid]);
                        GivePlayerCash(RepairCar[playerid], RepairCarPreis[playerid]);
                        format(string, sizeof(string), "* %s hat die Reperatur angenommen. Du erhältst $%s", GetName(playerid), AddDelimiters(RepairCarPreis[playerid]));
                        SendClientMessage(RepairCar[playerid], COLOR_BLUE, string);
                        SendClientMessage(playerid, COLOR_BLUE, "* Du hast die Reperatur angenommen.");
                        RepairCarPreis[playerid] = 0;
                        RepairCar[playerid] = 999;
                        SetVehicleHealth(vID, 1000);
                        RepairVehicle(vID);
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld dabei.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
                    RepairCarPreis[playerid] = 0;
                    RepairCar[playerid] = 999;
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Du hast keine Anfrage erhalten.");
                return 1;
            }
        }
    }
    return 1;
}


CMD:startflug(playerid)
{
    if(!(Spieler[playerid][pJob] == 4))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Pilot.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    for(new i=0;i<sizeof(vehicle_airportLs);i++)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug.");
        if(vID == vehicle_airportLs[i])
        {
            KillTimer(pilotwait[playerid]);
            pilotwait[playerid] = INVALID_TIMER_ID;

            PilotTime[playerid] = 0;
            DisablePlayerCheckpointEx(playerid);
            SetPlayerCheckpointEx(playerid, 2045.5306,-2593.0469,14.8793, 7.0, CP_PILOT1);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächster Flughafen: Los Santos Airport");
        }
    }
    return 1;
}

CMD:stopflug(playerid)
{
    if(!(Spieler[playerid][pJob] == 4))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Pilot.");
    KillTimer(pilotwait[playerid]);
    pilotwait[playerid] = INVALID_TIMER_ID;

    UnfreezePlayer(playerid);
    PlayerTextDrawHide(playerid, BusMessage[playerid]);
    DisablePlayerCheckpointEx(playerid);
    SendClientMessage(playerid, COLOR_RED, "Flug abgebrochen!");
    return 1;
}

CMD:stoplinie(playerid)
{
    if(!(Spieler[playerid][pJob] == 2))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Busfahrer.");
    KillTimer(buswait[playerid]);
    buswait[playerid] = INVALID_TIMER_ID;
    UnfreezePlayer(playerid);
    PlayerTextDrawHide(playerid, BusMessage[playerid]);
    DisablePlayerCheckpointEx(playerid);
    SendClientMessage(playerid, COLOR_RED, "Linie abgebrochen!");
    return 1;
}

CMD:stopzug(playerid)
{
    if(!(Spieler[playerid][pJob] == 23))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Zugfahrer.");
    KillTimer(pilotwait[playerid]);
    pilotwait[playerid] = INVALID_TIMER_ID;

    UnfreezePlayer(playerid);
    PlayerTextDrawHide(playerid, BusMessage[playerid]);
    DisablePlayerCheckpointEx(playerid);
    SendClientMessage(playerid, COLOR_RED, "Zugfahrer abgebrochen!");
    return 1;
}


CMD:startlinie(playerid)
{
    if(!(Spieler[playerid][pJob] == 2))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Busfahrer.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
    for(new i=0;i<sizeof(vehicle_busStation);i++)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID == vehicle_busStation[i])
        {
            ShowPlayerDialog(playerid, DIALOG_LINIE, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Busfahrer Linien Auswahl", "Linie 1\nLinie 2\nLinie 3\nLinie 4", "Starten", "Abbrechen");

            return 1;
        }
    }
    return 1;
}

stock GetBusIndex(vehicleid){
    for(new i=0;i<sizeof(vehicle_busStation);i++) {
        if( vehicle_busStation[i] == vehicleid) {
            return i;
        }
    }
    return -1;
}

CMD:startgarten(playerid)
{
    if(!(Spieler[playerid][pJob] == 9))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gärtner.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    new vID = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(vID);
    if(model == 572)
    {
        SetPlayerCheckpointEx(playerid, 1559.7780,17.8068,24.1641, 5.0, CP_GARTEN1);
        SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Pflege mit dem Rasenmäher die Wiese.");
        return 1;
    }
    SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Rasenmäher.");
    return 1;
}

CMD:startreinigung(playerid)
{
    if(!(Spieler[playerid][pJob] == 7))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Straßenreiniger.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    for(new i=0;i<sizeof(reinigung);i++)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID == reinigung[i])
        {
            SetPlayerCheckpointEx(playerid, 2060.6467,-1930.0806,13.3428, 5.0, CP_REINI1);
            SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Fahre die Marker ab und tue was vorgeschrieben wird!");
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Reinungsfahrzeug.");
    return 1;
}

CMD:startmuell(playerid)
{
    if(!(Spieler[playerid][pJob] == 8))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Müllmann.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    new
        vehicleid = GetPlayerVehicleID(playerid);
    if( !(aiVehicles[ vehicleid ] & VEH_MUELL) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Müllwagen.");
    }
    Spieler[playerid][pMuell][0] = 0;
    Spieler[playerid][pMuell][1] = 0;
    ShowNextMuellStation(playerid);
    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Fahre die Marker ab und tue was vorgeschrieben wird!");
    /*
    for(new i=0;i<sizeof(muell);i++)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID == muell[i])
        {
            SetPlayerCheckpointEx(playerid, 1998.7909,-2107.2979,13.3496, 5.0, CP_MUELL1);
            SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Fahre die Marker ab und tue was vorgeschrieben wird!");
            return 1;
        }
    }*/
    return 1;
}

CMD:startbauarbeiter(playerid)
{
    if(!(Spieler[playerid][pJob] == 10))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Bauarbeiter.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    for(new i=0;i<sizeof(bauarb);i++)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID == bauarb[i])
        {
            SetPlayerCheckpointEx(playerid, 799.1427,836.5533,8.1336, 5.0, CP_BAUARBEITER1);
            SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Fahre die Marker ab und tue was vorgeschrieben wird!");
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Baustellenfahrzeug.");
    return 1;
}

CMD:startzug(playerid)
{
    if(!(Spieler[playerid][pJob] == 23))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Zugfahrer.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    for(new i=0;i<sizeof(zugb);i++)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug.");
        if(vID == zugb[i])
        {
            KillTimer(pilotwait[playerid]);
            pilotwait[playerid] = INVALID_TIMER_ID;

            PilotTime[playerid] = 0;
            DisablePlayerCheckpointEx(playerid);
            SetPlayerCheckpointEx(playerid, 2864.8928,1326.3370,10.8203, 7.0, CP_ZUGB1);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Las Venturas Ost-Bahnhof");
        }
    }
    return 1;
}

CMD:startschiff(playerid)
{
    if(!(Spieler[playerid][pJob] == 11))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Schiffs-Fahrer.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID == vehicle_boatCargoJob[i])
        {
            SetPlayerCheckpointEx(playerid, 2615.0654,-2321.5684,-0.4229, 5.0, CP_SCHIFF1);
            SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Fahre die Marker ab und tue was vorgeschrieben wird!");
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Schiff.");
    return 1;
}

CMD:starttransport(playerid)
{
    if(!(Spieler[playerid][pJob] == 12))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Geldtransport-Fahrer.");
    if( Spieler[playerid][pTransportActive] ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist bereits im Transport-Modus");
        return 1;
    }
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        //return Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    new
        vehicleid = GetPlayerVehicleID(playerid);
    if( !(aiVehicles[ vehicleid ] & VEH_GELDT) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Geldtransporter.");
    }
    Spieler[playerid][pGELDT][0] = 0;
    Spieler[playerid][pGELDT][1] = 0;
    ShowNextGeldTStation(playerid);
    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst und musst Bankautomaten mit Geld befüllen. Fahre die Marker ab und befolge die Anweisungen.");
    Spieler[playerid][pTransportActive] = true;
    return 1;
}

CMD:stopharvest(playerid)
{
    if(!(Spieler[playerid][pJob] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");
    SendClientMessage(playerid, COLOR_RED, "Du hast die Arbeit abgebrochen.");
    DisablePlayerCheckpointEx(playerid);
    return 1;
}

CMD:stopgarten(playerid)
{
    if(!(Spieler[playerid][pJob] == 9))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gärtner.");
    SendClientMessage(playerid, COLOR_RED, "Du hast die Arbeit abgebrochen.");
    DisablePlayerCheckpointEx(playerid);
    return 1;
}

CMD:stopschiff(playerid)
{
    if(!(Spieler[playerid][pJob] == 11))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Schiffs-Fahrer.");
    SendClientMessage(playerid, COLOR_RED, "Du hast die Arbeit abgebrochen.");
    DisablePlayerCheckpointEx(playerid);
    return 1;
}

CMD:stopmuell(playerid)
{
    if(!(Spieler[playerid][pJob] == 8))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Müllmann.");
    SendClientMessage(playerid, COLOR_RED, "Du hast die Arbeit abgebrochen.");
    DisablePlayerCheckpointEx(playerid);
    return 1;
}

CMD:stoptrans(playerid)
{
    if(!(Spieler[playerid][pJob] == 12))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Geld-Transportfahrer.");
    SendClientMessage(playerid, COLOR_RED, "Du hast die Arbeit abgebrochen.");
    DisablePlayerCheckpointEx(playerid);
    return 1;
}

CMD:stopbauarbeiter(playerid)
{
    if(!(Spieler[playerid][pJob] == 10))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Bauarbeiter.");
    SendClientMessage(playerid, COLOR_RED, "Du hast die Arbeit abgebrochen.");
    DisablePlayerCheckpointEx(playerid);
    return 1;
}

CMD:stopreinigung(playerid)
{
    if(!(Spieler[playerid][pJob] == 7))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Straßenreiniger.");
    SendClientMessage(playerid, COLOR_RED, "Du hast die Arbeit abgebrochen.");
    DisablePlayerCheckpointEx(playerid);
    return 1;
}


CMD:liste(playerid)
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    /*if(Spieler[playerid][pFraktion] == 1)
    {
        ShowPlayerDialog(playerid, DIALOG_LISTE, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Spieler-Liste",COLOR_HEX_WHITE"Busfahrer\nTrucker\nPilote\nKFZ-Mechatroniker\nAnwälte\nTaxifahrer\nAdmins\nNews Reporter\nSanitäter\nOrdnungsbeamte\nFahrlehrer\n"COLOR_HEX_ORANGE"Verbrecher", "Auswählen", "Abbrechen");
        return 1;
    }
    else if(Spieler[playerid][pFraktion] == 2)
    {
        ShowPlayerDialog(playerid, DIALOG_LISTE, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Spieler-Liste",COLOR_HEX_WHITE"Busfahrer\nTrucker\nPilote\nKFZ-Mechatroniker\nAnwälte\nTaxifahrer\nAdmins\nNews Reporter\nSanitäter\nOrdnungsbeamte\nFahrlehrer\n"COLOR_HEX_ORANGE"Verbrecher", "Auswählen", "Abbrechen");
        return 1;
    }*/
    if(Spieler[playerid][pFraktion] == 3)
    {
        ShowPlayerDialog(playerid, DIALOG_LISTE, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Spieler-Liste", COLOR_HEX_WHITE"Busfahrer\nTrucker\nPilote\nKFZ-Mechatroniker\nAnwälte\nTaxifahrer\nAdmins\nNews Reporter\nSanitäter\nOrdnungsbeamte\nFahrlehrer\n"COLOR_HEX_ORANGE"Gestorbene", "Auswählen", "Abbrechen");
        return 1;
    }/*
    else if(Spieler[playerid][pFraktion] == 16)
    {
        ShowPlayerDialog(playerid, DIALOG_LISTE, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Spieler-Liste",COLOR_HEX_WHITE"Busfahrer\nTrucker\nPilote\nKFZ-Mechatroniker\nAnwälte\nTaxifahrer\nAdmins\nNews Reporter\nSanitäter\nOrdnungsbeamte\nFahrlehrer\n"COLOR_HEX_ORANGE"Verbrecher", "Auswählen", "Abbrechen");
        return 1;
    }*/
    ShowPlayerDialog(playerid, DIALOG_LISTE, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Spieler-Liste",COLOR_HEX_WHITE"Busfahrer\nTrucker\nPilote\nKFZ-Mechatroniker\nAnwälte\nTaxifahrer\nAdmins\nNews Reporter\nSanitäter\nOrdnungsbeamte\nFahrlehrer", "Auswählen", "Abbrechen");
    return 1;
}

CMD:nachtanken(playerid, params[])
{
    new pID, preis;
    if(!(Spieler[playerid][pJob] == 5))return SendClientMessage(playerid, COLOR_RED, "Du bist kein KFZ-Mechatroniker.");
    if(sscanf(params, "ui", pID, preis))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Nachtanken [SpielerID/Name] [Preis]");
    new Float:x, Float:y, Float:z;
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dein eigenes Fahrzeug nicht auftanken.");
    if(preis < 1 || preis > 5000)return SendClientMessage(playerid, COLOR_RED, "Der Preis muss zwischen $500 und $5000 liegen.");
    if(meslock[playerid]==1)
    {
        return SendClientMessage(playerid, COLOR_RED, "Du hast den Spieler bereits eine Anfrage gestellt. Warte bis er sie akzeptiert." );
    }
    meslock[playerid]=1;
    SetTimerEx("meslockrelease",20000,false,"i",playerid);
    if(IsPlayerConnected(pID))
    {
        if(IsPlayerInAnyVehicle(pID))
        {
            GetPlayerPos(pID, x,y,z);
            if(IsPlayerInRangeOfPoint(playerid, 10.0, x,y,z))
            {
                RefillCar[pID] = playerid;
                RefillCarPreis[pID] = preis;
                new string[128];
                format(string, sizeof(string), "* Du hast %s angeboten sein Fahrzeug für $%s aufzutanken.", GetName(pID), AddDelimiters(preis));
                SendClientMessage(playerid, COLOR_BLUE, string);
                format(string, sizeof(string), "* KFZ-Mechatroniker %s hat dir angeboten, dein Fahrzeug für $%s aufzutanken.", GetName(playerid), AddDelimiters(preis));
                SendClientMessage(pID, COLOR_BLUE, string);
                SendClientMessage(pID, COLOR_BLUE, "* Tippe '/Accept refill' um das Nachfüllen anzunehmen.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in keinem Fahrzeug.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
        return 1;
    }
    return 1;
}

CMD:reparieren(playerid, params[])
{
    new pID, preis;
    if(!(Spieler[playerid][pJob] == 5))return SendClientMessage(playerid, COLOR_RED, "Du bist kein KFZ-Mechatroniker.");
    if(sscanf(params, "ui", pID, preis))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Reparieren [SpielerID/Name] [Preis]");
    new Float:x, Float:y, Float:z;
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst dein eigenes Fahrzeug nicht reparieren.");
    if(preis < 100 || preis > 1000)return SendClientMessage(playerid, COLOR_RED, "Der Preis muss zwischen 100$ und 1000$ liegen.");
    if(meslock[playerid]==1)
    {
        return SendClientMessage(playerid, COLOR_RED, "Du hast den Spieler bereits eine Anfrage gestellt. Warte bis er sie akzeptiert." );
    }
    meslock[playerid]=1;
    SetTimerEx("meslockrelease",20000,false,"i",playerid);
    if( IsPlayerInAnyVehicle(playerid) ) {
        SendClientMessage(playerid, COLOR_RED, "Du darfst für die Anfrage nicht im Fahrzeug sitzen");
        return 1;
    }
    if(IsPlayerConnected(pID))
    {
        if(IsPlayerInAnyVehicle(pID))
        {
            GetPlayerPos(pID, x,y,z);
            if(IsPlayerInRangeOfPoint(playerid, 8.0, x,y,z))
            {
                if( GetPlayerState(pID) != PLAYER_STATE_DRIVER ) {
                    SendClientMessage(playerid, COLOR_RED, "Du kannst die Anfrage nur an den Fahrer senden!");
                    return 1;
                }
                new engine,lights,doors,bonnet,boot,objective,alarm;
                GetVehicleParamsEx( GetPlayerVehicleID(pID) ,engine,lights,alarm,doors,bonnet,boot,objective);
                if(bonnet != 1 ) {
                    SendClientMessage(playerid, COLOR_RED, "Die Motorhaube ist nicht geöffnet!");
                    return 1;
                }

                RepairCar[pID] = playerid;
                RepairCarPreis[pID] = preis;
                new string[128];
                format(string, sizeof(string), "* Du hast %s angeboten sein Fahrzeug für $%s zu reparieren.", GetName(pID), AddDelimiters(preis));
                SendClientMessage(playerid, COLOR_BLUE, string);
                format(string, sizeof(string), "* KFZ-Mechatroniker %s hat dir eine Reparatur für $%s angeboten.", GetName(playerid), AddDelimiters(preis));
                SendClientMessage(pID, COLOR_BLUE, string);
                SendClientMessage(pID, COLOR_BLUE, "* Tippe '/Accept repair' um die Reparatur anzunehmen.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in keinem Fahrzeug.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
        return 1;
    }
    return 1;
}

/*
public OnPlayerTachoShowHide()
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if( IsPlayerConnected(i) ) {
            if(IsPlayerInAnyVehicle(i))
            {
                PlayerTextDrawShow(i, TachoMessage[0][i]);
                PlayerTextDrawShow(i, TachoMessage[1][i]);
                PlayerTextDrawShow(i, TachoMessage[2][i]);
            }
            else
            {
                PlayerTextDrawHide(i, TachoMessage[0][i]);
                PlayerTextDrawHide(i, TachoMessage[1][i]);
                PlayerTextDrawHide(i, TachoMessage[2][i]);
            }
        }
    }
}
*/
forward fuelcounttimer(playerid);
public fuelcounttimer(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)){fuelcountactive[playerid]=1;}
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    g_aiLastVehicle[playerid] = vehicleid;
    //ai_BlockGearshiftUpdate[playerid] = 0;
    if(ispassenger == 0)
    {
        new pjvar;
        for(new ju;ju<sizeof(hotdogcar);ju++)
        {
            if(vehicleid==hotdogcar[ju])
            {
                pjvar=1;
            }
        }
        for(new jt;jt<sizeof(eismann);jt++)
        {
            if(vehicleid==eismann[jt])
            {
                pjvar=1;
            }
        }
        for(new js;js<sizeof(muell);js++)
        {
            if(vehicleid==muell[js])
            {
                pjvar=1;
            }
        }
        for(new jr;jr<sizeof(geldt);jr++)
        {
            if(vehicleid==geldt[jr])
            {
                pjvar=1;
            }
        }
        for(new jq;jq<sizeof(reinigung);jq++)
        {
            if(vehicleid==reinigung[jq])
            {
                pjvar=1;
            }
        }
        for(new jp;jp<sizeof(vehicle_gardenerBase);jp++)
        {
            if(vehicleid==vehicle_gardenerBase[jp])
            {
                pjvar=1;
            }
        }
        for(new jo;jo<sizeof(vehicle_boatCargoJob);jo++)
        {
            if(vehicleid==vehicle_boatCargoJob[jo])
            {
                pjvar=1;
            }
        }
        for(new jn;jn<sizeof(bauarb);jn++)
        {
            if(vehicleid==bauarb[jn])
            {
                pjvar=1;
            }
        }
        for(new jm;jm<sizeof(kfzcars);jm++)
        {
            if(vehicleid==kfzcars[jm])
            {
                pjvar=1;
            }
        }
        for(new jl;jl<sizeof(vehicle_truckerBase);jl++)
        {
            if(vehicleid==vehicle_truckerBase[jl])
            {
                pjvar=1;
            }
        }
        for(new jk;jk<sizeof(vehicle_airportLs);jk++)
        {
            if(vehicleid==vehicle_airportLs[jk])
            {
                pjvar=1;
            }
        }
        for(new ji;ji<sizeof(vehicle_taxiStations);ji++)
        {
            if(vehicleid==vehicle_taxiStations[ji])
            {
                pjvar=1;
            }
        }
        for(new jh;jh<sizeof(vehicle_busStation);jh++)
        {
            if(vehicleid==vehicle_busStation[jh])
            {
                pjvar=1;
            }
        }
        for(new jg;jg<sizeof(pizzacar);jg++)
        {
            if(vehicleid==pizzacar[jg])
            {
                pjvar=1;
            }
        }
        for(new je;je<sizeof(zugb);je++)
        {
            if(vehicleid==zugb[je])
            {
                pjvar=1;
            }
        }
        for(new jd;jd<sizeof(combines);jd++)
        {
            if(vehicleid==combines[jd])
            {
                pjvar=1;
            }
        }
        for(new jc;jc<sizeof(vehicle_wantedHackerBase);jc++)
        {
            if(vehicleid==vehicle_wantedHackerBase[jc])
            {
                pjvar=1;
            }
        }
        for(new ja;ja<sizeof(drogen);ja++)
        {
            if(vehicleid==drogen[ja])
            {
                pjvar=1;
            }
        }
        for(new jb;jb<sizeof(wdealer);jb++)
        {
            if(vehicleid==wdealer[jb])
            {
                pjvar=1;
            }
        }
        if(pjvar==1)
        {
            SetTimerEx("fuelcounttimer",5000,false,"i",playerid);
        }
        else
        {
            fuelcountactive[playerid]=0;
        }
    }
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    /*
    new
        fraktion_vehicle;
    fraktion_vehicle = GetVehicleFraktion(vehicleid);
    if(fraktion_vehicle) {
        UnLockCar(vehicleid);
    }
    */
    for(new i;i<MAX_VEHICLES;i++)
    {
        for(new t;t<sizeof(drogen);t++)
        {
            if(vehicleid==drogen[t])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new s;s<sizeof(zugb);s++)
        {
            if(vehicleid==zugb[s])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new r;r<sizeof(wdealer);r++)
        {
            if(vehicleid==wdealer[r])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new q;q<sizeof(vehicle_wantedHackerBase);q++)
        {
            if(vehicleid==vehicle_wantedHackerBase[q])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new p;p<sizeof(combines);p++)
        {
            if(vehicleid==combines[p])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new o;o<sizeof(kfzcars);o++)
        {
            if(vehicleid==kfzcars[o])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new n;n<sizeof(pizzacar);n++)
        {
            if(vehicleid==pizzacar[n])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new m;m<sizeof(vehicle_taxiStations);m++)
        {
            if(vehicleid==vehicle_taxiStations[m])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new l;l<sizeof(vehicle_busStation);l++)
        {
            if(vehicleid==vehicle_busStation[l])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new k;k<sizeof(vehicle_airportLs);k++)
        {
            if(vehicleid==vehicle_airportLs[k])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new j;j<sizeof(vehicle_truckerBase);j++)
        {
            if(vehicleid==vehicle_truckerBase[j])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new h;h<sizeof(vehicle_boatCargoJob);h++)
        {
            if(vehicleid==vehicle_boatCargoJob[h])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new g;g<sizeof(reinigung);g++)
        {
            if(vehicleid==reinigung[g])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new f;f<sizeof(eismann);f++)
        {
            if(vehicleid==eismann[f])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new e;e<sizeof(hotdogcar);e++)
        {
            if(vehicleid==hotdogcar[e])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new d;d<sizeof(vehicle_gardenerBase);d++)
        {
            if(vehicleid==vehicle_gardenerBase[d])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new c;c<sizeof(bauarb);c++)
        {
            if(vehicleid==bauarb[c])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new b;b<sizeof(geldt);b++)
        {
            if(vehicleid==geldt[b])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new a;a<sizeof(muell);a++)
        {
            if(vehicleid==muell[a])
            {
                UnLockCar(vehicleid);
            }
        }
    }
    if(fuelcountactive[playerid]==1)
    {
        GivePlayerCash(playerid,-100*fuelcount[playerid]);
        if(fuelcount[playerid]>=1)
        {
            new string[200];
            format(string,200,"Du hast %d Liter verbraucht. Kosten: $%s",fuelcount[playerid], AddDelimiters(100*fuelcount[playerid]));
            SendClientMessage(playerid,COLOR_ORANGE,string);
        }
        fuelcountactive[playerid]=0;
        fuelcount[playerid]=0;
   }
    if( pCheckpoint[playerid] == CP_FAHRSCHULE_OFFLINE ) {
        Spieler[playerid][unixFahrschuleFahrzeug] = gettime() + 15;
        SendClientMessage(playerid,COLOR_RED,"Steig sofort ins Fahrzeug wieder ein! Sonst wird die Fahrstunde beendet!");
    }
    if( aiVehicles[vehicleid] == VEH_AUTOSCOOTER ) {
        if( Spieler[playerid][pFahrgeschaeft] == 1 && g_AutoScooter[AS_ibStatus] == 2 ) {
            RemovePlayerAutoscooter(playerid);
        }
    }
    if( aiVehicles[vehicleid] == VEH_KARTBAHN ) {
        if( Spieler[playerid][pFahrgeschaeft] == 4 && g_Kartbahn[AS_ibStatus] == 2 ) {
            RemovePlayerKartbahn(playerid);
        }
    }
    if( aiVehicles[vehicleid] == VEH_WASSERSCOOTER ) {
        if( Spieler[playerid][pFahrgeschaeft] == 5 && g_WasserScooter[AS_ibStatus] == 2 ) {
            RemovePlayerWasserScooter(playerid);
        }
    }
    // Falls Taxi verlassen hat.
    if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
        new
            modelid;
        modelid = GetVehicleModel(vehicleid);
        if(  modelid == 420  ||  modelid == 438 ) {
            // War in einem Taxi fährend Dienst eingeschaltet war.
            new
                taxiDriver,
                String[128];
            // Ist der Spieler Fahrgast oder Fahrer gewesen???
            taxiDriver = IsPlayerAnyTaxiCustomer(playerid);
            //printf("OnPlayerExitVehicle(%s,%d) taxiDriver %s %d",GetName(playerid),vehicleid,GetName(taxiDriver),taxiDriver);
            if( taxiDriver != -1 ) {
                //printf("Kunde %s ist ausgestiegen aus dem Taxi von %s",GetName(playerid),GetName(taxiDriver));
                // Kunde ausgestiegen (playerid)
                // taxiDriver ist fahrer
                new
                    preis = GetPlayerTaxiCosts(taxiDriver,playerid);

                format(String,sizeof(String),"Die Taxifahrt hat dich $%s gekostet!", AddDelimiters(preis));
                SendClientMessage(playerid,COLOR_LIGHTRED2,String);

                if( Spieler[playerid][pCash] < preis ) {
                    SendClientMessage(playerid,COLOR_RED,"Du konntest deine Taxifahrt nicht bezahlen!");
                    format(String,sizeof(String),"Fahrgast %s konnte die Fahrtkosten in Höhe von $%s nicht bezahlen!",GetName(playerid), AddDelimiters(preis));
                    SendClientMessage(taxiDriver,COLOR_LIGHTRED2,String);
                }
                else {
                    GivePlayerCash(playerid,-preis);
                    GivePlayerCash(taxiDriver,preis);

                    format(String,sizeof(String),"Fahrgast %s ist ausgestiegen und hat seine Fahrtkosten in Höhe von $%s bezahlt!",GetName(playerid), AddDelimiters(preis));
                    SendClientMessage(taxiDriver,COLOR_LIGHTRED2,String);
                }
                RemovePlayerFromTaxi(taxiDriver,playerid);
            }
            else {
                // playerid ist gleichzeitig Fahrer
                taxiDriver = playerid;
                //printf("Fahrer %s ist ausgestiegen (%s)",GetName(taxiDriver),GetName(playerid));
                if( !HasPlayerTaxiCustomers(taxiDriver)) {
                    // Fahrer ist ausgestiegen OHNE aktive Kunden
                    if( Spieler[taxiDriver][pJob] == 16 ) {
                        // Fahrer einfach so ausgestiegen.
                        DestroyTaxiTextdraw(taxiDriver);
                        if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
                            Delete3DTextLabel( g_t3dTaxi[vehicleid] );
                            g_t3dTaxi[vehicleid] = Text3D:INVALID_3DTEXT_ID;
                        }
                    }
                }
                else {
                    format(String,sizeof(String),"Der Taxifahrer %s hat das Fahrzeug verlassen. ",GetName(taxiDriver));
                    Spieler[taxiDriver][tTaxiLeave] = SetTimerEx("CancelTaxi",20*1000,false,"ddd",taxiDriver,vehicleid,2);
                    SendClientMessage(taxiDriver,COLOR_LIGHTRED,"Steig sofort wieder ins Taxi ein, sonst ist die Fahrt beendet!");
                    SendTaxiMessage(taxiDriver,COLOR_LIGHTRED2,String);
                    SendTaxiMessage(taxiDriver,COLOR_LIGHTRED2,"Steigt er innerhalb von 20 Sekunden nicht wieder ein, wird die Fahrt automatisch abgebrochen");
                }
            }
        }
    }
    return 1;
}



public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if (newstate == PLAYER_STATE_ONFOOT)
    {
        if( Spieler[playerid][pHaustierSpawned] ) {
            if( !Haustier_OnFoot(playerid)) {
                Haustier_SetPlayer(playerid);
            }
        }
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i] && IsPlayerSpectating[i] && SpectatedPlayer[i] == playerid)
            {
                PlayerSpectatePlayer(i, SpectatedPlayer[i]);
            }
        }

        if (Refueling[playerid]) vehicleRefueling[Refueling[playerid]] = 0;
    }
    else if(newstate == PLAYER_STATE_PASSENGER)
    {
        new weapon = GetPlayerWeapon(playerid);
        if(!(weapon == 29 || weapon == 30 || weapon == 31))
        {
            SetPlayerArmedWeapon(playerid, 0);
        }
        new
            modelid;
        vehicleid = GetPlayerVehicleID(playerid);
        if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
            modelid = GetVehicleModel(vehicleid);
            if(  modelid == 420  ||  modelid == 438 ) {
                new
                    driver,
                    String[128];
                driver = VehicleDriverID(vehicleid);
                if( IsPlayerConnected(driver) && Spieler[driver][pJob] == 16 ) {
                    /*
                    if( Spieler[driver][pTaxiKundenAktiv] == 1 ) {
                        RemovePlayerFromVehicle(playerid);
                        SendClientMessage(playerid,COLOR_LIGHTRED2,"In diesem Fahrzeug wird bereits mindestens ein Kunde befördert");
                        return 1;
                    }
                    */
                    format(String,sizeof(String),"Fahrgast %s ist in deinem Taxi eingestiegen. Die Fahrt beginnt, nachdem er diese bestätigt",GetName(playerid));
                    SendClientMessage(driver,COLOR_YELLOW,String);
                    format(String,sizeof(String),"Taxi Informationen:\n\nFahrer: %s\nTaxikosten: $%s je 100m",GetName(driver), AddDelimiters(Spieler[driver][pTaxiPreis]));
                    ShowPlayerDialog(playerid,DIALOG_TAXI,DIALOG_STYLE_MSGBOX,"Taxifahrt",String,"Starten","Aussteigen");
                    FreezePlayer(playerid);
                    SetCameraBehindPlayer(playerid);
                    ShowPlayerTacho(playerid);
                    return 1;
                }
            }
        }
        if( aiVehicles[vehicleid] == VEH_BUS ) {
            new
                busIndex = GetBusIndex(vehicleid);
            if(busIndex != -1 ) {
                if( t3dBus[busIndex] != Text3D:INVALID_3DTEXT_ID) {
                    if(JobVehicle[playerid] != vehicleid) {
                        if( Spieler[playerid][pCash] < BUS_TICKET_PRICE ) {
                            new
                                String[128],
                                driver;
                            driver = VehicleDriverID(vehicleid);
                            SendClientMessage(playerid,COLOR_RED,"Du konntest dir kein Fahrtticket für "#BUS_TICKET_PRICE"$ kaufen und fährst somit Schwarz!");
                            format(String,sizeof(String),"Fahrgast %s konnte sein Fahrtticket nicht bezahlen und ist Schwarzfahrer!",GetName(playerid));
                            SendClientMessage(driver,COLOR_RED,String);
                        }
                        else {
                            new
                                firmenindex;
                            firmenindex = GetJobFirmaIndex(2);
                            Spieler[playerid][pCash] -= BUS_TICKET_PRICE;
                            g_Firma[firmenindex][F_iKasse] += BUS_TICKET_PRICE;
                            SendClientMessage(playerid,COLOR_YELLOW,"Dir wurden "#BUS_TICKET_PRICE"$ für das Fahrtticket berechnet");
                        }
                    }
                }
            }
        }
    }
    else if (newstate == PLAYER_STATE_DRIVER) {
        new typ, string[256], modelid;
        vehicleid = GetPlayerVehicleID(playerid);
        modelid = GetVehicleModel(vehicleid);
        AddVehiclePassenger(vehicleid,playerid);
        if(!(Spieler[playerid][pFraktion] == 8 || pFahrStunde[playerid] == 1))
        {
            for(new i=0;i<sizeof(fscars);i++)
            {
                if(vehicleid == fscars[i])
                {
                    FreezePlayer(playerid);
                    GameTextForPlayer(playerid, "~w~Du bist kein ~r~Fahrlehrer", 4000, 3);
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                }
            }
        }
        SetPlayerArmedWeapon(playerid, 0);
        new mod = GetVehicleModel( vehicleid );
        if(IsBicycle(mod))
        {
            new engine, light, alarm, doors, bonnet, boot, objective;
            GetVehicleParamsEx( vehicleid , engine, light, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx( vehicleid, VEHICLE_PARAMS_ON, light, alarm, doors, bonnet, boot, objective);
        }
        else if(IsACar(mod))
        {
            if(Spieler[playerid][pCarLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
            {

                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen Führerschein!");
            }
        }
        else if(IsAPlane(mod))
        {
            if(Spieler[playerid][pFlyLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
            {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen Flugschein!");
                return 1;
            }
        }
        else if(IsATruck(mod))
        {
            if(Spieler[playerid][pLKWLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
            {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen LKW-Schein!");
            }
        }
        else if(IsABike(mod))
        {
            if(Spieler[playerid][pMotoLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
            {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen Motorradschein!");
            }
        }
        if( !IsBicycle(modelid) )
        {
            if( aiVehicles[vehicleid] != VEH_VERLEIH ) {
                SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"* Den Motor startest du mit "COLOR_HEX_BLUE"/Motor "COLOR_HEX_WHITE", mit "COLOR_HEX_BLUE"/Licht "COLOR_HEX_WHITE"schaltest du dein Licht ein!");
            }
        }
        if( Spieler[playerid][pJob] == 16 ) {
            if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
                if(  modelid == 420  ||  modelid == 438 ) {
                    if( HasPlayerTaxiCustomers(playerid) ) {
                        KillTimer(Spieler[playerid][tTaxiLeave]);
                        SendTaxiMessage(playerid,COLOR_YELLOW,"** Die Taxi-Fahrt geht weiter");
                        SendClientMessage(playerid,COLOR_YELLOW,"** Die Taxi-Fahrt geht weiter");
                    }
                }
            }
        }
        // Farmer darf fahrzeug nicht nachträglich bewegen
        if( Spieler[playerid][pJob] == 1 ) {
            if( CP_HARVEST15 <= pCheckpoint[playerid] <= CP_HARVEST19 ) {
                if( vehicleid == JobVehicle[playerid]) {
                    RemovePlayerFromVehicle(playerid);
                }
            }
        }
        if( Spieler[playerid][pJob] == 9 ) {
            if( CP_GARTEN15 <= pCheckpoint[playerid] <= CP_GARTEN19 ) {
                if( vehicleid == JobVehicle[playerid]) {
                    RemovePlayerFromVehicle(playerid);
                }
            }
        }
        typ = IsAutohausCar(vehicleid);
        if(!(typ==-1))
        {
            FreezePlayer(playerid);
            Spectating[playerid][0]=typ;
            new str[512];
            new kraftstoff = GetVehicleModelKraftstoff(modelid);
            format(str, sizeof(str), "{FFFFFF}Willkommen im Autohaus.\n{3F62DA}Informationen:\n{3F62DA}Name:{FFFFFF}\t%s\n{3F62DA}Preis:{FFFFFF}\t  $%s"\
                "\n{3F62DA}Tank:{FFFFFF}\t  %d\n{3F62DA}Kraftstoff:{FFFFFF}\t  %s\n\nWenn du dieses Fahrzeug wirklich kaufen möchtest,\ndann drücke auf "\
                "\"{3F62DA}Kaufen{FFFFFF}\".\nWenn nicht drücke auf \"{3F62DA}Abbrechen{FFFFFF}\".", Kaufliste[typ][Name], AddDelimiters(Kaufliste[typ][aPreis]), Kaufliste[typ][Tank],g_asKraftstoff[kraftstoff]);
            ShowPlayerDialog(playerid, DIALOG_SELLCAR , DIALOG_STYLE_MSGBOX, "{3F62DA}Autohaus", str, "Kaufen", "Abbrechen");
            return 1;
        }
        if( IsBicycle( modelid) ) {
            new engine,lights,alarm,doors,bonnet,boot,objective;
            GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(vehicleid,true,lights,alarm,doors,bonnet,boot,objective);
        }
        new h,m;
        GetPlayerTime(playerid,h,m);
        if((h >= aiLichtpflicht[0] || h <= aiLichtpflicht[1]) && !IsBicycle(vehicleid)) {
            SendClientMessage(playerid,COLOR_ORANGE,"[VERKEHRSINFO] Bei Dunkelheit muss die Fahrzeugbeleuchtung angeschaltet sein! Befehl: /Licht");
        }
        if( aiVehicles[vehicleid] == VEH_COMBINES ) {
            for(new i=0;i<sizeof(combines);i++)
            {
                if(vehicleid == combines[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 1)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Farmer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startbauer zum starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopbauer zum stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        if( aiVehicles[vehicleid] == VEH_ZUGB ) {
            for(new i=0;i<sizeof(zugb);i++)
            {
                if(vehicleid == zugb[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 23)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Zugfahrer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startzug zum starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopzug zum stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Zugfahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_DROGEN ) {
            for(new i=0;i<sizeof(drogen);i++)
            {
                if(vehicleid == drogen[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 17)
                    {
                        JobVehicle[playerid] = vehicleid;
                        new str[128];
                        format(str, sizeof(str), "** Drogenbestand des Fahrzeugs: %d **", bestand[vehicleid]);
                        SendClientMessage(playerid, COLOR_GREEN, str);
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketeinladen zum aufladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketentladen zum entladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Drogendealer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_WDEALER ) {
            for(new i=0;i<sizeof(wdealer);i++)
            {
                if(vehicleid == wdealer[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 18)
                    {
                        JobVehicle[playerid] = vehicleid;
                        new str[128];
                        format(str, sizeof(str), "** Waffenbestand des Fahrzeugs: %d **", bestand[vehicleid]);
                        SendClientMessage(playerid, COLOR_GREEN, str);
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketeinladen zum aufladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketentladen zum entladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Waffendealer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_WANTEDCAR ) {
            for(new i=0;i<sizeof(vehicle_wantedHackerBase);i++)
            {
                if(vehicleid == vehicle_wantedHackerBase[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 21)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_WHITE, "Fahre in die Nähe des Los Santos Police Departments.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Wantedhacken um dich ins Polizeisystem einzuhacken.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Wantedhacker.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_BUS ) {
            for(new i=0;i<sizeof(vehicle_busStation);i++)
            {
                if(vehicleid == vehicle_busStation[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 2)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Busfahrer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startlinie zum starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stoplinie zum stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Busfahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_FLUG ) {
            for(new i=0;i<sizeof(vehicle_airportLs);i++)
            {
                if(vehicleid == vehicle_airportLs[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 4)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Pilot Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startflug zum starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopflug zum stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Pilot.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_TRUCK ) {
            for(new i=0;i<sizeof(vehicle_truckerBase);i++)
            {
                if(vehicleid == vehicle_truckerBase[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 3)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Trucker Information *");
                        if(GetVehicleModel(vehicleid) == 514)
                        {
                            SendClientMessage(playerid, COLOR_ORANGE, "Wenn du Tank beliefern möchtest, verwende folgende Befehle:");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Loadbenzin um den Tanker mit Benzin zu beladen.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startbenzin um den Benzin Ausliegerungsort zu erfahren.");
                            SendClientMessage(playerid, COLOR_WHITE, "Unter /Navi -> Weitere Orte findest du die Öl-Raffinerie.");
                            break;
                        }
                        else if(GetVehicleModel(vehicleid) == 514)
                        {
                            SendClientMessage(playerid, COLOR_ORANGE, "Wenn du Waren ausliefern möchtest, verwende folgende Befehle:");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Loadwaren um den Transporter mit Waren zu beladen.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startwaren um den Waren Ausliegerungsort zu erfahren.");
                            SendClientMessage(playerid, COLOR_WHITE, "Unter /Navi -> Weitere Orte findest du die Waren-Vergabe.");
                            break;
                        }
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Trucker.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_KFZCARS ) {
            for(new i=0;i<sizeof(kfzcars);i++)
            {
                if(vehicleid == kfzcars[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 5)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* KFZ-Mechatroniker Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Reparieren [SpielerID/Name] [Preis] zum reparieren.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Nachtanken [SpielerID/Name] [Preis] zum auftanken.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein KFZ-Mechatroniker.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_REINIGUNG ) {
            for(new i=0;i<sizeof(reinigung);i++)
            {
                if(vehicleid == reinigung[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 7)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Straßenreiniger Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startreinigung um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopreinigung um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Straßenreiniger.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_GARTENCARS ) {
            for(new i=0;i<sizeof(vehicle_gardenerBase);i++)
            {
                if(vehicleid == vehicle_gardenerBase[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 9)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Gärtner Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startgarten um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopgarten um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Gärtner.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_MUELL ) {
            for(new i=0;i<sizeof(muell);i++)
            {
                if(vehicleid == muell[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 8)
                    {
                        JobVehicle[playerid] = vehicleid;
                        if( pCheckpoint[playerid] != CP_MUELL ) {
                            SendClientMessage(playerid, COLOR_GREEN, "* Müllmann Information *");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startmuell um zu starten.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopmuell um zu stoppen.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        }
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Müllmann.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_GELDT ) {
            for(new i=0;i<sizeof(geldt);i++)
            {
                if(vehicleid == geldt[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            // Es wird gerade genutzt, möglich Raub!
                            // SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            // RemovePlayerFromVehicle(playerid);
                            if( Spieler[pID][pTransportActive] ) {
                                SendClientMessage(playerid, COLOR_GREEN, "Du kannst den Geldtransporter nun stehlen");
                                break;
                            }
                        }
                    }
                    if(Spieler[playerid][pJob] == 12)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Geld-Transporter Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Starttransport um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stoptransport um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Geldeinladen um Bankautomaten mit Geld zu beladen.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Geld-Transporter.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_SCHIFF ) {
            for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
            {
                if(vehicleid == vehicle_boatCargoJob[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 11)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Schifffahrer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startschiff um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopschiff um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Schiffsfahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_BAUARB ) {
            for(new i=0;i<sizeof(bauarb);i++)
            {
                if(vehicleid == bauarb[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 10)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Bauareiter Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startbauarbeiter um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopbauarbeiter um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Bauarbeiter.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_EISMANN ) {
            for(new i=0;i<sizeof(eismann);i++)
            {
                if(vehicleid == eismann[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 13)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Eismann Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Eisverkaufen um Eis zu verkaufen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Eisverkäufer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_PIZZACAR ) {
            for(new i=0;i<sizeof(pizzacar);i++)
            {
                if(vehicleid == pizzacar[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 15)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Pizza Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Pizzaverkaufen um Pizza zu verkaufen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Pizzaman.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_HOTDOGCAR ) {
            for(new i=0;i<sizeof(hotdogcar);i++)
            {
                if(vehicleid == hotdogcar[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 24)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Hotdog-Verkäufer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Hotdogverkaufen um ein Hotdog zu verkaufen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Hotdogverkäufer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_TAXICAR ) {
            for(new i=0;i<sizeof(vehicle_taxiStations);i++)
            {
                if(vehicleid == vehicle_taxiStations[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 16)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Taxi Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Starttaxi um als Taxifahrer im Dienst zu sein.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Taxifahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        new besitzer = GetCarOwner(vehicleid);
        if( besitzer != INVALID_PLAYER_ID ) {
            new Slot = GetCarOwnerSlot(besitzer, vehicleid);
            if( !HasVehicleLicence( besitzer,Slot ) && !IsBicycle(GetVehicleModel(vehicleid))) {
                SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug besitzt kein Kennzeichen.");
                SendClientMessage(playerid, COLOR_ORANGE, "Melde dein Fahrzeug bei der Verkehrsbehörde an: /Navi -> Behörden -> Zulassungsstelle");
            }
            if(vehicleid == PlayerCar[besitzer][Slot][CarId])
            {
                if(PlayerCar[besitzer][Slot][CarState] == e_Vehicle_Status_Towed)
                {
                    FreezePlayer(playerid);
                    format(string, sizeof(string), COLOR_HEX_BLUE"Dieses Fahrzeug wurde aufgrund einer Ordnungswidrigkeit abgeschleppt!\n"COLOR_HEX_WHITE"Um das Fahrzeug freizukaufen, benötigst du "COLOR_HEX_ORANGE"$35.000"COLOR_HEX_WHITE"!\nKlicke nun auf \"Freikaufen\" um dein Fahrzeug zurück zu bekommen.");
                    ShowPlayerDialog(playerid, DIALOG_CAROAMT, DIALOG_STYLE_MSGBOX, COLOR_HEX_BLUE"Ordnungsamt", string, "Freikaufen", "Abbrechen");
                }
             }
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    {
        if (!GetPVarInt(playerid, "MP3.PLAYER")) StopAudioStreamForPlayer(playerid);
        HidePlayerTacho(playerid);
        //PlayerTextDrawHide(playerid, TachoMessage[0][playerid]);
        //PlayerTextDrawHide(playerid, TachoMessage[1][playerid]);
        //PlayerTextDrawHide(playerid, TachoMessage[2][playerid]);
        /*
        if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_HELM)) {
            RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_HELM);
        }
        */
    }
    if (oldstate == PLAYER_STATE_PASSENGER) {
        new fraktion_vehicle = GetVehicleFraktion(g_aiLastVehicle[playerid]);
        if (fraktion_vehicle) {
            new bool:passengers = false;
            for (new i = 0; i <= GetPlayerPoolSize(); i++) {
                if (GetPlayerVehicleID(playerid) == g_aiLastVehicle[playerid]) passengers = true;
                break;
            }
            if (!passengers) UnLockCar(g_aiLastVehicle[playerid]);
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER) {
        new fraktion_vehicle;
        fraktion_vehicle = GetVehicleFraktion( g_aiLastVehicle[playerid] );
        if(fraktion_vehicle) {
            // Fraktionsfahrzeuge automatisch aufschließen beim aussteigen
            UnLockCar( g_aiLastVehicle[playerid] );
        }
        vehicleid = g_aiLastVehicle[playerid];
        if(vehicleid && vehicleid != INVALID_VEHICLE_ID) {
            if( VEH_DROGEN <= aiVehicles[vehicleid] <= VEH_KFZCARS ) {
                UnLockCar(vehicleid);
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        //PlayerTextDrawShow(playerid, TachoMessage[0][playerid]);
        //PlayerTextDrawShow(playerid, TachoMessage[1][playerid]);
        //PlayerTextDrawShow(playerid, TachoMessage[2][playerid]);
        new
            modelid;
        modelid = GetVehicleModel(vehicleid);
        if( !IsBicycle(modelid)) {
            ShowPlayerTacho(playerid);
        }

//      Gear_UpdateGearDraw(playerid,vehicleid);
        if( Spieler[playerid][pHaustierSpawned] ) {
            Haustier_RemovePlayer(playerid);
        }
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i] && IsPlayerSpectating[i] && SpectatedPlayer[i] == playerid)
            {
                PlayerSpectateVehicle(i, GetPlayerVehicleID(SpectatedPlayer[i]));
            }
        }
        if( aiVehicles[vehicleid] == VEH_VERLEIH ) {
            if( Spieler[playerid][pVehicleVerleih] != INVALID_VEHICLE_ID ) {
                RemovePlayerFromVehicle(playerid);
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast bereits ein Fahrzeug ausgeliehen");
                return 1;
            }
            new
                index,
                price,
                String[128];
            index = GetFahrzeugVerleihIndex(vehicleid);
            price = g_FahrzeugVerleihFahrzeuge[index][FVF_iPrice];
            format(String,sizeof(String),"{FFFFFF}Fahrzeug: %s\n\
            Mietpreis: $%s, für 3 Stunden",CarName[modelid - 400], AddDelimiters(price));
            ShowPlayerDialog(playerid,DIALOG_FAHRZEUGVERLEIH,DIALOG_STYLE_MSGBOX,COLOR_HEX_LIGHTBLUE "Fahrzeugverleih",String,"Leihen","Abbruch");
            LockCar( vehicleid );
            miettimer[playerid]=1;
            SetTimerEx("miettimercheck",10000,false,"i",playerid);
            return 1;
        }
        // Fraktionscar ?
        new
            fraktion = GetVehicleFraktion(vehicleid);
        if( fraktion ) {
            if( g_FraktionAbschleppen[vehicleid][FA_bAbgeschleppt] == true ) {
                if( fraktion == Spieler[playerid][pFraktion]) {
                    FreezePlayer(playerid);
                    ShowPlayerDialog(playerid, DIALOG_FCAROAMT, DIALOG_STYLE_MSGBOX, COLOR_HEX_BLUE"Ordnungsamt", COLOR_HEX_BLUE"Dieses Fahrzeug wurde aufgrund einer Ordnungswidrigkeit abgeschleppt!\n"COLOR_HEX_WHITE"Um das Fahrzeug freizukaufen, benötigst du "COLOR_HEX_ORANGE"$80.000"COLOR_HEX_WHITE"!\nKlicke nun auf \"Freikaufen\" um dein Fahrzeug zurück zu bekommen.", "Freikaufen", "Abbrechen");
                }
                else { // Ordnungsamtsperre und nicht richtige Fraktion -> Raus
                    SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug ist vom Ordnungsamt beschlagnahmt!");
                    RemovePlayerFromVehicle(playerid);
                }
            }
        }
        if(RadioSender[vehicleid] > 0)
        {
            if(RadioSender[vehicleid] == 1)
            {
                PlayAudioStreamForPlayer(playerid, "http://www.wdr.de/wdrlive/media/einslive.m3u");
            }
            else if(RadioSender[vehicleid] == 2)
            {
                PlayAudioStreamForPlayer(playerid, "http://listen.technobase.fm/tunein-dsl-pl");
            }
            else if(RadioSender[vehicleid] == 3)
            {
                PlayAudioStreamForPlayer(playerid, "http://listen.hardbase.fm/tunein-mp3-pls");
            }
            else if(RadioSender[vehicleid] == 4)
            {
                PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/iloveradio.m3u");
            }
            else if(RadioSender[vehicleid] == 5)
            {
                PlayAudioStreamForPlayer(playerid, "http://breakz.us/radio/listen.m3u");
            }
            else if(RadioSender[vehicleid] == 6)
            {
                PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_2.m3u");
            }
            else if(RadioSender[vehicleid] == 7)
            {
                PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/planetradio/mp3/hqlivestream.m3u");
            }
            else if(RadioSender[vehicleid] == 8)
            {
                PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqtheclub.m3u");
            }
            else if(RadioSender[vehicleid] == 9)
            {
                PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqnightwax.m3u");
            }
            else if(RadioSender[vehicleid] == 10)
            {
                PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/ilovemashup.m3u");
            }
            else if(RadioSender[vehicleid] == 11)
            {
                PlayAudioStreamForPlayer(playerid, "http://skyserver5.skydisc.net:8000/listen.pls");
            }
            else if(RadioSender[vehicleid] == 12)
            {
                PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/ilovethebattle.m3u");
            }
            else if(RadioSender[vehicleid] == 13)
            {
                PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/ilove2dance.m3u");
            }
            else if(RadioSender[vehicleid] == 14)
            {
                PlayAudioStreamForPlayer(playerid, URL_LOGINMUSIC);
            }
            else if(RadioSender[vehicleid] == 15)
            {
                PlayAudioStreamForPlayer(playerid, "http://mp3.planetradio.de/plrchannels/hqitunes.mp3");
            }
        }
    }
    if( oldstate == PLAYER_STATE_ONFOOT &&
        (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER ) ) {
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( SpectatedPlayer[i] == playerid ) {
                PlayerSpectateVehicle(i, GetPlayerVehicleID( SpectatedPlayer[i] ) );
            }
        }
    }
    if( newstate == PLAYER_STATE_ONFOOT &&
        (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER ) ) {
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( SpectatedPlayer[i] == playerid ) {
                PlayerSpectatePlayer(i, SpectatedPlayer[i] );
            }
        }
    }
    return 1;
}

public OnPlayerWaitPilot(playerid)
{
    new stunde, minute, sekunde;
    gettime(stunde, minute, sekunde);
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(PilotTime[playerid] < 6)
        {
            PilotTime[playerid] ++;
            if(PilotTime[playerid] == 1)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 2)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 3)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 4)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 5)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 6)
            {
                PlayerTextDrawHide(playerid, BusMessage[playerid]);
                PilotTime[playerid] = 0;
            }
        }

        KillTimer(pilotwait[playerid]);
        pilotwait[playerid] = INVALID_TIMER_ID;

        for(new i=0;i<sizeof(vehicle_airportLs);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug!");
            if(vID == vehicle_airportLs[i])
            {
                new pilotlog[128];
                new ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                if(pCheckpoint[playerid] == CP_PILOT1)
                {
                    SetPlayerCheckpointEx(playerid, -1650.4489,-157.8306,15.4847, 7.0, CP_PILOT2);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächster Flughafen: San Fierro Easter Bay Airport");
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_PILOT2)
                {
                    SetPlayerCheckpointEx(playerid, 1476.7418,1694.5992,12.1470, 7.0, CP_PILOT3);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächster Flughafen: Las Venturas Airport");
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_PILOT3)
                {
                    SetPlayerCheckpointEx(playerid, 2045.5306,-2593.0469,14.8793, 7.0, CP_PILOT4);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Lieferungen geliefert! Fliege nun wieder zum LS-Airport");
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_PILOT4)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(4);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s - Geld: %d$", GetName(playerid), ort, g_Firma[firmenindex][F_iGehalt]);
                    LogPilot(pilotlog);
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug.");
    }
    return 1;
}

public OnPlayerWaitLinie(playerid)
{
    new stunde, minute, sekunde;
    gettime(stunde, minute, sekunde);
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(BusTime[playerid] < 6)
        {
            BusTime[playerid] ++;
            if(BusTime[playerid] == 1)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 2)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 3)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 4)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 5)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }

            else if(BusTime[playerid] == 6)
            {
                PlayerTextDrawHide(playerid, BusMessage[playerid]);
                BusTime[playerid] = 0;
            }
        }

        KillTimer(buswait[playerid]);
        buswait[playerid] = INVALID_TIMER_ID;

        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
            if(vID == vehicle_busStation[i])
            {
                new ort[24], string[128];
                GetPlayer2DZone(playerid, ort, 24);
                new buslogstring[128];
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x,y,z);
                if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
                if(pCheckpoint[playerid] == CP_BUSLINIE2CP1)
                {
                    SetPlayerCheckpointEx(playerid, 1467.4915,-1163.5656,23.7634, 5.0, CP_BUSLINIE2CP2);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Burger Binco");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP2)
                {
                    SetPlayerCheckpointEx(playerid, 1445.7449,-1031.4774,23.6563, 5.0, CP_BUSLINIE2CP3);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Zentralbank");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP3)
                {
                    SetPlayerCheckpointEx(playerid, 1326.7566,-921.7914,36.9193, 5.0, CP_BUSLINIE2CP4);
                    format(string, sizeof(string), "Nächste Haltestelle: 24/7 Shop in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP4)
                {
                    SetPlayerCheckpointEx(playerid, 1143.1387,-941.4471,42.7462, 5.0, CP_BUSLINIE2CP5);
                    format(string, sizeof(string), "Nächste Haltestelle: Subway in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP5)
                {
                    SetPlayerCheckpointEx(playerid, 939.6364,-1237.1488,16.4456, 5.0, CP_BUSLINIE2CP6);
                    format(string, sizeof(string), "Nächste Haltestelle: das Ordnungsamt");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1148.8563,-1408.9939,13.5536, 5.0, CP_BUSLINIE2CP7);
                    format(string, sizeof(string), "Nächste Haltestelle: Einkaufszentrum");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP7)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE2CP8);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP8)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 2, ort,g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    return 1;
                }

                //Linie 1
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP1)
                {
                    SetPlayerCheckpointEx(playerid, 1244.7290,-1849.5387,13.3828, 5.0, CP_BUSLINIE1CP2);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Fahrschule");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP2)
                {
                    SetPlayerCheckpointEx(playerid, 430.7518,-1700.3645,9.9467, 5.0, CP_BUSLINIE1CP3);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Strand");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP3)
                {
                    SetPlayerCheckpointEx(playerid, 439.0800,-1502.6467,30.9004, 5.0, CP_BUSLINIE1CP4);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Victim Kleidergeschäft");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP4)
                {
                    SetPlayerCheckpointEx(playerid, 800.6288,-1355.1935,13.3828, 5.0, CP_BUSLINIE1CP5);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Hauptbahnhof (Neulingsspawn)");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP5)
                {
                    SetPlayerCheckpointEx(playerid, 1283.5902,-1408.5476,13.1148, 5.0, CP_BUSLINIE1CP6);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Standesamt");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE1CP7);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP7)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 1, ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
                //Linie 3
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP1)
                {
                    SetPlayerCheckpointEx(playerid, 1818.3822,-1873.9189,13.4141, 5.0, CP_BUSLINIE3CP2);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Autohaus Günstig");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP2)
                {
                    SetPlayerCheckpointEx(playerid, 1981.3246,-2169.5681,13.3765, 5.0, CP_BUSLINIE3CP3);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Flughafen/Airport");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP3)
                {
                    SetPlayerCheckpointEx(playerid, 2685.8232,-2466.1296,13.5261, 5.0, CP_BUSLINIE3CP4);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Hafen");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP4)
                {
                    SetPlayerCheckpointEx(playerid, 2204.0122,-1629.6177,15.6174, 5.0, CP_BUSLINIE3CP5);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Binco Kleidergeschäft in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP5)
                {
                    SetPlayerCheckpointEx(playerid, 2013.3904,-1458.8781,13.3906, 5.0, CP_BUSLINIE3CP6);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Krankenhaus");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1818.7804,-1676.5504,13.3828, 5.0, CP_BUSLINIE3CP7);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Alhambra (Disco)");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP7)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE3CP8);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP8)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 1, ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
                //Linie 4
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP1)
                {
                    SetPlayerCheckpointEx(playerid, -133.1354,-192.5380,1.8781, 5.0, CP_BUSLINIE4CP2);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Bauernfarm und Trucker GmbH");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP2)
                {
                    SetPlayerCheckpointEx(playerid, 638.5032,-576.7302,16.1875, 5.0, CP_BUSLINIE4CP3);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: das Zollamt");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP3)
                {
                    SetPlayerCheckpointEx(playerid, 927.5668,-981.8544,38.2044, 5.0, CP_BUSLINIE4CP4);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Bank");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP4)
                {
                    SetPlayerCheckpointEx(playerid, 1020.6340,-1151.9069,23.6563, 5.0, CP_BUSLINIE4CP5);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Clubvilla in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP5)
                {
                    SetPlayerCheckpointEx(playerid, 1550.7195,-1305.7834,16.4186, 5.0, CP_BUSLINIE4CP6);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Startower");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE4CP7);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP7)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 1, ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
    }
    return 1;
}

/*public OnPlayerWaitZug(playerid)
{
    new stunde, minute, sekunde;
    gettime(stunde, minute, sekunde);
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(PilotTime[playerid] < 6)
        {
            PilotTime[playerid] ++;
            if(PilotTime[playerid] == 1)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 2)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 3)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 4)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 5)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 6)
            {
                PlayerTextDrawHide(playerid, BusMessage[playerid]);
                PilotTime[playerid] = 0;
            }
        }

        KillTimer(pilotwait[playerid]);
        pilotwait[playerid] = INVALID_TIMER_ID;

        for(new i=0;i<sizeof(zugb);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug!");
            if(vID == zugb[i])
            {
                new pilotlog[128];
                new ort[24];
                new string[128];
                GetPlayer2DZone(playerid, ort, 24);
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x,y,z);
                if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
                if(pCheckpoint[playerid] == CP_ZUGB1)
                {
                    SetPlayerCheckpointEx(playerid, 1403.8307,2636.3823,10.8203, 7.0, CP_ZUGB2);
                    format(string, sizeof(string), "Nächste Haltestelle: Las Venturas Nord-Bahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB2)
                {
                    SetPlayerCheckpointEx(playerid, -1948.2856,99.1580,25.7186, 7.0, CP_ZUGB3);
                    format(string, sizeof(string), "Nächste Haltestelle: Hauptbahnhof San Fierro");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB3)
                {
                    SetPlayerCheckpointEx(playerid, 839.5412,-1389.2937,-1.6202, 7.0, CP_ZUGB4);
                    format(string, sizeof(string), "Nächste Haltestelle: Bahnhof Los Santos - Market Station");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB4)
                {
                    SetPlayerCheckpointEx(playerid, 1587.7872,-1953.6045,13.5469, 7.0, CP_ZUGB5);
                    format(string, sizeof(string), "Nächste Haltestelle: Hauptbahnhof Los Santos - Endstation");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB5)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(23);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    Spieler[playerid][pPayCheck] += 8500;
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s - Geld: %d$", GetName(playerid), ort, g_Firma[firmenindex][F_iGehalt]);
                    LogPilot(pilotlog);
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug.");
    }
    return 1;
}*/

public OnPlayerEnterCheckpoint(playerid)
{
    new mvID = GetPlayerVehicleID(playerid);
    if (pCheckpoint[playerid] == CP_TUTORIAL1)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Du kannst dir hier per /Startbonus ein Startgeschenk sichern.");
        SendClientMessage(playerid, COLOR_GREEN, "Auf der anderen Straßenseite kannst du dir ein Fahrrad mieten und zur Stadthalle fahren.");
        DisablePlayerCheckpointEx(playerid);
        SetPlayerCheckpointEx(playerid,1479.9335,-1746.1074,13.5469,3.0, CP_TUTORIAL2);
    }
    else if(pCheckpoint[playerid] == CP_FINDCAR)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(CP_NAVI1 <= pCheckpoint[playerid] <= CP_NAVI83)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if( CP_TRUCKERWAREN == pCheckpoint[playerid] ) {
        SendClientMessage(playerid, COLOR_SAMP, "Du kannst die Waren hier mit /Entladen entladen.");
    }
    else if( CP_HAUSSUCHEN == pCheckpoint[playerid] ) {
        SendClientMessage(playerid, COLOR_SAMP, "Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if( CP_COW_FINISH == pCheckpoint[playerid] ) {
        new
            firmenindex;
        firmenindex = GetJobFirmaIndex(1);
        g_Firma[firmenindex][F_iKasse] -= 4000;
        GivePlayerCash(playerid,5000);
        SendClientMessage(playerid,COLOR_YELLOW,"Du hast den Eimer Milch an den Milchstand verkauft! Du erhältst $4.000");
        DisablePlayerCheckpointEx(playerid);
        RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_JOB );
        Spieler[playerid][pCowJob] = 0;
        Spieler[playerid][pCow][2] = 0;
        Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    else if( CP_COW == pCheckpoint[playerid] ) {
        switch(random(4)) {
            case 0: ApplyAnimation(playerid, "CAR", "FIXN_CAR_LOOP", 4.0, 1, 0, 0, 0, 0,1); // cow1
            case 1: ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_SHAKE", 4.0, 1, 0, 0, 0, 0,1); // cow2
            case 2: ApplyAnimation(playerid, "MISC", "PLUNGER_01", 4.0, 1, 0, 0, 0, 0,1); // cow3
            case 3: ApplyAnimation(playerid, "ROB_BANK", "CAT_SAFE_ROB", 4.0, 1, 0, 0, 0, 0,1); // cow4
        }
        RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_JOB );
        SetTimerEx("Cow_ShowNext",3011,false,"d",playerid);
        SetCameraBehindPlayer(playerid);
        GameTextForPlayer(playerid,"~w~~y~Kuh ~w~wird gemolken!",2500,5);
    }
    else if( CP_PRISONRUN == pCheckpoint[playerid] ) {
        Spieler[playerid][pPrisonRunCount]++;
        Spieler[playerid][pPrisonRunStep]++;
        DisablePlayerCheckpointEx(playerid);
        if( Spieler[playerid][pPrisonRunCount] >= Spieler[playerid][pPrisonRun] ) {
            Spieler[playerid][pPrisonRunCount] = 0;
            Spieler[playerid][pPrisonRun] = 0;
            SetPlayerPos(playerid,1544.4974,-1675.7938,13.5585);
            SetPlayerInterior(playerid,0);
            SetPlayerVirtualWorld(playerid,0);
            SetCameraBehindPlayer(playerid);
            SendClientMessage(playerid,COLOR_GREEN,"Du hast alle Checkpoints durchlaufen. Hoffentlich war das eine Lehre für dich!");
        }
        else {
            new
                String[64];
            format(String,sizeof(String),"[PRISON] {FF00FF}Checkpoints: %d/%d",Spieler[playerid][pPrisonRunCount],Spieler[playerid][pPrisonRun]);
            SendClientMessage(playerid,COLOR_RED,String);
            SetPlayerPrisonRunCheckpoint(playerid);
            CheckTeleHack(playerid,4000);
        }
    }
    /*
    else if(pCheckpoint[playerid] == CP_NAVI2)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI3)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI4)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI5)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI6)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI7)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI8)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI9)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI10)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid]== CP_NAVI11)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI12)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI13)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI14)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI15)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI16)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI17)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI18)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI19)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI20)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI21)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI22)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI23)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI24)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI25)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI26)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI27)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI28)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI29)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI30)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI31)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI32)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI33)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI34)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    */
    else if(pCheckpoint[playerid] == CP_TUTORIAL2)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Steige nun vom Fahrzeug ab und gehe in die Stadthalle hinein.");
        SetPlayerCheckpointEx(playerid, 1480.7660,-1805.3538,15.3578, 5.0, CP_TUTORIAL3);
    }
    else if(pCheckpoint[playerid] == CP_TUTORIAL6)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Fahre jetzt zur Fahrschule!");
        SetPlayerCheckpointEx(playerid, 1270.0138,-1846.0366,13.3906, 5.0, CP_TUTORIAL7);
    }
    else if(pCheckpoint[playerid] == CP_TUTORIAL7)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Sollte ein Fahrlehrer anwesend sein, mache mit ihm eine Fahrprüfung. Mit /Liste -> Fahrschule siehst du alle Fahrlehrer.");
        SendClientMessage(playerid, COLOR_GREEN, "Wenn kein Fahrlehrer anwesend ist, kannst du an der Fahrschule auch eine automatische Fahrstunde starten.");
        SendClientMessage(playerid, COLOR_ORANGE, "INFO: Mit /HELP und /NAVI findest du dich hier auf dem Server zurecht!");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_BACKUP)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_DIEBSTAHL_GT ) {
        new
            vID;
        vID = GetPlayerVehicleID(playerid);
        for(new i=0;i<sizeof(geldt);i++)
        {
            if(vID == geldt[i])
            {
                if( JobVehicle[playerid] == vID ) {
                    RemovePlayerFromVehicle(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "+30.000$");
                    GivePlayerCash(playerid,30000);
                    DisablePlayerCheckpointEx(playerid);
                    JobVehicle[playerid] = INVALID_VEHICLE_ID;
                    SetVehicleToRespawn(vID);
                    SetPlayerPos(playerid,162.6819,-25.6529,1.5781);
                    SetPlayerFacingAngle(playerid,270.8931);
                    break;
                }
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE_OFFLINE) {
        new
            String[64],
            cp;
        pFahrschuleCP[playerid]++;
        cp = pFahrschuleCP[playerid];
        Spieler[playerid][unixFahrschuleZeit] = gettime() + 25;
        DisablePlayerCheckpoint(playerid);
        format(String,sizeof(String),"%d/%d",cp,sizeof(g_FahrpruefungCP));
        SendClientMessage(playerid,COLOR_WHITE,String);
        if( cp >= sizeof( g_FahrpruefungCP ) ) {
            new
                vehicleid,
                modelid;
            vehicleid = GetPlayerVehicleID(playerid);
            modelid = GetVehicleModel(vehicleid);
            SendClientMessage(playerid,COLOR_YELLOW , "Glückwunsch, du hast die Führerscheinprüfung bestanden!" );
            SetPlayerPos(playerid,1234.3380,-1823.9462,13.5909);
            SetPlayerFacingAngle(playerid,270.8931);
            if( modelid == 445 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast den Auto-Führerschein bestanden!");
                Spieler[playerid][pCarLic] = 1;
            }
            else if( modelid == 461 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast den Motorrad-Führerschein bestanden!");
                Spieler[playerid][pMotoLic] = 1;
            }
            FahrschuleAbbruch(playerid);
        }
        else {
            SetPlayerCheckpointEx(playerid, g_FahrpruefungCP[ cp ][F_fX] , g_FahrpruefungCP[ cp ][F_fY] , g_FahrpruefungCP[ cp ][F_fZ] ,5.0, CP_FAHRSCHULE_OFFLINE );
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE1)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1427.3734,-1721.5665,13.2578, 5.0, CP_FAHRSCHULE2);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE2)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1513.7784,-1734.6387,13.2577, 5.0, CP_FAHRSCHULE3);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE3)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1531.9985,-1607.7494,13.2577, 5.0, CP_FAHRSCHULE4);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE4)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1647.6162,-1594.5996,13.2730, 5.0, CP_FAHRSCHULE5);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE5)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1660.4186,-1449.8710,13.2624, 5.0, CP_FAHRSCHULE6);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE6)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1618.2543,-1438.7881,13.2577, 5.0, CP_FAHRSCHULE7);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE7)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1468.1348,-1438.7880,13.2578, 5.0, CP_FAHRSCHULE8);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE8)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1416.2992,-1399.0945,13.2572, 5.0, CP_FAHRSCHULE9);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE9)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1373.0175,-1397.9915,13.2633, 5.0, CP_FAHRSCHULE10);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE10)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1273.8141,-1398.1047,12.9125, 5.0, CP_FAHRSCHULE11);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE11)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1219.6558,-1398.0142,13.0678, 5.0, CP_FAHRSCHULE12);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE12)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1193.8879,-1557.7451,13.2578, 5.0, CP_FAHRSCHULE13);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE13)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1164.7354,-1569.3726,13.1682, 5.0, CP_FAHRSCHULE14);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE14)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1147.9781,-1698.9581,13.6562, 5.0, CP_FAHRSCHULE15);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE15)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1283.7072,-1714.6350,13.2579, 5.0, CP_FAHRSCHULE16);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE16)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1299.0903,-1840.0605,13.2578, 5.0, CP_FAHRSCHULE17);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE17)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1377.8132,-1874.0347,13.2577, 5.0, CP_FAHRSCHULE18);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE18)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1391.3584,-1741.5569,13.2578, 5.0, CP_FAHRSCHULE19);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE19)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1420.2920,-1734.8915,13.2615, 5.0, CP_FAHRSCHULE20);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE20)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1431.5961,-1659.6328,13.2578, 5.0, CP_FAHRSCHULE21);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE21)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1357.5104,-1665.4655,13.4834, 5.0, CP_FAHRSCHULE22);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicle(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE22)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SendClientMessage(playerid, COLOR_GREEN, "Herzlichen Glückwunsch, Du hast den Führerschein erfolgreich erhalten!");
            SendClientMessage(playerid, COLOR_GREEN, "Falls du Berufe wie Trucker oder Pilot ausführen möchtest, musst du die entsprechenden Scheine");
            SendClientMessage(playerid, COLOR_GREEN, "bei einem Fahrlehrer machen. Ob ein Fahrlehrer online ist, kannst du unter /Liste sehen.");
            SendClientMessage(playerid, COLOR_GREEN, "Viel Spaß wünscht dir das Live your Dream - Roleplay Team!");
            DestroyVehicle(pFahrschulCar[playerid]);
            aiVehicles[ pFahrschulCar[playerid] ] = VEH_INVALID;
            pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
            DisablePlayerCheckpointEx(playerid);
            Spieler[playerid][pCarLic] = 1;
            pMakeTutorial[playerid] = 0;
        }
        else
        {
            pMakeTutorial[playerid] = 0;
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
        }
    }
    else if(CP_SHOWJOB1 <= pCheckpoint[playerid] <= CP_SHOWJOB13 )
    {
        DisablePlayerCheckpointEx(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,-258.9534,-2181.9905,29.0150)||IsPlayerInRangeOfPoint(playerid,10,-1857.4130,-1618.9630,21.9022))
    {
        CheckTeleHack(playerid,50000);
//      printf("waffendealer check aufgerufen");
        DisablePlayerCheckpointEx(playerid);
    }
    /*
    else if(pCheckpoint[playerid] == CP_SHOWJOB2)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB3)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB4)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB5)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB6)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB7)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB7)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB8)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB9)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB10)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB11)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB13)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    */
    else if(pCheckpoint[playerid] == CP_TRUCK_RAFFINERIE)
    {
        SendClientMessage(playerid, COLOR_WHITE, "Du bist an der Ölrafinnerie angekommen. Tippe nun /Loadbenzin.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_TRUCK_BELADUNG)
    {
        SendClientMessage(playerid, COLOR_WHITE, "Du bist an der Warenbeladung angekommen. Tippe nun /Loadwaren.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_HOME)
    {
        GameTextForPlayer(playerid, "~w~Willkommen ~g~Zuhause", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_EVENTPOINT ) {
        SendClientMessage(playerid, COLOR_WHITE, "Du bist am Event angekommen.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_FINDEN)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTCOP)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTSANI)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTKFZ)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTOAMT)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    //Pilot
    else if(CP_PILOT1 <= pCheckpoint[playerid] <= CP_PILOT4)
    {
        for(new i=0;i<sizeof(vehicle_airportLs);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_airportLs[i])
            {
                PilotTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(pilotwait[playerid]);
                pilotwait[playerid] = SetTimerEx("OnPlayerWaitPilot", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug!");
        return 1;
    }
    else if(CP_ZUGB1 <= pCheckpoint[playerid] <= CP_ZUGB5)
    {
        for(new i=0;i<sizeof(zugb);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == zugb[i])
            {
                PilotTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(pilotwait[playerid]);
                pilotwait[playerid] = SetTimerEx("OnPlayerWaitZug", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Zug!");
        return 1;
    }
    else if( CP_BUSLINIE1CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE1CP7)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid] = SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    else if(CP_BUSLINIE2CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE2CP8)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    else if(CP_BUSLINIE3CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE3CP8)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    else if(CP_BUSLINIE4CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE4CP7)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    //Straßenreinigung
    else if(CP_REINI1 <= pCheckpoint[playerid] <= CP_REINI14)
    {
        for(new i=0;i<sizeof(reinigung);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == reinigung[i])
            {
                if(pCheckpoint[playerid] == CP_REINI1)
                {
                    SetPlayerCheckpointEx(playerid, 2060.6467,-1930.0806,13.3428, 5.0, CP_REINI2);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI2)
                {
                    SetPlayerCheckpointEx(playerid, 1823.8677,-1829.8912,13.4141, 5.0, CP_REINI3);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI3)
                {
                    SetPlayerCheckpointEx(playerid, 1573.1659,-1869.9642,13.3828, 5.0, CP_REINI4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI4)
                {
                    SetPlayerCheckpointEx(playerid, 1499.3264,-1729.5050,13.3828, 5.0, CP_REINI5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI5)
                {
                    SetPlayerCheckpointEx(playerid, 1315.2017,-1715.5406,13.3828, 5.0, CP_REINI6);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI6)
                {
                    SetPlayerCheckpointEx(playerid, 1358.8210,-1419.3829,13.3828, 5.0, CP_REINI7);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI7)
                {
                    SetPlayerCheckpointEx(playerid, 1370.0029,-1059.6665,26.6386, 5.0, CP_REINI8);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI8)
                {
                    SetPlayerCheckpointEx(playerid, 1523.9775,-1042.9404,23.6289, 5.0, CP_REINI9);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI9)
                {
                    SetPlayerCheckpointEx(playerid, 1749.3524,-1166.4718,23.6349, 5.0, CP_REINI10);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI10)
                {
                    SetPlayerCheckpointEx(playerid, 1845.8475,-1442.1245,13.4007, 5.0, CP_REINI11);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI11)
                {
                    SetPlayerCheckpointEx(playerid, 1818.7308,-1844.2803,13.4141, 5.0, CP_REINI12);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI12)
                {
                    SetPlayerCheckpointEx(playerid, 1951.9484,-1935.0249,13.3828, 5.0, CP_REINI13);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI13)
                {
                    SetPlayerCheckpointEx(playerid, 2060.4966,-1913.4055,13.5469, 5.0, CP_REINI14);
                    SendClientMessage(playerid, COLOR_YELLOW, "Arbeit ausgeführt! Fahre bitte nun wieder zurück zur Station und park das Fahrzeug zurück.");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI14)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(7);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpoint(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Du hast die Straßen gereinigt! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Die Straßen sind sauber! ~w~Feierabend!");
                    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Reinigungsfahrzeug.");
        return 1;
    }

    //Schiff
    else if(CP_SCHIFF1 <= pCheckpoint[playerid] <= CP_SCHIFF7)
    {
        for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_boatCargoJob[i])
            {
                if(pCheckpoint[playerid] == CP_SCHIFF1)
                {
                    SetPlayerCheckpointEx(playerid, 2615.0654,-2321.5684,-0.4229, 5.0, CP_SCHIFF2);
                    SendClientMessage(playerid, COLOR_ORANGE, "Wenn du die Fracht aufs Schiff geladen hast (/Frachtladen) dann fahre die Marker ab!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF2)
                {
                    SetPlayerCheckpointEx(playerid, 3151.5898,-2063.1375,0.2137, 5.0, CP_SCHIFF3);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF3)
                {
                    SetPlayerCheckpointEx(playerid, 3018.0229,-329.7821,-0.1931, 5.0, CP_SCHIFF4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF4)
                {
                    SetPlayerCheckpointEx(playerid, 2514.6296,454.6113,-0.6440, 5.0, CP_SCHIFF5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF5)
                {
                    SetPlayerCheckpointEx(playerid, 2294.1472,520.3597,-0.5748, 5.0, CP_SCHIFF6);
                    SendClientMessage(playerid, COLOR_ORANGE, "Du hast dein Ziel erreicht! Lasse die Fracht ab (/Frachtentladen) und fahre wieder zurück mit dem Schiff!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF6)
                {
                    SetPlayerCheckpointEx(playerid, 2558.5486,-2278.7688,-0.3295, 5.0, CP_SCHIFF7);
                    SendClientMessage(playerid, COLOR_ORANGE, "Bitte parke nun das Fahrzeug zurück!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF7)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(11);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpoint(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Du hast die Fracht abgeliefert! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich auf keinem Schiff.");
        return 1;
    }
    //GELDTRANSPORTFAHRER
    else if(CP_GELDT == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_GELDT ) {
            new
                cp = Spieler[playerid][pGeldTCP];
            SendClientMessage(playerid,COLOR_WHITE,"Steig aus und befülle den Geldautomaten mit /Geldeinladen");
            SetPlayerCheckpointEx(playerid,GT_GELDT[cp][GT_fPosX],GT_GELDT[cp][GT_fPosY],GT_GELDT[cp][GT_fPosZ],2.0,CP_GELDT_ENTLEEREN);
        }
    }
    else if(CP_GELDTFINISH == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_GELDT ) {
            new
                string[128],
                firmenindex;
            firmenindex = GetJobFirmaIndex(12);
            g_Firma[firmenindex][F_iKasse] += 8000;
            Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(vehicleid);
            DisablePlayerCheckpointEx(playerid);
            format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
            GameTextForPlayer(playerid, string, 5000, 1);
            SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
            ShowBuyInformation(playerid,"~y~Alle Bankautomaten aufgefüllt! ~w~Feierabend!");
            Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
            Spieler[playerid][pTransportActive] = false;
            return 1;
        }
    }
    //Müllmann
    else if(CP_MUELL == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_MUELL ) {
            new
                cp = Spieler[playerid][pMuellCP];
            SendClientMessage(playerid,COLOR_WHITE,"Steig aus und mache /Entleeren");
            SetPlayerCheckpointEx(playerid,g_Muell[cp][M_fPosX],g_Muell[cp][M_fPosY],g_Muell[cp][M_fPosZ],2.0,CP_MUELL_ENTLEEREN);
        }
    }
    else if(CP_MUELL_CARRY == pCheckpoint[playerid]) {
        new
            c;
        c += GetBitCount(Spieler[playerid][pMuell][0]);
        c += GetBitCount(Spieler[playerid][pMuell][1]);
        if( c >= 6 ) {
            SendClientMessage(playerid,COLOR_YELLOW,"Du hast alle 6 Mülltonnen geleert! Fahr zurück zur Station");
            SetPlayerCheckpointEx(playerid,2113.7583,-2098.0005,13.5469,5.0,CP_MUELLFINISH);
        }
        else {
            new
                String[128];
            format(String,sizeof(String),"Du hast die Mülltonne geleert! Steig ein und fahr zur nächsten (%d/6)",c);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            ShowNextMuellStation(playerid);
        }
        RemovePlayerAttachedObject(playerid, 0);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    }
    else if(CP_MUELLFINISH == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_MUELL ) {
            new
                string[128],
                firmenindex;
            firmenindex = GetJobFirmaIndex(8);
            g_Firma[firmenindex][F_iKasse] += 8000;
            Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(vehicleid);
            DisablePlayerCheckpointEx(playerid);
            format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
            GameTextForPlayer(playerid, string, 5000, 1);
            SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
            ShowBuyInformation(playerid,"~y~Müll abgeholt und entsorgt! ~w~Feierabend!");
            Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
        }
    }
    /*
    else if(CP_MUELL1 <= pCheckpoint[playerid] <= CP_MUELL20)
    {
        for(new i=0;i<sizeof(muell);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == muell[i])
            {
                if(pCheckpoint[playerid] == CP_MUELL1)
                {
                    SetPlayerCheckpointEx(playerid, 1998.7909,-2107.2979,13.3496, 5.0, CP_MUELL2);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL2)
                {
                    SetPlayerCheckpointEx(playerid, 1963.2606,-1942.6835,13.3970, 5.0, CP_MUELL3);
                    SendClientMessage(playerid, COLOR_ORANGE, "Sammel nun die Müllsäcke auf. Fahre die Markers ab!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL3)
                {
                    SetPlayerCheckpointEx(playerid, 1924.0662,-1749.1938,13.3828, 5.0, CP_MUELL4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL4)
                {
                    SetPlayerCheckpointEx(playerid, 1666.4025,-1728.9388,13.3828, 5.0, CP_MUELL5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL5)
                {
                    SetPlayerCheckpointEx(playerid, 1532.9117,-1721.6056,13.3828, 5.0, CP_MUELL6);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL6)
                {
                    SetPlayerCheckpointEx(playerid, 1475.0117,-1589.7338,13.3828, 5.0, CP_MUELL7);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL7)
                {
                    SetPlayerCheckpointEx(playerid, 1325.8937,-1569.8595,13.3690, 5.0, CP_MUELL8);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL8)
                {
                    SetPlayerCheckpointEx(playerid, 1359.4690,-1418.9095,13.3828, 5.0, CP_MUELL9);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL9)
                {
                    SetPlayerCheckpointEx(playerid, 1360.1733,-1168.4264,23.7215, 5.0, CP_MUELL10);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL10)
                {
                    SetPlayerCheckpointEx(playerid, 1370.2086,-1063.4838,26.4413, 5.0, CP_MUELL11);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL11)
                {
                    SetPlayerCheckpointEx(playerid, 1275.0173,-1036.0787,31.5611, 5.0, CP_MUELL12);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL12)
                {
                    SetPlayerCheckpointEx(playerid, 1258.5132,-1076.1464,27.7118, 5.0, CP_MUELL13);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL13)
                {
                    SetPlayerCheckpointEx(playerid, 1168.0930,-1097.0586,25.3393, 5.0, CP_MUELL14);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL14)
                {
                    SetPlayerCheckpointEx(playerid, 1132.6324,-1032.8380,31.9016, 5.0, CP_MUELL15);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL15)
                {
                    SetPlayerCheckpointEx(playerid, 1076.4883,-1088.9136,26.0361, 5.0, CP_MUELL16);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL16)
                {
                    SetPlayerCheckpointEx(playerid, 1049.2565,-1255.4100,14.6669, 5.0, CP_MUELL17);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL17)
                {
                    SetPlayerCheckpointEx(playerid, 1176.4523,-1410.9448,13.4452, 5.0, CP_MUELL18);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL18)
                {
                    SetPlayerCheckpointEx(playerid, 2106.1296,-2011.5781,13.5469, 5.0, CP_MUELL19);
                    SendClientMessage(playerid, COLOR_ORANGE, "Fahre zum Mülldepo zurück und lasse den Müll verbrennen.");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL19)
                {
                    SetPlayerCheckpointEx(playerid, 2122.5459,-2096.3967,13.5469, 5.0, CP_MUELL20);
                    SendClientMessage(playerid, COLOR_ORANGE, "Bitte parke das Fahrzeug nun wieder so wie es war ein!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL20)
                {
                    new rand = minrand(3700,4000);
                    Spieler[playerid][pPayCheck] +=rand;
                    new string[128];
                    format(string, sizeof(string), "~g~+$%d", rand);
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpoint(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Müll abgeholt und entsorgt! ~w~Feierabend!");
                    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Müllwagen.");
        return 1;
    }
    */
    //Bauerbeiter
    else if(CP_BAUARBEITER1 <= pCheckpoint[playerid] <= CP_BAUARBEITER17)
    {
        for(new i=0;i<sizeof(bauarb);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == bauarb[i])
            {
                if(pCheckpoint[playerid] == CP_BAUARBEITER1)
                {
                    SetPlayerCheckpointEx(playerid, 799.1427,836.5533,8.1336, 5.0, CP_BAUARBEITER2);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER2)
                {
                    SetPlayerCheckpointEx(playerid, 756.7701,899.0582,-1.2382, 5.0, CP_BAUARBEITER3);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER3)
                {
                    SetPlayerCheckpointEx(playerid, 694.2874,955.6836,-15.8628, 5.0, CP_BAUARBEITER4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER4)
                {
                    SetPlayerCheckpointEx(playerid, 700.7612,913.5161,-30.4612, 5.0, CP_BAUARBEITER5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER5)
                {
                    SetPlayerCheckpointEx(playerid, 648.9686,906.4146,-41.7512, 5.0, CP_BAUARBEITER6);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER6)
                {
                    SetPlayerCheckpointEx(playerid, 635.8752,862.5970,-42.6892, 5.0, CP_BAUARBEITER7);
                    SendClientMessage(playerid, COLOR_ORANGE, "Lade die Steine auf (/Steineladen)!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER7)
                {
                    SetPlayerCheckpointEx(playerid, 607.7939,863.4465,-42.0452, 5.0, CP_BAUARBEITER8);
                    SendClientMessage(playerid, COLOR_ORANGE, "Lade die Steine auf (/Steineladen)!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER8)
                {
                    SetPlayerCheckpointEx(playerid, 513.8612,870.7057,-39.3272, 5.0, CP_BAUARBEITER9);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER9)
                {
                    SetPlayerCheckpointEx(playerid, 525.7652,945.3519,-23.7328, 5.0, CP_BAUARBEITER10);
                    SendClientMessage(playerid, COLOR_ORANGE, "Fahre deine geladenen Steine nun nach oben!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER10)
                {
                    SetPlayerCheckpointEx(playerid, 713.5145,962.6615,-7.4000, 5.0, CP_BAUARBEITER11);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER11)
                {
                    SetPlayerCheckpointEx(playerid, 834.3851,851.1645,12.2650, 5.0, CP_BAUARBEITER12);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER12)
                {
                    SetPlayerCheckpointEx(playerid, 832.6885,1120.3729,29.9069, 5.0, CP_BAUARBEITER13);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER13)
                {
                    SetPlayerCheckpointEx(playerid, 570.8690,1068.5115,28.3436, 5.0, CP_BAUARBEITER14);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER14)
                {
                    SetPlayerCheckpointEx(playerid, 373.4708,978.8013,29.5814, 5.0, CP_BAUARBEITER15);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER15)
                {
                    SetPlayerCheckpointEx(playerid, 382.3929,871.6203,21.9523, 5.0, CP_BAUARBEITER16);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER16)
                {
                    SetPlayerCheckpointEx(playerid, 832.2355,891.7194,13.3516, 5.0, CP_BAUARBEITER17);
                    SendClientMessage(playerid, COLOR_YELLOW, "Arbeit ausgeführt! Fahre bitte nun wieder zur Station und park das Fahrzeug zurück.");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER17)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(10);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpoint(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bauarbeiterfahrzeug.");
        return 1;
    }
    //Farmer
    else if(CP_HARVEST1 <= pCheckpoint[playerid] <= CP_HARVEST19)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID) {
            if( aiVehicles[vID] == VEH_COMBINES) {
                for(new i=0;i<sizeof(combines);i++)
                {
                    if(vID == combines[i])
                    {
                        new farmerlog[128];
                        if(pCheckpoint[playerid] == CP_HARVEST1)
                        {
                            format(farmerlog, sizeof(farmerlog), "Name: %s - Erster Checkpoint", GetName(playerid));
                            LogFarmer(farmerlog);
                            SetPlayerCheckpointEx(playerid, 16.6802,43.9293,3.1172, 5.0, CP_HARVEST2);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST2)
                        {
                            SetPlayerCheckpointEx(playerid, 42.7796,51.4070,2.3500, 5.0, CP_HARVEST3);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST3)
                        {
                            SetPlayerCheckpointEx(playerid, -26.5762,-105.5455,3.1172, 5.0, CP_HARVEST4);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST4)
                        {
                            SetPlayerCheckpointEx(playerid, 64.6184,31.6592,0.6094, 5.0, CP_HARVEST5);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST5)
                        {
                            SetPlayerCheckpointEx(playerid, 20.5843,-112.2279,0.6094, 5.0, CP_HARVEST6);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST6)
                        {
                            SetPlayerCheckpointEx(playerid, 74.3954,-17.7640,0.7030, 5.0, CP_HARVEST7);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST7)
                        {
                            SetPlayerCheckpointEx(playerid, 42.8686,-110.5657,0.6169, 5.0, CP_HARVEST8);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST8)
                        {
                            SetPlayerCheckpointEx(playerid, -25.9873,-142.5124,2.6278, 5.0, CP_HARVEST9);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST9)
                        {
                            SetPlayerCheckpointEx(playerid, -114.3460,-116.6270,3.1094, 5.0, CP_HARVEST10);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST10)
                        {
                            SetPlayerCheckpointEx(playerid, -126.3108,-15.1467,3.1172, 5.0, CP_HARVEST11);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST11)
                        {
                            SetPlayerCheckpointEx(playerid, -32.5791,109.5097,3.1172, 5.0, CP_HARVEST12);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST12)
                        {
                            SetPlayerCheckpointEx(playerid, -50.2533,73.8168,3.1172, 5.0, CP_HARVEST13);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST13)
                        {
                            new
                                Float:x,
                                Float:y,
                                Float:z,
                                Float:face,
                                vehicleid;
                            vehicleid = JobVehicle[playerid];
                            GetVehiclePos(vehicleid,x,y,z);
                            GetVehicleZAngle(vehicleid,face);
                            GetXYInFrontOfPosition(x, y, face, -4.0 );
                            SetVehicleVelocity(vehicleid,0.0,0.0,0.0);
                            SetPlayerCheckpointEx(playerid, x,y,z, 1.0, CP_HARVEST14);
                            SendClientMessage(playerid, COLOR_YELLOW, "Steige aus und gehe hinter den Mähdrescher");
                            RemovePlayerFromVehicle(playerid);
                            return 1;
                        }
                    }
                }
            }
        }
        else {
            // Kein Fahrzeug mehr benötigt
            if(pCheckpoint[playerid] == CP_HARVEST15 || pCheckpoint[playerid] == CP_HARVEST17)
            {
                new
                    Float:x,
                    Float:y,
                    Float:z,
                    Float:face,
                    vehicleid;
                vehicleid = JobVehicle[playerid];
                GetVehiclePos(vehicleid,x,y,z);
                GetVehicleZAngle(vehicleid,face);
                GetXYInFrontOfPosition(x, y, face, -4.0 );
                SetPlayerCheckpointEx(playerid, x, y,z, 1.2, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Gehe zurück zum Mähdrescher und hole weitere Ernte.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }
            else if(pCheckpoint[playerid] == CP_HARVEST14 || pCheckpoint[playerid] == CP_HARVEST16 || pCheckpoint[playerid] == CP_HARVEST18)
            {
                SetPlayerCheckpointEx(playerid, -38.4621,56.3233,3.1172, 1.0, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Du hast die Ernte. Jetzt bringe diese zur Scheune.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                SetPlayerAttachedObject( playerid, 0, 1454, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 0.400000, 0.400000, 0.400000 ); // DYN_H_BALE2 - hay                return 1;
                return 1;
            }
            else if(pCheckpoint[playerid] == CP_HARVEST19)
            {
                new
                    firmenindex;
                new farmerlog[128];
                vID = JobVehicle[playerid];
                firmenindex = GetJobFirmaIndex(1);
                lagerbestand += 20;
                format(farmerlog, sizeof(farmerlog), "Name: %s - Geld: %d", GetName(playerid), g_Firma[firmenindex][F_iGehalt]);
                LogFarmer(farmerlog);
                g_Firma[firmenindex][F_iKasse] += 8000;
                Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                new string[128];
                format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                GameTextForPlayer(playerid, string, 5000, 1);
                DisablePlayerCheckpoint(playerid);
                SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                SetVehicleToRespawn(vID);
                ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                UpdateInfos(); // lagerbestand
                Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                Spieler[playerid][pCow][1] = 0;
                Spieler[playerid][pCowJob] = 0;
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Mähdrescher.");
            return 1;
        }
    }
    //Garten
    else if(CP_GARTEN1 <= pCheckpoint[playerid] <= CP_GARTEN19)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID) {
            if( aiVehicles[vID] == VEH_GARTENCARS) {
                for(new i=0;i<sizeof(vehicle_gardenerBase);i++)
                {
                    if(vID == vehicle_gardenerBase[i])
                    {
                        if(pCheckpoint[playerid] == CP_GARTEN1)
                        {
                            SetPlayerCheckpointEx(playerid, 1487.7969,-135.5734,20.2611, 5.0, CP_GARTEN2);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN2)
                        {
                            SetPlayerCheckpointEx(playerid, 1437.4023,-127.0120,21.8157, 5.0, CP_GARTEN3);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN3)
                        {
                            SetPlayerCheckpointEx(playerid, 1468.9374,-70.1820,20.0426, 5.0, CP_GARTEN4);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN4)
                        {
                            SetPlayerCheckpointEx(playerid, 1495.5052,-15.1224,24.0091, 5.0, CP_GARTEN5);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN5)
                        {
                            SetPlayerCheckpointEx(playerid, 1426.9447,-36.2039,26.8482, 5.0, CP_GARTEN6);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN6)
                        {
                            SetPlayerCheckpointEx(playerid, 1454.4276,-55.6280,21.7093, 5.0, CP_GARTEN7);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN7)
                        {
                            SetPlayerCheckpointEx(playerid, 1488.0676,-63.9454,20.5155, 5.0, CP_GARTEN8);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN8)
                        {
                            SetPlayerCheckpointEx(playerid, 1498.8956,-34.1370,22.3406, 5.0, CP_GARTEN9);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN9)
                        {
                            SetPlayerCheckpointEx(playerid, 1432.9546,-74.0522,20.7133, 5.0, CP_GARTEN10);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN10)
                        {
                            SetPlayerCheckpointEx(playerid, 1472.0958,-110.5212,19.6172, 5.0, CP_GARTEN11);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN11)
                        {
                            SetPlayerCheckpointEx(playerid, 1528.9442,-61.3342,20.2440, 5.0, CP_GARTEN12);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN12)
                        {
                            SetPlayerCheckpointEx(playerid, 1554.9900,33.2357,24.1579, 5.0, CP_GARTEN13);
                            SendClientMessage(playerid, COLOR_ORANGE, "Der Rasen ist gemäht! Das abgesägte Gras ist zum Essen für die Kühe. Bringe es zur Scheune!");
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN13)
                        {
                            new
                                Float:x,
                                Float:y,
                                Float:z,
                                Float:face,
                                vehicleid;
                            vehicleid = JobVehicle[playerid];
                            GetVehiclePos(vehicleid,x,y,z);
                            GetVehicleZAngle(vehicleid,face);
                            GetXYInFrontOfPosition(x, y, face, -4.0 );
                            SetVehicleVelocity(vehicleid,0.0,0.0,0.0);
                            SetPlayerCheckpointEx(playerid, x,y,z, 1.0, CP_GARTEN14);
                            SendClientMessage(playerid, COLOR_YELLOW, "Steige aus und gehe hinter das Fahrzeug.");
                            RemovePlayerFromVehicle(playerid);
                            return 1;
                        }
                    }
                }
            }
        }
        else {
            // Kein Fahrzeug mehr benötigt
            if(pCheckpoint[playerid] == CP_GARTEN15 || pCheckpoint[playerid] == CP_GARTEN17)
            {
                new
                    Float:x,
                    Float:y,
                    Float:z,
                    Float:face,
                    vehicleid;
                vehicleid = JobVehicle[playerid];
                GetVehiclePos(vehicleid,x,y,z);
                GetVehicleZAngle(vehicleid,face);
                GetXYInFrontOfPosition(x, y, face, -4.0 );
                SetPlayerCheckpointEx(playerid, x, y,z, 1.2, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Du hast die Ernte. Jetzt bringe diese zur Scheune.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }

            else if(pCheckpoint[playerid] == CP_GARTEN14 || pCheckpoint[playerid] == CP_GARTEN16 || pCheckpoint[playerid] == CP_GARTEN18)
            {
                SetPlayerCheckpointEx(playerid, 1547.9395,30.0051,24.1406, 1.0, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Gehe zurück zum Rasenmäher und hole weitere Ernte.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                SetPlayerAttachedObject( playerid, 0, 1454, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 0.400000, 0.400000, 0.400000 ); // DYN_H_BALE2 - hay                return 1;
                return 1;
            }
            else if(pCheckpoint[playerid] == CP_GARTEN19)
            {
                new
                    firmenindex;
                vID = JobVehicle[playerid];
                firmenindex = GetJobFirmaIndex(9);
                g_Firma[firmenindex][F_iKasse] += 8000;
                Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                new string[128];
                format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                GameTextForPlayer(playerid, string, 5000, 1);
                DisablePlayerCheckpoint(playerid);
                SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                SetVehicleToRespawn(vID);
                ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Gartenfahrzeug.");
            return 1;
        }
    }
    //Trucker
    else if(pCheckpoint[playerid] == CP_TRUCK1 || pCheckpoint[playerid] == CP_TRUCK2)
    {
        for(new i=0;i<sizeof(vehicle_truckerBase);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_truckerBase[i])
            {
                if(pCheckpoint[playerid] == CP_TRUCK1)
                {
                    FreezePlayer(playerid);
                    truckwait[playerid] = SetTimerEx("OnPlayerTruckerWait", 1000, 1, "i", playerid);
                    TruckTime[playerid] = 0;
                    PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~20 ~w~Sekunden");
                    PlayerTextDrawShow(playerid, BusMessage[playerid]);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_TRUCK2)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(3);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));

                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast die Lieferung erfolgreich abgeladen. +$1650");
                    KillTimer(truckwait[playerid]);
                    TruckTime[playerid] = 0;
                    Spieler[playerid][pPayCheck] += 7600;
                    DisablePlayerCheckpointEx(playerid);
                    new ort[24];
                    GetPlayer2DZone(playerid, ort, 24);
                    new truckerlog[128];
                    format(truckerlog, sizeof(truckerlog), "Name: %s - Ort: %s - Geld: 7600", GetName(playerid), ort);
                    LogTrucker(truckerlog);
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Lieferung ~w~entladet!");
                    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht im Laster.");
        return 1;
    }
    else if(pCheckpoint[playerid] == CP_SFKRAN ) {
        if(Spieler[playerid][pJob] == 22 ) {
            new
                vehicleid,
                owner;
            vehicleid = GetPlayerVehicleID(playerid);
            if( Spieler[playerid][pAutoknackerVehicleID] != vehicleid ) {
                SendClientMessage(playerid, COLOR_RED, "Du hast dieses Fahrzeug nicht geknackt.");
                return 1;
            }
            owner = GetCarOwner( vehicleid);
            if( IsPlayerConnected(owner) ) {
                new
                    slot;
                slot = GetCarOwnerSlot(owner,vehicleid);
                if( slot != 555 ) {
                    for(new i = _:CarNitro ; i < _:CarLamps ; i++ ) {
                        PlayerCar[owner][slot][cInfo:i] = 0;
                    }
                    SavePlayerCar(owner,slot);

                    DestroyDynamicObject(PlayerCar[owner][slot][ObjectIDNeon1]);
                    DestroyDynamicObject(PlayerCar[owner][slot][ObjectIDNeon1]);

                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned1]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned2]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned3]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned4]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned5]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned6]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned7]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned8]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned9]);

                    SetVehicleToRespawn(vehicleid);

                }
                Spieler[playerid][pAutoknackerExtraLohn] += 720;
                SendClientMessage(playerid,COLOR_GREEN,"Du hast das Fahrzeug erfolgreich abgeliefert ( +720$ bei PayDay )");
                ShowBuyInformation(playerid,"~y~Fahrzeug wurde ~w~verfrachtet!");
            }
            else {
                SendClientMessage(playerid,COLOR_RED,"Dies ist kein privates Fahrzeug");
            }
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Du bist hier falsch.");
        }
        DisablePlayerCheckpoint(playerid);
    }
    return 1;
}



forward OnPlayerTruckerWait(playerid);
public OnPlayerTruckerWait(playerid)
{
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(pCheckpoint[playerid] == CP_TRUCK1)
        {
            if(TruckTime[playerid] < 20)
            {
                TruckTime[playerid] ++;
                if(TruckTime[playerid] == 1){PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~19 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 2){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~18 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 3){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~17 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 4){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~16 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 5){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~15 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 6){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~14 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 7){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~13 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 8){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~12 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 9){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~11 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 10){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~10 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 11){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~9 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 12){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~8 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 13){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~7 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 14){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 15){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 16){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 17){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 18){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 19){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 20){PlayerTextDrawHide(playerid, BusMessage[playerid]); TruckTime[playerid] = 0;}
                TruckTime[playerid] = 0;
                KillTimer(truckwait[playerid]);
                SetPlayerCheckpointEx(playerid, 2486.6838,1879.4843,10.9174, 7.0, CP_TRUCK2);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Fahre nun nach Las Venturas zur Baustelle!");
                UnfreezePlayer(playerid);
                new ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                new truckerlog[128];
                format(truckerlog, sizeof(truckerlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                LogTrucker(truckerlog);
            }
        }
    }
    return 1;
}


public OnPlayerLeaveCheckpoint(playerid)
{
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    new
        cp;
    EventCP[playerid]++;
    cp = EventCP[playerid];
    DisablePlayerRaceCheckpoint(playerid);
    if( cp == g_EventMarker[EV_iCheckpoints] ) {
        new
            String[128];
        format(String,sizeof(String),"%s hat das Event gewonnen, er war der ERSTE am Ziel!",GetName(playerid));
        SendClientMessageToAll(COLOR_GREEN,String);

        g_EventMarker[EV_iState] = 0;
        g_EventMarker[EV_iPlayerID] = INVALID_PLAYER_ID;
        g_EventMarker[EV_iCheckpoints] = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            DisablePlayerRaceCheckpoint(i);
            EventCP[playerid] = 0;
        }

    }
    else if ( cp == ( g_EventMarker[EV_iCheckpoints] - 1 ) ) {
        SetPlayerRaceCheckpoint(playerid,1,
            g_EventMarkerCheckpoints[cp][0],
            g_EventMarkerCheckpoints[cp][1],
            g_EventMarkerCheckpoints[cp][2],
            g_EventMarkerCheckpoints[cp+1][0],
            g_EventMarkerCheckpoints[cp+1][1],
            g_EventMarkerCheckpoints[cp+1][2],
            5.0)
        ;
    }
    else {
        SetPlayerRaceCheckpoint(playerid,0,
            g_EventMarkerCheckpoints[cp][0],
            g_EventMarkerCheckpoints[cp][1],
            g_EventMarkerCheckpoints[cp][2],
            g_EventMarkerCheckpoints[cp+1][0],
            g_EventMarkerCheckpoints[cp+1][1],
            g_EventMarkerCheckpoints[cp+1][2],
            5.0)
        ;
    }
    return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    return 1;
}

public OnRconCommand(cmd[])
{
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    //#if defined USE_NPCS
    if( IsPlayerNPC(playerid) ) return 1;
    //#endif
    return 0;
}

public OnDynamicObjectMoved(objectid)
{
	if( Riesenrad_OnObjectMoved(objectid)) return 1;
	#if defined SILVESTER_EVENT
 	if( xFireworks_OnObjectMoved(objectid)) return 1;
	#endif
	if( g_Schiff[S_iObject] == objectid ) {
		//printf("OnDynamicObjectMoved() OBJECT_SCHIFF differenz %d",GetTickCount() - t );
	    if( g_Schiff[S_ibStatus] == 1 ) {
	        g_Schiff[S_ibStatus] = 2;
	        SetTimer("Pulse_Schiff",10,false);
	    }
	    else if(g_Schiff[S_ibStatus] == 3 ) {
	        new
	            time = gettime();
	        for(new i ; i < MAX_PLAYERS ; i++) {
			    if( GetPlayerSurfingObjectID(i) == objectid ) {
					if( Spieler[i][pFahrgeschaeft] == 3 ) {
				        if( Spieler[i][pFahrgeschaeftData] < time ) {
						    SendClientMessage(i,COLOR_ORANGE,"Ticketverkäufer sagt: Deine Zeit ist um. Wir hoffen,dass es dir Spaß gemacht hat");
					        SetPlayerPos(i,382.1528,-2166.6685,7.8510);
					        Spieler[i][pFahrgeschaeft] = -1;
				        }
				    }
				    else {
				        // Darf nicht drauf
				        SetPlayerPos(i,382.1528,-2166.6685,7.8510);
				        SendClientMessage(i,COLOR_RED,"Ticketverkäufer sagt: So nicht! Du musst dafür schon bezahlen");
				    }
				}
				else {
					if( Spieler[i][pFahrgeschaeft] == 3 ) {
				        if( Spieler[i][pFahrgeschaeftData] < time ) {
						    SendClientMessage(i,COLOR_ORANGE,"Ticketverkäufer sagt: Deine Zeit ist um. Wir hoffen, dass es dir Spaß gemacht hat");
					        Spieler[i][pFahrgeschaeft] = -1;
				        }
					}
				}
	        }
			MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] + g_Schiff[S_fOffsetX], g_Schiff[S_fY] - g_Schiff[S_fOffsetY], g_Schiff[S_fZ] + g_Schiff[S_fOffsetZ], g_Schiff[S_fSpeed], frandom(-33.0,-37.0,3) , 0.0 , 86.0 );
	        g_Schiff[S_ibStatus] = 4;
	    }
	    else if( g_Schiff[S_ibStatus] == 4 ) {
	        SetTimer("Pulse_Schiff",200 + random(150),false);
	        g_Schiff[S_ibStatus] = 5;
	    }
	    else if( g_Schiff[S_ibStatus] == 6 ) {
			MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] - g_Schiff[S_fOffsetX], g_Schiff[S_fY] - g_Schiff[S_fOffsetY], g_Schiff[S_fZ] + g_Schiff[S_fOffsetZ], g_Schiff[S_fSpeed], frandom(37.0,33.0,3) , 0.0 , 86.0 );
	        g_Schiff[S_ibStatus] = 1;
	    }
	    return 1;
	}
	if( g_BreakDancer[BD_ibStatus] != 0 ) {
		for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
		    if( g_BreakDancerSlot[i][BDS_iObject] == objectid ) {
		        MoveBreakdancer();
				return 1;
		    }
		}
	}
	#if defined WEIHNACHTS_EVENT
	for(new i ; i < sizeof(g_Geschenk) ; i++) {
	    if( objectid == g_Geschenk[i][G_iObjectID] ) {
	        new
	            Float:x,
	            Float:y,
	            Float:z,
	            Float:rx,
	            Float:ry,
	            Float:rz;
			GetDynamicObjectRot( objectid,rx,ry,rz);
			GetDynamicObjectPos( objectid,x,y,z);
			if( z > g_Geschenk[i][G_fZ] ) z = g_Geschenk[i][G_fZ];
			else z += 0.5;
			ry = float(random(361));
			rx = float(random(361));
			rz = float(random(361));
			MoveDynamicObject( objectid , g_Geschenk[i][G_fX],g_Geschenk[i][G_fY], z  , 0.25 , 0.0 , 0.0 , rz );
	    }
	}
	#endif//if( Gate_OnDynamicObjectMoved(objectid)) return 1;
	if( objectid == g_BallonConfig[BC_iObject] ) {
	    MoveBallon();
	}
	new e_streamer_extra_id = Streamer_GetIntData(STREAMER_TYPE_OBJECT,objectid,E_STREAMER_EXTRA_ID);
	if( e_streamer_extra_id == OBJECT_ZOLL ) {
	    //printf("OnDynamicObjectMoved %d OBJECT_ZOLL",objectid);
		for(new i ; i < sizeof(g_Zoll); i++) {
		    if( objectid == g_Zoll[i][Z_iObject] ) {
		        if( g_Zoll[i][Z_iStatus] == 1 ) {
		            g_Zoll[i][Z_iStatus] = 2;
		        }
		        else {
		            g_Zoll[i][Z_iStatus] = 0;
		        }
		        break;
		    }
		}
	}
	else if( e_streamer_extra_id == OBJECT_FALLTURM_PLATTE ) {
	    //printf("OnDynamicObjectMoved %d",g_FallTurm[FT_ibStatus]);
        KillTimer(g_FallTurm[FT_tTimer]);
	    if( g_FallTurm[FT_ibStatus] == 2 ) {
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",5000,false);
			//SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Gleich geht es abwärts");
			g_FallTurm[FT_ibStatus] = 3;
	    }
		else if( g_FallTurm[FT_ibStatus] == 4 ) {
		    new
		        Float:x,
		        Float:y,
		        Float:z;
		    g_FallTurm[FT_ibStatus] = 5;
			//SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Der Turm fährt gleich wieder hoch");
			for(new i ; i < MAX_PLAYERS ; i++) {
			    if( Spieler[i][pFahrgeschaeft] == 0 ) {
			        if( GetPlayerPos(i,x,y,z)) {
				        SetPlayerPos(i,x,y,7.85);
				        //TogglePlayerControllable(i,true);
			        }
			    }
			}
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",5000,false);
		}
		else if( g_FallTurm[FT_ibStatus] == 6 ) {
		    g_FallTurm[FT_ibStatus] = 7;
			//SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Oben angekommen. Nochmal runter!");
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",5000,false);
		}
		else if( g_FallTurm[FT_ibStatus] == 8 ) {
		    new
		        Float:x,
		        Float:y,
		        Float:z;
		    g_FallTurm[FT_ibStatus] = 9;
			for(new i ; i < MAX_PLAYERS ; i++) {
			    if( Spieler[i][pFahrgeschaeft] == 0 ) {
			        if( GetPlayerPos(i,x,y,z)) {
				        SetPlayerPos(i,x,y,7.85);
				        TogglePlayerControllable(i,true);
			        }
			    }
			}
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",2500,false);
		}
	}
	else if(e_streamer_extra_id == OBJECT_BREAKDANCER) {
	    MoveBreakdancer();
	}
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
    return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    return 1;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if( Spikes_OnPlayerPickUpPickup(playerid,pickupid) ) return 1;
    return 1;
}

public OnVehicleMod(playerid,vehicleid,componentid)
{
    if( Hack_OnVehicleMod(playerid,vehicleid,componentid) ) return 0;
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if (vehicleid == PlayerCar[playerid][x][CarId] && PlayerHaveCar[playerid][x])
        {
            if((componentid >= 1008) && (componentid <= 1010)) {PlayerCar[playerid][x][CarNitro] = componentid;}
            if((componentid >= 1142) && (componentid <= 1145)) {PlayerCar[playerid][x][CarVents] = componentid;}
            if((componentid == 1013) || (componentid == 1024)) {PlayerCar[playerid][x][CarLamps] = componentid;}
            if((componentid >= 1004) && (componentid <= 1005)||(componentid >= 1011) && (componentid <= 1012)) {PlayerCar[playerid][x][CarHood] = componentid;}
            if(componentid == 1087) {PlayerCar[playerid][x][CarHyd] = componentid;}
            if(componentid == 1086) {PlayerCar[playerid][x][CarHyd] = componentid;}
            if(IsAWheel(componentid)) {PlayerCar[playerid][x][CarWheel] = componentid;}
            if(IsAExhaust(componentid)) {PlayerCar[playerid][x][CarAusp] = componentid;}
            if(IsASideL(componentid)) {PlayerCar[playerid][x][CarSideL] = componentid; PlayerCar[playerid][x][CarSideR] = SideR;}
            if(IsASideR(componentid)) {PlayerCar[playerid][x][CarSideR] = componentid; PlayerCar[playerid][x][CarSideL] = SideL;}
            if(IsAFB(componentid)) {PlayerCar[playerid][x][CarFB] = componentid;}
            if(IsARB(componentid)) {PlayerCar[playerid][x][CarRB] = componentid;}
            if(IsASpoiler(componentid)) {PlayerCar[playerid][x][CarSpoiler] = componentid;}
            if(IsARoof(componentid)) {PlayerCar[playerid][x][CarRoof] = componentid;}
        }
    }
    return 1;
}


public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(vehicleid == PlayerCar[playerid][x][CarId] && PlayerHaveCar[playerid][x])
        {
            PlayerCar[playerid][x][CarPJ] = paintjobid;
            PlayerCar[playerid][x][CarC1] = 1;
            PlayerCar[playerid][x][CarC2] = 1;
        }
    }
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(vehicleid == PlayerCar[playerid][x][CarId] && PlayerHaveCar[playerid][x])
        {
            PlayerCar[playerid][x][CarC1] = color1;
            PlayerCar[playerid][x][CarC2] = color2;
        }
    }
    return 1;
}


forward CarTuning(playerid, slot);
public CarTuning(playerid, slot)
{
    ChangeVehicleColor(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarC1],PlayerCar[playerid][slot][CarC2]);
    if(PlayerCar[playerid][slot][CarPJ] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarPJ]);}
    if(PlayerCar[playerid][slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarNitro]);}
    if(PlayerCar[playerid][slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHyd]);}
    if(PlayerCar[playerid][slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarWheel]);}
    if(PlayerCar[playerid][slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarAusp]);}
    if(PlayerCar[playerid][slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideL]);}
    if(PlayerCar[playerid][slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideR]);}
    if(PlayerCar[playerid][slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarFB]);}
    if(PlayerCar[playerid][slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRB]);}
    if(PlayerCar[playerid][slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSpoiler]);}
    if(PlayerCar[playerid][slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRoof]);}
    if(PlayerCar[playerid][slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHood]);}
    if(PlayerCar[playerid][slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarVents]);}
    if(PlayerCar[playerid][slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarLamps]);}
    LockCar(PlayerCar[playerid][slot][CarId]);
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    return 1;
}

public OnPlayerExitedMenu(playerid)
{
    return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    return 1;
}

forward TazerReady(playerid);
public TazerReady(playerid)
{
    TazerTime[playerid] = 1;
}

forward JailFreeze(playerid);
public JailFreeze(playerid)
{
    SendClientMessage(playerid, COLOR_YELLOW, "Du bist nun wieder entfreezed.");
    UnfreezePlayer(playerid);
}

forward KnastUnfreeze(playerid);
public KnastUnfreeze(playerid)
{
    knastunfreezetimer[playerid] = INVALID_TIMER_ID;
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        UnfreezePlayer(playerid);
        SendClientMessage(playerid, COLOR_RED, "Bitte lass das Knast-DM in Zukunft!");
    }
    return 1;
}

CMD:uclight(playerid)
{
    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22)
    {
        new vID = GetPlayerVehicleID(playerid);
        new model = GetVehicleModel(vID);
        if(model == 426 || model == 560 || model == 445)
        {
            if(vSirene[vID] == INVALID_OBJECT_ID)
            {
                vSirene[vID] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(vSirene[vID],vID,0.499999, 0.799999, 0.400000, 0.000000, 0.000000, 0.000000);
            }
            else
            {
                DestroyDynamicObject(vSirene[vID]);
                vSirene[vID] = INVALID_OBJECT_ID;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Sultan sitzen.");
        }
    }
    return 1;
}

/*CMD:shsirene(playerid)
{
    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22)
    {
        new vID = GetPlayerVehicleID(playerid);
        new model = GetVehicleModel(vID);
        if(model == 560)
        {
            if(vSirene[vID] == INVALID_OBJECT_ID)
            {
                vSirene[vID] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
                AttachDynamicObjectToVehicle(vSirene[vID],vID,-0.500000, 2.699999, -0.100000, 0.000000, 0.000000, 174.000000);
                vSirene[vID] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
                AttachDynamicObjectToVehicle(vSirene[vID],vID,0.400000, 2.699999, -0.100000, 0.000000, 0.000000, 179.000000);
                vSirene[vID] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
                AttachDynamicObjectToVehicle(vSirene[vID],vID,0.500000, -2.499999, -0.100000, 0.000000, 0.000000, 0.000000);
                vSirene[vID] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
                AttachDynamicObjectToVehicle(vSirene[vID],vID,-0.500000, -2.499999, -0.100000, 0.000000, 0.000000, 0.000000);
                vSirene[vID] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
                AttachDynamicObjectToVehicle(vSirene[vID],vID,-0.000000, 0.000000, 0.800000, 0.000000, 0.000000, 0.000000);
            }
            else
            {
                DestroyDynamicObject(vSirene[vID]);
                vSirene[vID] = INVALID_OBJECT_ID;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Sultan sitzen.");
        }
    }
    return 1;
}

CMD:sultancop(playerid)
{
	if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22)
	{
		new vID = GetPlayerVehicleID(playerid);
		new model = GetVehicleModel(vID);
		if(model == 560)
		{
			if(vSirene[vID] == INVALID_OBJECT_ID)
			{
				vSirene[vID] = CreateDynamicObject(19420, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
				AttachDynamicObjectToVehicle(vSirene[vID],vID,-0.000000, 0.000000, 0.800000, 0.000000, 0.000000, 0.000000);
				vSirene[vID] = CreateDynamicObject(19327, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
				AttachDynamicObjectToVehicle(vSirene[vID],vID, -0.000000, 2.200000, 0.299999, 284.000000, 0.000000, 179.000000 ); // <vorne>
				SetDynamicObjectMaterialText(vSirene[vID], "POLIZEI", 0, OBJECT_MATERIAL_SIZE_256x128,"Arial", 28, 1, 0xFFFFFFFF, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				vSirene[vID] = CreateDynamicObject(19327, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0);
				AttachDynamicObjectToVehicle(vSirene[vID],vID, -0.000000, -2.399999, 0.200000, 0.000000, 0.000000, 0.000000 ); // <vorne>
				SetDynamicObjectMaterialText(vSirene[vID], "POLIZEI", 0, OBJECT_MATERIAL_SIZE_256x128,"Arial", 28, 1, 0xFFFFFFFF, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			}
			else
			{
				DestroyDynamicObject(vSirene[vID]);
				vSirene[vID] = INVALID_OBJECT_ID;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Sultan sitzen.");
		}
	}
	return 1;
}

CMD:textp(playerid)
{
	if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22)
	{
		new vID = GetPlayerVehicleID(playerid);
		new model = GetVehicleModel(vID);
		if(model == 560)
		{
			if(vSirene[vID] == INVALID_OBJECT_ID)
			{
				vSirene[vID] = CreateDynamicObject( 19327,0,0,0,0,0,0,80 ); // <vorne>
				AttachDynamicObjectToVehicle(vSirene[vID],vID, 0.000000, 2.000000, 0.400000, 260.000000, 180.000000, 0.000000 ); // <vorne>
				SetDynamicObjectMaterialText(vSirene[vID], "PUMA <3", 0, OBJECT_MATERIAL_SIZE_256x128,"Arial", 28, 1, 0xFFFFFFFF, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			}
			else
			{
				DestroyDynamicObject(vSirene[vID]);
				vSirene[vID] = INVALID_OBJECT_ID;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Sultan sitzen.");
		}
	}
	return 1;
}*/

CMD:olight(playerid)
{
    if(Spieler[playerid][pFraktion] == 5)
    {
        new vID = GetPlayerVehicleID(playerid);
        new model = GetVehicleModel(vID);
        if(model == 525)
        {
            if(OAmtSirene[vID] == INVALID_VEHICLE_ID)
            {
                OAmtSirene[vID] = CreateDynamicObject( 11701, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0 ); // <rote sirene auf towntruck>
                AttachDynamicObjectToVehicle(OAmtSirene[vID], vID, 0.000000, -0.500000, 1.500000, 0.000000, 0.000000, 0.000000 ); // <rote sirene auf towntruck>
            }
            else
            {
                DestroyDynamicObject(OAmtSirene[vID]);
                OAmtSirene[vID] = INVALID_OBJECT_ID;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Abschlepper sitzen.");
        }
    }
    return 1;
}


CMD:motor(playerid,params[])
{
    #pragma unused params
    new engine, lights, alarm, doors, bonnet, boot, objective;

    if(IsPlayerInAnyVehicle(playerid))
    {
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new
                besitzer,
                player_fraktion,
                fraktion,
                vID = GetPlayerVehicleID(playerid);
            if( IsBicycle( GetVehicleModel(vID) ) ) {
                return SendClientMessage(playerid, COLOR_RED, "Fahrräder haben keinen Motor.");
            }

            if (vID == vehicle_cityhallExterior[0]) {
                RemovePlayerFromVehicle(playerid);
                return SendClientMessage(playerid, COLOR_WHITE, "Jeff: Hey, du kannst doch nicht einfach meinen Van klauen!");
            }
            /*new
                Float:health;
            GetVehicleHealth(vID,health);
            if( health <= 330.0 ) {
                return SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden. Ruf mit /Service ein KFZ-Mechatroniker");
            }*/

            if( gGas[vID] < 1 ) return SendClientMessage(playerid, COLOR_YELLOW, "Das Fahrzeug hat kein Benzin mehr.");
            GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);

            if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
            {
                fraktion = GetVehicleFraktion(vID);
                player_fraktion = Spieler[playerid][pFraktion];

                if( fraktion && ( fraktion != 8) ) {
                    // Fraktionsfahrzeug.
                    if( (fraktion != player_fraktion) && !IsPoliceVehicleAllowed(player_fraktion,fraktion) ) {
                        // Spielerfraktion nicht Fahrzeugfraktion
                        if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
                        {
                            SendClientMessage(playerid, COLOR_YELLOW, "Du kannst den Motor nicht starten, da du nicht der Fraktion angehörst.");
                        }
                        else {
                            SendClientMessage(playerid, COLOR_YELLOW, "Du kannst den Motor nicht ausschalten, da du nicht der Fraktion angehörst.");
                        }
                        return 1;
                    }
                }

                KillTimer(carmsgwait[playerid]);
                SetVehicleParamsEx(vID, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
                SendClientMessage(playerid, COLOR_YELLOW, "Du hast den Motor gestartet!");
                besitzer = GetCarOwner(vID);
                if( playerid == besitzer ) {
                    new
                        slot = GetCarOwnerSlot(playerid, vID);
                    if( PlayerCar[playerid][slot][TUV] == 1 && !IsBicycle(GetVehicleModel(vID))) {
                        SendClientMessage(playerid, COLOR_YELLOW, "FAHRZEUGHINWEIS: Das Fahrzeug hat viel an Kilometern zurückgelegt, weshalb allgemeine TÜV-Wartungen anfallen!");
                        SendClientMessage(playerid, COLOR_YELLOW, "Suche die TÜV-Werkstatt auf, um alle nötigen Wartungen abzuschließen. Befehl: /Werkstattplatz");
                    }
                }
                ShowBuyInformation(playerid,"~w~Motor ~g~gestartet!");
            }
            else
            {
                KillTimer(carmsgwait[playerid]);
                SetVehicleParamsEx(vID, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
                SendClientMessage(playerid, COLOR_YELLOW, "Du hast den Motor ausgeschaltet!");
                ShowBuyInformation(playerid,"~w~Motor ~r~ausgeschaltet!");
            }
        }
    }

    return 1;
}

CMD:licht(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new vid = GetPlayerVehicleID(playerid);
        new mod = GetVehicleModel(GetPlayerVehicleID(playerid));
        if(IsBicycle(mod))return 1;
        new engine, light, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx(vid, engine, light, alarm, doors, bonnet, boot, objective);
        if(light == VEHICLE_PARAMS_OFF || light == VEHICLE_PARAMS_UNSET)
        {
            KillTimer(carmsgwait[playerid]);
            SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
        }
        else
        {
            KillTimer(carmsgwait[playerid]);
            SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
        }
    }
    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    // Handschelle
    if(OAB_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)) {
        return 0;
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    //Gears_OnPlayerKeyStateChange(playerid,newkeys,oldkeys);
    /*
    if( Spieler[playerid][pFahrgeschaeft] == 0 ) {
        if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
        {
            new Float:VBPos[3];
            GetPlayerPos(playerid,VBPos[0],VBPos[1],VBPos[2]);
            SetPlayerPos(playerid,VBPos[0],VBPos[1],VBPos[2]);
        }
    }
    */
    /*
    if( Blinker_OnPlayerKeyStateChange(playerid,newkeys,oldkeys)) {

    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_HANDSCHELLE) ) {
        if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
    }
    if(PRESSED(KEY_ANALOG_DOWN))
    {
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22)
            {
                new model = GetVehicleModel(vehicleid);
                if(model == 560)
                {
                    if(vSirene[vehicleid] == INVALID_OBJECT_ID)
                    {
                        vSirene[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                        AttachDynamicObjectToVehicle(vSirene[vehicleid],vehicleid,0.549999, 0.274999, 0.864999, 0.000000, 0.000000, 0.000000);
                    }
                    else
                    {
                        DestroyDynamicObject(vSirene[vehicleid]);
                        vSirene[vehicleid] = INVALID_OBJECT_ID;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Sultan sitzen.");
                }
            }
            else if(Spieler[playerid][pFraktion] == 5)
            {
                new model = GetVehicleModel(vehicleid);
                if(model == 525)
                {
                    if(OAmtSirene[vehicleid] == INVALID_VEHICLE_ID)
                    {
                        OAmtSirene[vehicleid] = CreateDynamicObject(19294, 0, 0, 0, 0, 0, 0, 0);
                        AttachDynamicObjectToVehicle(OAmtSirene[vehicleid], vehicleid, 0.029999, -0.544999, 1.594998, 0.000000, 0.000000, 0.000000);
                    }
                    else
                    {
                        DestroyDynamicObject(OAmtSirene[vehicleid]);
                        OAmtSirene[vehicleid] = INVALID_OBJECT_ID;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Abschlepper sitzen.");
                }
            }
        }
    }
    /*if(PRESSED(KEY_ANALOG_LEFT))
    {
        new playerState = GetPlayerState(playerid);
        new engine, lights, alarm, doors, bonnet, boot, objective;
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                if(playerState == PLAYER_STATE_DRIVER)
                {
                    new vID = GetPlayerVehicleID(playerid);
                    if(gGas[vID] < 1)return SendClientMessage(playerid, COLOR_GREY, "Kein Benzin mehr ...");
                    GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
                    if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
                    {
                        KillTimer(carmsgwait[playerid]);
                        SetVehicleParamsEx(vID, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
                    }
                    else
                    {
                        KillTimer(carmsgwait[playerid]);
                        SetVehicleParamsEx(vID, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
                    }
                }
            }
        }

    }*/

    if(PRESSED(KEY_ANALOG_RIGHT))
    {
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new mod = GetVehicleModel( vehicleid );
                if(IsBicycle(mod))return 1;
                return cmd_motor(playerid,"");
                /*
                new engine, light, alarm, doors, bonnet, boot, objective;
                GetVehicleParamsEx(vid, engine, light, alarm, doors, bonnet, boot, objective);
                if(light == VEHICLE_PARAMS_OFF || light == VEHICLE_PARAMS_UNSET)
                {
                    KillTimer(carmsgwait[playerid]);
                    SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
                }
                else
                {
                    KillTimer(carmsgwait[playerid]);
                    SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
                }
                */
            }
        }
    }
    if(newkeys & KEY_SECONDARY_ATTACK)
    {
        if(pSkinSelection[playerid] == 1)
        {
            new iBiz = pCurrentBiz[playerid];
            new iSkin = pChoosedSkin[playerid];
            pCurrentBiz[playerid] = 0;
            pSkinSelection[playerid] = 0;
            pChoosedSkin[playerid] = 0;
            UnfreezePlayer(playerid);

            if(Biz[iBiz][bWaren] < 1)
            {
                SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren.");
                SetPlayerInterior(playerid, Biz[iBiz][bInterior]);
                SetPlayerVirtualWorld(playerid, iBiz);
                SetPlayerPos(playerid, Biz[iBiz][ExitX], Biz[iBiz][ExitY], Biz[iBiz][ExitZ]);
                SetCameraBehindPlayer(playerid);
                return 1;
            }
            if(iSkin == Spieler[playerid][pSkin])
            {
                SendClientMessage(playerid, COLOR_WHITE, "Du musstest kein Geld bezahlen, da du den Skin bereits hattest.");
                SetPlayerInterior(playerid, Biz[iBiz][bInterior]);
                SetPlayerVirtualWorld(playerid, iBiz);
                SetPlayerPos(playerid, Biz[iBiz][ExitX], Biz[iBiz][ExitY], Biz[iBiz][ExitZ]);
                SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, COLOR_WHITE, "Du hast $500 für den neuen Skin bezahlt.");
                SetPlayerInterior(playerid, Biz[iBiz][bInterior]);
                SetPlayerVirtualWorld(playerid, iBiz);
                SetPlayerPos(playerid, Biz[iBiz][ExitX], Biz[iBiz][ExitY], Biz[iBiz][ExitZ]);
                SetCameraBehindPlayer(playerid);
                GivePlayerCash(playerid, -500);
                Biz[iBiz][bKasse] += 500;
                Biz[iBiz][bWaren] -= 2;
                SetPlayerSkinEx(playerid, iSkin);
            }
        }
    }
    if(newkeys & KEY_SPRINT)
    {
        if(pSkinSelection[playerid] == 1)
        {
            new
                skin = GetPlayerSkin(playerid);
            if(Spieler[playerid][pFraktion] == 0)
            {
                if(Spieler[playerid][pSex] == 1)
                {
                    if(skin == 2)
                    {
                        pChoosedSkin[playerid] = 3;
                    }
                    else if(skin == 3)
                    {
                        pChoosedSkin[playerid] = 5;
                    }
                    else if(skin== 5)
                    {
                        pChoosedSkin[playerid] = 6;
                    }
                    else if(skin == 6)
                    {
                        pChoosedSkin[playerid] = 7;
                    }
                    else if(skin == 7)
                    {
                        pChoosedSkin[playerid] = 14;
                    }
                    else if(skin == 14)
                    {
                        pChoosedSkin[playerid] = 18;
                    }
                    else if(skin == 18)
                    {
                        pChoosedSkin[playerid] = 20;
                    }
                    else if(skin == 20)
                    {
                        pChoosedSkin[playerid] = 21;
                    }
                    else if(skin == 21)
                    {
                        pChoosedSkin[playerid] = 22;
                    }
                    else if(skin == 22)
                    {
                        pChoosedSkin[playerid] = 23;
                    }
                    else if(skin == 23)
                    {
                        pChoosedSkin[playerid] = 24;
                    }
                    else if(skin == 24)
                    {
                        pChoosedSkin[playerid] = 25;
                    }
                    else if(skin == 25)
                    {
                        pChoosedSkin[playerid] = 26;
                    }
                    else if(skin == 26)
                    {
                        pChoosedSkin[playerid] = 28;
                    }
                    else if(skin == 28)
                    {
                        pChoosedSkin[playerid] = 29;
                    }
                    else if(skin == 29)
                    {
                        pChoosedSkin[playerid] = 33;
                    }
                    else if(skin == 33)
                    {
                        pChoosedSkin[playerid] = 35;
                    }
                    else if(skin == 35)
                    {
                        pChoosedSkin[playerid] = 36;
                    }
                    else if(skin == 36)
                    {
                        pChoosedSkin[playerid] = 37;
                    }
                    else if(skin == 37)
                    {
                        pChoosedSkin[playerid] = 45;
                    }
                    else if(skin == 45)
                    {
                        pChoosedSkin[playerid] = 46;
                    }
                    else if(skin == 46)
                    {
                        pChoosedSkin[playerid] = 44;
                    }
                    else if(skin == 44)
                    {
                        pChoosedSkin[playerid] = 58;
                    }
                    else if(skin == 58)
                    {
                        pChoosedSkin[playerid] = 59;
                    }
                    else if(skin == 59)
                    {
                        pChoosedSkin[playerid] = 60;
                    }
                    else if(skin == 60)
                    {
                        pChoosedSkin[playerid] = 66;
                    }
                    else if(skin == 66)
                    {
                        pChoosedSkin[playerid] = 68;
                    }
                    else if(skin == 68)
                    {
                        pChoosedSkin[playerid] = 67;
                    }
                    else if(skin == 67)
                    {
                        pChoosedSkin[playerid] = 72;
                    }
                    else if(skin == 72)
                    {
                        pChoosedSkin[playerid] = 73;
                    }
                    else if(skin == 73)
                    {
                        pChoosedSkin[playerid] = 78;
                    }
                    else if(skin == 78)
                    {
                        pChoosedSkin[playerid] = 94;
                    }
                    else if(skin == 94)
                    {
                        pChoosedSkin[playerid] = 95;
                    }
                    else if(skin == 95)
                    {
                        pChoosedSkin[playerid] = 97;
                    }
                    else if(skin == 97)
                    {
                        pChoosedSkin[playerid] = 98;
                    }
                    else if(skin == 98)
                    {
                        pChoosedSkin[playerid] = 101;
                    }
                    else if(skin == 101)
                    {
                        pChoosedSkin[playerid] = 132;
                    }
                    else if(skin == 132)
                    {
                        pChoosedSkin[playerid] = 133;
                    }
                    else if(skin == 133)
                    {
                        pChoosedSkin[playerid] = 134;
                    }
                    else if(skin == 134)
                    {
                        pChoosedSkin[playerid] = 135;
                    }
                    else if(skin == 135)
                    {
                        pChoosedSkin[playerid] = 136;
                    }
                    else if(skin == 136)
                    {
                        pChoosedSkin[playerid] = 137;
                    }
                    else if(skin == 137)
                    {
                        pChoosedSkin[playerid] = 144;
                    }
                    else if(skin == 144)
                    {
                        pChoosedSkin[playerid] = 146;
                    }
                    else if(skin == 146)
                    {
                        pChoosedSkin[playerid] = 154;
                    }
                    else if(skin == 154)
                    {
                        pChoosedSkin[playerid] = 158;
                    }
                    else if(skin == 158)
                    {
                        pChoosedSkin[playerid] = 159;
                    }
                    else if(skin == 159)
                    {
                        pChoosedSkin[playerid] = 160;
                    }
                    else if(skin == 160)
                    {
                        pChoosedSkin[playerid] = 170;
                    }
                    else if(skin == 170)
                    {
                        pChoosedSkin[playerid] = 180;
                    }
                    else if(skin == 180)
                    {
                        pChoosedSkin[playerid] = 181;
                    }
                    else if(skin == 181)
                    {
                        pChoosedSkin[playerid] = 182;
                    }
                    else if(skin == 182)
                    {
                        pChoosedSkin[playerid] = 183;
                    }
                    else if(skin == 183)
                    {
                        pChoosedSkin[playerid] = 185;
                    }
                    else if(skin == 185)
                    {
                        pChoosedSkin[playerid] = 188;
                    }
                    else if(skin == 188)
                    {
                        pChoosedSkin[playerid] = 210;
                    }
                    else if(skin == 210)
                    {
                        pChoosedSkin[playerid] = 213;
                    }
                    else if(skin == 213)
                    {
                        pChoosedSkin[playerid] = 230;
                    }
                    else if(skin == 230)
                    {
                        pChoosedSkin[playerid] = 235;
                    }
                    else if(skin == 235)
                    {
                        pChoosedSkin[playerid] = 236;
                    }
                    else if(skin == 236)
                    {
                        pChoosedSkin[playerid] = 239;
                    }
                    else if(skin == 239)
                    {
                        pChoosedSkin[playerid] = 241;
                    }
                    else if(skin == 241)
                    {
                        pChoosedSkin[playerid] = 242;
                    }
                    else if(skin == 242)
                    {
                        pChoosedSkin[playerid] = 250;
                    }
                    else if(skin == 250)
                    {
                        pChoosedSkin[playerid] = 258;
                    }
                    else if(skin == 258)
                    {
                        pChoosedSkin[playerid] = 259;
                    }
                    else if(skin == 259)
                    {
                        pChoosedSkin[playerid] = 262;
                    }
                    else if(skin == 262)
                    {
                        pChoosedSkin[playerid] = 289;
                    }
                    else if(skin == 289)
                    {
                        pChoosedSkin[playerid] = 297;
                    }
                    else if(skin == 297)
                    {
                        pChoosedSkin[playerid] = 299;
                    }
                    else if(skin == 299)
                    {
                        pChoosedSkin[playerid] = 2;
                    }
                    SetPlayerSkin(playerid, pChoosedSkin[playerid]);
                }
                else if(Spieler[playerid][pSex] == 2)
                {
                    if(skin == 12)
                    {
                        pChoosedSkin[playerid] = 31;
                    }
                    else if(skin == 31)
                    {
                        pChoosedSkin[playerid] = 38;
                    }
                    else if(skin == 38)
                    {
                        pChoosedSkin[playerid] = 39;
                    }
                    else if(skin == 39)
                    {
                        pChoosedSkin[playerid] = 40;
                    }
                    else if(skin == 40)
                    {
                        pChoosedSkin[playerid] = 41;
                    }
                    else if(skin == 41)
                    {
                        pChoosedSkin[playerid] = 53;
                    }
                    else if(skin == 53)
                    {
                        pChoosedSkin[playerid] = 55;
                    }
                    else if(skin == 55)
                    {
                        pChoosedSkin[playerid] = 56;
                    }
                    else if(skin == 56)
                    {
                        pChoosedSkin[playerid] = 69;
                    }
                    else if(skin == 69)
                    {
                        pChoosedSkin[playerid] = 88;
                    }
                    else if(skin == 88)
                    {
                        pChoosedSkin[playerid] = 89;
                    }
                    else if(skin == 89)
                    {
                        pChoosedSkin[playerid] = 90;
                    }
                    else if(skin == 90)
                    {
                        pChoosedSkin[playerid] = 91;
                    }
                    else if(skin == 91)
                    {
                        pChoosedSkin[playerid] = 93;
                    }
                    else if(skin == 93)
                    {
                        pChoosedSkin[playerid] = 129;
                    }
                    else if(skin == 129)
                    {
                        pChoosedSkin[playerid] = 130;
                    }
                    else if(skin == 130)
                    {
                        pChoosedSkin[playerid] = 131;
                    }
                    else if(skin == 131)
                    {
                        pChoosedSkin[playerid] = 138;
                    }
                    else if(skin == 138)
                    {
                        pChoosedSkin[playerid] = 139;
                    }
                    else if(skin == 139)
                    {
                        pChoosedSkin[playerid] = 140;
                    }
                    else if(skin == 140)
                    {
                        pChoosedSkin[playerid] = 141;
                    }
                    else if(skin == 141)
                    {
                        pChoosedSkin[playerid] = 145;
                    }
                    else if(skin == 145)
                    {
                        pChoosedSkin[playerid] = 151;
                    }
                    else if(skin == 151)
                    {
                        pChoosedSkin[playerid] = 157;
                    }
                    else if(skin == 157)
                    {
                        pChoosedSkin[playerid] = 190;
                    }
                    else if(skin==190)
                    {
                        pChoosedSkin[playerid] = 192;
                    }
                    else if(skin==192)
                    {
                        pChoosedSkin[playerid] = 196;
                    }
                    else if(skin==196)
                    {
                        pChoosedSkin[playerid] = 197;
                    }
                    else if(skin==197)
                    {
                        pChoosedSkin[playerid] = 198;
                    }
                    else if(skin==198)
                    {
                        pChoosedSkin[playerid] = 199;
                    }
                    else if(skin==199)
                    {
                        pChoosedSkin[playerid] = 201;
                    }
                    else if(skin==201)
                    {
                        pChoosedSkin[playerid] = 214;
                    }
                    else if(skin==214)
                    {
                        pChoosedSkin[playerid] = 215;
                    }
                    else if(skin==215)
                    {
                        pChoosedSkin[playerid] = 216;
                    }
                    else if(skin==216)
                    {
                        pChoosedSkin[playerid] = 218;
                    }
                    else if(skin==218)
                    {
                        pChoosedSkin[playerid] = 226;
                    }
                    else if(skin==226)
                    {
                        pChoosedSkin[playerid] = 231;
                    }
                    else if(skin==231)
                    {
                        pChoosedSkin[playerid] = 232;
                    }
                    else if(skin==232)
                    {
                        pChoosedSkin[playerid] = 233;
                    }
                    else if(skin==233)
                    {
                        pChoosedSkin[playerid] = 251;
                    }
                    else if(skin==251)
                    {
                        pChoosedSkin[playerid] = 12;
                    }
                    SetPlayerSkin(playerid, pChoosedSkin[playerid]);
                }
            }
            else if(Spieler[playerid][pFraktion] == 1)
            {
                if(skin == 265)
                {
                    pChoosedSkin[playerid] = 266;
                }
                else if(skin == 266)
                {
                    pChoosedSkin[playerid] = 267;
                }
                else if(skin == 267)
                {
                    pChoosedSkin[playerid] = 300;
                }
                else if(skin == 300)
                {
                    pChoosedSkin[playerid] = 301;
                }
                else if(skin == 301)
                {
                    pChoosedSkin[playerid] = 302;
                }
                else if(skin == 302)
                {
                    pChoosedSkin[playerid] = 306;
                }
                else if(skin == 306)
                {
                    pChoosedSkin[playerid] = 307;
                }
                else if(skin == 307)
                {
                    pChoosedSkin[playerid] = 309;
                }
                else if(skin == 309)
                {
                    pChoosedSkin[playerid] = 310;
                }
                else if(skin == 310)
                {
                    pChoosedSkin[playerid] = 284;
                }
                else if(skin == 284)
                {
                    pChoosedSkin[playerid] = 285;
                }
                else if(skin == 285)
                {
                    pChoosedSkin[playerid] = 72;
                }
                else if(skin == 72)
                {
                    pChoosedSkin[playerid] = 59;
                }
                else if(skin == 59)
                {
                    pChoosedSkin[playerid] = 7;
                }
                else if(skin == 7)
                {
                    pChoosedSkin[playerid] = 60;
                }
                else if(skin == 60)
                {
                    pChoosedSkin[playerid] = 93;
                }
                else if(skin == 93)
                {
                    pChoosedSkin[playerid] = 192;
                }
                else if(skin==192)
                {
                    pChoosedSkin[playerid] = 265;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 2)
            {
                if(skin == 286)
                {
                    pChoosedSkin[playerid] = 59;
                }
                else if(skin == 59)
                {
                    pChoosedSkin[playerid] = 150;
                }
                else if(skin == 150)
                {
                    pChoosedSkin[playerid] = 285;
                }
                else if(skin == 285)
                {
                    pChoosedSkin[playerid] = 281;
                }
                else if(skin == 281)
                {
                    pChoosedSkin[playerid] = 60;
                }
                else if(skin == 60)
                {
                    pChoosedSkin[playerid] = 141;
                }
                else if(skin == 141)
                {
                    pChoosedSkin[playerid] = 2;
                }
                else if(skin == 2)
                {
                    pChoosedSkin[playerid] = 7;
                }
                else if(skin == 7)
                {
                    pChoosedSkin[playerid] = 25;
                }
                else if(skin == 25)
                {
                    pChoosedSkin[playerid] = 72;
                }
                else if(skin == 72)
                {
                    pChoosedSkin[playerid] = 192;
                }
                else if(skin == 192)
                {
                    pChoosedSkin[playerid] = 211;
                }
                else if(skin == 211)
                {
                    pChoosedSkin[playerid] = 93;
                }
                else if(skin==93)
                {
                    pChoosedSkin[playerid] = 286;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 3)
            {
                if(skin == 274)
                {
                    pChoosedSkin[playerid] = 275;
                }
                else if(skin == 275)
                {
                    pChoosedSkin[playerid] = 276;
                }
                else if(skin == 276)
                {
                    pChoosedSkin[playerid] = 277;
                }
                else if(skin == 277)
                {
                    pChoosedSkin[playerid] = 279;
                }
                else if(skin == 279)
                {
                    pChoosedSkin[playerid] = 308;
                }
                else if(skin == 308)
                {
                    pChoosedSkin[playerid] = 2;
                }
                else if(skin == 2)
                {
                    pChoosedSkin[playerid] = 7;
                }
                else if(skin == 7)
                {
                    pChoosedSkin[playerid] = 25;
                }
                else if(skin == 25)
                {
                    pChoosedSkin[playerid] = 72;
                }
                else if(skin == 72)
                {
                    pChoosedSkin[playerid] = 60;
                }
                else if(skin == 60)
                {
                    pChoosedSkin[playerid] = 35;
                }
                else if(skin == 35)
                {
                    pChoosedSkin[playerid] = 101;
                }
                else if(skin == 101)
                {
                    pChoosedSkin[playerid] = 93;
                }
                else if(skin == 93)
                {
                    pChoosedSkin[playerid] = 192;
                }
                else if(skin==192)
                {
                    pChoosedSkin[playerid] = 274;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 4)
            {
                if(skin == 57)
                {
                    pChoosedSkin[playerid] = 55;
                }
                else if(skin == 55)
                {
                    pChoosedSkin[playerid] = 56;
                }
                else if(skin == 56)
                {
                    pChoosedSkin[playerid] = 57;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 5)
            {
                if(skin == 50)
                {
                    pChoosedSkin[playerid] = 71;
                }
                else if(skin == 71)
                {
                    pChoosedSkin[playerid] = 192;
                }
                else if(skin == 192)
                {
                    pChoosedSkin[playerid] = 59;
                }
                else if(skin == 59)
                {
                    pChoosedSkin[playerid] = 60;
                }
                else if(skin == 60)
                {
                    pChoosedSkin[playerid] = 2;
                }
                else if(skin == 2)
                {
                    pChoosedSkin[playerid] = 7;
                }
                else if(skin == 7)
                {
                    pChoosedSkin[playerid] = 25;
                }
                else if(skin == 25)
                {
                    pChoosedSkin[playerid] = 72;
                }
                else if(skin == 72)
                {
                    pChoosedSkin[playerid] = 93;
                }
                else if(skin==93)
                {
                    pChoosedSkin[playerid] = 50;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 6)
            {
                if(skin == 105)
                {
                    pChoosedSkin[playerid] = 106;
                }
                else if(skin == 106)
                {
                    pChoosedSkin[playerid] = 107;
                }
                else if(skin == 107)
                {
                    pChoosedSkin[playerid] = 269;
                }
                else if(skin == 269)
                {
                    pChoosedSkin[playerid] = 270;
                }
                else if(skin == 270)
                {
                    pChoosedSkin[playerid] = 271;
                }
                else if(skin == 271)
                {
                    pChoosedSkin[playerid] = 149;
                }
                else if(skin == 149)
                {
                    pChoosedSkin[playerid] = 86;
                }
                else if(skin == 86)
                {
                    pChoosedSkin[playerid] = 65;
                }
                else if(skin == 65)
                {
                    pChoosedSkin[playerid] = 105;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 7)
            {
                if(skin == 102)
                {
                    pChoosedSkin[playerid] = 103;
                }
                else if(skin == 103)
                {
                    pChoosedSkin[playerid] = 104;
                }
                else if(skin == 104)
                {
                    pChoosedSkin[playerid] = 195;
                }
                else if(skin == 195)
                {
                    pChoosedSkin[playerid] = 13;
                }
                else if(skin == 13)
                {
                    pChoosedSkin[playerid] = 293;
                }
                else if(skin == 293)
                {
                    pChoosedSkin[playerid] = 102;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 8)
            {
                if(skin == 240)
                {
                    pChoosedSkin[playerid] = 194;
                }
                else if(skin == 194)
                {
                    pChoosedSkin[playerid] = 240;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 9)
            {
                if(skin == 170)
                {
                    pChoosedSkin[playerid] = 163;
                }
                else if(skin == 163)
                {
                    pChoosedSkin[playerid] = 164;
                }
                else if(skin == 164)
                {
                    pChoosedSkin[playerid] = 215;
                }
                else if(skin == 172)
                {
                    pChoosedSkin[playerid] = 60;
                }
                else if(skin == 60)
                {
                    pChoosedSkin[playerid] = 165;
                }
                else if(skin == 165)
                {
                    pChoosedSkin[playerid] = 166;
                }
                else if(skin == 166)
                {
                    pChoosedSkin[playerid] = 148;
                }
                else if(skin == 148)
                {
                    pChoosedSkin[playerid] = 17;
                }
                else if(skin == 17)
                {
                    pChoosedSkin[playerid] = 150;
                }
                else if(skin == 150)
                {
                    pChoosedSkin[playerid] = 296;
                }
                else if(skin == 296)
                {
                    pChoosedSkin[playerid] = 170;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 10)
            {
                if(skin == 123)
                {
                    pChoosedSkin[playerid] = 122;
                }
                else if(skin == 122)
                {
                    pChoosedSkin[playerid] = 203;
                }
                else if(skin == 203)
                {
                    pChoosedSkin[playerid] = 204;
                }
                else if(skin == 204)
                {
                    pChoosedSkin[playerid] = 169;
                }
                else if(skin == 169)
                {
                    pChoosedSkin[playerid] = 228;
                }
                else if(skin == 228)
                {
                    pChoosedSkin[playerid] = 186;
                }
                else if(skin==186)
                {
                    pChoosedSkin[playerid] = 123;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 11)
            {
                if(skin == 114)
                {
                    pChoosedSkin[playerid] = 115;
                }
                else if(skin == 115)
                {
                    pChoosedSkin[playerid] = 116;
                }
                else if(skin == 116)
                {
                    pChoosedSkin[playerid] = 101;
                }
                else if(skin == 101)
                {
                    pChoosedSkin[playerid] = 173;
                }
                else if(skin == 173)
                {
                    pChoosedSkin[playerid] = 174;
                }
                else if(skin == 174)
                {
                    pChoosedSkin[playerid] = 176;
                }
                else if(skin == 176)
                {
                    pChoosedSkin[playerid] = 177;
                }
                else if(skin == 177)
                {
                    pChoosedSkin[playerid] = 156;
                }
                else if(skin == 156)
                {
                    pChoosedSkin[playerid] = 175;
                }
                else if(skin==175)
                {
                    pChoosedSkin[playerid] = 114;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 12)
            {
                if(skin == 125)
                {
                    pChoosedSkin[playerid] = 124;
                }
                else if(skin == 124)
                {
                    pChoosedSkin[playerid] = 126;
                }
                else if(skin == 126)
                {
                    pChoosedSkin[playerid] = 113;
                }
                else if(skin == 113)
                {
                    pChoosedSkin[playerid] = 112;
                }
                else if(skin == 112)
                {
                    pChoosedSkin[playerid] = 127;
                }
                else if(skin == 127)
                {
                    pChoosedSkin[playerid] = 223;
                }
                else if(skin == 223)
                {
                    pChoosedSkin[playerid] = 263;
                }
                else if(skin==263)
                {
                    pChoosedSkin[playerid] = 125;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 13)
            {
                if(skin == 110)
                {
                    pChoosedSkin[playerid] = 109;
                }
                else if(skin == 109)
                {
                    pChoosedSkin[playerid] = 108;
                }
                else if(skin == 108)
                {
                    pChoosedSkin[playerid] = 292;
                }
                else if(skin == 292)
                {
                    pChoosedSkin[playerid] = 298;
                }
                else if(skin==298)
                {
                    pChoosedSkin[playerid] = 110;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 14)
            {
                if(skin == 229)
                {
                    pChoosedSkin[playerid] = 188;
                }
                else if(skin == 188)
                {
                    pChoosedSkin[playerid] = 66;
                }
                else if(skin == 66)
                {
                    pChoosedSkin[playerid] = 101;
                }
                else if(skin == 101)
                {
                    pChoosedSkin[playerid] = 29;
                }
                else if(skin == 29)
                {
                    pChoosedSkin[playerid] = 2;
                }
                else if(skin==2)
                {
                    pChoosedSkin[playerid] = 229;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 15)
            { // 247, 248, 100, 261, 291, 146, 158, 162, 199, 200, 201
                if(skin == 248)
                {
                    pChoosedSkin[playerid] = 247;
                }
                else if(skin == 247)
                {
                    pChoosedSkin[playerid] = 261;
                }
                else if(skin == 261)
                {
                    pChoosedSkin[playerid] = 291;
                }
                else if(skin == 291)
                {
                    pChoosedSkin[playerid] = 100;
                }
                else if(skin == 100)
                {
                    pChoosedSkin[playerid] = 146;
                }
                else if(skin == 146)
                {
                    pChoosedSkin[playerid] = 158;
                }
                else if(skin == 158)
                {
                    pChoosedSkin[playerid] = 162;
                }
                else if(skin == 162)
                {
                    pChoosedSkin[playerid] = 199;
                }
                else if(skin == 199)
                {
                    pChoosedSkin[playerid] = 200;
                }
                else if(skin == 200)
                {
                    pChoosedSkin[playerid] = 201;
                }
                else if(skin == 201)
                {
                    pChoosedSkin[playerid] = 248;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 16)
            {
                if(skin == 282)
                {
                    pChoosedSkin[playerid] = 281;
                }
                else if(skin == 281)
                {
                    pChoosedSkin[playerid] = 59;
                }
                else if(skin == 59)
                {
                    pChoosedSkin[playerid] = 60;
                }
                else if(skin == 60)
                {
                    pChoosedSkin[playerid] = 141;
                }
                else if(skin == 141)
                {
                    pChoosedSkin[playerid] = 148;
                }
                else if(skin == 148)
                {
                    pChoosedSkin[playerid] = 150;
                }
                else if(skin == 150)
                {
                    pChoosedSkin[playerid] = 2;
                }
                else if(skin == 2)
                {
                    pChoosedSkin[playerid] = 7;
                }
                else if(skin == 7)
                {
                    pChoosedSkin[playerid] = 25;
                }
                else if(skin == 25)
                {
                    pChoosedSkin[playerid] = 72;
                }
                else if(skin == 72)
                {
                    pChoosedSkin[playerid] = 192;
                }
                else if(skin == 192)
                {
                    pChoosedSkin[playerid] = 211;
                }
                else if(skin == 211)
                {
                    pChoosedSkin[playerid] = 93;
                }
                else if(skin==93)
                {
                    pChoosedSkin[playerid] = 282;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 17)
            {
                if(skin == 202)
                {
                    pChoosedSkin[playerid] = 217;
                }
                else if(skin == 217)
                {
                    pChoosedSkin[playerid] = 89;
                }
                else if(skin == 89)
                {
                    pChoosedSkin[playerid] = 242;
                }
                else if(skin==242)
                {
                    pChoosedSkin[playerid] = 202;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 18)
            {
                if(skin == 287)
                {
                    pChoosedSkin[playerid] = 59;
                }
                else if(skin == 59)
                {
                    pChoosedSkin[playerid] = 191;
                }
                else if(skin==191)
                {
                    pChoosedSkin[playerid] = 287;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 19)
            {
                if(skin == 142)
                {
                    pChoosedSkin[playerid] = 220;
                }
                else if(skin == 220)
                {
                    pChoosedSkin[playerid] = 221;
                }
                else if(skin==221)
                {
                    pChoosedSkin[playerid] = 142;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 20)
            {
                if(skin == 47)
                {
                    pChoosedSkin[playerid] = 48;
                }
                else if(skin == 48)
                {
                    pChoosedSkin[playerid] = 184;
                }
                else if(skin == 184)
                {
                    pChoosedSkin[playerid] = 30;
                }
                else if(skin == 30)
                {
                    pChoosedSkin[playerid] = 234;
                }
                else if(skin==234)
                {
                    pChoosedSkin[playerid] = 237;
                }
                else if(skin==237)
                {
                    pChoosedSkin[playerid] = 223;
                }
                else if(skin==223)
                {
                    pChoosedSkin[playerid] = 47;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 21)
            {
                if(skin == 120)
                {
                    pChoosedSkin[playerid] = 111;
                }
                else if(skin == 111)
                {
                    pChoosedSkin[playerid] = 117;
                }
                else if(skin == 117)
                {
                    pChoosedSkin[playerid] = 208;
                }
                else if(skin == 208)
                {
                    pChoosedSkin[playerid] = 210;
                }
                else if(skin == 210)
                {
                    pChoosedSkin[playerid] = 118;
                }
                else if(skin == 118)
                {
                    pChoosedSkin[playerid] = 224;
                }
                else if(skin == 224)
                {
                    pChoosedSkin[playerid] = 294;
                }
                else if(skin == 294)
                {
                    pChoosedSkin[playerid] = 120;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
        }
    }
    if(newkeys & KEY_FIRE && ForbiddenGun(playerid) && Spieler[playerid][pAdmin] < 5)
    {
        new string[128];
        format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Waffenhack", GetName(playerid));
        SendAdminMessage(COLOR_RED, string);
        print(string);
        Spieler[playerid][pBanned] = 1;
        Ban(playerid);
        return 1;
    }
    if((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
    {
        if(Spieler[playerid][pLevel] < 2)
        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
        return 1;
    }
    if(newkeys & KEY_FIRE || newkeys & KEY_SECONDARY_ATTACK)
    {
        if( 1 <= Spieler[playerid][pJailed] <= 3 )
        {
            FreezePlayer(playerid);

            KillTimer(knastunfreezetimer[playerid]);
            SendClientMessage(playerid, COLOR_ORANGE, "Du wurdest für 1 Minuten gefreezed wegen Knast-DM.");
            knastunfreezetimer[playerid] = SetTimerEx("KnastUnfreeze", 60000*1, 0, "i", playerid);
        }
    }
    if(newkeys & KEY_FIRE || newkeys & KEY_SECONDARY_ATTACK)
    {
        if( gPlayerLogged[playerid] == 0 )
        {
            FreezePlayer(playerid);

            KillTimer(knastunfreezetimer[playerid]);
            knastunfreezetimer[playerid] = SetTimerEx("KnastUnfreeze", 60000*1, 0, "i", playerid);
        }
    }
    new targetid = GetPlayerTargetPlayer(playerid);
    if(targetid != INVALID_PLAYER_ID)
    {
        if((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH))
        {
            if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 18))return 1;
            if(GetPlayerWeapon(playerid) != 24)return 1;
            if(TazerTime[playerid] == 0)return 1;
            if(Spieler[playerid][pDuty] == 0)return 1;
            new string[128];
            new Float:x, Float:y, Float:z;
            GetPlayerPos(playerid, x,y,z);
            if(Tazered[targetid] == 1)return 1;
            if(IsPlayerInRangeOfPoint(targetid, 8.0, x,y,z))
            {
                FreezePlayer(targetid);
                TazerTime[playerid] = 0;
                TextDrawShowForPlayer(targetid, TazerBox);
                ClearAnimations(playerid);
                ApplyAnimation(targetid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0,0, 1); // Dieing of Crack
                SetTimerEx("TazerReady", 5000, 0, "i", playerid);
                Tazered[targetid] = 1;
                unfreezewait[targetid] = SetTimerEx("UnFreeze", 15000, 0, "i", targetid);
                format(string, sizeof(string), "* %s schoss mit seinem Tazer auf %s.", GetName(playerid), GetName(targetid));
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
                    {
                        SendClientMessage(i, COLOR_WHITE, string);
                    }
                }
            }
        }
    }

    if ((newkeys & KEY_ACTION) && !(oldkeys & KEY_ACTION) && vehicleid && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(vehicleid) == 525)
    {
        if (IsTrailerAttachedToVehicle(vehicleid)) return DetachTrailerFromVehicle(vehicleid);
        if (GetPlayerVehicleSpeed(playerid) > 5.0) return 1;
        new Float:pX, Float:pY, Float:pZ, Float:angle;
        GetVehicleZAngle(vehicleid, angle);
        GetVehiclePos(vehicleid, pX, pY, pZ);
        GetXYInFrontOfPosition(pX, pY, angle - 180.0, 3.5);
        new Float:vX, Float:vY, Float:vZ, Float: oX, Float: oY, Float: oZ, Float:distance, Float:closestDistance = 10.0;
        new closestVehicle = 0;
        for (new i = 1; i <= MAX_VEHICLES; i++) {
            if (i == vehicleid) continue;
            GetVehicleModelInfo(GetVehicleModel(i), VEHICLE_MODEL_INFO_WHEELSFRONT, oX, oY, oZ);
            GetVehicleRelativePos(i, vX, vY, vZ, oX, oY, oZ);
            distance = GetDistance(vX, vY, vZ, pX, pY, pZ);
            if (distance > 4.0) continue;

            if (distance < closestDistance) {
                closestVehicle = i;
                closestDistance = distance;
            }
        }

        if (closestVehicle) return AttachTrailerToVehicle(closestVehicle, vehicleid);
    }

    if(newkeys == KEY_SECONDARY_ATTACK)
    {
        if(MakeAnimation[playerid] == 1)
        {
            TextDrawHideForPlayer(playerid, Leer);
            ClearAnimations(playerid);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            MakeAnimation[playerid] = 0;
        }
        for(new i=0;i<MAX_BIZES;i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ]))
            {

                if( !IsBizOpened(i) ) {
                    new
                        String[128];
                    format(String,sizeof(String),"Das Geschäft ist geschlossen! Bitte beachtet die Öffnungszeiten ( %d Uhr bis %d Uhr ).",Biz[i][bLadenAuf],Biz[i][bLadenZu]);
                    SendClientMessage(playerid, COLOR_RED,String);
                    return 1;
                }
                if(GetPlayerMoney(playerid) < Biz[i][bEintritt])
                {
                    SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld um den Eintritt zu bezahlen.");
                    return 1;
                }
                if(Biz[i][bInterior] == 0)return 1;
                if(i == 5)return 1;
                if(i == 19)return 1;
                if(Biz[i][bLock] == 0)
                {
                    if( Biz[i][bID] == 40) {
                        if( Spieler[playerid][pLevel] < 3 ) {
                            SendClientMessage(playerid,COLOR_RED,"Die Paintball-Anlage kann man erst ab Levels 3 betreten");
                            return 1;
                        }
                        if(HasWeaponBlock(playerid)) {
                            SendClientMessage(playerid,COLOR_RED,"Du kannst die Paintball-Anlage nicht mit einer aktiven Waffensperre betreten!");
                            return SendWeaponBlockInfo(playerid);
                        }
                    }
                    SetPlayerInterior(playerid, Biz[i][bInterior]);
                    SetPlayerVirtualWorld(playerid, i);
                    SetPlayerPos(playerid, Biz[i][ExitX], Biz[i][ExitY], Biz[i][ExitZ]);
                    Biz[i][bKasse] += Biz[i][bEintritt];
                    GivePlayerCash(playerid, -Biz[i][bEintritt]);
                    if( Biz[i][bID] == 40) {
                        if( Spieler[playerid][pLevel] < 3 ) {
                            SendClientMessage(playerid,COLOR_RED,"Die Paintball-Anlage kann man erst ab Levels 3 betreten!");
                            return 1;
                        }
                        PlayerIsPaintballing[playerid] = 1;
                        Store_PlayerWeapons(playerid);
                        ResetPlayerWeapons(playerid);
                        SetPlayerHealth(playerid, 100.0);
                        SetPlayerArmour(playerid, 0.0);
                        GivePlayerWeapon(playerid, WEAPON_MP5, 100);
                        GivePlayerWeapon(playerid,24,100);
                        new message[145];
                        format(message, sizeof(message), "%s hat die Paintball-Halle betreten.", GetName(playerid));
                        SendPaintballMessage(COLOR_GREEN, message);
                    }
                    return 1;
                }
                else
                {
                    GameTextForPlayer(playerid, "~w~Geschaeft ist ~r~zu", 4000, 6);
                    return 1;
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid, 4.0, Biz[i][ExitX], Biz[i][ExitY], Biz[i][ExitZ]) && GetPlayerVirtualWorld(playerid) == i)
            {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ]);
                if( Biz[i][bID] == 40) {
                    ResetPlayerWeapons(playerid);

                    ReStore_PlayerWeapons(playerid);
                    PlayerIsPaintballing[playerid] = 0;
                    new message[145];
                    format(message, sizeof(message), "%s hat die Paintball-Halle verlassen.", GetName(playerid));
                    SendPaintballMessage(COLOR_ORANGE, message);
                }
                return 1;
            }
        }
        new
            vw = GetPlayerVirtualWorld(playerid),
            interior = GetPlayerInterior(playerid),
            index;
        if( interior == 0 && vw == 0 ) {
            for(new i=0 ; i < iHaus ; i++) {
                if(IsPlayerInRangeOfPoint(playerid, 2.0, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]))
                {
                    if(Haus[i][hLock] == 0)
                    {
                        index = GetHouseInteriorIndexByID( Haus[i][HouseInteriorID] );
                        if( index == 999 ) break;
                        SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior]);
                        // SetPlayerInterior(playerid, Haus[i][hInterior]);

						SetPlayerVirtualWorld(playerid, i);
						SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);
						// SetPlayerPos(playerid, Haus[i][ExitX], Haus[i][ExitY], Haus[i][ExitZ]);
						return 1;
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Haus ist ~r~zu", 4000, 6);
						return 1;
					}
				}
			}
		}
		else  {
			for(new i=0 ; i < iHaus ; i++)
			{
				if( vw == i ) {
					index = GetHouseInteriorIndexByID( Haus[i][HouseInteriorID] );
				    if( index == 999 ) continue;
					if(IsPlayerInRangeOfPoint(playerid, 4.0, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]) ) {
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerPos(playerid, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]);
						return 1;
					}
				}
			}
		}
		for(new i=0 ; i < iHotel ; i++)
		{
		    if( interior == Hotel[i][hEnterInterior] && vw == Hotel[i][hEnterVirtualWorld] ) {
				if(IsPlayerInRangeOfPoint(playerid, 2.0, Hotel[i][EnterX], Hotel[i][EnterY], Hotel[i][EnterZ]))
				{
					if(Hotel[i][hLock] == 0)
					{
						SetPlayerInterior(playerid, Hotel[i][hExitInterior]);
						SetPlayerVirtualWorld(playerid, i + HOTEL_OFFSET_VW );
						SetPlayerPos(playerid, Hotel[i][ExitX], Hotel[i][ExitY], Hotel[i][ExitZ]);
						return 1;
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Hotel ist ~r~zu", 4000, 6);
						return 1;
					}
				}
		    }
		    else if( vw == ( i + HOTEL_OFFSET_VW ) ) {
				if(IsPlayerInRangeOfPoint(playerid, 4.0, Hotel[i][ExitX], Hotel[i][ExitY], Hotel[i][ExitZ]) ) {
					SetPlayerInterior(playerid, Hotel[i][hEnterInterior]);
					SetPlayerVirtualWorld(playerid, Hotel[i][hEnterVirtualWorld]);
					SetPlayerPos(playerid, Hotel[i][EnterX], Hotel[i][EnterY], Hotel[i][EnterZ]);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 914.0884,-1004.0160,37.9917))//NORMALE Bank außen ENTER
		{
		    SetPlayerInterior(playerid, 3);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 834.0222,7.2621,1004.1870);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 834.0222,7.2621,1004.1870))//NORMALE Bank innen EXIT
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 914.0884,-1004.0160,37.9917);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1038.3171,-1339.7793,13.7266))//donatladen außen enter
		{
		    SetPlayerInterior(playerid, 17);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 377.2652,-192.6817,1000.6401);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.2652,-192.6817,1000.6401))//Donatladen innen exit
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 1038.3171,-1339.7793,13.7266);
		}
		//EINGANG
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1366.4780,500.7095,11.1953))//Army Außen
		{
		    if(!(Spieler[playerid][pFraktion] == 18))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Army Mitglied.");
		    SetPlayerInterior(playerid, 7);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 315.8161,-143.5091,999.6016);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 315.8161,-143.5091,999.6016))//Army Innen
		{
		    if(!(Spieler[playerid][pFraktion] == 18))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Army Mitglied.");
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, -1366.4780,500.7095,11.1953);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 264.3734,191.1904,1008.1719))//FBI Innen
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 1901.9264,742.8745,10.8198);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0,2127.5486,2378.9626,10.8203))//Clubvilla in Las Venturas
		{
		    if(Spieler[playerid][pDonateRank] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Zutritt ist dir untersagt, weil du kein CLUBMITGLIED bist.");
		    SetPlayerInterior(playerid, 3);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, -2636.6230,1403.3202,906.4609);
		    StopAudioStreamForPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2636.6230,1403.3202,906.4609))//Clubvilla in Las Venturas
		{
		    if(Spieler[playerid][pDonateRank] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Zutritt ist dir untersagt, weil du kein CLUBMITGLIED bist.");
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 2127.5486,2378.9626,10.8203);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1571.2114,-1336.6027,16.4844))//startower unten
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1548.4880,-1364.1744,326.2183);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1548.4880,-1364.1744,326.2183))//startower oben
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1571.2114,-1336.6027,16.4844);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 361.7136,-2107.5913,7.8340))//Sprungbrett unten
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 359.5758,-2107.5520,74.8357);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 359.5758,-2107.5520,74.8357))//Sprungbrett oben
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 361.7136,-2107.5913,7.8340);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 993.4795,-1459.6665,13.5469))//newsbase unten
		{
      		if(!(Spieler[playerid][pFraktion] == 4))return SendClientMessage(playerid, COLOR_RED, "Du bist kein News Reporter!");
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 990.6413,-1459.4440,21.2656);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 990.6413,-1459.4440,21.2656))//newsbase oben
		{
		    if(!(Spieler[playerid][pFraktion] == 4))return SendClientMessage(playerid, COLOR_RED, "Du bist kein News Reporter!");
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 993.4795,-1459.6665,13.5469);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2041.3099,-1408.8322,17.1641))//medic unten
		{
      		if(!(Spieler[playerid][pFraktion] == 3))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter!");
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2050.2693,-1405.5165,48.3359);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2050.2693,-1405.5165,48.3359))//medic oben
		{
		    if(!(Spieler[playerid][pFraktion] == 3))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter!");
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2041.3099,-1408.8322,17.1641);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1221.9672,-1812.2772,16.5938))//fahrschule flugprüfung unten
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1234.1289,-1784.0337,33.6312);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1234.1289,-1784.0337,33.6312))//fahrschule flugprüfung oben
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1221.9672,-1812.2772,16.5938);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2026.8407,-104.1143,1035.1719))//fahrschule waffenpüfung - Eingang
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 40);
			SetPlayerPos(playerid, 305.3869,-158.9812,999.5938);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 305.3869,-158.9812,999.5938))//fahrschule waffenpüfung - Drin
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, -2026.8407,-104.1143,1035.1719);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1216.5732,-1812.2876,16.5938))//Fahrschule Int  - Eingang
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, -2029.8124,-119.0646,1035.1719);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2029.8124,-119.0646,1035.1719))//Fahrschule Int  - Ausgang
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1216.5732,-1812.2876,16.5938);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1999.9869,-1114.0542,27.1250))//Ballas außen
		{
		    if(!(Spieler[playerid][pFraktion] == 7))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied der BALLAS");
		    SetPlayerInterior(playerid, 5);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 318.6026,1115.0546,1083.8828);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 318.6026,1115.0546,1083.8828))//Ballas innen
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1999.9869,-1114.0542,27.1250);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2495.3547,-1690.6273,14.7656))//Grove außen
		{
		    if(!(Spieler[playerid][pFraktion] == 6))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied der GROVE STREET");
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2495.9326,-1692.4271,1014.7422);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2495.9326,-1692.4271,1014.7422))//Grove innen
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2495.3547,-1690.6273,14.7656);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1804.1870,-2124.9021,13.9424))//Aztecas außen
		{
		    if(!(Spieler[playerid][pFraktion] == 11))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied der AZTECAS");
		    SetPlayerInterior(playerid, 11);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 501.8337,-68.1751,998.7578);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 501.8337,-68.1751,998.7578))//Aztecas innen
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1804.1870,-2124.9021,13.9424);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2770.6990,-1628.7225,12.1775))//Vagos außen
		{
		    if(!(Spieler[playerid][pFraktion] == 13))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied der VAGOS");
		    SetPlayerInterior(playerid, 8);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2807.6069,-1174.7576,1025.5703);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2807.6069,-1174.7576,1025.5703))//Vagos innen
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2770.6990,-1628.7225,12.1775);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -49.8745,-269.3627,6.6332))//Outlawz außen
		{
		    if(!(Spieler[playerid][pFraktion] == 20))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied der OUTLAWZ");
		    SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, -2158.6423,643.1422,1052.3750);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2158.6423,643.1422,1052.3750))//Outlawz innen
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, -49.8745,-269.3627,6.6332);
		}
		//SetCameraBehindPlayer(playerid); bugfix test eingeklammert Auftrag 2706
	}
	new
	    _gettime = gettime();
	if( _gettime > Spieler[playerid][unixBlinkerCooldown]) {
		if(vehicleid) {
			if( PRESSED(KEY_ANALOG_LEFT) || PRESSED(KEY_ANALOG_RIGHT ) ) {
			    if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER ) {
					new
					    modelid;
				    modelid = GetVehicleModel(vehicleid);
				    if(IsACar(modelid)) {
				        if( GetVehicleIndicator(vehicleid) == 3 ) { // Warnblinker an,blinken geht also nicht wirklich
				            return 1;
						}
				        new
				            String[128],
				            Float:x,
				            Float:y,
				            Float:z;
						GetPlayerPos(playerid,x,y,z);
				        if( PRESSED(KEY_ANALOG_LEFT) ) {
				            // links
				            format(String,sizeof(String),"%s blinkt nach links",GetName(playerid));
			                DestroyBlinker(vehicleid,1);
							SetVehicleIndicator(vehicleid,1,0);
				        }
				        else {
				            // rechts
				            format(String,sizeof(String),"%s blinkt nach rechts",GetName(playerid));
			                DestroyBlinker(vehicleid,0);
							SetVehicleIndicator(vehicleid,0,1);
				        }
						SendRoundMessage(x,y,z, COLOR_BLINKER, String , 30.0 );
				        Spieler[playerid][unixBlinkerCooldown] = _gettime + 2;
				    }
			    }
			}
		}
	}
	return 1;
}


forward UnFreeze(playerid);
public UnFreeze(playerid)
{
    if(Cuffed[playerid] == 0)
    {
        UnfreezePlayer(playerid);
    }
    KillTimer(unfreezewait[playerid]);
    Tazered[playerid] = 0;
    TextDrawHideForPlayer(playerid, TazerBox);
    ClearAnimations(playerid);
    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    return 1;
}

public OnPlayerUpdate(playerid)
{
    Spieler[playerid][unixUpdate] = gettime();
    if (Spieler[playerid][bNoDMZone]) { // in DM ZONE
        new weaponid = GetPlayerWeapon(playerid);
        if (weaponid != 0 && weaponid != 1) {
            SetPlayerArmedWeapon(playerid, 0);
            return 0; // kein sync zulassen
        }
    }
    //Gears_OnPlayerUpdate(playerid);
    //DriveBy_OnPlayerUpdate(playerid);

    // handle fps counters.
    new
        drunknew = GetPlayerDrunkLevel(playerid);

    if (drunknew < 100) { // go back up, keep cycling.
        SetPlayerDrunkLevel(playerid, 2000);
    } else {

        if (pDrunkLevelLast[playerid] != drunknew) {

            new wfps = pDrunkLevelLast[playerid] - drunknew;

            if ((wfps > 0) && (wfps < 200))
                pFPS[playerid] = wfps;

            pDrunkLevelLast[playerid] = drunknew;
        }

    }

    return 1;
}


public OnPlayerStreamIn(playerid, forplayerid)
{
/*
    new
        str[64];
    format(str,sizeof(str),"OnPlayerStreamIn(%d,%d)",playerid,forplayerid);
    SendClientMessage(playerid,COLOR_YELLOW,str);
*/
    if(Spieler[forplayerid][bMaske]) {
        ShowPlayerNameTagForPlayer(playerid,forplayerid,0);
    }
    if(Spieler[forplayerid][wbMaske]) {
        ShowPlayerNameTagForPlayer(playerid,forplayerid,0);
    }
    if(Spieler[forplayerid][abMaske]) {
        ShowPlayerNameTagForPlayer(playerid,forplayerid,0);
    }
    if( g_PolizeiPartner[forplayerid][PP_iStatus] == PolizeiPartner_Active ) {
        if( g_PolizeiPartner[forplayerid][PP_iPartner] == playerid ) {
            //new
            //    String[128];
            //format(String,sizeof(String),"SetPlayerMarkerForPlayer(%s,%s)",GetName(forplayerid),GetName(playerid));
            SetPlayerMarkerForPlayer(forplayerid,playerid,COLOR_COPPARTNER);
            //SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    /*
    if( Spieler[forplayerid][bShowMarker] ) {
        if( !IsPlayerNPC(playerid)) {
            SetPlayerMarkerForPlayer(forplayerid,playerid,playerColors[playerid]);
        }
    }
    */
    return 1;
}



public OnPlayerStreamOut(playerid, forplayerid)
{
    return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if( aiVehicles[vehicleid] == VEH_AUTOSCOOTER ||
        aiVehicles[vehicleid] == VEH_KARTBAHN ||
        aiVehicles[vehicleid] == VEH_WASSERSCOOTER ) {
        SetVehicleParamsForPlayer(vehicleid,forplayerid,false,true);
    }
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}

forward WHEELMAN_escaping_pulse(customer, wheelman, unixtime);
public WHEELMAN_escaping_pulse(customer, wheelman, unixtime) {
    if (gettime() >= unixtime) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        Spieler[customer][pJailed] = 0;
        Spieler[customer][pJailTime] = 0;
        SetPlayerPos(customer, ALCATRAZ_FREED_COORDS);
        SetPlayerFacingAngle(customer, ALCATRAZ_FREED_FACING);
        GivePlayerCash(customer, -50000);

        new message[128];
        format(message, sizeof(message), "Wheelman %s konnte dich befreien. Verlasse das Gebiet schnellstmöglich.", GetName(wheelman));
        SendClientMessage(customer, COLOR_GREEN, message);

        format(message, sizeof(message), "Du hast es geschafft, %s zu befreien. Bringe ihn in Sicherheit.", GetName(customer));
        return SendClientMessage(wheelman, COLOR_GREEN, message);
    }

    if (Spieler[wheelman][pJailed] > 0) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        SendClientMessage(customer, COLOR_RED, "Dein Wheelman wurde eingeknastet und konnte dich deshalb nicht befreien.");
        return SendClientMessage(wheelman, COLOR_RED, "Du wurdest eingeknastet und konntest deshalb deinen Kunden nicht befreien.");
    }

    if (Spieler[wheelman][pTot] > 0) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        SendClientMessage(customer, COLOR_RED, "Dein Wheelman ist gestorben und konnte dich deshalb nicht befreien.");
        return SendClientMessage(wheelman, COLOR_RED, "Du bist gestorben und konntest deshalb deinen Kunden nicht befreien.");
    }

    if (!(IsPlayerInRangeOfPoint(customer, 10.0, ALCATRAZ_JAILEDGATE_COORDS) && IsPlayerInRangeOfPoint(wheelman, 10.0, ALCATRAZ_JAILEDGATE_COORDS))) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        SendClientMessage(customer, COLOR_RED, "Ihr seid beide nicht mehr in der Nähe des Tores. Die Befreiung wurde abgebrochen.");
        return SendClientMessage(wheelman, COLOR_RED, "Ihr seid beide nicht mehr in der Nähe des Tores. Die Befreiung wurde abgebrochen.");
    }

    return SetTimerEx("WHEELMAN_escaping_pulse", 2000, false, "ddd", customer, wheelman, unixtime);
}

ShowSellGunDialog(playerid, dialogid) {
    new dialogText[128], ammoString[16], gID = GetPVarInt(playerid, "SELL.GUN.ID");
    if (g_sellGuns[gID][SELL_GUN_AMMO] == 1) ammoString = "";
    else format(ammoString, sizeof(ammoString), " mit %i Schuss", g_sellGuns[gID][SELL_GUN_AMMO]);

    if (dialogid == DIALOG_SELLGUN_CLIENT) {
        format(dialogText, sizeof(dialogText), "{FF9900}Waffe: {FFFFFF}%s%s\n\nGebe den Namen oder die ID deines Kunden ein:",
            g_sellGuns[gID][SELL_GUN_NAME], ammoString);

        return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{BDBDBD}Waffenverkauf - Kunde", dialogText, "Weiter", "Abbrechen");
    }
    else if (dialogid == DIALOG_SELLGUN_PRICE) {
        format(dialogText, sizeof(dialogText), "{FF9900}Waffe: {FFFFFF}%s%s\n{FF9900}Kunde: {FFFFFF}%s\n\nGebe den Preis für das Waffenangebot ein:",
            g_sellGuns[gID][SELL_GUN_NAME], ammoString, GetName(GetPVarInt(playerid, "SELL.GUN.CLIENT")));

        return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{BDBDBD}Waffenverkauf - Preis", dialogText, "Anbieten", "Abbrechen");
    }

    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    for(new i , len = strlen(inputtext) ; i < len ; i++) {
        if( inputtext[i] == '%' ) inputtext[i] = ' ';
    }
    if(Werbebanner_OnDialogResponse(playerid, dialogid, response, listitem, inputtext)) return 1;
    if (dialogid == DIALOG_SELLGUN_MAIN) {
        if (!response) return 1;
        if (Spieler[playerid][pJob] != 18) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Waffendealer mehr.");
        if (sizeof(g_sellGuns) <= listitem < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast keine gültige Auswahl getroffen.");
        if (Spieler[playerid][pWaffenteile] < g_sellGuns[listitem][SELL_GUN_MATS])
            return SCMFormatted(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Du brauchst %d Waffenteile für %s %s.", g_sellGuns[listitem][SELL_GUN_MATS],\
                g_sellGuns[listitem][SELL_GUN_INDEF_ARTICLE], g_sellGuns[listitem][SELL_GUN_NAME]);

        SetPVarInt(playerid, "SELL.GUN.ID", listitem);
        return ShowSellGunDialog(playerid, DIALOG_SELLGUN_CLIENT);
    }
    if (dialogid == DIALOG_SELLGUN_CLIENT) {
        if (Spieler[playerid][pJob] != 18) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Waffendealer mehr.");
        if (!response) return cmd_sellgun(playerid, "");
        new pID;
        if (sscanf(inputtext, "u", pID) || pID == INVALID_PLAYER_ID) {
            SendClientMessage(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Gebe einen gültigen Spielernamen oder eine gültige Spieler-ID ein.");
            return ShowSellGunDialog(playerid, DIALOG_SELLGUN_CLIENT);
        }

        if (!gPlayerLogged[pID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht eingeloggt.");
        if (Spieler[pID][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler muss mindestens Level 3 sein.");
        if (!IsPlayerInRangeOfPlayer(playerid, pID, 8.0)) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du bist nicht in der Nähe des Spielers.");
        if (HasWeaponBlock(pID)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler hat eine Waffensperre.");

        SetPVarString(playerid, "SELL.GUN.CLIENT", GetName(pID));
        return ShowSellGunDialog(playerid, DIALOG_SELLGUN_PRICE);
    }
    if (dialogid == DIALOG_SELLGUN_PRICE) {
        if (Spieler[playerid][pJob] != 18) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Waffendealer mehr.");
        if (!response) return cmd_sellgun(playerid, "");
        new price;
        if (sscanf(inputtext, "i", price) || price > 20000 || price < 1) {
            SendClientMessage(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Der Preis muss zwischen $1 und $20.000 liegen.");
            return ShowSellGunDialog(playerid, DIALOG_SELLGUN_PRICE);
        }

        new pID, playerName[MAX_PLAYER_NAME];
        GetPVarString(playerid, "SELL.GUN.CLIENT", playerName, sizeof(playerName));
        if (sscanf(playerName, "k<playername>", pID) || pID == INVALID_PLAYER_ID) return SCMFormatted(playerid, COLOR_RED, "[FEHLER] {FFFFFF}%s ist nicht mehr online."\
            , playerName);

        if (!gPlayerLogged[pID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht eingeloggt.");
        if (!IsPlayerInRangeOfPlayer(playerid, pID, 8.0)) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du bist nicht mehr in der Nähe des Spielers.");
        if (HasWeaponBlock(pID)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler hat eine Waffensperre.");

        new gID = GetPVarInt(playerid, "SELL.GUN.ID");
        if (Spieler[playerid][pWaffenteile] < g_sellGuns[gID][SELL_GUN_MATS]) return SendClientMessage(playerid, COLOR_RED,
            "[FEHLER] {FFFFFF}Du hast nicht mehr genügend Waffenteile.");

        new offerString[64], ammoString[16], myName[MAX_PLAYER_NAME];
        if (g_sellGuns[gID][SELL_GUN_AMMO] == 1) ammoString = "";
        else format(ammoString, sizeof(ammoString), " mit %d Schuss", g_sellGuns[gID][SELL_GUN_AMMO]);
        myName = GetName(playerid);
        format(offerString, sizeof(offerString), "%s %i %i %i", myName, Spieler[playerid][pLoginTimestamp], gID, price);
        SetPVarString(pID, "SELL.GUN.OFFER", offerString);
        SCMFormatted(playerid, COLOR_LIGHTBLUE, "[ANGEBOT] {FFFFFF}Du hast %s %s %s%s für $%s angeboten.", GetName(pID), g_sellGuns[gID][SELL_GUN_INDEF_ARTICLE],\
            g_sellGuns[gID][SELL_GUN_NAME], ammoString, AddDelimiters(price));

        SCMFormatted(pID, COLOR_LIGHTBLUE, "[ANGEBOT] {FFFFFF}%s hat dir %s %s für $%s angeboten.", myName, g_sellGuns[gID][SELL_GUN_INDEF_ARTICLE],\
            g_sellGuns[gID][SELL_GUN_NAME], AddDelimiters(price));

        return SendClientMessage(pID, COLOR_LIGHTBLUE, "[ANGEBOT] {FFFFFF}Tippe '/Accept Waffen' um das Angebot anzunehmen.");
    }
    if (dialogid == DIALOG_SHISHA) {
        if (response) {
            if (listitem < 0 || listitem > sizeof(g_shishaPipes)) return SendClientMessage(playerid, COLOR_RED, "Ungültige Shisha-Sorte.");
            if (GetPlayerMoney(playerid) < g_shishaPipes[listitem][SHISHA_PIPE_COST]) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld.");

            GivePlayerCash(playerid, g_shishaPipes[listitem][SHISHA_PIPE_COST] * -1);
            Biz[11][bKasse] += g_shishaPipes[listitem][SHISHA_PIPE_COST];
            ShowBuyInformation(playerid,"~y~Shisha ~w~bestellt!");
            SetPlayerAttachedObject(playerid, 0, 18736, 18, 0.112000, 0.028000, -1.589002, 0.000000, 0.000000, -127.399963, 0.668000, 0.638000, 1.000000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
            SetPVarInt(playerid, "SHISHA.SMOKING", 1);
            new message[128], Float:x, Float:y, Float:z;
            GetPlayerPos(playerid, x, y, z);
            format(message, sizeof(message), "%s** %s raucht jetzt %s **", g_shishaPipes[listitem][SHISHA_PIPE_HEX_COLOR], GetName(playerid), g_shishaPipes[listitem][SHISHA_PIPE_NAME]);
            SendRoundMessage(x, y, z, COLOR_WHITE, message);
            return SendClientMessage(playerid, COLOR_YELLOW, "Tippe '/Shisha Aus' um mit dem Shisharauchen aufzuhören.");
        }
    }
    if (dialogid == DIALOG_SEEDPOINTS) {
        if (!response) return 1;
        if (listitem < 0 || listitem > sizeof(seedPoints)) return SendClientMessage(playerid, COLOR_RED, "Ungültige Auswahl.");

        SetPlayerCheckpointEx(playerid, seedPoints[listitem][SEED_POINT_fX], seedPoints[listitem][SEED_POINT_fY], seedPoints[listitem][SEED_POINT_fZ], 3.0, CP_NAVI4);
        return SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Samenpunkt wurde auf der Karte Rot markiert.");
    }
    if (dialogid == DIALOG_CARSELL) {
        if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Fahrzeugverkauf abgebrochen.");
        if (!PlayerHaveCar[playerid][PlayerKey[playerid]])
            return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast auf dem Schlüssel kein Fahrzeug mehr.");

        if (PlayerCar[playerid][PlayerKey[playerid]][CarState] != e_Vehicle_Status_Normal)
            return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Dein Fahrzeug wurde zerstört oder abgeschleppt.");

        new price = PlayerCar[playerid][PlayerKey[playerid]][CarPreis];
        GivePlayerCash(playerid, price);
        UnLockCar(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
        if(PlayerCar[playerid][PlayerKey[playerid]][CarNeon1] > 0 || PlayerCar[playerid][PlayerKey[playerid]][CarNeon2] > 0)
        {
            PlayerCar[playerid][PlayerKey[playerid]][CarNeon1] = 0;
            PlayerCar[playerid][PlayerKey[playerid]][CarNeon2] = 0;
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon2]);
            PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon2] = INVALID_OBJECT_ID;
        }
        if(PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] > 0)
        {
            PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] = 0;
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned2]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned3]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned4]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned5]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned6]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned7]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned8]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned9]);
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned3] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned4] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned5] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned6] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned7] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned8] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned9] = INVALID_OBJECT_ID;
        }
        if(vSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]] != INVALID_OBJECT_ID)
        {
            DestroyDynamicObject(vSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]]);
        }
        if(vNeon[PlayerCar[playerid][PlayerKey[playerid]][CarId]] != INVALID_OBJECT_ID)
        {
            DestroyDynamicObject(vNeon[PlayerCar[playerid][PlayerKey[playerid]][CarId]]);
        }
        if(OAmtSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]] != INVALID_OBJECT_ID)
        {
            DestroyDynamicObject(OAmtSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]]);
        }

        if( g_aiVehicleSirene[CarId][0] != INVALID_OBJECT_ID ) {
            DestroyDynamicObject(g_aiVehicleSirene[CarId][0]);
            g_aiVehicleSirene[CarId][0] = INVALID_OBJECT_ID;
            DestroyDynamicObject(g_aiVehicleSirene[CarId][1]);
            g_aiVehicleSirene[CarId][1] = INVALID_OBJECT_ID;
            DestroyDynamicObject(g_aiVehicleSirene[CarId][2]);
            g_aiVehicleSirene[CarId][2] = INVALID_OBJECT_ID;
            DestroyDynamicObject(g_aiVehicleSirene[CarId][3]);
            g_aiVehicleSirene[CarId][3] = INVALID_OBJECT_ID;
        }

        DestroyBlinker(CarId,0);
        DestroyBlinker(CarId,1);
        DestroyVehicle(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
        //DestroyPeilsender(playerid, PlayerKey[playerid] );
        aiVehicles[ PlayerCar[playerid][PlayerKey[playerid]][CarId] ] = VEH_INVALID;
        new string[80];
        //new playername3[MAX_PLAYER_NAME];
        //GetPlayerName(playerid, playername3, sizeof(playername3));
        format(string,sizeof(string),"DELETE FROM `playercar` WHERE `id` = %d", PlayerCar[playerid][PlayerKey[playerid]][Id] );
        mysql_pquery(string,THREAD_CARSELL,playerid,gSQL,MySQLThreadOwner);
        // format(string3, sizeof(string3), "/Autos/%s_Car_%d.ini", playername3, PlayerKey[playerid]);
        // fremove(string3);
        PlayerHaveCar[playerid][PlayerKey[playerid]] = 0;
        return SCMFormatted(playerid, COLOR_GREEN, "Du hast dein Fahrzeug '%s' verkauft. Du erhältst noch $%s dafür.", CarName[PlayerCar[playerid][PlayerKey[playerid]][CarModel] - 400], AddDelimiters(price));
    }
    if (dialogid == DIALOG_WHEELMAN_OFFER) {
        if (response) {
            if (GetPVarInt(playerid, "WHEELMAN.STATUS") == WHEELMAN_STATUS_NONE) return SendClientMessage(playerid, COLOR_RED, "Jaja, Dialog Repeater am Werk wa. Ist geloggt, mein Freund!");

            new myWheelman = GetPVarInt(playerid, "WHEELMAN.WHEELMAN"),
                myWheelmansCustomer = GetPVarInt(myWheelman, "WHEELMAN.CUSTOMER"),
                myWheelmansCustomerStatus = GetPVarInt(myWheelmansCustomer, "WHEELMAN.STATUS");

            if (Spieler[myWheelman][pFraktion] != 17) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Dein Wheelman ist kein Wheelman mehr. Sowas aber auch...");
            }

            if (Spieler[playerid][pJailed] != 2) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Na jetzt ist's auch zu spät!");
            }

            if (Spieler[myWheelman][pJailed] == 2) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Der Wheelman ist jetzt dein Zellengenosse, daher kann er dir nicht mehr helfen.");
            }

            if (!(IsPlayerInRangeOfPoint(playerid, 10.0, ALCATRAZ_JAILEDGATE_COORDS) && IsPlayerInRangeOfPoint(myWheelman, 10.0, ALCATRAZ_JAILEDGATE_COORDS))) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Ihr seid nicht beide nahe genug am Alcatraz-Tor.");
            }

            if (myWheelmansCustomerStatus == WHEELMAN_STATUS_ESCAPING) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Dein Wheelman befreit bereits jemand anderes.");
            }

            SetPVarInt(myWheelman, "WHEELMAN.CUSTOMER", playerid);
            SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_ESCAPING);

            new message[128], Float:x, Float:y, Float:z;
            GetPlayerPos(myWheelman, x, y, z);
            format(message, sizeof(message), "%s hat deine Befreiung angenommen. Bleibe am Tor stehen!", GetName(playerid));
            SendClientMessage(myWheelman, COLOR_YELLOW, message);
            format(message, sizeof(message), "Wheelman %s versucht dich nun zu befreien. Bleibe am Tor stehen!", GetName(myWheelman));
            SendClientMessage(playerid, COLOR_YELLOW, message);
            format(message, sizeof(message), "Wheelman %s versucht %s aus dem Alcatraz zu befreien!", GetName(myWheelman), GetName(playerid));
            SendRoundMessage(x, y, z, COLOR_ORANGE, message, 30.0);

            SendFraktionMessage(1, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht einen Gefangenen aus dem Alcatraz zu befreien!");
            SendFraktionMessage(2, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht einen Gefangenen aus dem Alcatraz zu befreien!");
            SendFraktionMessage(16, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht einen Gefangenen aus dem Alcatraz zu befreien!");
            SendFraktionMessage(18, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht einen Gefangenen aus dem Alcatraz zu befreien!");

            return SetTimerEx("WHEELMAN_escaping_pulse", 2000, false, "ddd", playerid, myWheelman, gettime() + 240); // 4 Minutes
        } else {
            new message[128];
            SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
            format(message, sizeof(message), "%s hat deine Alcatrazbefreiung abgelehnt.", GetName(playerid));
            SendClientMessage(GetPVarInt(playerid, "WHEELMAN.WHEELMAN"), COLOR_RED, message);
            format(message, sizeof(message), "Du hast das Befreiungsangebot von Wheelman %s abgelehnt.", GetName(GetPVarInt(playerid, "WHEELMAN.WHEELMAN")));
            return SendClientMessage(playerid, COLOR_RED, message);
        }
    }
    if (dialogid == DIALOG_RB) {
        if (response) {
            new Float:pX, Float:pY, Float:pZ, Float:rZ;
            GetPlayerPos(playerid, pX, pY, pZ);
            GetPlayerFacingAngle(playerid, rZ);

            switch (listitem) {
                case 0: { // Kleine Sperre
                    CreateRoadblock(1459, pX, pY, pZ - 0.42, rZ);
                }

                case 1: { // Große Sperre
                    CreateRoadblock(981, pX, pY, pZ - 0.22, rZ);
                }

                case 2: { // Verkehrskegel
                    CreateRoadblock(1238, pX, pY, pZ - 0.69, rZ);
                }

                case 3: { // Umleitung
                    CreateRoadblock(1425, pX, pY, pZ - 0.56, rZ);
                }

                case 4: { // Grosse gelbe Barriere
                    CreateRoadblock(3578, pX, pY, pZ - 0.25, rZ);
                }

                case 5: { // Eine Sperre in der Nähe entfernen
                    DeleteClosestRoadblock(playerid);
                }

                case 6: { // Alle Sperren entfernen
                    if (Spieler[playerid][pFraktion] != 3 && Spieler[playerid][pFraktion] != 5) RemoveAllNagelBand();
                    DeleteAllRoadblocks(playerid);
                }

                case 7: { // Nagelband setzen
                    if (Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pFraktion] == 5) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
                    AddNagelBand(playerid);
                }

                case 8: { // Nagelband in der Nähe entfernen
                    if (Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pFraktion] == 5) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
                    RemoveNagelBand(playerid);
                }

                case 9: { // Alle Nagelbänder entfernen
                    if (Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pFraktion] == 5) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
                    RemoveAllNagelBand();
                }

                default: {

                }
            }
        }
    }
    if(dialogid==DIALOG_YSTREAM)
    {
        if(response)
        {
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
                {
                    PlayAudioStreamForPlayer(i,inputtext);
                    //PlayYoutubeVideoForPlayer(i,inputtext);
                }
            }
        }
        else
        {
            RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_MUSIK);
        }
    }
    else if(dialogid==DIALOG_BESTAETIGEN)
    {
        if(response)
        {
            if(sichervar[playerid][0]==1)
            {
                sichervar[playerid][0]=0;
                new h = IsPlayerAtHouse(playerid);
                new pHouse = GetPlayerHouse(playerid);
                new
                    erstattung,
                    String[128];
                erstattung = (Haus[pHouse][hPreis] / 4);
                // Alle Mieter raus
                new query[256];
                format(query, sizeof(query), "\
                    UPDATE `accounts` SET \
                    `HouseMieteKey` = '999', \
                    `UpgradeWaffenlager` = '0',\
                    `UpgradeSafebox` = '0',\
                    `HausWaffenlager` = '0',\
                    `HausSafeboxSpice` = '0',\
                    `HausSafeboxDrogen` = '0'\
                    WHERE `HouseMieteKey` = %d", Spieler[playerid][pPlayerHouse]);
                mysql_pquery(query,THREAD_HAUSVERSTAATLICHEN,playerid,gSQL,MySQLThreadOwner);
                SendClientMessage(playerid, COLOR_LIGHTBLUE,query);
                Haus[h][hMieterAnzahl] = 0;
                Haus[h][hKasse] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(i != playerid)
                    {
                        if(IsPlayerConnected(i))
                        {
                            if(Spieler[i][pHouseMieteKey] == Haus[h][hID])
                            {
                                Spieler[i][pHouseMieteKey] = 999;
                                SendClientMessage(i, COLOR_LIGHTBLUE, "Der Besitzer des Hauses in dem du eingemietet bist, hat sein Haus an den Staat verkauft!");
                            }
                        }
                    }
                }
                // Alle Möbel löschen
                for(new i ; i < MAX_HAUS_MOEBEL ; i++) {
                    String[0] = '\0';
                    format(String,sizeof(String),"DELETE FROM `hausmoebel` WHERE `id` = %d", g_HausMoebelObjekt[pHouse][i][HMO_iID]);
                    mysql_oquery( String , THREAD_DELETEHAUSMOEBEL , playerid ,gSQL);
                    Hausmoebel_ResetHausMoebel(pHouse,i);
                }
                // Haus reseten
                format(Haus[pHouse][hBesitzer],MAX_PLAYER_NAME,"Niemand");
                Haus[pHouse][hMieterMax] = 10;
                Haus[pHouse][hMieterAnzahl] = 0;
                Haus[pHouse][hMieten] = 0;
                if(Haus[pHouse][hKasse] > 0 ) {
                    format(String,sizeof(String),"In deiner Hauskasse waren noch $%s. Du erhältst diese noch vor dem Verkauf zurück.", AddDelimiters(Haus[pHouse][hKasse]));
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    Spieler[playerid][pBank] += Haus[pHouse][hKasse];
                }
                Spieler[playerid][pBank] += erstattung;
                Haus[pHouse][hKasse] = 0;
                format(String,sizeof(String),"Du hast dein Haus '%s' (%d) an den Staat für $%s verkauft. Alle Mieter und Möbel wurden entfernt!",Haus[pHouse][hName],Haus[pHouse][hID], AddDelimiters(erstattung));
                SendClientMessage(playerid,COLOR_WHITE,String);
                Spieler[playerid][pPlayerHouse] = 999;
                CheckPlayerHouse(playerid);
                UpdateHouseText(h);
            }
            else if(sichervar[playerid][1]==1)
            {
                sichervar[playerid][1]=0;
                new giveid=sichervar[playerid][2],price=sichervar[playerid][3],pHouse = GetPlayerHouse(playerid);
                new
                    string[128];
                format(string,sizeof(string),"%s bietet dir sein Haus '%s' für einen Kaufpreis von $%s an!",GetName(playerid),Haus[pHouse][hName], AddDelimiters(price));
                SendClientMessage(giveid,COLOR_GREEN,string);
                SendClientMessage(giveid,COLOR_GREEN,"Dieses Angebot nimmst du mit /Hausankaufen [ID] an.");
                format(string,sizeof(string),"Du hast %s dein Haus für $%s zum Ankauf angeboten! ",GetName(giveid), AddDelimiters(price));
                SendClientMessage(playerid,COLOR_GREEN,string);
                Spieler[playerid][pHouseAngebot][0] = giveid;
                Spieler[playerid][pHouseAngebot][1] = price;
            }
            else if(sichervar[playerid][4]==1)
            {
                sichervar[playerid][4]=0;
                new giveid=sichervar[playerid][5],price=sichervar[playerid][6],indexbiz = Spieler[playerid][pPlayerBiz];
                new
                    string[128];
                format(string,sizeof(string),"[VERKAUF] %s bietet dir sein Geschäft '%s' für einen Kaufpreis von $%s an!",GetName(playerid),Biz[indexbiz][bName], AddDelimiters(price));
                SendClientMessage(giveid,COLOR_GREEN,string);
                SendClientMessage(giveid,COLOR_GREEN,"Dieses Angebot nimmst du mit /Bizankaufen [ID] an.");
                format(string,sizeof(string),"Du hast %s dein Geschäft für $%s zum Ankauf angeboten! ",GetName(giveid), AddDelimiters(price));
                SendClientMessage(playerid,COLOR_GREEN,string);
                Spieler[playerid][pBizAngebot][0] = giveid;
                Spieler[playerid][pBizAngebot][1] = price;
            }
            else if(sichervar[playerid][7]==1)
            {
                sichervar[playerid][7]=0;
                new giveid=sichervar[playerid][8],price=sichervar[playerid][9],indextanke = Spieler[playerid][pPlayerTank];
                new
                    Float:x,
                    Float:y,
                    Float:z;
                GetPlayerPos(playerid,x,y,z);
                if( !IsPlayerInRangeOfPoint(playerid,5.0,x,y,z)) {
                    return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss sich in deiner nähe befinden");
                }
                new
                    string[128];
                format(string,sizeof(string),"[VERKAUF] %s bietet dir seine Tankstelle '%s' für einen Kaufpreis von $%s an!",GetName(playerid),Tanke[indextanke][tName], AddDelimiters(price));
                SendClientMessage(giveid,COLOR_GREEN,string);
                SendClientMessage(giveid,COLOR_GREEN,"Dieses Angebot nimmst du mit /Tankstelleankaufen [ID] an.");
                format(string,sizeof(string),"Du hast %s deine Tankstelle für $%s zum Ankauf angeboten! ",GetName(giveid), AddDelimiters(price));
                SendClientMessage(playerid,COLOR_GREEN,string);

                Spieler[playerid][pTankeAngebot][0] = giveid;
                Spieler[playerid][pTankeAngebot][1] = price;
            }
        }
    }
    else if(dialogid==DIALOG_GUP)
    {
        if(response)
        {
            listitem++;
            for(new index;index<MAX_GANGZONES;index++)
            {
                if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ]) &&
                Spieler[playerid][pFraktion]==g_GangZone[index][GZ_iOwner]&&Spieler[playerid][pRank] > 4)
                {
                    if(g_GangZone[index][GZ_igupgrade]!=listitem)
                    {
                        g_GangZone[index][GZ_igbestand]=0;
                    }
                    else
                    {
                        return SendClientMessage(playerid,COLOR_RED,"Dieses Upgrade ist bereits aktiv.");
                    }
                    g_GangZone[index][GZ_igupgrade]=listitem;
                    SaveGangZones();
                    if(listitem==1)
                    {
                        SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Maschine für Waffenteile gekauft.");
                        GivePlayerCash(playerid,-450000);
                    }
                    else if(listitem==2)
                    {
                        SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Maschine für Drogen gekauft.");
                        GivePlayerCash(playerid,-300000);
                    }
                    else if(listitem==3)
                    {
                        SendClientMessage(playerid,COLOR_GREEN,"Du verpachtest ab jetzt dein Gangfight Gebiet.");
                    }
                    break;
                }
                else if(index==MAX_GANGZONES-1)
                {
                    SendClientMessage(playerid,COLOR_RED,"Die Zone gehört deiner Fraktion nicht, du bist nicht mehr am Icon oder du bist kein Leader der Fraktion.");
                }
            }
        }
    }
    else if(dialogid==DIALOG_WANTEDCODES3)
    {
        if(response)
        {
            if(strval(inputtext)>=1)
            {
                if(Spieler[playerid][pWantedCodes]>=strval(inputtext))
                {
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast für Spieler %s %d Wanted(s) gehackt",GetName(wantedcodename[playerid]),strval(inputtext));
                    SendClientMessage(playerid,COLOR_LIGHTRED2,String);
                    Spieler[playerid][pWantedCodes] -= strval(inputtext);
                    Spieler[playerid][punixWantedCodesDone] = gettime();
                    Spieler[playerid][tWantedCodes] = SetTimerEx("Pulse_WantedHacker",1000,false,"ddd",playerid,wantedcodename[playerid],strval(inputtext));
                    Spieler[playerid][bWantedHacking] = true;
                    SendFraktionMessage(1, COLOR_RED, "[POLIZEIZENTRALE] Jemand hat sich ins Polizeisystem eingehackt!");
                    SendFraktionMessage(2, COLOR_RED, "[POLIZEIZENTRALE] Jemand hat sich ins Polizeisystem eingehackt!");
                    SendFraktionMessage(16, COLOR_RED, "[POLIZEIZENTRALE] Jemand hat sich ins Polizeisystem eingehackt!");
                    wantedcodename[playerid]=MAX_PLAYERS;
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug WantedCodes");
                    ShowPlayerDialog(playerid,DIALOG_WANTEDCODES3,DIALOG_STYLE_INPUT,"Wanted Anzahl","Gib die Anzahl der Wanteds ein die entfernt werden soll","Hacken","Zurück");
                }
            }
            else
            {
                ShowPlayerDialog(playerid,DIALOG_WANTEDCODES3,DIALOG_STYLE_INPUT,"Wanted Anzahl","Gib die Anzahl der Wanteds ein die entfernt werden soll","Hacken","Zurück");
                SendClientMessage(playerid,COLOR_RED,"Ungültige Wantedanzahl");
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_WANTEDCODES2,DIALOG_STYLE_INPUT,"Spielername","Gib den Spielernamen an dessen Wanteds du löschen möchtest","Weiter","Zurück");
        }
    }
    else if(dialogid==DIALOG_WANTEDCODES2)
    {
        if(response)
        {
            wantedcodename[playerid]=MAX_PLAYERS;
            if(strlen(inputtext)>=0)
            {
                for(new i;i<MAX_PLAYERS;i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(strcmp(GetName(i),inputtext,true)==0)
                        {
                            wantedcodename[playerid]=i;
                            ShowPlayerDialog(playerid,DIALOG_WANTEDCODES3,DIALOG_STYLE_INPUT,"Wanted Anzahl","Gib die Anzahl der Wanteds ein die entfernt werden soll","Hacken","Zurück");
                            break;
                        }
                    }
                    if(i==MAX_PLAYERS-1)
                    {
                        ShowPlayerDialog(playerid,DIALOG_WANTEDCODES2,DIALOG_STYLE_INPUT,"Spielername","Gib den Spielernamen an dessen Wanteds du löschen möchtest","Weiter","Zurück");
                        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spielername");
                    }
                }
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Du musst einen Spielernamen eingeben");
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_WANTEDCODES,DIALOG_STYLE_LIST,"Wantedhacking","Wanteds löschen\nGesuchten-Liste anzeigen\nAlle Cops anzeigen","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_WANTEDCODES)
    {
        if(response)
        {
            if(listitem==0)
            {
                ShowPlayerDialog(playerid,DIALOG_WANTEDCODES2,DIALOG_STYLE_INPUT,"Spielername","Gib den Spielernamen an dessen Wanteds du löschen möchtest","Weiter","Zurück");
            }
            else if(listitem==1)
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pWanteds] != 0)
                        {
                            new giveplayer[MAX_PLAYER_NAME], string[128];
                            GetPlayerName(i, giveplayer, sizeof(giveplayer));
                            format(string, sizeof(string), "%s[ID:%d]: %d", giveplayer,i,Spieler[i][pWanteds]);
                            SendClientMessage(playerid, COLOR_YELLOW, string);
                        }
                    }
                }
            }
            else if(listitem==2)
            {
                new
                    frak[50],
                    String[128],
                    bool:bBeamteOnline = false;
                String[0] = '\0';
                for(new i ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if( IsBeamter(i) )
                        {
                            if(!bBeamteOnline)
                            {
                                bBeamteOnline = true;
                                SendClientMessage(playerid,COLOR_YELLOW,"========BEAMTEN-LISTE========");
                            }
                            ReturnPlayerFraktion( i, frak );
                            if( String[0] )
                            {
                                format(String,sizeof(String),"%s,[%d] %s - %s",String,i,GetName(i), frak );
                            }
                            else
                            {
                                format(String,sizeof(String),"[%d] %s - %s",i,GetName(i), frak );
                            }
                            if( strlen(String) > 100 )
                            {
                                SendClientMessage(playerid,COLOR_GREEN,String);
                                String[0] = '\0';
                            }
                        }
                    }
                }
                if(!bBeamteOnline) {

                    SendClientMessage(playerid,COLOR_LIGHTRED2,"Es sind keine Beamten Online!");
                }
                else
                {
                    SendClientMessage(playerid,COLOR_GREY,String);
                }
            }
        }
    }
    else if(dialogid==DIALOG_POST3)
    {
        if(response)
        {
            new i,pfad[64];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",inputtext,i);
                if(fexist(pfad))
                {
                }
                else
                {
                    i=100;
                    break;
                }
            }
            if(i==100)
            {
                ShowPlayerDialog(playerid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)\nEin Brief kostet dich 2.000$","Weiter","Zurück");
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Brief nicht abschicken, da das Postfach des Empfängers voll ist!");
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint==0)
                    {
                        format(string,2000,"%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                    }
                }
            }
            ShowPlayerDialog(playerid,DIALOG_POST2,DIALOG_STYLE_LIST,"Ungelesene Briefe",string,"Lesen","Zurück");
            format(postpid[playerid],300,"%s",inputtext);
        }
    }
    else if(dialogid==DIALOG_POST2)
    {
        if(response)
        {
            new i,pfad[64],string[300];
            new str[100],str2[1000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint==0)
                    {
                        format(string,300,"%s, %s | Abs.: %s",datumstr,uhrzeitstr,absenderstr,string);
                        if(strcmp(inputtext,string,false)==0)
                        {
                            i=100;
                            format(briefstring,1000,"%s %s %s %s %s 0 0 1",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr);
                            new File:datei2=fopen(pfad,io_write);
                            fwrite(datei2,briefstring);
                            fclose(datei2);
                            format(str,100,"Brief von %s",absenderstr);
                            for(new leerzeichen;leerzeichen<1000;leerzeichen++)
                            {
                                if(strfind(textinhaltstr,"?",true)!=-1)
                                {
                                    strins(textinhaltstr," ",strfind(textinhaltstr,"?",true));
                                    strdel(textinhaltstr,strfind(textinhaltstr,"?",true),strfind(textinhaltstr,"?",true)+1);
                                }
                                else
                                {
                                    leerzeichen=1000;
                                }
                            }
                            if(strlen(textinhaltstr)>450)
                            {
                                strins(textinhaltstr,"\n",450);
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>300)
                            {
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>150)
                            {
                                strins(textinhaltstr,"\n",150);
                            }
                            format(str2,1000,"Von: %s\nDatum: %s %s\n\nNachricht:\n%s",absenderstr,datumstr,uhrzeitstr,textinhaltstr);
                            format(postpsenden[playerid],MAX_PLAYER_NAME,"%s",absenderstr);
                            break;
                        }
                    }
                }
            }
            ShowPlayerDialog(playerid,DIALOG_POST3,DIALOG_STYLE_MSGBOX,str,str2,"Antworten","Zurück");
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST)
    {
        if(response)
        {
            if(listitem==0)
            {
                new i,pfad[64],string[2000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint==0)
                        {
                            format(string,2000,"%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                        }
                    }
                }
                ShowPlayerDialog(playerid,DIALOG_POST2,DIALOG_STYLE_LIST,"Ungelesene Briefe",string,"Lesen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
            else if(listitem==1)
            {
                if(CheckMoney(playerid)>=2500)
                {
                    new i,pfad[64];
                    for(;i<50;i++)
                    {
                        format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",inputtext,i);
                        if(fexist(pfad))
                        {
                        }
                        else
                        {
                            i=100;
                            break;
                        }
                    }
                    if(i==100)
                    {
                        ShowPlayerDialog(playerid,DIALOG_POST4,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Spielernamen ein","Weiter","Zurück");
                    }
                    else
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Brief nicht abschicken da dein Postfach voll ist, lösche deine Briefe unter abgesendete Briefe");
                    }
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt keine 2.500$ um einen Brief zu schreiben");
                    ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
                }
            }
            else if(listitem==2)
            {
                new i,pfad[64],string[2000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint!=0)
                        {
                            format(string,2000,"\n%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                        }
                    }
                }
                strins(string,"Alle Briefe löschen\n",0);
                ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Empfangene Briefe",string,"Lesen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
            else if(listitem==3)
            {
                new i,pfad[64],string[2000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        format(string,2000,"\n%s, %s | Empf.: %s\n%s",datumstr,uhrzeitstr,empfangsstr,string);
                    }
                }
                strins(string,"Alle Briefe löschen\n",0);
                ShowPlayerDialog(playerid,DIALOG_POST9,DIALOG_STYLE_LIST,"Gesendete Briefe",string,"Lesen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
        }
    }
    else if(dialogid==DIALOG_POST9)
    {
        if(response)
        {
            if(listitem==0)
            {
                new i,pfad[64];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        ShowPlayerDialog(playerid,DIALOG_POST10,DIALOG_STYLE_MSGBOX,"Alle Briefe löschen","Bist du dir sicher dass du alle gesendeten Briefe löschen möchtest?","Ja","Nein");
                        break;
                    }
                    else if(i==49)
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du hast keinen abgesendeten Brief den du löschen kannst");
                    }
                }
            }
            else
            {
                new i,pfad[64],string[300],str[100],str2[1000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        format(string,300,"%s, %s | Empf.: %s",datumstr,uhrzeitstr,empfangsstr);
                        if(strcmp(inputtext,string,false)==0)
                        {
                            i=100;
                            format(str,100,"Brief an %s",empfangsstr);
                            for(new leerzeichen;leerzeichen<1000;leerzeichen++)
                            {
                                if(strfind(textinhaltstr,"?",true)!=-1)
                                {
                                    strins(textinhaltstr," ",strfind(textinhaltstr,"?",true));
                                    strdel(textinhaltstr,strfind(textinhaltstr,"?",true),strfind(textinhaltstr,"?",true)+1);
                                }
                                else
                                {
                                    leerzeichen=1000;
                                }
                            }
                            if(strlen(textinhaltstr)>450)
                            {
                                strins(textinhaltstr,"\n",450);
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>300)
                            {
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>150)
                            {
                                strins(textinhaltstr,"\n",150);
                            }
                            format(str2,1000,"An: %s\nDatum: %s %s\n\nNachricht:\n%s",empfangsstr,datumstr,uhrzeitstr,textinhaltstr);
                            format(postpsenden[playerid],MAX_PLAYER_NAME,"%s",absenderstr);
                            format(postpid[playerid],300,"%s",inputtext);
                            ShowPlayerDialog(playerid,DIALOG_POST11,DIALOG_STYLE_MSGBOX,str,str2,"Löschen","Zurück");
                            break;
                        }
                    }
                }
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST6)
    {
        if(response)
        {
            if(listitem==0)
            {
                for(new i;i<50;i++)
                {
                    new pfad[64];
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint!=0)
                        {
                            ShowPlayerDialog(playerid,DIALOG_POST8,DIALOG_STYLE_MSGBOX,"Alle Briefe löschen","Bist du dir sicher dass du alle empfangenen Briefe (nicht ungelesene) löschen möchtest?","Ja","Nein");
                        }
                    }
                    else if(i==49)
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du hast keinen empfangenen Brief den du löschen kannst");
                    }
                }
            }
            else
            {
                new i,pfad[64],string[300],str[100],str2[1000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint!=0)
                        {
                            format(string,300,"%s, %s | Abs.: %s",datumstr,uhrzeitstr,absenderstr);
                            if(strcmp(inputtext,string,false)==0)
                            {
                                i=100;
                                format(str,100,"Brief von %s",absenderstr);
                                for(new leerzeichen;leerzeichen<1000;leerzeichen++)
                                {
                                    if(strfind(textinhaltstr,"?",true)!=-1)
                                    {
                                        strins(textinhaltstr," ",strfind(textinhaltstr,"?",true));
                                        strdel(textinhaltstr,strfind(textinhaltstr,"?",true),strfind(textinhaltstr,"?",true)+1);
                                    }
                                    else
                                    {
                                        leerzeichen=1000;
                                    }
                                }
                                if(strlen(textinhaltstr)>450)
                                {
                                    strins(textinhaltstr,"\n",450);
                                    strins(textinhaltstr,"\n",300);
                                    strins(textinhaltstr,"\n",150);
                                }
                                else if(strlen(textinhaltstr)>300)
                                {
                                    strins(textinhaltstr,"\n",300);
                                    strins(textinhaltstr,"\n",150);
                                }
                                else if(strlen(textinhaltstr)>150)
                                {
                                    strins(textinhaltstr,"\n",150);
                                }
                                format(str2,1000,"Von: %s\nDatum: %s %s\n\nNachricht:\n%s",absenderstr,datumstr,uhrzeitstr,textinhaltstr);
                                break;
                            }
                        }
                    }
                }
                ShowPlayerDialog(playerid,DIALOG_POST7,DIALOG_STYLE_MSGBOX,str,str2,"Löschen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST8)
    {
        if(response)
        {
            new i,pfad[64];
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
            SendClientMessage(playerid,COLOR_YELLOW,"Es wurden erfolgreich alle empfangenen Briefe gelöscht");
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        fremove(pfad);
                    }
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        format(string,2000,"\n%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                    }
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Empfangene Briefe",string,"Lesen","Zurück");
            format(postpid[playerid],300,"%s",inputtext);
        }
    }
    else if(dialogid==DIALOG_POST7)
    {
        if(response)
        {
            for(new i;i<50;i++)
            {
                new pfad[64],string[300];
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        format(string,300,"%s, %s | Abs.: %s",datumstr,uhrzeitstr,absenderstr);
                        if(strcmp(postpid[playerid],string,false)==0)
                        {
                            i=100;
                            fremove(pfad);
                            SendClientMessage(playerid,COLOR_YELLOW,"Der Brief wurde erfolgreich gelöscht");
                            break;
                        }
                    }
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        format(string,2000,"\n%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                    }
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Empfangene Briefe",string,"Lesen","Zurück");
        }
    }
    else if(dialogid==DIALOG_POST10)
    {
        if(response)
        {
            new i,pfad[64];
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
            SendClientMessage(playerid,COLOR_YELLOW,"Es wurden erfolgreich alle gesendeten Briefe gelöscht");
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    fremove(pfad);
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    format(string,2000,"\n%s, %s | Empf.: %s\n%s",datumstr,uhrzeitstr,empfangsstr,string);
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Gesendete Briefe",string,"Lesen","Zurück");
        }
    }
    else if(dialogid==DIALOG_POST11)
    {
        if(response)
        {
            for(new i;i<50;i++)
            {
                new pfad[64],string[300];
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    format(string,300,"%s, %s | Empf.: %s",datumstr,uhrzeitstr,empfangsstr);
                    if(strcmp(postpid[playerid],string,false)==0)
                    {
                        i=100;
                        fremove(pfad);
                        SendClientMessage(playerid,COLOR_YELLOW,"Der Brief wurde erfolgreich gelöscht");
                        break;
                    }
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    format(string,2000,"\n%s, %s | Empf.: %s\n%s",datumstr,uhrzeitstr,empfangsstr,string);
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST9,DIALOG_STYLE_LIST,"Gesendete Briefe",string,"Lesen","Zurück");
        }
    }
    else if(dialogid==DIALOG_POST4)
    {
        if(response)
        {
            if(strlen(inputtext)>=1)
            {
                new query[256];
                format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s'",inputtext);
                format(postpsenden[playerid],MAX_PLAYER_NAME,"%s",inputtext);
                mysql_pquery(query , THREAD_POSTCHANGE , playerid, gSQL,MySQLThreadOwner);
            }
            else
            {
                ShowPlayerDialog(playerid,DIALOG_POST4,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Spielernamen ein","Weiter","Zurück");
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST5)
    {
        if(response)
        {
            if(strlen(inputtext)>=1)
            {
                if(strlen(inputtext)<=500)
                {
                    CreateBrief(GetName(playerid),postpsenden[playerid],inputtext);
                    GivePlayerCash(playerid,-2500);
                }
                else
                {
                    new string[50];
                    format(string,50,"Maximal 500 Zeichen, es waren {FF0000}%i",strlen(inputtext));
                    SendClientMessage(playerid,COLOR_YELLOW,string);
                    ShowPlayerDialog(playerid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)","Weiter","Zurück");
                }
            }
            else
            {
                ShowPlayerDialog(playerid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)","Weiter","Zurück");
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST4,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Spielernamen ein","Weiter","Zurück");
        }
    }
    switch(dialogid)
    {
        /*
        case DIALOG_PEILSENDER_LISTE: {
            if(response) {
                Spieler[playerid][pPeilsenderTemp] = listitem;
                ShowPeilsender(playerid,1);
            }
            else {
                Spieler[playerid][pPeilsenderTemp] = -1;
            }
        }
        case DIALOG_PEILSENDER_KAUFEN: {
            if(response) {
                new
                    index,
                    slot,
                    vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                index = ( Spieler[playerid][pPeilsenderTemp] - 1 );
                if( GetPlayerMoney(playerid) < g_Peilsender[index][P_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld um diesen Peilsender zu kaufen");
                }
                if(!vehicleid) {
                    return SendClientMessage(playerid,COLOR_RED,"Du musst in deinem Privatfahrzeug sitzen!");
                }
                if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
                    return SendClientMessage(playerid,COLOR_RED,"Nur als Fahrer kannst du diese Funktion ausführen");
                }
                if( playerid != GetCarOwner(vehicleid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht!");
                }
                slot = GetCarOwnerSlot(playerid, vehicleid);
                if( slot == 555 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht!");
                }
                new
                    String[128];
                PlayerCar[playerid][slot][CarPeilsender] = index;
                CreatePeilsender(playerid,slot);
                format(String,sizeof(String),"Peilsender %s dem Fahrzeug hinzugefügt!", g_Peilsender[index][P_sText] );
                SendClientMessage(playerid,COLOR_GREEN,String);
                GivePlayerCash(playerid,-g_Peilsender[index][P_iPrice]);
            }
            else {
                ShowPeilsender(playerid);
            }
        }
        */
        case DIALOG_WARTUNG: {
            if(response) {
                new
                    besitzer,
                    vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                if(!vehicleid) {
                    return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Fahrzeug.");
                }
                besitzer = GetCarOwner(vehicleid);
                if( besitzer == INVALID_PLAYER_ID || playerid != besitzer ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht.");
                }
                new
                    slot = GetCarOwnerSlot(playerid, vehicleid);
                if( PlayerCar[besitzer][slot][TUV] == 0 || IsBicycle(GetVehicleModel(vehicleid))) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug benötigt keine Wartung vom TÜV.");
                }
                if( Spieler[playerid][pCash] < 25000) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld um die TÜV Wartung in Höhe von $25.000 zu begleichen.");
                }
                Spieler[playerid][pCash] -= 25000;
                SendClientMessage(playerid,COLOR_YELLOW,"Dein Fahrzeug hat TÜV bestanden. Gute Fahrt! (-$25.000).");
                PlayerCar[besitzer][slot][TUV] = 0;
            }
        }
        case DIALOG_REGSPERRE: {
            return Kick(playerid);
        }
        case DIALOG_HAUSMENU_EMPTY: {
            return cmd_hausmenu(playerid,"");
        }
        case DIALOG_PASSWORD_UPDATE: {
            if(response) {
                if( !IsSecurePassword(inputtext) ) {
                    return ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
                }
                new
                    escaped_password[30];
                mysql_real_escape_string( inputtext, escaped_password );
                if( strcmp( inputtext , escaped_password ) ) {
                    return ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
                }
                UpdateUserPassword(playerid,inputtext);
            }
            else {
                ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_EDIT: {
            if(response) {
                new
                    h,
                    index;
                if( sscanf(inputtext,"p<)>d{S[64]}",index) ) {
                    printf("Fehler bei sscanf DIALOG_HAUSMENU_MOEBEL_EDIT");
                }
                h = Spieler[playerid][pPlayerHouse];
                Streamer_Update(playerid);
                EditDynamicObject(playerid,g_HausMoebelObjekt[h][index][HMO_iObjectID]);
                Streamer_Update(playerid);
                Spieler[playerid][pEditObjectMode] = 1;
                // Listitem auslesen
                return 1;
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_BUY_ITEM_CONFIRM: {
            if(response) {
                new
                    String[200],
                    Float:x,
                    Float:y,
                    Float:z,
                    h,
                    index,
                    item,
                    slot;
                h = Spieler[playerid][pPlayerHouse];
                slot = GetHausMoebelFreeSlot(h);
                item = Spieler[playerid][pTempMoebelID];
                index = GetHausMoebelIndex(item);
                if( Spieler[playerid][pCash] < g_HausMoebel[index][HM_iModelID] ) {
                    ShowPlayerHausMoebel(playerid,5);
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um dieses Möbelstück zu kaufen");
                    return 1;
                }
                GetPlayerPos(playerid,x,y,z);
                Spieler[playerid][pEditObjectMode] = 1;
                // HMO_iID,
                // HMO_iHouseID,
                g_HausMoebelObjekt[h][slot][HMO_iMoebelID] = item;
                g_HausMoebelObjekt[h][slot][HMO_iObjectID] = CreateDynamicObject(  g_HausMoebel[index][HM_iModelID], x + 0.3, y + 0.3, z + 0.75,0.0,0.0,0.0, GetPlayerVirtualWorld(playerid) , GetPlayerInterior(playerid) );
                Streamer_SetIntData(STREAMER_TYPE_OBJECT,g_HausMoebelObjekt[h][slot][HMO_iObjectID],E_STREAMER_EXTRA_ID,slot);
                Streamer_Update(playerid);
                EditDynamicObject(playerid,g_HausMoebelObjekt[h][slot][HMO_iObjectID]);
                Streamer_Update(playerid);
                format(String,sizeof(String),"Du hast folgendes Möbelstück gekauft: %s (-$%s)",g_HausMoebel[index][HM_sTitel], AddDelimiters(g_HausMoebel[index][HM_iPrice]));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                GivePlayerCash(playerid, -g_HausMoebel[index][HM_iPrice]);

                // DB ID holen
                format(String,sizeof(String),"INSERT INTO `hausmoebel` (`id`, `houseid`, `moebelid`, `x`, `y`, `z`, `rx`, `ry`, `rz`) \
                                            VALUES (NULL, '%d', '%d', '%.3f', '%.3f', '%.3f', '%.3f', '%.3f', '%.3f')",
                                            GetHouseIDByIndex(h),item,0.0,0.0,0.0,0.0,0.0,0.0);
                mysql_oquery( String ,  THREAD_CREATEHAUSMOEBEL , Hausmoebel_Compress(h,slot) ,gSQL);
            }
            else {
                return ShowPlayerHausMoebel(playerid,5);
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_SELL_CONFIRM: {
            if(response) {
                // Verkauft!
                new
                    String[128],
                    item,
                    h,
                    moebel_index,
                    index,
                    payback;
                h = Spieler[playerid][pPlayerHouse];
                index = Spieler[playerid][pTempMoebelID];
                item = g_HausMoebelObjekt[h][index][HMO_iMoebelID];
                moebel_index = GetHausMoebelIndex(item);
                /*
                printf("item %d",item);
                printf("index %d",index);
                printf("moebel_index %d",moebel_index);
                */
                payback = ( g_HausMoebel[moebel_index][HM_iPrice] / 2 );
                Spieler[playerid][pCash] += payback ;
                format(String,sizeof(String),"Du hast erfolgreich folgendes Möbelstück verkauft: %s (+$%s)",g_HausMoebel[moebel_index][HM_sTitel], AddDelimiters(payback));
                SendClientMessage(playerid,COLOR_GREEN,String);
                format(String,sizeof(String),"DELETE FROM `hausmoebel` WHERE `id` = %d", g_HausMoebelObjekt[h][index][HMO_iID]);
                mysql_oquery( String , THREAD_DELETEHAUSMOEBEL , playerid ,gSQL);
                Hausmoebel_ResetHausMoebel(h,index);
            }
            else {
                ShowPlayerHausMoebel(playerid,0);
            }
            return 1;
        }
        case DIALOG_HAUSMENU_MOEBEL_SELL: {
            if(response) {
                new
                    index;
                if( sscanf(inputtext,"p<)>d{S[64]}",index) ) {
                    printf("Fehler bei sscanf DIALOG_HAUSMENU_MOEBEL_SELL");
                }
                Spieler[playerid][pTempMoebelID] = index;
                ShowPlayerHausMoebel(playerid,3);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_BUY_ITEM: {
            if(response) {
                new
                    item = GetMoebelKategorieItem(Spieler[playerid][pTempMoebelKategorie],listitem);
                Spieler[playerid][pTempMoebelID] = item;
                return ShowPlayerHausMoebel(playerid,6);
            }
            else {
                return ShowPlayerHausMoebel(playerid,2);
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_BUY_KAT: {
            if(response) {
                Spieler[playerid][pTempMoebelKategorie] = listitem + 1;
                ShowPlayerHausMoebel(playerid,5);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMOEBEL_KATALOG_EX: {
            return ShowHausMoebelKatalog(playerid,0);
        }
        case DIALOG_HAUSMOEBEL_KATALOG: {
            if(response) {
                return ShowHausMoebelKatalog(playerid,listitem + 1);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MIETPREIS: {
            if(response) {
                cmd_mietpreis(playerid,inputtext);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MIETERANZAHL: {
            if(response)
            {
                new h = GetPlayerHouse(playerid);
                if( h == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Haus!");
                /*
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
                */
                if( Spieler[playerid][pPlayerHouse] != h ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Haus gehört nicht dir!");
                }
                if( !IsPlayerInHouse(playerid, Haus[h][hID]) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in deinem Haus");
                }
                new anzahl;
                if(sscanf(inputtext,"d",anzahl)) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < 1 || anzahl > 10 ) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < Haus[h][hMieterAnzahl] ) return SendClientMessage(playerid, COLOR_RED, "Es sind zu viele Spieler in das Haus eingemietet, um die Grenze auf diesen Wert festzulegen");
                new Str[80];
                format(Str, sizeof(Str), "Die maximale Anzahl an Mietern wurde auf %d geändert", anzahl);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                Haus[h][hMieterMax] = anzahl;
                UpdateHouseText(h);
            }
            return cmd_hausmenu(playerid,"");
        }
        case DIALOG_HAUSMENU: {
            if(response) {
                new pHouse = GetPlayerHouse(playerid);
                if( Spieler[playerid][pPlayerHouse] != pHouse ) {
                    return SendClientMessage(playerid, COLOR_RED, "Dieses Haus gehört nicht dir.");
                }
                if( !IsPlayerInHouse(playerid, Haus[pHouse][hID]) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in deinem Haus");
                }

                if(listitem == 0 ) { // Haustuer AUF/ZU
                    if( Haus[pHouse][hLock] == 0 ) {
                        cmd_haustuer(playerid,"ZU");
                    }
                    else {
                        cmd_haustuer(playerid,"AUF");
                    }
                    return cmd_hausmenu(playerid,"");
                }
                else if(listitem == 1 ) { // Mietstatus: AN/AUS
                    new rentable[12];
                    if(Haus[pHouse][hMieten]==0){
                        rentable="An";
                    }
                    else {
                        rentable="Aus";
                    }
                    cmd_hausmietung(playerid,rentable);
                    return cmd_hausmenu(playerid,"");
                }
                else if(listitem == 2 ) { // Mieter anzeigen
                    cmd_hausmieter(playerid,"");
                    return cmd_hausmenu(playerid,"");
                }
                else if(listitem == 3 ) { // Mieteranzahl ändern
                    new String[160];
                    format(String, sizeof(String), COLOR_HEX_WHITE"Möchtest du wirklich die maximale Anzahl an Mietern des Hauses ändern?\nDerzeitige maximale Anzahl: "COLOR_HEX_ORANGE"%d"COLOR_HEX_WHITE"\nDerzeitige Mieter Anzahl: "COLOR_HEX_ORANGE"%d", Haus[pHouse][hMieterMax], Haus[pHouse][hMieterAnzahl]);
                    ShowPlayerDialog(playerid, DIALOG_HAUSMENU_MIETERANZAHL, DIALOG_STYLE_INPUT, "Anzahl Hausmieter", String, "Ändern", "Abbrechen");
                }
                else if(listitem == 4 ) { // Mietpreis ändern
                    new String[160];
                    format(String, sizeof(String), COLOR_HEX_WHITE"Möchtest du wirklich den aktuellen Mitpreis ändern??\nDerzeitiger Mietpreis: "COLOR_HEX_ORANGE"%d"COLOR_HEX_WHITE, Haus[pHouse][hMietPreis]);
                    ShowPlayerDialog(playerid, DIALOG_HAUSMENU_MIETPREIS, DIALOG_STYLE_INPUT, "Höhe Mietpreis", String, "Ändern", "Abbrechen");
                }
                else if(listitem == 5 ) { // Möbelkatalog
                    return ShowHausMoebelKatalog(playerid,0);
                }
                else if(listitem == 6 ) { // Möbel aufbauen/umstellen
                    return ShowPlayerHausMoebel(playerid,2);
                }
                else if(listitem == 7 ) { // Möbel bearbeiten
                    return ShowPlayerHausMoebel(playerid,7);
                }
                else if(listitem == 8 ) { // Möbel verkaufen
                    return ShowPlayerHausMoebel(playerid,0);
                }
            }
        }
        case DIALOG_PARKSCHEIN: {
            if(response) {
                new automat = IsPlayerAtParkautomat(playerid);
                if(automat == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Parkschein Automat.");
                if(!PlayerHaveCar[playerid][PlayerKey[playerid]]) SendClientMessage(playerid, COLOR_RED, "Auf dem ausgewählten Schlüssel ist kein Fahrzeug.");
                new vehicleid = PlayerCar[playerid][ PlayerKey[playerid] ][CarId];
                if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "Es ist ein unerwarteter Fehler aufgetreten");
                if( g_Parkschein[vehicleid] > gettime() ) return SendClientMessage(playerid, COLOR_RED, "Dieses Fahrzeug hat bereits einen gültigen Parkschein");
                if(Spieler[playerid][pCash] < 300) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten 300$ für ein Parkschein");
                new
                    String[128];
                format(String,sizeof(String),"Du hast einen Parkschein für dein %s gekauft. -300$", CarName[ PlayerCar[playerid][ PlayerKey[playerid] ][CarModel] - 400] );
                SendClientMessage(playerid,COLOR_ORANGE,String);
                g_Parkschein[vehicleid] = gettime() + 3*60*60;
                GivePlayerCash(playerid,-300);
            }
        }
        case DIALOG_SNACKSHOP: {
            if(response) {
                if (listitem < 0) return SendClientMessage(playerid, COLOR_RED, "Keine gültige Auswahl.");
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tanke!");
                if(strcmp(Tanke[t][tBesitzer], "Niemand", true) == 0)return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat keinen Besitzer.");

                if (listitem >= sizeof(g_SnackShop)) {
                    if (Spieler[playerid][pKanister] >= 3) return SendClientMessage(playerid, COLOR_RED, "Du hast bereits drei Kanister.");
                    if (Tanke[t][tBenzin] < 10) return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat zu wenig Benzin dafür.");
                    if (Spieler[playerid][pCash] < 2500) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dafür.");
                    GivePlayerCash(playerid, -2500);
                    Tanke[t][tKasse] += 2500;
                    Spieler[playerid][pKanister]++;
                    return SendClientMessage(playerid, COLOR_YELLOW, "Du hast dir einen Kanister mit 10 Litern für $2.500 gekauft.");
                }

                new price = g_SnackShop[listitem][SS_iPrice];
                new hp = g_SnackShop[listitem][SS_iHP];
                if( Spieler[playerid][pCash] < price ) {
                    return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld für diesen Snack.");
                }
                new String[128], Float:health;
                GetPlayerHealth(playerid, health);
                SetPlayerHealth(playerid, health + hp > 100.0 ? 100.0 : health + hp);
                GivePlayerCash(playerid, -price);
                Tanke[t][tKasse] += price;
                format(String,sizeof(String),"Du hast dir ein %s für $%d gekauft. +%d HP",g_SnackShop[listitem][SS_sTitle], price, hp);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 0, 0, 0, 0);//Essen
            }
        }
        case DIALOG_WPREIS: {
            if(response) {
                // Hat bestätigt
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                if( Spieler[playerid][pCash] < g_WheelmenD[modus][W_iPrice] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen.");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld auf der Hand für dieses Angebot");
                }
                /*
                if( Spieler[playerid][ g_FahrPruefung[modus][FP_iVar] ] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast bereits die Lizenz");
                }
                */
                Kasse[Wheelmenk] += g_WheelmenD[modus][W_iPrice];
                GivePlayerCash(playerid, -g_WheelmenD[modus][W_iPrice] );
                format(String,sizeof(String),"Spieler %s hat das Angebot zum %s angenommen",GetName(playerid), g_WheelmenD[modus][W_sName]);
                SendClientMessage(giveid,COLOR_GREEN,String);
            }
            else {
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                format(String,sizeof(String),"Spieler %s hat dein Angebot abgelehnt. Leistung: %s",GetName(playerid),g_WheelmenD[modus][W_sName]);
                SendClientMessage(giveid,COLOR_ORANGE,String);
            }
            Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
        }
        case DIALOG_FPREIS: {
            if(response) {
                // Hat bestätigt
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                if( Spieler[playerid][pCash] < g_FahrPruefung[modus][FP_iPrice] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld auf der Hand für dieses Angebot");
                }
                /*
                if( Spieler[playerid][ g_FahrPruefung[modus][FP_iVar] ] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast bereits die Lizenz");
                }
                */
                Kasse[Fahrschule] += g_FahrPruefung[modus][FP_iPrice];
                GivePlayerCash(playerid, -g_FahrPruefung[modus][FP_iPrice] );
                format(String,sizeof(String),"Spieler %s hat das Angebot zum %s angenommen",GetName(playerid), g_FahrPruefung[modus][FP_sName]);
                SendClientMessage(giveid,COLOR_GREEN,String);
                fahrlehrerboni[giveid] += 1000;
            }
            else {
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                format(String,sizeof(String),"Spieler %s hat dein Angebot zur %s Prüfung abgelehnt",GetName(playerid),g_FahrPruefung[modus][FP_sName]);
                SendClientMessage(giveid,COLOR_ORANGE,String);
            }
            Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
        }
        case DIALOG_GUTSCHEINCODE: {
            if(response) {
                new
                    clean_inputtext[64],
                    Query[128];
                mysql_real_escape_string(inputtext,clean_inputtext);
                PlayerSQLExtra(playerid,clean_inputtext);
                format(Query,sizeof(Query),"SELECT * FROM `gutschein` WHERE `code` = '%s'",clean_inputtext);
                mysql_pquery( Query , THREAD_GUTSCHEINCODE_CHECK , playerid, gSQL,MySQLThreadOwner);
            }
        }
        case DIALOG_FIRMENINFO: {
            if(response) {
                new String[1024];
                String = "Firma\tBesitzer\tGehalt\n";
                for(new i ; i < sizeof(g_Firma);i++) {
                    format(String,sizeof(String),"%s%s\t%s\t$%s\n",String,g_Firma[i][F_sBezeichnung],g_Firma[i][F_sBesitzer], AddDelimiters(g_Firma[i][F_iGehalt]));
                }
                ShowPlayerDialog(playerid,DIALOG_FIRMENUEBERSICHT,DIALOG_STYLE_TABLIST_HEADERS,"Firmenübersicht",String,"Schließen","");
            }
        }
        case DIALOG_ZOLLPASS: {
            if(response) {
                if( Spieler[playerid][pCash] < 15000 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Der Zollpass kostet $15.000!");
                }
                new
                    String[128],
                    year,
                    m,
                    d,
                    h,
                    minute,
                    sec;
                Spieler[playerid][pZollValid] = gettime() + 7*24*60*60;
                TimestampToDate( Spieler[playerid][pZollValid] , year,m,d,h,minute,sec,1,0);
                format(String,sizeof(String),"Du hast einen Zollpass der bis zum %02d/%02d/%d gültig ist für $15.000 gekauft!",d,m,year );
                SendClientMessage(playerid,COLOR_GREEN,String);
                GivePlayerCash(playerid, -15000);
                Kasse[Staat] += 15000;
            }
        }
        case DIALOG_RECHTSSCHUTZ: {
            if(response) {
                if( Spieler[playerid][pCash] < 87000 ) {
                 return SendClientMessage(playerid,COLOR_RED,"Die Rechtsschutzversicherung kostet $87.000. So viel Geld hast du nicht dabei.");
                }
                new
                    String[128],
                    year,
                    m,
                    d,
                    h,
                    minute,
                    sec;
                Spieler[playerid][pExperte] = gettime() + 62*24*60*60;
                TimestampToDate( Spieler[playerid][pExperte] , year,m,d,h,minute,sec,1,0);
                format(String,sizeof(String),"Du hast eine Rechtsschutzversicherung abgeschlossen! Gültig bis zum %02d/%02d/%d. Preis: $87.000",d,m,year );
                SendClientMessage(playerid,COLOR_GREEN,String);
                GivePlayerCash(playerid, -87000);
                Kasse[Staat] += 87000;
            }
        }
        case DIALOG_STARTBAUER: {
            if(response) {
                if(listitem == 0 ) {
                    if(!(Spieler[playerid][pJob] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");
                    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
                        SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment.");
                        return 1;
                    }
                    new vID = GetPlayerVehicleID(playerid);
                    if(vID) {
                        for(new i=0;i<sizeof(combines);i++)
                        {
                            if(vID == combines[i])
                            {
                                SetPlayerCheckpointEx(playerid, 16.6802,43.9293,3.1172, 5.0, CP_HARVEST1);
                                SendClientMessage(playerid, COLOR_GREEN, "Du hast die Runde begonnen. Fahre nun die roten Kreise ab.");
                                Spieler[playerid][pCowJob] = 1;
                                return 1;
                            }
                        }
                    }
                    SendClientMessage(playerid, COLOR_YELLOW, "Begib dich zu einem Mähdräscher, um den Dienst zu starten.");
                }
                else if(listitem == 1 ) {
                    if(!(Spieler[playerid][pJob] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");

                    PreloadAnimLib(playerid,"CAR");
                    PreloadAnimLib(playerid,"COP_AMBIENT");
                    PreloadAnimLib(playerid,"MISC");
                    PreloadAnimLib(playerid,"ROB_BANK");

                    SendClientMessage(playerid,COLOR_YELLOW,"Begib dich zu den Kühen und melken sie.");
                    StartPlayerCow(playerid);
                    Spieler[playerid][pCowJob] = 2;
                }
            }
        }
        case DIALOG_BIZKEY: {
            if(response) {
                if(listitem == 0 ) {
                    if( Spieler[playerid][pPlayerBiz] != 999 ) {
                        new
                            String[128];
                        format(String,sizeof(String),"Dein aktives Biz ist immernoch %s.",Biz[ Spieler[playerid][pPlayerBiz] ][bName]);
                        SendClientMessage(playerid,COLOR_YELLOW,String);
                    }
                    else {
                        SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    }
                }
                else if( listitem == 1 ) {
                    if( Spieler[playerid][pPremiumBizSlot] == 1 ) {
                        new
                            temp;
                        temp = Spieler[playerid][pPlayerBizEx];
                        Spieler[playerid][pPlayerBizEx] = Spieler[playerid][pPlayerBiz];
                        Spieler[playerid][pPlayerBiz] = temp;
                        if ( temp != 999 ) {
                            // Keys switchen
                            new
                                String[128];
                            format(String,sizeof(String),"Du hast als aktives Biz %s ausgewählt.",Biz[ temp ][bName]);
                            SendClientMessage(playerid,COLOR_YELLOW,String);
                        }
                        else {
                            // Leeren key gewählt
                            SendClientMessage(playerid,COLOR_WHITE,"Du hast als aktives Biz einen freien Slot ausgewählt.");
                        }
                    }
                    else {
                        SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    }
                }
            }
        }
        case DIALOG_CLUBNEON: {
            if(response) {
                new
                    vehicleid,
                    Slot;
                vehicleid = GetPlayerVehicleID(playerid);
                if( !vehicleid ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Fahrzeug für diese Funktion.");
                }
                new owner = GetCarOwner( vehicleid );
                if( owner != playerid ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört nicht dir.");
                }
                Slot = GetCarOwnerSlot( playerid, vehicleid );
                if(listitem == 0 ) {
                    SendClientMessage(playerid,COLOR_RED,"Club-Neon von deinem Fahrzeug entfernt.");
                    PlayerCar[playerid][Slot][CarNeon1] = 0;
                    PlayerCar[playerid][Slot][CarNeon2] = 0;
                    DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon1]);
                    DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon2]);
                    PlayerCar[playerid][Slot][ObjectIDNeon1] = INVALID_OBJECT_ID;
                    PlayerCar[playerid][Slot][ObjectIDNeon2] = INVALID_OBJECT_ID;
                }
                else {
                    if( Spieler[playerid][pCash] < 10000 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld. Der Preis beträgt $10.000.");
                    }
                    if(listitem == 1 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18648;
                        PlayerCar[playerid][Slot][CarNeon2] = 18648;
                    }
                    else if(listitem == 2 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18647;
                        PlayerCar[playerid][Slot][CarNeon2] = 18647;
                    }
                    else if(listitem == 3 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18649;
                        PlayerCar[playerid][Slot][CarNeon2] = 18649;
                    }
                    else if(listitem == 4 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18652;
                        PlayerCar[playerid][Slot][CarNeon2] = 18652;
                    }
                    else if(listitem == 5 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18651;
                        PlayerCar[playerid][Slot][CarNeon2] = 18651;
                    }
                    else if(listitem == 6 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18650;
                        PlayerCar[playerid][Slot][CarNeon2] = 18650;
                    }
                    if(PlayerCar[playerid][Slot][CarNeon1] != 0 && PlayerCar[playerid][Slot][CarNeon2] != 0){
                        DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon1]);
                        DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon2]);

                        PlayerCar[playerid][Slot][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon1], 0,0,0,0,0,0,0);
                        AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon1] , PlayerCar[playerid][Slot][CarId], -0.8, 0.0, -0.8, 0.0, 0.0, 0.0);
                        PlayerCar[playerid][Slot][ObjectIDNeon2] = CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon2], 0,0,0,0,0,0,0);
                        AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon2] , PlayerCar[playerid][Slot][CarId], 0.8, 0.0, -0.8, 0.0, 0.0, 0.0);
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Club-Neon in der Farbe %s am Fahrzeug hinzugefügt! ( -$%s )",inputtext, AddDelimiters(10000));
                    SendClientMessage(playerid,COLOR_WHITE,String);
                    GivePlayerCash(playerid,-10000);
                }
            }
            return 1;
        }
        case DIALOG_TANKSTELLEN_VIDEO: {
            if(response) {
                new
                    tank_index = Spieler[playerid][pPlayerTank];
                if(tank_index == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keine Tankstelle.");
                if(strcmp(GetName(playerid), Tanke[tank_index][tBesitzer], true) == 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 2.0, Tanke[tank_index][EnterX], Tanke[tank_index][EnterY], Tanke[tank_index][EnterZ]))
                    {
                        if( Spieler[playerid][pCash] < 30000 ) {
                            SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei, um dieses Feature zu kaufen.");
                            return 1;
                        }
                        if( Tanke[tank_index][tVideoueberwachung] == true ) {
                            SendClientMessage(playerid, COLOR_RED, "Deine Tankstelle hat bereits diese Feature.");
                            return 1;
                        }
                        SendClientMessage(playerid,COLOR_GREEN,"Glückwunsch, du hast deine Tankstelle mit der Sicherheitsoption 'Videoüberwachung' ausgestattet.");
                        GivePlayerCash(playerid,-30000);
                        Tanke[tank_index][tVideoueberwachung] = true;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du musst vor deiner Tankstelle stehen.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Tankstelle gehört dir nicht.");
                    return 1;
                }
            }
        }
        case DIALOG_TANKSTELLEN_AUTONOTRUF: {
            if(response) {
                new
                    tank_index = Spieler[playerid][pPlayerTank];
                if(tank_index == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keine Tankstelle.");
                if(strcmp(GetName(playerid), Tanke[tank_index][tBesitzer], true) == 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 2.0, Tanke[tank_index][EnterX], Tanke[tank_index][EnterY], Tanke[tank_index][EnterZ]))
                    {
                        if( Spieler[playerid][pCash] < 120000 ) {
                            SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei, um dieses Feature zu kaufen.");
                            return 1;
                        }
                        if( Tanke[tank_index][tAutomatischerNotruf] == true ) {
                            SendClientMessage(playerid, COLOR_RED, "Deine Tankstelle hat bereits diese Feature.");
                            return 1;
                        }
                        SendClientMessage(playerid,COLOR_GREEN,"Glückwunsch, du hast deine Tankstelle mit der Sicherheitsoption 'Automatischer Notruf' ausgestattet.");
                        GivePlayerCash(playerid,-120000);
                        Tanke[tank_index][tAutomatischerNotruf] = true;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du musst vor deiner Tankstelle stehen.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Tankstelle gehört dir nicht.");
                    return 1;
                }
            }
        }
        case DIALOG_TANKSTELLEN_OPTION: {
            if(response) {
                if(listitem == 0 ) { // video
                    ShowPlayerDialog(playerid,DIALOG_TANKSTELLEN_VIDEO,DIALOG_STYLE_MSGBOX,"Tankstelle - Videoüberwachung","\
                        {FFFFFF}Durch die Installation eines Videoüberwachungssystems werden Sie bei Überfällen an Ihrer\n\
                        Tankstelle informiert, der Täter wird anhand der Aufnahmen zu erkennen sein.\n\
                        {FF0000}ACHTUNG: Sollten Sie OFFLINE sein, kann Sie das Videoüberwachungssystem nicht über den Überfall informieren!\n\n\
                        {FFFFFF}PREIS: $30.000","Kaufen","Abbruch");
                }
                else if(listitem == 1 ) { // Auto-Notruf
                    ShowPlayerDialog(playerid,DIALOG_TANKSTELLEN_AUTONOTRUF,DIALOG_STYLE_MSGBOX,"Tankstelle - Auto-Notruf","\
                       {FFFFFF} Automatischer Notruf an die Polizei:\n\
                    Durch die Installtion eines Alarmsystems wird bei einem Überfall an Ihrer Tankstelle\n\
                    automatisch ein Notruf an die Polizeizentrale gesendet.\n\
                    Das Alarmsystem läuft 24 Stunden!\n\n\
                    PREIS: $120.000","Kaufen","Abbruch");
                }
            }
        }
        case DIALOG_HAUSTIER_KAUFEN: {
            if(response) {
                listitem = Spieler[playerid][pHaustierTemp];
                if( 0 <= listitem <= 2 ) {
                    if( Spieler[playerid][pHaustier] == -1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Das Ordnungsamt hat dir ein Tierhalteverbot erteilt, daher kannst du kein Tier kaufen!");
                    }
                    else if( Spieler[playerid][pHaustier] == 0 ) {
                        new
                            preis,
                            tier[30];
                        if( listitem == 0 ) {
                            preis = 100000;
                            tier = "Hund";
                        }
                        else if(listitem == 1 ) {
                            preis = 80000;
                            tier = "Papagei";
                        }
                        else if(listitem == 2 ) {
                            preis = 120000;
                            tier = "Schildkröte";
                        }
                        if( GetPlayerMoney(playerid) < preis ) {
                            return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um dieses Haustier zu kaufen.");
                        }
                        new
                            String[128];
                        Spieler[playerid][pHaustier] = listitem + 1;
                        Spieler[playerid][pHaustierCooldown] = 3*60;
                        format(String,sizeof(String),"Du hast eine(n) %s für $%s gekauft!",tier, AddDelimiters(preis));
                        SendClientMessage(playerid,COLOR_YELLOW,String),
                        GivePlayerCash(playerid,-preis);
                        new index;
                        index = GetBizIndexByID(50);
                        Biz[index][bKasse] += preis;
                        Biz[index][bWaren] -= 1;
                    }
                    else {
                        return SendClientMessage(playerid,COLOR_RED,"Du hast bereits ein Haustier.");
                    }
                }
                else {
                    // Futter
                }
            }
        }
        case DIALOG_HAUSTIER: {
            if(response) {
                new
                    string[500];
                strcat( string , "Wenn du Dir ein Haustier kaufst,\n trägst du selbstverständlich auch eine Verantwortung für sein Leben!\n",sizeof(string) );
                strcat( string , "Du musst dein Haustier füttern und pflegen, ansonsten kann es sogar sein, dass es stirbt!\n\n",sizeof(string) );
                strcat( string , "Wenn du dir ein Haustier kaufst, kannst du mit /Haustier mit ihm Gassi gehen.\n",sizeof(string) );
                strcat( string , "Wenn dein Haustier Hunger hat, wirst du darüber benachrichtigt. Mit /Fuettern kannst du es füttern.\n\n",sizeof(string) );
                strcat( string , "Tierfutter erhältst du ebenfalls im Tierhandel.",sizeof(string) );


                if( listitem == 0 ) {
                    format(string,sizeof(string),string,"Hund");
                    Spieler[playerid][pHaustierTemp] = 0;
                    ShowPlayerDialog(playerid,DIALOG_HAUSTIER_KAUFEN,DIALOG_STYLE_MSGBOX,"Haustier Geschäft - Hund",string,"Kaufen","Abbruch");
                }
                else if(listitem == 1 ) {
                    format(string,sizeof(string),string,"Papagei");
                    Spieler[playerid][pHaustierTemp] = 1;
                    ShowPlayerDialog(playerid,DIALOG_HAUSTIER_KAUFEN,DIALOG_STYLE_MSGBOX,"Haustier Geschäft - Papagei",string,"Kaufen","Abbruch");
                }
                else if(listitem == 2 ) {
                    format(string,sizeof(string),string,"Schildkröte");
                    Spieler[playerid][pHaustierTemp] = 2;
                    ShowPlayerDialog(playerid,DIALOG_HAUSTIER_KAUFEN,DIALOG_STYLE_MSGBOX,"Haustier Geschäft - Schildkröte",string,"Kaufen","Abbruch");
                }
                else if(listitem == 3 ) {
                    if( GetPlayerMoney(playerid) < 300 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld um Futter zu kaufen");
                    }
                    new index;
                    index = GetBizIndexByID(50);
                    Biz[index][bKasse] += 300;
                    Biz[index][bWaren] -= 1;
                    SendClientMessage(playerid,COLOR_GREEN,"Du hast Tierfutter gekauft!");
                    Spieler[playerid][pHaustierFutter]++;
                    GivePlayerCash(playerid,-300);
                }
            }
        }
        case DIALOG_WANTEDTICKET: {
            if(response) {
                if( GetPlayerMoney(playerid) < g_WantedTicket[listitem][WT_iPrice] ) {
                    ShowWantedTicketList(playerid);
                    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld.");
                    return 1;
                }
                if( Spieler[playerid][pWanteds] < g_WantedTicket[listitem][WT_iPoints] ) {
                    ShowWantedTicketList(playerid);
                    SendClientMessage(playerid,COLOR_RED,"Du benötigst so viele Wantedtickets nicht.");
                    return 1;
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast %d Wanteds gelöscht für $%s.",g_WantedTicket[listitem][WT_iPoints], AddDelimiters(g_WantedTicket[listitem][WT_iPrice]));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                Spieler[playerid][pWanteds] -= g_WantedTicket[listitem][WT_iPoints];
                GivePlayerCash(playerid,-g_WantedTicket[listitem][WT_iPrice]);
                return 1;
            }
        }
        case DIALOG_HAUSUPGRADE_WL_BUY: {
            if(response) {
                if( Spieler[playerid][pCash] < 70000 ) {
                    SendClientMessage(playerid,COLOR_RED,"Das Upgrade kostet $70.000.");
                    return 1;
                }
                Spieler[playerid][pUpgradeWaffenlager] = 1;
                GivePlayerCash(playerid,-70000);
                SendClientMessage(playerid,COLOR_GREEN,"Haus-Upgrade für $70.000$ gekauft.");
                return cmd_hausupgrade(playerid,"");
            }
        }
        case DIALOG_HAUSUPGRADE_SB_BUY: {
            if(response) {
                if( Spieler[playerid][pCash] < 200000 ) {
                    SendClientMessage(playerid,COLOR_RED,"Das Upgrade kostet $200.000.");
                    return 1;
                }
                Spieler[playerid][pUpgradeSafebox] = 1;
                GivePlayerCash(playerid,-200000);
                SendClientMessage(playerid,COLOR_GREEN,"Haus-Upgrade für $200.000 gekauft.");
                return cmd_hausupgrade(playerid,"");
            }
        }
        case DIALOG_HAUSUPGRADE_WL: {
            if(response) {
                new
                    String[64];
                format(String,sizeof(String),"Hausupgrade - Safebox - %s",g_HouseUpgradeBezeichnung[listitem] );
                // Spieler[playerid][pKofferItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
        }
        case DIALOG_HAUSUPGRADE_SB: {
            if(response) {
                new
                    String[64];
                format(String,sizeof(String),"Hausupgrade - Safebox - %s",g_HouseUpgradeBezeichnung[listitem] );
                Spieler[playerid][pHausSafeboxItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
        }
        case DIALOG_HAUSUPGRADE_SB_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pHausSafeboxItem];
                    format(header,sizeof(header),"Hausupgrade - Safebox - %s - Nehmen",g_HouseUpgradeBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an, die du abheben möchtest:",g_HouseUpgradeBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pHausSafeboxItem];
                    format(header,sizeof(header),"Hausupgrade - Safebox - %s - Ablegen",g_HouseUpgradeBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an, die du ablegen möchtest:",g_HouseUpgradeBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
        }
        case DIALOG_HAUSUPGRADE_SB_NEHMEN: {
            if(response) {
                new
                    item,
                    menge;
                if(sscanf(inputtext,"d",menge)) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                if(menge < 1 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                item = Spieler[playerid][pHausSafeboxItem];
                if(item == 0 ) {
                    if( Spieler[playerid][pHausSafeboxDrogen] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer.");
                    }
                    Spieler[playerid][pHausSafeboxDrogen] -= menge;
                    Spieler[playerid][pDrugs] += menge;
                }
                else if(item == 1 ) {
                    if( Spieler[playerid][pHausSafeboxSpice] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer.");
                    }
                    Spieler[playerid][pHausSafeboxSpice] -= menge;
                    Spieler[playerid][pSpice] += menge;
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast %d Stk %s aus der Safebox genommen.",menge,g_HouseUpgradeBezeichnung[item]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_HAUSUPGRADE_SB_ABLEGEN: {
            if(response) {
                new
                    //vehicleid,
                    item,
                    menge;
                if(sscanf(inputtext,"d",menge)) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                if(menge < 1 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                item = Spieler[playerid][pHausSafeboxItem];
                if(item == 0 ) {
                    if( Spieler[playerid][pDrugs] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir.");
                    }
                    Spieler[playerid][pHausSafeboxDrogen] += menge;
                    Spieler[playerid][pDrugs] -= menge;
                }
                else if(item == 1 ) {
                    if( Spieler[playerid][pSpice] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir.");
                    }
                    Spieler[playerid][pHausSafeboxSpice] += menge;
                    Spieler[playerid][pSpice] -= menge;
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast %d Stk %s in die Safebox gelegt.",menge,g_HouseUpgradeBezeichnung[item]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_HAUSUPGRADE_WL_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new
                        //item,
                        String[256],
                        header[64];
                    //item = Spieler[playerid][pHausSafeboxItem];
                    format(header,sizeof(header),"Hausupgrade - Safebox - Waffe - Nehmen");
                    format(String,sizeof(String),"Gib die Menge an Munition an, die du abheben möchtest:");
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new
                        //item,
                        String[256],
                        header[64];
                    //item = Spieler[playerid][pHausSafeboxItem];
                    format(header,sizeof(header),"Hausupgrade - Safebox - Waffe - Ablegen");
                    format(String,sizeof(String),"Gib die Waffen-ID und die Menge an Munition an, die du ablegen möchtest:");
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
        }
        case DIALOG_HAUSUPGRADE_WL_ABLEGEN: {
            if(response) {
                new
                    slot,
                    wname[30],
                    //vehicleid,
                    weapon,
                    weapon_muni,
                    waffe,
                    menge;
                if(sscanf(inputtext,"dd",waffe,menge)) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                }
                if(menge < 1 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                slot = GetWeaponSlot(waffe);
                GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                if( weapon != waffe ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                }
                if( weapon_muni < menge ) {
                    return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                }
                new
                    safebox_waffe,
                    safebox_ammo;
                Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager] ,safebox_waffe , safebox_ammo );
                if( Spieler[playerid][pHausWaffenlager] != 0 ) {
                    if( safebox_waffe != waffe ) {
                        return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Waffenlager.");
                    }
                }
                new
                    String[128];
                GetWeaponNameEx(waffe,wname,sizeof(wname));
                GivePlayerWeapon(playerid,waffe,-menge);
                Spieler[playerid][pHausWaffenlager] = Class_CompressWeaponInfo( waffe , safebox_ammo + menge );
                format(String,sizeof(String),"Du hast %s mit %d Munition in das Waffenlager gelegt.",wname,menge);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_HAUSUPGRADE_WL_NEHMEN: {
            if(response) {
                if(HasWeaponBlock(playerid)) {
                    SendClientMessage(playerid,COLOR_RED,"Du kannst diese Hausfunktion nicht nutzen!");
                    return SendWeaponBlockInfo(playerid);
                }
                new
                    wname[30],
                    //vehicleid,
                    menge;
                if(sscanf(inputtext,"d",menge)) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                if(menge < 1 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                new
                    weapon,
                    muni;
                Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager], weapon,muni);
                if( muni < menge ) {
                    return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Hauslager.");
                }
                new
                    String[128];
                GetWeaponNameEx(weapon,wname,sizeof(wname));
                GivePlayerWeapon(playerid,weapon,menge);
                Spieler[playerid][pHausWaffenlager] = Class_CompressWeaponInfo( weapon , muni - menge );
                format(String,sizeof(String),"Du hast %s mit %d Munition aus dem Waffenlager genommen.",wname,menge);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_HAUSUPGRADE: {
            if(response) {
                if(listitem == 0 ) {
                    if( Spieler[playerid][pUpgradeWaffenlager] ) {
                        // DIALOG_HAUSUPGRADE_WL
                        ShowHausUpgrade(playerid,false);
                    }
                    else {
                        //
                        ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_BUY,DIALOG_STYLE_MSGBOX,"HouseUpgrade - Waffenlager kaufen","\
                        Um deine Waffen im Haus lagern zu können, musst du einmalig $70.000 zahlen!\n\
                        Es ist dein persönliches Hauswaffenlager, keiner kann deine eingelagerten Waffen herausnehmen.\n\
                        Sobald du dich ausmietest oder das Haus verkaufst, sind deine eingelagerten Waffen weg.","Kaufen","Abbruch");
                    }
                }
                else if(listitem == 1 ) {
                    if( Spieler[playerid][pUpgradeSafebox] ) {
                        // DIALOG_HAUSUPGRADE_SB
                        // g_HouseUpgradeBezeichnung
                        ShowHausUpgrade(playerid,true);
                    }
                    else {
                        //
                        ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_BUY,DIALOG_STYLE_MSGBOX,"HouseUpgrade - Waffenlager kaufen","\
                        Um deine Drogen (Spice, Drogen) im Haus lagern zu können, musst du einmalig $200.000 zahlen!\n\
                        Es ist deine persönliche Haussafebox, keiner kann deine eingelagerten Inventare herausnehmen.\n\
                        Sobald du dich ausmietest oder das Haus verkaufst, sind deine eingelagerten Inventare weg.","Kaufen","Abbruch");
                    }
                }
            }
        }
        case DIALOG_PIN_VERGESSEN: {
            if(response) {
                new
                    query[256];
                mysql_real_escape_string(inputtext,query,gSQL,sizeof(query));
                format(query,sizeof(query),"SELECT `BankPin` FROM `accounts` WHERE `Name` = '%s' AND `SecureCode` = '%s'",GetName(playerid),query);
                mysql_pquery(query,THREAD_PIN_VERGESSEN,playerid,gSQL,MySQLThreadOwner);
            }
        }
        case DIALOG_BANK: {
            if(response) {
                if(listitem==0) {
                    ShowPlayerDialog(playerid, DIALOG_UEBERWEISEN, DIALOG_STYLE_MSGBOX, "BANK-INFO", "Bei der Bank können Sie Überweisungen tätigen und ihre Bank-PIN ändern lassen.\nSollten Sie Ihre Bank-PIN vergessen haben, ist das kein Problem.\nBei einer erfolgreichen Verifizierung wird Ihnen eine neue Bank-PIN aufgestellt.\n\nEin- und Auszahlungen können Sie an jeden Geldautomaten tätigen.", "OK", "");
                }
                if(listitem==1) {
                    ShowPlayerDialog(playerid, DIALOG_PIN_AENDERN_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin", COLOR_HEX_WHITE"Bestätige zunächst mit deinem PIN"  , "Fertig", "");
                }
                else if(listitem==2) {
                    if( HasPlayerChecks(playerid) ) {
                        new
                            String[256];
                        for(new i ; i < MAX_PLAYERS ; i++) {
                            if( IsPlayerConnected(i)) {
                                if( Spieler[i][pGeldcheckID] == playerid ) {
                                    // ACHTUNG !!! NICHT DAS FORMAT DER AUSGABE ÄNDERN !!!!!
                                    // NUR NACH RÜCKSPRACHE!!!
                                    format(String,sizeof(String),"%s%s - $%s\n",String,GetName(i), AddDelimiters(Spieler[i][pGeldcheckBetrag]));
                                }
                            }
                        }
                        ShowPlayerDialog(playerid, DIALOG_CHECKAUSWAHL, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Check einlösen", String  , "Einlösen", "Abbruch");
                        return 1;
                    }
                    else {
                        ClearAnimations(playerid);
                        return SendClientMessage(playerid,COLOR_RED,"Dir wurden keine Geldchecks ausgestellt!");
                    }
                }
                else if(listitem==3) {
                    ShowPlayerDialog(playerid, DIALOG_PIN_VERGESSEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin Vergessen", COLOR_HEX_WHITE"Identifiziere dich mit deinem Sicherheitscode.\nDu hast 3 Versuche!"  , "Weiter", "Abbruch");
                }
            }
        }
        case DIALOG_TELEFONZELLE_CALL: {
            if(response) {
                new
                    giveid;
                TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
                if(sscanf(inputtext,"u",giveid) ) {
                    SendClientMessage(playerid,COLOR_RED,"Spieler nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( !IsPlayerConnected(giveid) ) {
                    SendClientMessage(playerid,COLOR_RED,"Spieler nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( giveid == playerid ) {
                    SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }

                if(Spieler[playerid][pMuted]== 1) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
                }
                if(Spieler[playerid][pTot] == 1) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid, COLOR_RED, "Du kannst niemanden anrufen, wenn du tot bist!");
                }

                if(Spieler[giveid][pHandyState] == 0) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid, COLOR_ORANGE, "Das Handy des Spielers ist aus.");
                }
                if(CurrentPhone[giveid] == 999)
                {
                    new string[160];
                    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
                    SendClientMessage(playerid, COLOR_WHITE, "Es klingelt...");
                    PlayerPlaySound(giveid, 20600, 0.0, 0.0, 0.0);
                    format(string, sizeof(string), "Dein Handy klingelt. Anrufer: %s. Tippe /Abnehmen um den Anruf anzunehmen.", GetName(playerid));
                    SendClientMessage(giveid, COLOR_YELLOW, string);
                    format(string, sizeof(string), "* %s's %s klingelt.", GetName(giveid) , GetPlayerHandyName(giveid) );
                    new Float:x, Float:y, Float:z;
                    GetPlayerPos(giveid, x,y,z);
                    SendRoundMessage(x,y,z,COLOR_PURPLE, string);
                    SendClientMessage(giveid,COLOR_PURPLE,string);
                    CurrentPhone[playerid] = giveid;
                    CurrentPhone[giveid] = playerid;
                    TelefonzelleAn[playerid] = giveid;
                }
                else {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_WHITE, "Leitung besetzt...");
                }
                return 1;
            }
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
            UnfreezePlayer(playerid);
        }
        case DIALOG_TELEFONZELLE_SMS_MSG: {
            if(response) {
                // SMS Abgesendet
                new
                    sms[160],
                    String[256],
                    giveid;
                giveid = TelefonzelleAn[playerid];
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                UnfreezePlayer(playerid);
                TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
                if(!IsPlayerConnected(giveid)) {
                    SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht mehr online.");
                    return 1;
                }
                if(sscanf(inputtext,"s[160]",sms)) {
                    SendClientMessage(playerid,COLOR_RED,"Du hast keine gültige Nachricht eingegeben.");
                    return 1;
                }
                if(Spieler[giveid][pHandyState] == 0) {
                    SendClientMessage(playerid, COLOR_RED, "Das Handy des Spielers ist aus.");
                    return 1;
                }

                format(String, sizeof(String), "[SMS]: %s, Von: %s (Telefonzelle)", sms, GetName(playerid) );
                SendClientMessage(giveid, COLOR_YELLOW, String);
                format(String, sizeof(String), "[SMS] Nachricht versendet - %s, An: %s (Nr: %d)", sms, GetName(giveid), Spieler[giveid][pHandyNr]);
                SendClientMessage(playerid, COLOR_YELLOW, String);
                GameTextForPlayer(playerid, "~r~$-150", 3000, 1);
                GivePlayerCash(playerid,-150);
                return 1;
            }
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
            UnfreezePlayer(playerid);
        }
        case DIALOG_TELEFONZELLE_SMS: {
            if(response) {
                new
                    giveid;
                TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
                if(sscanf(inputtext,"u",giveid) ) {
                    SendClientMessage(playerid,COLOR_RED, "Der Spieler wurde nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( !IsPlayerConnected(giveid) ) {
                    SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( giveid == playerid ) {
                    SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                TelefonzelleAn[playerid] = giveid;
                ShowPlayerDialog(playerid,DIALOG_TELEFONZELLE_SMS_MSG,DIALOG_STYLE_INPUT,"Telefonzelle - SMS - Nachricht","Gib unten die SMS Nachricht ein","Absenden","Abbruch");
                return 1;
            }
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
            UnfreezePlayer(playerid);
        }
        case DIALOG_TELEFONZELLE: {
            if(response) {
                if( IsPlayerAtTelefonzelle(playerid) == 999 ) {
                    SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht an einer Telefonzelle.");
                    return 1;
                }
                if(listitem == 0 ) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );
                    FreezePlayer(playerid);
                    ShowPlayerDialog(playerid,DIALOG_TELEFONZELLE_CALL,DIALOG_STYLE_INPUT,"Telefonzelle - Anruf",
                    "Ein Anruf über dieser Telefonzelle wird dich $100 kosten!\n\
                    Sobald derjenige abnimmt, werden die Telefonkosten von deinem Bargeld abgezogen.\n\
                    Gib unten den Namen oder die ID des Spielers an, den du anrufen möchtest.\n\
                    Um dies zu bestätigen, drück auf 'Weiter', ansonsten auf 'Abbrechen'.","Weiter","Abbrechen");
                }
                else if(listitem == 1 ) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );
                    FreezePlayer(playerid);
                    ShowPlayerDialog(playerid,DIALOG_TELEFONZELLE_SMS,DIALOG_STYLE_INPUT,"Telefonzelle - SMS",
                    "Sobald die SMS erfolgreich versendet wurde, werden die Kosten von deinem Bargeld abgezogen.\n\
                    Gib unten den Namen oder die ID des Spielers an, dem du eine SMS senden möchtest.\n\
                    Um dies zu bestätigen, drück auf 'Weiter', ansonsten auf 'Abbrechen'.","Weiter","Abbrechen");
                }
            }
        }
        case DIALOG_KREDITUEBERSICHT: {
            if(response) {
                ShowKreditLimitUebersicht(playerid,1,listitem);
            }
        }
        case DIALOG_KREDITCONFIRM: {
            if(response) {
                listitem = Spieler[playerid][pKreditAuswahl];
                if( GetPlayerMoney(playerid) < g_KreditLimit[listitem][KL_iKreditRate] ) {
                    return SendClientMessage(playerid,COLOR_RED,"Sie haben nicht genügend Bargeld dabei, Sie können die Ratenvorzahlung daher nicht bezahlen.");
                }
                GivePlayerCash(playerid, -g_KreditLimit[listitem][KL_iKreditRate] );
                Spieler[playerid][pKreditwert] = g_KreditLimit[listitem][KL_iKreditwert];
                Spieler[playerid][pKreditGezahlt] = 0;
                Spieler[playerid][pBank] += g_KreditLimit[listitem][KL_iKreditwert];
                SendClientMessage(playerid,COLOR_GREEN,"Ihr Kredit wurde genehmigt, dass Geld befindet sich nun auf Ihrem Bankkonto!");
            }
        }
        case DIALOG_FAHRZEUGVERLEIH: {
            new vID = GetPlayerVehicleID(playerid);
            UnLockCar(vID);
            miettimer[playerid]=0;
            if(response) {
                if( !vID ) {
                    RemovePlayerFromVehicle(playerid);
                    return 1;
                }
                new
                    vehicleid,
                    Float:x,
                    Float:y,
                    Float:z,
                    Float:rot,
                    Float:px,
                    Float:py,
                    Float:pz,
                    index,
                    modelid,
                    price,
                    spawn,
                    String[128];
                index = GetFahrzeugVerleihIndex(vID);
                modelid = GetVehicleModel(vID);
                price = g_FahrzeugVerleihFahrzeuge[index][FVF_iPrice];
                if( GetPlayerMoney(playerid) < price ) {
                    RemovePlayerFromVehicle(playerid);
                    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld dabei.");
                    return 1;
                }
                spawn = GetFreeFahrzeugVerleihSpawn( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] );

                x = g_FahrzeugVerleihSpawn[spawn][FVS_fX];
                y = g_FahrzeugVerleihSpawn[spawn][FVS_fY];
                z = g_FahrzeugVerleihSpawn[spawn][FVS_fZ];
                rot = g_FahrzeugVerleihSpawn[spawn][FVS_fRot];
                vehicleid = CreateVehicle( modelid , x,y,z,rot , -1,-1, -1 );
                gGas[vehicleid] = GetMaxTank(vehicleid);
                gMaxGas[vehicleid] = GetMaxTank(vehicleid);
                Spieler[playerid][tickVehicleVerleih] = gettime() + 3*60*60;
                //Spieler[playerid][tickVehicleVerleih] = gettime() + 2*60;
                SetVehicleNumberPlate( vehicleid , "VERLEIH");
                //SetVehicleToRespawn( vehicleid );
                g_FahrzeugVerleihSpawn[spawn][FVS_bFree] = false;
                GetPlayerPos(playerid,px,py,pz);
                format(String,sizeof(String),"Du hast das Fahrzeug %s für 3 Stunden geliehen.",CarName[modelid-400]);
                SendClientMessage(playerid,COLOR_GREEN,String);
                SendClientMessage(playerid,COLOR_GREEN,"Dein Fahrzeug steht auf dem Parkplatz bereit.");
                SendClientMessage(playerid,COLOR_YELLOW,"Hinweis: Mit /Mietlock schließt du dein Mietfahrzeug auf und zu.");
                SendClientMessage(playerid,COLOR_YELLOW,"Hinweis: Mit /Findmietcar wird dir der Standort deines Mietfahrzeuges angezeigt.");
                SendClientMessage(playerid,COLOR_YELLOW,"Hinweis: Solltest du den Server verlassen, ist die Mietzeit abgelaufen.");
                GivePlayerCash(playerid,-price);
                // RemovePlayerFromVehicle(playerid);
                aiVehicles[vehicleid] = VEH_PRIVATVERLEIH;
                Spieler[playerid][pVehicleVerleih] = vehicleid;
                if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 0 ) {
                    index = GetBizIndexByID(46);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 1 ) {
                    index = GetBizIndexByID(49);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 2 ) {
                    index = GetBizIndexByID(53);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 3 ) {
                    index = GetBizIndexByID(30);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 4 ) {
                    index = GetBizIndexByID(55);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 5 ) {
                    index = GetBizIndexByID(56);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 6 ) {
                    index = GetBizIndexByID(57);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 7 ) {
                    index = GetBizIndexByID(58);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 8 ) {
                    index = GetBizIndexByID(59);
                }
                Biz[index][bKasse] += price;

                TogglePlayerControllable(playerid,false);
                SetTimerEx("DelayCameraMove",59,false,"ddffffff",playerid,3500,x,y,z,7.0,7.0,3.0);

            }
            else {
                RemovePlayerFromVehicle(playerid);
            }
        }
        case DIALOG_BOMBDEFUSE: {
            if(response) {
                new
                    String[128];
                if( listitem == Bombs[B_iDraht] ) {
                    // Entschärft
                    format(String,sizeof(String),"Polizist %s konnte die Bombe erfolgreich entschärfen!",GetName(playerid));
                    SendClientMessageToAll(COLOR_GREEN,String);
                    DestroyBomb();
                }
                else {
                    format(String,sizeof(String),"ACHTUNG! Die Bombe ist explodiert! Polizist %s hat es nicht geschafft die Bombe zu entschärfen!",GetName(playerid));
                    SendClientMessageToAll(COLOR_RED,String);
                    Bomb_ExplodeBomb();
                }
            }
            else {
                Bombs[B_iStatus] = Bombe_Planted;
            }
            ClearAnimationsEx(playerid,100);
        }
        case DIALOG_BOMBELEGEN: {
            if(response) {
                SendClientMessage(playerid,COLOR_YELLOW,"Du platzierst eine Bombe, beweg dich 2 Minuten nicht von der Stelle!");
                if( !Bomb_PlantBomb(playerid,listitem) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Die Bombe konnte nicht gelegt werden.");
                }
            }
        }
        case DIALOG_WAFFENLAGER: {
            if(response) {
                // Einlagern
                if( Spieler[playerid][pFraktion] == 0 ) {
                    SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion.");
                    return 1;
                }
                if(listitem == 0 ) {
                    ShowWaffenLager(playerid,1);
                }
                // Bauen
                else if(listitem == 1 ) {
                    ShowWaffenLager(playerid,2);
                }
                // Status
                else if(listitem == 2 ) {
                    ShowWaffenLager(playerid,3);
                }
            }
        }
        case DIALOG_WAFFENLAGER_LAGERN: {
            if(response) {
                new
                    menge;
                if(sscanf(inputtext,"d",menge)) {
                    SendClientMessage(playerid,COLOR_RED,"Ungültige Mengenangabe.");
                    ShowWaffenLager(playerid,0);
                    return 1;
                }
                if( menge < 1 ) {
                    SendClientMessage(playerid,COLOR_RED,"Ungültige Mengenangabe.");
                    ShowWaffenLager(playerid,0);
                    return 1;
                }
                if( Spieler[playerid][pWaffenteile] < menge ) {
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Menge an Waffenteilen nicht.");
                    ShowWaffenLager(playerid,0);
                    return 1;
                }
                if( Spieler[playerid][pFraktion] == 0 ) {
                    SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion.");
                    return 1;
                }
                new
                    String[128],
                    index;
                index = GetWaffenLagerIndex( Spieler[playerid][pFraktion] );
                Spieler[playerid][pWaffenteile] -= menge;
                g_WaffenLager[index][WL_iWaffenTeile] += menge;
                format(String,sizeof(String),"Spieler %s hat %d Waffenteile in das Waffenlager gelegt.",GetName(playerid),menge);
                SendFraktionMessage( Spieler[playerid][pFraktion], COLOR_YELLOW, String);
                ShowWaffenLager(playerid,0);
            }
            else {
                ShowWaffenLager(playerid,0);
            }
        }
        case DIALOG_WAFFENLAGER_BAUEN: {
            if(response) {
                new
                    waffenid,
                    waffe[24],
                    price,
                    String[128],
                    index;
                if( Spieler[playerid][pFraktion] == 0 ) {
                    SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion.");
                    return 1;
                }
                index = GetWaffenLagerIndex( Spieler[playerid][pFraktion] );
                price = g_WaffenLagerConfig[listitem][WLC_iPrice];
                if( g_WaffenLager[index][WL_iWaffenTeile] < price  ) {
                    SendClientMessage(playerid,COLOR_RED,"Im Waffenlager befinden sich nicht genug Waffenteile.");
                    ShowWaffenLager(playerid,0);
                    return 1;
                }
                waffenid = g_WaffenLagerConfig[listitem][WLC_iWaffe];
                if( waffenid == -1 ) {
                    SetPlayerArmour(playerid, 100.0 );
                    SetPlayerHealth(playerid, 100.0 );
                    format(String,sizeof(String),"Spieler %s hat sich für %d Waffenteile eine Schutzweste + HP gebaut.",GetName(playerid),price);
                }
                else {
                    GetWeaponNameEx( waffenid , waffe, sizeof(waffe) );
                    GivePlayerWeapon(playerid, waffenid , g_WaffenLagerConfig[listitem][WLC_iMuni] );
                    format(String,sizeof(String),"Spieler %s hat sich für %d Waffenteile folgende Waffe gebaut: %s",GetName(playerid),price,waffe);
                }
                g_WaffenLager[index][WL_iWaffenTeile] -= price;
                SendFraktionMessage(  Spieler[playerid][pFraktion] ,COLOR_YELLOW,String);
                ShowWaffenLager(playerid,0);
            }
            else {
                ShowWaffenLager(playerid,0);
            }
        }
        case DIALOG_WAFFENLAGER_INFO: {
            ShowWaffenLager(playerid,0);
        }
        case DIALOG_SELLSPICE: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Spice abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid,"SellSpice",string,sizeof(string));
            sscanf(string,"udd",pID,menge,preis);

            pSpiceID[pID] = playerid;
            pSpicePreis[pID] = preis;
            pSpiceMenge[pID] = menge;
            format(string, sizeof(string), "Du hast von %s eine Anfrage für Spice erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Spice' zur Annahme von Spice.");
            format(string, sizeof(string), "Du hast %s eine Anfrage für Spice gemacht. Menge: %d Gramm Spice, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_SELLDRUGS: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Drogen abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid,"SellDrugs",string,sizeof(string));
            sscanf(string, "uii", pID, menge, preis);
            pDrogenID[pID] = playerid;
            pDrogenPreis[pID] = preis;
            pDrogenMenge[pID] = menge;

            format(string, sizeof(string), "Du hast von %s ein Angebot für Drogen erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Drogen' um das Angebot anzunehmen.");
            format(string, sizeof(string), "Du hast %s deine Drogen angeboten. Menge: %d, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_SELLWCODES: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Wantedcodes abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid, "SELL_WCODES", string, sizeof(string));
            sscanf(string, "uii", pID, menge, preis);
            format(string, sizeof(string), "%i %i %i", playerid, menge, preis);
            SetPVarString(pID, "BUY_WCODES", string);

            format(string, sizeof(string), "Du hast von %s ein Angebot für Wantedcodes erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Wantedcodes' um das Angebot anzunehmen.");
            format(string, sizeof(string), "Du hast %s deine Wantedcodes angeboten. Menge: %d, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_SELLWTEILE: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Waffenteilen abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid,"SellWTeile",string,sizeof(string));
            sscanf(string, "uii", pID, menge, preis);
            pWTeileID[pID] = playerid;
            pWTeilePreis[pID] = preis;
            pWTeileMenge[pID] = menge;

            format(string, sizeof(string), "Du hast von %s ein Angebot für Waffenteile erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Waffenteile' um das Angebot anzunehmen.");
            format(string, sizeof(string), "Du hast %s deine Waffenteile angeboten.. Menge: %d, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_RATESUPPORTER: {
            new
                String[180],
                supporter[MAX_PLAYER_NAME];
            GetPVarString(playerid,"Supporter",supporter,sizeof(supporter));
            if(!response) {
                format(String,sizeof(String),"%s hat Supporter %s negativ bewertet!",GetName(playerid),supporter);
                //SendClientMessage(playerid,COLOR_GREEN,"Du wurdest vom Fragesteller wegen deiner Auskunft positiv bewertet!");
            }
            else {
                format(String,sizeof(String),"%s hat Supporter %s positiv bewertet!",GetName(playerid),supporter);
                //SendClientMessage(playerid,COLOR_ORANGE,"Der Fragesteller fand deine Auskunft nicht ausreichend und hat dich negativ bewertet!");
            }
            SupporterLog( String , response );
            if(!response) {
                format(String,sizeof(String),"Du hast den Support von %s negativ bewertet",supporter);
                //SendClientMessage(playerid,COLOR_GREEN,"Du wurdest vom Fragesteller wegen deiner Auskunft positiv bewertet!");
            }
            else {
                format(String,sizeof(String),"Du hast den Support von %s positiv bewertet",supporter);
                //SendClientMessage(playerid,COLOR_ORANGE,"Der Fragesteller fand deine Auskunft nicht ausreichend und hat dich negativ bewertet!");
            }
            SendClientMessage(playerid,COLOR_WHITE,String);
        }
        case DIALOG_NOTRUF: {
            if(response) {
                new
                    String[128];
                format(String,sizeof(String),"[NOTRUFZENTRALE] %s (ID: %d) ist sehr verletzt und benötigt dringende Hilfe. Benutze: /Sfinden!",GetName(playerid),playerid);
                SendFraktionMessage(3, COLOR_LIGHTRED, String);
            }
            //SpawnPlayer(playerid);
            return 1;
     	}

     	case DIALOG_ZULASSUNGSSTELLE: {
     	    if(response) {
     	        if(listitem == 0 ) {
					if( !PlayerHaveCar[playerid][PlayerKey[playerid]] )
						return SendClientMessage(playerid, COLOR_RED, "Du hast gerade kein Fahrzeug gewählt ( /Carkey ).");

					new
     	                String[256+64],
					    slot,
						vehicleid,
						modelid;
					slot = PlayerKey[playerid];
					if( HasVehicleLicence(playerid,slot) )
						return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat bereits eine KFZ-Zulassung.");

					vehicleid = PlayerCar[playerid][slot][CarId];
					modelid = GetVehicleModel(vehicleid);
					format(String,sizeof(String),"Folgendes Fahrzeug möchten Sie amtlich Zulassen: %s\n\
						Eine Neuzulassung für ein Kraftfahrzeug nimmt einmalige Gebühren in Höhe von $4.500.",
						CarName[modelid-400]);
					ShowPlayerDialog(playerid,DIALOG_FAHRZEUGZULASSEN,DIALOG_STYLE_MSGBOX,"Fahrzeug Zulassen",String,"Akzeptieren","Abbrechen");
     	        }
     	        else if(listitem == 1 ) {
					if( !PlayerHaveCar[playerid][PlayerKey[playerid]] )
						return SendClientMessage(playerid, COLOR_RED, "Du hast gerade kein Fahrzeug gewählt ( /Carkey ).");

					new
     	                String[256+64],
					    slot,
						vehicleid,
						modelid;
					slot = PlayerKey[playerid];
					if( !HasVehicleLicence(playerid,slot) )
						return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat keine KFZ-Zulassung.");

					vehicleid = PlayerCar[playerid][slot][CarId];
					modelid = GetVehicleModel(vehicleid);
					format(String,sizeof(String),"Sie möchten Ihr Fahrzeug %s mit dem amtlichen Kennzeichen %s abmelden.\n\
						Eine Fahrzeugabmeldung würde $4.500 an Gebühren kosten!\n\
						Sollten Sie die Fahrzeug stillegung akzeptieren, dürfen Sie mit dem Fahrzeug nicht mehr weiterfahren!",
						CarName[modelid-400],PlayerCar[playerid][slot][CarNumberplate]);
					ShowPlayerDialog(playerid,DIALOG_FAHRZEUGABMELDEN,DIALOG_STYLE_MSGBOX,"Fahrzeug Abmelden",String,"Akzeptieren","Abbrechen");
     	        }
     	    }
     	}
     	case DIALOG_FAHRZEUGZULASSEN: {
     	    if(response) {
				new
				    nummernschild[16],
 	                String[256+64],
				    slot,
					vehicleid,
					modelid;
				slot = PlayerKey[playerid];
				if( HasVehicleLicence(playerid,slot) ) {
					return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat bereits eine KFZ-Zulassung");
				}
				vehicleid = PlayerCar[playerid][slot][CarId];
				modelid = GetVehicleModel(vehicleid);
				format(nummernschild,sizeof(nummernschild),"LS-%04d", 1 + random(9999) );
				format(String,sizeof(String),"Vielen Dank! Ihr Fahrzeug %s mit dem amtlichen Kennzeichen %s wurde erfolgreich angemeldet!\n\
					Das Kennzeichen wird automatisch an dein Fahrzeug angebracht!",
				    CarName[modelid-400],nummernschild);
				ShowPlayerDialog(playerid,DIALOG_DUMMY,DIALOG_STYLE_MSGBOX,"Fahrzeug Zulassen",String,"Weiter","");
				Kasse[Staat] += 4500;
				GivePlayerCash(playerid,-4500);
				//Spieler[playerid][pKFZSteuer] += FIX_KFZSTEUER;
				format(PlayerCar[playerid][slot][CarNumberplate],32,"%s",nummernschild);
				SetVehicleNumberPlate( vehicleid , nummernschild );
				SavePlayerCar(playerid,slot);
     	    }
     	}

        case DIALOG_FAHRZEUGABMELDEN: {
            if(response) {
                new
                    String[256+64],
                    slot,
                    vehicleid,
                    modelid;
                slot = PlayerKey[playerid];
                if( !HasVehicleLicence(playerid,slot) ) {
                    return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat keine KFZ-Zulassung");
                }
                vehicleid = PlayerCar[playerid][slot][CarId];
                modelid = GetVehicleModel(vehicleid);
                format(String,sizeof(String),"Vielen Dank! Ihr Fahrzeug %s mit dem amtlichen Kennzeichen %s wurde erfolgreich abgemeldet!",
                    CarName[modelid-400],PlayerCar[playerid][slot][CarNumberplate]);
                ShowPlayerDialog(playerid,DIALOG_DUMMY,DIALOG_STYLE_MSGBOX,"Fahrzeug Abmelden",String,"Weiter","");
                Kasse[Staat] += 3500;
                GivePlayerCash(playerid,-3500);
                //Spieler[playerid][pKFZSteuer] -= FIX_KFZSTEUER;
                format(PlayerCar[playerid][slot][CarNumberplate],32,"%s",KEIN_KENNZEICHEN);
                SetVehicleNumberPlate( vehicleid , KEIN_KENNZEICHEN );
                SavePlayerCar(playerid,slot);
            }
        }
        case DIALOG_KANISTER: {
            if(response) {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
                if(Spieler[playerid][pKanister] >= 3)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits drei Kanister.");
                if (Tanke[t][tBenzin] < 10) return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat zu wenig Benzin dafür.");

                new preis;
                new kanister[20];
                if(listitem == 0 ) {
                    preis = 2000;
                    kanister = "Diesel 10L";
                }
                else if(listitem == 1 ) {
                    preis = 2600;
                    kanister = "Benzin 10L";
                }
                else if(listitem == 2 ) {
                    preis = 3800;
                    kanister = "Super 10L";
                }

                if (GetPlayerMoney(playerid) < preis) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");

                Tanke[t][tBenzin] -= 10;
                new String[128];
                Spieler[playerid][pKanister]++;
                GivePlayerCash(playerid, -preis);
                Tanke[t][tKasse] += preis;
                format(String,sizeof(String),"Du hast einen Kanister %s für $%s gekauft.",kanister, AddDelimiters(preis));
                SendClientMessage(playerid,COLOR_RED,String);
            }
        }
        case DIALOG_KOFFERRAUM: {
            if(response) {
                new
                    String[64];
                format(String,sizeof(String),"Kofferraum - %s",g_KofferraumBezeichnung[listitem]);
                Spieler[playerid][pKofferraumItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
            else {
                ClearAnimations(playerid);
            }
        }
        case DIALOG_KOFFER: {
            if(response) {
                new
                    String[64];
                format(String,sizeof(String),"Koffer - %s",g_KofferBezeichnung[listitem]);
                Spieler[playerid][pKofferItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_KOFFER_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
        }
        case DIALOG_HANDYKAUFEN: {
            if(response) {
                if( GetPlayerMoney(playerid) < g_Mobiltelefon[listitem][M_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld,um dieses Handy zu kaufen");
                }
                if(Biz[HandyShopBiz_Index][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                Biz[HandyShopBiz_Index][bWaren] -= 3;
                Biz[HandyShopBiz_Index][bKasse] += g_Mobiltelefon[listitem][M_iPrice];
                new
                    String[128];
                format(String,sizeof(String),"Glückwunsch, du hast folgendes Handy erworben: %s ($%s)",g_Mobiltelefon[listitem][M_sName], AddDelimiters(g_Mobiltelefon[listitem][M_iPrice]));
                Spieler[playerid][pHandy] = listitem;
                GivePlayerCash(playerid,-g_Mobiltelefon[listitem][M_iPrice]);
                return SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_FIGHTSTYLE: {
            if(response) {
                if( GetPlayerMoney(playerid) < g_KampfStyle[listitem][KS_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld,um dieses Kampfstyle zu kaufen");
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast folgenden Kampfstyle erlernt: %s ($%s)",g_KampfStyle[listitem][KS_sName], AddDelimiters(g_KampfStyle[listitem][KS_iPrice]));
                Spieler[playerid][pFightstyle] = g_KampfStyle[listitem][KS_iStyle];
                SetPlayerFightingStyle(playerid, Spieler[playerid][pFightstyle] );
                GivePlayerCash(playerid,-g_KampfStyle[listitem][KS_iPrice]);
                return SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_KOFFERRAUM_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferraumItem];
                    format(header,sizeof(header),"Kofferraum - %s - Nehmen",g_KofferraumBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du abheben möchtest",g_KofferraumBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferraumItem];
                    format(header,sizeof(header),"Kofferraum - %s - Ablegen",g_KofferraumBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du ablegen möchtest",g_KofferraumBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
            else {
                ClearAnimations(playerid);
            }
        }
        case DIALOG_KOFFER_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferItem];
                    format(header,sizeof(header),"Koffer - %s - Nehmen",g_KofferBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du abheben möchtest",g_KofferBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFER_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferItem];
                    format(header,sizeof(header),"Koffer - %s - Ablegen",g_KofferBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du ablegen möchtest",g_KofferBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFER_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
        }
        case DIALOG_KOFFERRAUM_NEHMEN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferraumItem];
                if( item == 2 ) {
                    if(HasWeaponBlock(playerid)) {
                        return SendWeaponBlockInfo(playerid);
                    }
                    new
                        wname[30],
                        vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    new
                        weapon,
                        muni;
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    Class_SplitWeaponInfo(g_Kofferraum[vehicleid][K_iWaffen], weapon,muni);
                    if( muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                    }
                    new
                        String[128];
                    GetWeaponNameEx(weapon,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,weapon,menge);
                    g_Kofferraum[vehicleid][K_iWaffen] = Class_CompressWeaponInfo( weapon , muni - menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s aus dem Kofferraum genommen",wname,menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    if(item == 0 ) {
                        if( g_Kofferraum[vehicleid][K_iDrogen] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        g_Kofferraum[vehicleid][K_iDrogen] -= menge;
                        Spieler[playerid][pDrugs] += menge;
                    }
                    else if(item == 1 ) {
                        if( g_Kofferraum[vehicleid][K_iWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        g_Kofferraum[vehicleid][K_iWaffenteile] -= menge;
                        Spieler[playerid][pWaffenteile] += menge;
                    }
                    else if(item == 3 ) {
                        if( g_Kofferraum[vehicleid][K_iWantedcodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        g_Kofferraum[vehicleid][K_iWantedcodes] -= menge;
                        Spieler[playerid][pWantedCodes] += menge;
                    }
                    else if(item == 4 ) {
                        if( g_Kofferraum[vehicleid][K_iSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        g_Kofferraum[vehicleid][K_iSpice] -= menge;
                        Spieler[playerid][pSpice] += menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s aus dem Kofferraum genommen",menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_KOFFER_NEHMEN: {
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferItem];
                if( item == 2 ) {
                    new
                        wname[30],
                        //vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    new
                        weapon,
                        muni;
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    Class_SplitWeaponInfo(g_Koffer[playerid][K_iWaffen], weapon,muni);
                    if( muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                    }
                    new
                        String[128];
                    GetWeaponNameEx(weapon,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,weapon,menge);
                    g_Koffer[playerid][K_iWaffen] = Class_CompressWeaponInfo( weapon , muni - menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s aus dem Koffer genommen",wname,menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        //vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    if(item == 0 ) {
                        if( g_Koffer[playerid][K_iDrogen] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        g_Koffer[playerid][K_iDrogen] -= menge;
                        Spieler[playerid][pDrugs] += menge;
                    }
                    else if(item == 1 ) {
                        if( g_Koffer[playerid][K_iWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        g_Koffer[playerid][K_iWaffenteile] -= menge;
                        Spieler[playerid][pWaffenteile] += menge;
                    }
                    else if(item == 3 ) {
                        if( g_Koffer[playerid][K_iWantedcodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        g_Koffer[playerid][K_iWantedcodes] -= menge;
                        Spieler[playerid][pWantedCodes] += menge;
                    }
                    else if(item == 4 ) {
                        if( g_Koffer[playerid][K_iSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        g_Koffer[playerid][K_iSpice] -= menge;
                        Spieler[playerid][pSpice] += menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s aus dem Koffer genommen",menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_KOFFERRAUM_ABLEGEN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferraumItem];
                if( item == 2 ) {
                    new
                        slot,
                        wname[30],
                        vehicleid,
                        weapon,
                        weapon_muni,
                        waffe,
                        menge;
                    if(sscanf(inputtext,"dd",waffe,menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    slot = GetWeaponSlot(waffe);
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    if( weapon != waffe ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                    }
                    if( weapon_muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                    }
                    new
                        kofferraum_waffe,
                        kofferraum_ammo;
                    Class_SplitWeaponInfo( g_Kofferraum[vehicleid][K_iWaffen] ,kofferraum_waffe , kofferraum_ammo );
                    if( g_Kofferraum[vehicleid][K_iWaffen] != 0 ) {
                        if( kofferraum_waffe != waffe ) {
                            return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Kofferraum");
                        }
                    }
                    new
                        String[128];
                    GetWeaponNameEx(waffe,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,waffe,-menge);
                    g_Kofferraum[vehicleid][K_iWaffen] = Class_CompressWeaponInfo( waffe , kofferraum_ammo + menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s in den Kofferraum gelegt",wname,menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    if(item == 0 ) {
                        if( Spieler[playerid][pDrugs] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Kofferraum[vehicleid][K_iDrogen] += menge;
                        Spieler[playerid][pDrugs] -= menge;
                    }
                    else if(item == 1 ) {
                        if( Spieler[playerid][pWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Kofferraum[vehicleid][K_iWaffenteile] += menge;
                        Spieler[playerid][pWaffenteile] -= menge;
                    }
                    else if(item == 3 ) {
                        if( Spieler[playerid][pWantedCodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Kofferraum[vehicleid][K_iWantedcodes] += menge;
                        Spieler[playerid][pWantedCodes] -= menge;
                    }
                    else if(item == 4 ) {
                        if( Spieler[playerid][pSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Kofferraum[vehicleid][K_iSpice] += menge;
                        Spieler[playerid][pSpice] -= menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s in den Kofferraum gelegt",menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_KOFFER_ABLEGEN: {
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferItem];
                if( item == 2 ) {
                    new
                        slot,
                        wname[30],
                        //vehicleid,
                        weapon,
                        weapon_muni,
                        waffe,
                        menge;
                    if(sscanf(inputtext,"dd",waffe,menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    slot = GetWeaponSlot(waffe);
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    */
                    GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                    /*
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    if( weapon != waffe ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                    }
                    if( weapon_muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                    }
                    new
                        kofferraum_waffe,
                        kofferraum_ammo;
                    Class_SplitWeaponInfo( g_Koffer[playerid][K_iWaffen] ,kofferraum_waffe , kofferraum_ammo );
                    if( g_Koffer[playerid][K_iWaffen] != 0 ) {
                        if( kofferraum_waffe != waffe ) {
                            return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Kofferraum");
                        }
                    }
                    new
                        String[128];
                    GetWeaponNameEx(waffe,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,waffe,-menge);
                    g_Koffer[playerid][K_iWaffen] = Class_CompressWeaponInfo( waffe , kofferraum_ammo + menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s in den Kofferraum gelegt",wname,menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        //vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    if(item == 0 ) {
                        if( Spieler[playerid][pDrugs] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Koffer[playerid][K_iDrogen] += menge;
                        Spieler[playerid][pDrugs] -= menge;
                    }
                    else if(item == 1 ) {
                        if( Spieler[playerid][pWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Koffer[playerid][K_iWaffenteile] += menge;
                        Spieler[playerid][pWaffenteile] -= menge;
                    }
                    else if(item == 3 ) {
                        if( Spieler[playerid][pWantedCodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Koffer[playerid][K_iWantedcodes] += menge;
                        Spieler[playerid][pWantedCodes] -= menge;
                    }
                    else if(item == 4 ) {
                        if( Spieler[playerid][pSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Koffer[playerid][K_iSpice] += menge;
                        Spieler[playerid][pSpice] -= menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s in den Koffer gelegt",menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        #if defined SILVESTER_EVENT
        case DIALOG_SILVESTER: {
            if(response) {
                new
                    index,
                    kosten,
                    stk,
                    String[128];
                if( listitem == 0 ) {
                    kosten = 4500;
                    stk = 5;
                    index = _:(SpielerDaten:pBoeller);
                }
                else if(listitem == 1 ) {
                    kosten = 8000;
                    stk = 5;
                    index = _:(SpielerDaten:pRaketen);
                }
                if( GetPlayerMoney(playerid) < kosten ) {
                    SendClientMessage(playerid,COLOR_RED,"Nicht genug Geld");
                    return 1;
                }
                if( Spieler[playerid][SpielerDaten:index] > 0 ) {
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt noch Feuerwerkskörper, die du zuerst aufgebrauchen musst");
                    return 1;
                }
                GivePlayerCash(playerid,-kosten);
                Spieler[playerid][SpielerDaten:index] += stk;
                format(String,sizeof(String),"Du hast folgendes gekauft: %s . Bestand: %d Stk",inputtext,Spieler[playerid][SpielerDaten:index]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        #endif
        case DIALOG_FAHRSCHULE_SOLO: {
            if(response) {
                new
                    modelid,
                    preis,
                    Float:x,
                    Float:y,
                    Float:z;
                GetPlayerPos(playerid,x,y,z);
                if(listitem == 0) { // Auto
                    if( Spieler[playerid][pCarLic] == 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Auto Führerschein");
                    }
                    if( gettime() < Spieler[playerid][punixFSperre] ) {
                        return SendClientMessage(playerid,COLOR_YELLOW,"Du hast noch eine Fahrlizenz Sperre");
                    }
                    modelid = 445;
                    preis = 10000;
                }
                else if(listitem == 1 ) { // Motorrad
                    if( Spieler[playerid][pMotoLic] == 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Motorrad Führerschein");
                    }
                    if( gettime() < Spieler[playerid][punixMotoSperre] ) {
                        return SendClientMessage(playerid,COLOR_YELLOW,"Du hast noch eine Fahrlizenz Sperre");
                    }
                    preis = 15000;
                    modelid = 461;
                }
                if( preis > GetPlayerMoney(playerid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
                }
                pFahrschulCar[playerid] = CreateVehicle(modelid,1196.0063,-1846.9019,13.3482,90.8546,3,3,-1);
                aiVehicles[pFahrschulCar[playerid]] = VEH_FAHRSCHULCAR;
                GivePlayerCash(playerid,-preis);
                PutPlayerInVehicle(playerid, pFahrschulCar[playerid] , 0 );
                SendClientMessage(playerid,COLOR_RED,"WICHTIG!!! Beachte bitte nun folgendes:");
                SendClientMessage(playerid,COLOR_YELLOW,"Maximale Geschwindigkeit: Innenorts 80Km/h, Autobahn und Landstraßen 120Km/h.");
                SendClientMessage(playerid,COLOR_YELLOW,"Von 19 bis 6 Uhr oder bei Unwetter muss das Licht eingeschaltet sein.");
                SendClientMessage(playerid,COLOR_YELLOW,"Ampelanlagen >mit Ampelschild< sind von 15 bis 22 Uhr in Los Santos zu beachten - bei Rot halten, bei Grün fahren.");
                SendClientMessage(playerid,COLOR_YELLOW,"An einspurigen Kreuzungen ohne Ampeln oder Verkehrszeichen gilt Rechts vor Links.");
                SendClientMessage(playerid,COLOR_YELLOW,"Einsatzfahrzeugen haben beim Notfall Vorrang!");
                SendClientMessage(playerid,COLOR_YELLOW,"Es gilt die gleiche Fahrrichtung und Fahrweise wie laut der Deutschen Straßenverkehrsordnung.");
                SendClientMessage(playerid,COLOR_GREEN,"Los Gehts! PS: Steig nicht aus dem Fahrzeug aus und überschreite 90 km/h nicht!");
                SetPlayerCheckpointEx(playerid, g_FahrpruefungCP[0][F_fX] , g_FahrpruefungCP[0][F_fY] , g_FahrpruefungCP[0][F_fZ] ,5.0, CP_FAHRSCHULE_OFFLINE );
                LockCar(pFahrschulCar[playerid]);
                gGas[pFahrschulCar[playerid]] = GetMaxTank(pFahrschulCar[playerid]);
                pFahrschuleCP[playerid] = 0;
                Spieler[playerid][tFahrschule] = SetTimerEx("Pulse_Fahrschule",1007,true,"d",playerid);
                Spieler[playerid][pFahrschuleSpeedWarnung] = 0;
                Spieler[playerid][unixFahrschuleZeit] = gettime() + 20;
            }
        }
        case DIALOG_PIN_AENDERN_PIN: {
            if(response) {
                new
                    pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt!");
                }
                if( strlen(inputtext) != 4 ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Dein PinCode muss 4 Zeichen haben");
                }
                if( pin <= 0 ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Ungültiger Pin");
                }
                ShowPlayerDialog(playerid, DIALOG_PIN_AENDERN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin", COLOR_HEX_WHITE"Gib unten deinen neuen BankPin ein", "Fertig", "Abbrechen");
            }
        }
        case DIALOG_PIN_AENDERN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    String[128],
                    pincode = strval(inputtext);
                if( !HasBankKonto(playerid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast kein Bankkonto");
                }
                if( strlen(inputtext) != 4 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dein PinCode muss 4 Zeichen haben");
                }
                if( pincode <= 0 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültiger Pin");
                }
                format(String,sizeof(String),"Du hast deinen PinCode geändert ! Neuer BankPin: %04d",pincode);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                format(String,sizeof(String),"UPDATE `accounts` SET `BankPin` = '%s' WHERE `Name` = '%s'",inputtext,GetName(playerid));
                mysql_oquery(String,THREAD_DUMMY,INVALID_PLAYER_ID,gSQL);
                SendClientMessage(playerid,COLOR_ORANGE,"Merke dir diesen Gut");
                Spieler[playerid][pBankKontoPin] = pincode;
            }
        }
        case DIALOG_ABHEBEN_PIN: {
            if(response) {
                new
                    pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt!");
                }
                ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
            }
        }
        case DIALOG_UEBERWEISEN_PIN: {
            if(response) {
                new pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt!");
                }
                ShowPlayerDialog(playerid, DIALOG_BANKWERT, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Überweisung", COLOR_HEX_WHITE"Bitte gebe den gewünschten Betrag an.", "Weiter", "Abbrechen");
            }
        }
        case DIALOG_BANKKONTO: {
            ClearAnimations(playerid);
            if(response) {
                if( HasBankKonto(playerid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast bereits ein Bankkonto");
                }
                if( GetPlayerMoney(playerid) < 1200 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld auf der Hand, um das Konto einzurichten");
                }
                Spieler[playerid][pBankKonto] = 1;
                SendClientMessage(playerid,COLOR_GREEN,"Dein Bankkonto wurde erfolgreich eingerichtet");
                GivePlayerCash(playerid,-1200);
                return 1;
            }
        }
        case DIALOG_BANKKONTO_PIN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    String[128],
                    pincode = strval(inputtext);
                if( !HasBankKonto(playerid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast kein Bankkonto!");
                }
                if( pincode < 0 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültiger Pin.");
                }
                if( strlen(inputtext) != 4 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dein Pin-Code muss 4 Zeichen haben.");
                }
                format(String,sizeof(String),"Du hast folgenden Pin-Code gewählt: %04d.",pincode);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                SendClientMessage(playerid,COLOR_ORANGE,"Merke dir diesen gut!");
                Spieler[playerid][pBankKontoPin] = pincode;
                return 1;
            }
        }
        case DIALOG_TANKMENGE: {
            if(response) {
                if (Refueling[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du tankst bereits!");
                new menge, tanke = IsPlayerAtTanke(playerid);
                if (tanke == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr an einer Tankstelle.");
                if( sscanf(inputtext, "d", menge) || menge < 1)
                    return ShowPlayerDialog(playerid,DIALOG_TANKMENGE,DIALOG_STYLE_INPUT,"Tankmenge","Gib die Tankmenge in Litern unten an","Auftanken","Abbruch");

                new String[128], maxsprit, vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                if (!vehicleid) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug mehr.");
                if (vehicleRefueling[vehicleid]) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird bereits betankt.");
                //modelid = GetVehicleModel(vehicleid);
                maxsprit = GetMaxTank(vehicleid) - gGas[vehicleid];
                if( menge > maxsprit ) {
                    format(String,sizeof(String),"Du kannst maximal %d Liter tanken.",maxsprit);
                    SendClientMessage(playerid,COLOR_RED,String);
                    return ShowPlayerDialog(playerid,DIALOG_TANKMENGE,DIALOG_STYLE_INPUT,"Tankmenge","Gib die Tankmenge in Litern an:","Auftanken","Abbruch");
                }

                if (Tanke[tanke][tBenzin] < menge) return SendClientMessage(playerid, COLOR_RED, "Die Tanke hat nicht mehr so viel Benzin.");
                SetPVarInt(playerid, "FILLUP.AMOUNT", menge);
                return ShowPlayerDialog(playerid, DIALOG_FILLUP_PAYMETHOD, DIALOG_STYLE_MSGBOX, "Bezahlmethode", "{FFFFFF}Wie möchtest du bezahlen?", "Barzahlung", "EC-Karte");
            }
        }
        case DIALOG_FILLUP_PAYMETHOD: {
            if (Refueling[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du tankst bereits!");
            new menge = GetPVarInt(playerid, "FILLUP.AMOUNT"), tanke = IsPlayerAtTanke(playerid);
            if (tanke == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr an einer Tankstelle.");
            if (menge < 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst keine 0 Liter tanken.");

            new price = menge * Tanke[tanke][taiFillCost][RefuelType[playerid]];
            if (response) { // Barzahlung
                if (Spieler[playerid][pCash] < price) {
                    SendClientMessage(playerid, COLOR_RED, "So viel Geld hast du nicht dabei.");
                    return 1;
                }

                new vehicleid = GetPlayerVehicleID(playerid);
                if (!vehicleid) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug mehr.");
                if (vehicleRefueling[vehicleid]) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird bereits betankt.");
                DeletePVar(playerid, "FILLUP.AMOUNT");
                SetTimerEx("Fillup", RefuelWait, 0, "iiiii", playerid, menge, price, RefuelType[playerid], 0);
                Refueling[playerid] = vehicleid;
                vehicleRefueling[vehicleid] = 1;
                FreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_WHITE, "Dein Fahrzeug wird betankt, bitte warten ...");
                ShowBuyInformation(playerid,"~y~Fahrzeug wird ~w~betankt!");
                return 1;
            }
            else { // EC-Karte
                if (!Spieler[playerid][pBankKonto]) return SendClientMessage(playerid, COLOR_RED, "Du hast kein Bankkonto.");
                if (Spieler[playerid][pBank] < price) return SendClientMessage(playerid, COLOR_RED, "So viel Geld hast du nicht auf dem Konto.");
                return ShowPlayerDialog(playerid, DIALOG_FILLUP_ECPIN, DIALOG_STYLE_INPUT, "Tankstelle - Bankpin", "Bitte gebe deinen EC-Pin ein:", "Bestätigen", "Abbrechen");
            }
        }
        case DIALOG_FILLUP_ECPIN: {
            if (Refueling[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du tankst bereits!");
            new menge = GetPVarInt(playerid, "FILLUP.AMOUNT"), tanke = IsPlayerAtTanke(playerid);
            if (tanke == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr an einer Tankstelle.");
            if (menge < 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst keine 0 Liter tanken.");
            new price = menge * Tanke[tanke][taiFillCost][RefuelType[playerid]];
            new vehicleid = GetPlayerVehicleID(playerid);
            if (!vehicleid) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug mehr.");
            if (vehicleRefueling[vehicleid]) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird bereits betankt.");

            if (!response) return 1;
            if (strval(inputtext) != Spieler[playerid][pBankKontoPin]) {
                SendClientMessage(playerid, COLOR_RED, "Dein EC-Pin war nicht korrekt!");
                return ShowPlayerDialog(playerid, DIALOG_FILLUP_ECPIN, DIALOG_STYLE_INPUT, "Tankstelle - Bankpin", "Bitte gebe deinen EC-Pin ein:", "Bestätigen", "Abbrechen");
            }

            DeletePVar(playerid, "FILLUP.AMOUNT");
            SetTimerEx("Fillup", RefuelWait, 0, "iiiii", playerid, menge, price, RefuelType[playerid], 1);
            Refueling[playerid] = vehicleid;
            vehicleRefueling[vehicleid] = 1;
            FreezePlayer(playerid);
            SendClientMessage(playerid, COLOR_WHITE, "Dein Fahrzeug wird betankt, bitte warten ...");
            ShowBuyInformation(playerid,"~y~Fahrzeug wird ~w~betankt!");
            return 1;
        }
        case DIALOG_TANKE: {
            if(response) {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tanke!");
                if(Tanke[t][tBenzin] < 1)return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat kein Benzin mehr.");
                new
                    vehicleid,
                    modelid;
                vehicleid = GetPlayerVehicleID(playerid);
                if(vehicleid) {
                    modelid = GetVehicleModel(vehicleid);
                    if( GetVehicleModelKraftstoff(modelid) != listitem ) {
                        return SendClientMessage(playerid, COLOR_RED, "Dein Fahrzeug verträgt diesen Kraftstoff nicht.");
                    }
                    RefuelType[playerid] = listitem;
                    ShowPlayerDialog(playerid,DIALOG_TANKMENGE,DIALOG_STYLE_INPUT,"Tankmenge","Gib die Tankmenge in Litern unten an","Auftanken","Abbruch");
                    /*
                    SetTimerEx("Fillup", RefuelWait, 0, "ii", playerid,listitem);
                    Refueling[playerid] = 1;
                    FreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_WHITE, "Dein Fahrzeug wird betankt, bitte warten ...");
                    */
                }
            }
        }
        case DIALOG_CHECK_SECURECODE: {
            new
                String[128],
                query[128];
            if(response) {
                mysql_real_escape_string(inputtext,String,gSQL,sizeof(String) );
                format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND `SecureCode` = '%s'",GetName(playerid),String);
                mysql_pquery(query,THREAD_CHECK_SECURECODE,playerid,gSQL,MySQLThreadOwner);
                // -> Threaded
            }
            else {
                format(String,sizeof(String),"Ein Teammitglied hat dich zur Sicherheitsabfrage geschickt, um dich als Account Eigentümer zu identifizieren.\n\nGib deinen Sicherheitscode korrekt ein! ( %d/3 ):",Spieler[playerid][pSecureCodeLevel]);
                ShowPlayerDialog(playerid, DIALOG_CHECK_SECURECODE , DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"Sicherheitsabfrage:", String , "Absenden" , "");
            }
        }
        case DIALOG_SET_SECURECODE: {
            if(response) {
                new
                    securecode[128],
                    string[128],
                    len;
                len = strlen(inputtext);
                if( !(4 <= len <= 10) ) {
                    SendClientMessage(playerid,COLOR_RED,"Dein Sicherheitscode ist zu lang bzw zu kurz ( 4 - 10 Zeichen )");
                    return ShowPlayerDialog(playerid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben,\ndarf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
                }
                mysql_real_escape_string(inputtext,securecode,gSQL,sizeof(securecode) );
                format(string,sizeof(string),"UPDATE `accounts` SET `SecureCode` = '%s' WHERE `Name` = '%s'",securecode,GetName(playerid));
                mysql_pquery(string,THREAD_SET_SECURECODE,playerid,gSQL,MySQLThreadOwner);

                format(string,sizeof(string),"Dein Sicherheitscode wurde gespeichert! ( %s )",securecode);
                SendClientMessage(playerid,COLOR_YELLOW,string);

                SpawnPlayerEx(playerid);
                SetCameraBehindPlayer(playerid);
            }
            else {
                return ShowPlayerDialog(playerid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            }
        }
        case DIALOG_SECURECODE_REGISTER: {
            if(response) {
                new
                    securecode[128],
                    string[128],
                    len;
                len = strlen(inputtext);
                if( !(4 <= len <= 10) ) {
                    SendClientMessage(playerid,COLOR_RED,"Dein Sicherheitscode ist zu lang bzw zu kurz ( 4 - 10 Zeichen )");
                    return ShowPlayerDialog(playerid,DIALOG_SECURECODE_REGISTER,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
                }
                mysql_real_escape_string(inputtext,securecode,gSQL,sizeof(securecode) );
                format(string,sizeof(string),"UPDATE `accounts` SET `SecureCode` = '%s' WHERE `Name` = '%s'",securecode,GetName(playerid));
                mysql_pquery(string,THREAD_SET_SECURECODE,playerid,gSQL,MySQLThreadOwner);

                format(string,sizeof(string),"Dein Sicherheitscode wurde gespeichert! ( %s )",securecode);
                SendClientMessage(playerid,COLOR_YELLOW,string);

                // Tutorial starten
                SendClientMessage(playerid,COLOR_WHITE,"Du hast ein Großteil geschaft! Jetzt bekommst du noch eine schnell Server Einführung,");
                SendClientMessage(playerid,COLOR_WHITE,"lehne dich zurück und schaue es dir an");
                ShowPlayerDialog(playerid, DIALOG_TUT_2, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Tutorial: Fragen",string, "Weiter", "Abbrechen");
                //ALT TUTORIAL SpawnPlayer(playerid);
            }
            else {
                return ShowPlayerDialog(playerid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            }
        }
        case DIALOG_WLAGERCOP: {
            if(response) {
                if(listitem == 0 ) {
                    GivePlayerWeapon(playerid, 29, 150);
                }
                else if(listitem == 1 ) {
                    GivePlayerWeapon(playerid, 25, 20);
                }
                else if(listitem == 2 ) {
                    GivePlayerWeapon(playerid, 34, 20);
                }
                else if(listitem == 3 ) {
                    GivePlayerWeapon(playerid, 17, 10);
                }
                else if(listitem == 4 ) {
                    GivePlayerWeapon(playerid, 43, 30);
                }
                else if(listitem == 5 ) {
                    GivePlayerWeapon(playerid, 46, 1);
                }
            }
        }
        case DIALOG_STARTBONUS: {
            if(response) {
                if( Spieler[playerid][pStartbonus] ) return 1;
                new
                    geld,
                    respekt,
                    String[128];
                if(listitem == 0 ) {
                    respekt = 3;
                    format(String,sizeof(String),"Du hast folgenden Startbonus gewählt: %d Respektpunkte",respekt);
                }
                else if(listitem == 1 ) {
                    geld = 15000;
                    format(String,sizeof(String),"Du hast folgenden Startbonus gewählt: +$%s", AddDelimiters(geld));
                }
                // Zufall
                else if(listitem == 2 ) {
                    if( random(2) == 0 ) {
                        geld = 18000;
                        respekt = 2;
                    }
                    else {
                        geld = 8000;
                        respekt = 4;
                    }
                    format(String,sizeof(String),"Du hast den Zufalls Startbonus gewählt: %d Respektpunkte und +$%s",respekt, AddDelimiters(geld));
                }
                Spieler[playerid][pExp] += respekt;
                GivePlayerCash(playerid,geld);

                SendClientMessage(playerid,COLOR_LIGHTRED2,String);
                Spieler[playerid][pStartbonus] = 1;
                format(String,sizeof(String),"UPDATE `accounts` SET `Startbonus` = 1 WHERE `Name` = '%s'",GetName(playerid) );
                mysql_pquery( String , THREAD_STARTBONUS , playerid, gSQL,MySQLThreadOwner);
            }
        }
        case DIALOG_CMDHELP: {
            if(response) {
                if(listitem == 0 ) {
                    ShowPlayerDialog(playerid,DIALOG_ANTWORT,DIALOG_STYLE_LIST, COLOR_HEX_LIGHTBLUE "ANTWORT ZU WICHTIGEN FRAGEN","Respektpunkte und LevelUP\nSpielgeld\ndas Forum\ndas User Control Panel\ndie Server Regeln\nAdministrative Sanktionierungen\nNoDM Zonen\nWaffenverbotszonen\nHäuser und Geschäfte\nPrivatfahrzeuge\nFirmen und Berufe\nBank, Finanzen und OnlineBanking\nHandy und Guthaben\nKleidung und Charakter\nAngeln und Fische","Weiter","Abbruch");
                }
                if(listitem == 1 ) {
                    SendClientMessage(playerid, COLOR_BLUE, "* STATISTIKEN *: {FFFFFF}/Stats, /Skill, /Scheine, /Pass, /Vertrag, /Serverinfo, /Delmarker, /Angelstats, /Finanzen, /sInfo(FPS und Ping anzeigen)");
                    SendClientMessage(playerid, COLOR_BLUE, "* HILFE-BEFEHLE *:{FFFFFF}/Sup(Support-Ticket), /Admin(Notruf-Admin), /Anrufen 110 (POLIZEI-NOTRUF), /Anrufen 112 (RETTUNGSDIENST), /Service");
                    SendClientMessage(playerid, COLOR_BLUE, "* ORIENTIERUNG *:{FFFFFF}/Navi (wichtige Orte finden), /Suche (Spielersuche), /Spielerinfo (Letzter Login von einem Spieler erfahren)");
                    SendClientMessage(playerid, COLOR_BLUE, "* KONSUMIEREN *: {FFFFFF}/Nimmdrogen, /Isskeks, /Rauchzig, /Zigweg");
                    SendClientMessage(playerid, COLOR_BLUE, "* ALLGEMEIN *: {FFFFFF}/Geben, /Liste, /Inventar, /Koffer, /Kofferauf, /Firmen, /Kampfstyle, /Pickwaffe, /Sellkekse");
                    SendClientMessage(playerid, COLOR_BLUE, "* ALLGEMEIN *: {FFFFFF}/Jailtime, /Tottime, /Mutetime, /Animlist, /Staatskasse, /Killauftrag, /Leader, /Gutscheincode");
                    SendClientMessage(playerid, COLOR_BLUE, "* GELD-BEFEHLE *: {FFFFFF}/Automat, /Ueberweisen, /Gebecheck, /Guthaben, /Zahlen");
                    SendClientMessage(playerid, COLOR_BLUE, "* GANGFIGHT-BEFEHLE *: {FFFFFF}/Gangfightwette, /Gangfightinfo");
                    SendClientMessage(playerid, COLOR_BLUE, "* RAUBBEFEHLE *: {FFFFFF}/Transporterausrauben, /Bankausrauben, /Tankstelleausrauben");
                    SendClientMessage(playerid, COLOR_BLUE, "* CASINO-BEFEHLE *: {FFFFFF}/Spielautomat, /Wettspiel, /Kartenspiel, /Gluecksrad");
                }
                else if(listitem == 2 ) {
                        SendClientMessage(playerid, COLOR_BLUE, "* FAHRZEUG *: {FFFFFF}/Radio, /Carlock, /Carkey, /Findcar, /Flock, /Tanken, /Carsell");
                        SendClientMessage(playerid, COLOR_BLUE, "* FAHRZEUG *: {FFFFFF}/Parken, /Licht, /Motor, /Rauswerfen, /Kanister, /Kofferraum, /Kofferraumansehen");
                        SendClientMessage(playerid, COLOR_BLUE, "* AUSWEISUNG *: {FFFFFF}/Fahrzeugschein, /Scheine, /Scheinsperre, /Fahrzeuginfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* FAHRZEUG MIETEN *: {FFFFFF}/Lock, /Mieten, /Entmieten, /Mietlock, /Findmietcar");
                }
                else if(listitem == 3 ) {
                        SendClientMessage(playerid, COLOR_BLUE, "* HAUS - ALLGEMEIN *: {FFFFFF}/Hauskaufen, /Zuhause, /Spawnchange");
                        SendClientMessage(playerid, COLOR_BLUE, "* HAUS - MIETER *: {FFFFFF}/Hausmieten, /Hausentmieten, /Haustuer");
                        SendClientMessage(playerid, COLOR_BLUE, "* HAUS - BESITZER*: {FFFFFF}/Hausmenu, /Hausverkaufen, /Hausverstaatlichen, /Hausmietung, Hausraus");
                        SendClientMessage(playerid, COLOR_BLUE, "* HAUS - BESITZER*: {FFFFFF}/Hausrausalle, /Mietpreis, /Hausmieter, /Offhausraus, /Hauskasse, /Hauskassestand");
                        /*SendClientMessage(playerid, COLOR_BLUE, "* HAUS - BESITZER*: {FFFFFF}/Hausabgeben - damit verkaufst du dein Haus an den Staat und erhältst");
                        SendClientMessage(playerid, COLOR_BLUE, "{FFFFFF}nur ein DRITTEL des Kaufpreises zurück!!!");*/
                        SendClientMessage(playerid, COLOR_BLUE, "* HOTEL *: {FFFFFF}/Hoteltuer, /Miethotelraum, /Entmietenhotelraum");
                }
                else if(listitem == 4 ) {
                        SendClientMessage(playerid, COLOR_BLUE, "* GESCHÄFT *: {FFFFFF}/Bizkaufen, /Bizverkaufen, /Bizverstaatlichen, /Bizkassestand, /Bizkasse, /Biztuer, /Eintritt, /Warenkaufen");
                        SendClientMessage(playerid, COLOR_BLUE, "* TANKSTELLE *: {FFFFFF}/Tankekaufen, /Tankstelleverkaufen, /Tankeverstaatlichen, /Maxbenzin, /Tankkassestand, /Tankkasse");
                        SendClientMessage(playerid, COLOR_BLUE, "* TANKSTELLE *: {FFFFFF}/Tankpreis, /Tankstellensecurity, /Tankkaufen");
                        SendClientMessage(playerid, COLOR_BLUE, "* SPRITVERKAUFSSTELLEN *: {FFFFFF}/Spritverkaufsstelle1, /Spritverkaufsstelle2, /Spritverkaufsstelle3");
                        SendClientMessage(playerid, COLOR_BLUE, "* WARENVERKAUFSSTELLEN *: {FFFFFF}/Warenverkaufsstelle1, /Warenverkaufsstelle2, /Warenverkaufsstelle3");
                        SendClientMessage(playerid, COLOR_BLUE, "* FIRMA *: {FFFFFF}/Firmenkasse, /Firmengehalt, /Firmennachricht, /Entlassen, /Firmen");
                }
                else if(listitem == 5 ) {
                        SendClientMessage(playerid, COLOR_BLUE, "* CHAT *: {FFFFFF}/F (Flüstern), /S (Schreien), /Nc (Neulingschat), /Ic (Ingame-Charakter), /chatanim (automatische Animation)");
                        SendClientMessage(playerid, COLOR_BLUE, "* CHAT *: {FFFFFF}/Gc (Globaler Chat), /Chatoff (um für sich bestimmte Chats auszublenden)");
                        SendClientMessage(playerid, COLOR_BLUE, "* HANDY *: {FFFFFF}/Anrufen, /Sms, /Auflegen, /Abnehmen, /Guthaben, /Handystatus");
                }
                else if(listitem == 6 ) {
                        SendClientMessage(playerid, COLOR_BLUE, "* FS-KONSOLE *: {FFFFFF}/Sendfs, /Delfs, /Fsliste, /Fschat");
                }
                else if(listitem == 7 ) {
                        SendClientMessage(playerid, COLOR_BLUE, "* HAUSTIER BEFEHLE *: {FFFFFF}/Haustier, /Sellhaustier, /Fuettern, /Haustiershop");
                }
                else if(listitem == 8 ) {
                        SendClientMessage(playerid, COLOR_BLUE, "* WEITERE BEFEHLE *: {FFFFFF}/Leaderhelp, /Clubhelp, /Werbetafelkaufen, /Werbetafelfinden, /Werbetafel");
                }
                else if(listitem == 9 ) {
                    if(Spieler[playerid][pJob] == 1)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* FARMER *: {FFFFFF}/Jc, /Startbauer, /Stopbauer, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Bauer ist es an BlueBerry Farm zu ernten und abzuernten. \n");
                        format(string2, sizeof(string2), "Die Farm findest du unter /Showjob, zudem hast du an der Farm auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startbauer => Damit begingst du die Arbeit.\n/Stopbauer => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Bauer Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF BAUER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 2)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* BUSFAHRER *: {FFFFFF}/Jc, /Startlinie, /Stoplinie, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Busfahrer ist es mit dem Bus die Haltestellen abzufahren. \n");
                        format(string2, sizeof(string2), "Die Busstation findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startlinie => Damit begingst du die Arbeit.\n/Stoplinie => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Busfahrer Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF BUSFAHRER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 3)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* TRUCKER *: {FFFFFF}/Jc, /Loadbenzin, /Startbenzin, /Loadwaren, /Startwaren, /Ladung, /Showjob, /Entladen");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Als Trucker lieferst du Sprit und Waren an die verschiedenen Logistikzentren in Los Santos und Las Venturas. \n");
                        format(string2, sizeof(string2), "Die Truckerstation findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Loadwaren => Damit lädst du Waren in deinen LKW ein.\n/Loadbenzin => Damit lädst du Benzin in deinen Tanklaster ein.\n/Entladen => Damit entlädst du die Waren/das Benzin am Ablieferungsort.\n/Ladung => Du siehst, wie viel Ladung du bereits geladen hast.\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt");
                        format(string4, sizeof(string4), "\n/Jc => Der Trucker Jobchat \n\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF TRUCKER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 4)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* PILOT *: {FFFFFF}/Jc, /Startflug, /Stopflug, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Pilot ist es mit einem Flugzeug Stadt zur Stadt Sachen zu liefern. \n");
                        format(string2, sizeof(string2), "Den Flughafen findest du unter /Showjob, zudem hast du am Flughafen auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startflug => Damit beginnst du die Arbeit.\n/Stopflug => Damit beendest du mittendrin die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Piloten Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF PILOT", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 5)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* KFZ *: {FFFFFF}/Jc, /Nachtanken, /Reparieren, /Sliste, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Mechatroniker ist es Service Anrufe entgegen zu nehmen und Fahrzeuge zu tanken und zu reparieren. \n");
                        format(string2, sizeof(string2), "Die Mechatroniker Station findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string2, sizeof(string2), "Du kannst aber natürlich auch Service-Anrufe und Reparaturen und desweiteren mit deinem Privatfahrzeug durchführen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Nachtanken => Damit tankst du Fahrzeuge auf.\n/Reparieren => Damit reparierst du Fahrzeuge.\n/Sliste => Siehst du eingegangene Service-Anrufe\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Mechatroniker Jobchat \n");
                        format(string4, sizeof(string4), "\n\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF MECHATRONIKER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 6)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* ANWALT *: {FFFFFF}/Jc, /Befreien, /Showjob, /Sliste, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Anwalt ist es Inhaftierte zu vertreten und aus dem Gefängnis zu holen. \nVor den Gefängniszellen im LSPD kannst du als Anwalt inhaftierte rausholen, zudem hast du im ");
                        format(string2, sizeof(string2), "Anwaltsbüro(Im LSPD) auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n\nBefehle:\n{0077FF}/Befreien => Inhaftierten vertreten und unter Kaution und Honorarkosten aus dem Gefängnis befreien.");
                        format(string3, sizeof(string3), "\n/Sliste => Siehst du eingegangene Service-Anrufe\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Anwalt Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF ANWALT", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 7)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* STRAßENREINIGER*: {FFFFFF}/Jc, /Startreinigung, /Stopreinigung, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Straßenreiniger ist es die Straßen von Los Santos zu reinigen. \n");
                        format(string2, sizeof(string2), "Die Straßenreinigungsstation findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startreinigung => Damit beginnst du die Arbeit.\n/Stopreinigung => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Straßenreiniger Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF STRAßENREINIGER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 8)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* MÜLLMANN *: {FFFFFF}/Jc, /Startmuell, /Stopmuell, /Showjob, /Entleeren, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Müllmann ist es die vollen Mülltonnen zu leeren und fachgerecht zu entsorgen. \n");
                        format(string2, sizeof(string2), "Das Mülldepot findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startmuell => Damit beginnst du die Arbeit.\n/Stopmuell => Damit beendest du die Arbeit.\n/Entleeren => Leerst du die vollen Mülltonnen.\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Müllmann Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF MÜLLMANN", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 9)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* GÄRTNER *: {FFFFFF}/Jc, /Startgarten, /Stopgarten, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Gärtner ist es neue Pflanzen zu ernten, damit die Stadt schöner aussieht. \n");
                        format(string2, sizeof(string2), "Die Gärtnerei findest du unter /Showjob, zudem hast du an der Gärtnerei auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startgarten => Damit beginnst du die Arbeit.\n/Stopgarten => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Gärtner Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF GÄRTNER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 10)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* BAUARBEITER *: {FFFFFF}/Jc, /Startbauarbeiter, /Stopbauarbeiter, /Steineladen, /Steineentladen, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Bauarbeiter ist es im Stadtwerk die Steine zu transportieren. \n");
                        format(string2, sizeof(string2), "Das Stadtwerk findest du unter /Showjob, zudem hast du an dem Stadtwerk auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startbauarbeiter => Damit beginnst du die Arbeit.\n/Stopbaurbeiter => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Bauarbeiter Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF BAUARBEITER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 11)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* SCHIFFS-FAHRER *: {FFFFFF}/Jc, /Startschiff, /Stopschiff, /Frachtladen, /Frachtentladen, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Schiffsfahrer ist es mit dem Schiff eine Fracht zu liefern. \n");
                        format(string2, sizeof(string2), "Den Hafen findest du unter /Showjob, zudem hast du am Hafen auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startschiff => Damit beginnst du die Arbeit.\n/Stopschiff => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Schiffsfahrer Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF SCHIFFSFAHRER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 12)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* GELD-TRANSPORTFAHRER *: {FFFFFF}/Jc, /Starttransport, /Stoptransport, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Geldtransportfahrer ist die Geldautomaten mit Geld aufzufüllen. \n");
                        format(string2, sizeof(string2), "Die Sicherheitstransporter findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Starttransport => Damit beginnst du die Arbeit.\n/Stoptransport => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Geldtrans. Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF GELDTRANSPORTER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 13)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* EISMANN *: {FFFFFF}/Jc, /Eisverkaufen, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Eisverkäufer ist es anderen ein leckeres Eis zu verkaufen. \n");
                        format(string2, sizeof(string2), "Die Eiswagen findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Eisverkaufen => Damit verkaufst du Eis.\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Eisverkäufer Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF EISVERKÄUFER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 14)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* DETEKTIV *: {FFFFFF}/Jc, /Dfinden, /Dzeigen, /Skill");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Detektiv ist es andere Leute zu spionieren. \n");
                        format(string2, sizeof(string2), "Meist werden Detektive von Polizisten gebraucht, um bei Ermittlungen zu helfen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Dfinden => Ein Spieler orten.\n{0077FF}/Dzeigen => Zeigst du einem Spieler, wo der Gesuchte sich befindet..\n/Skill => Dein aktueller Detektiv-Skill\n/Jc => Der Detektiv Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF DETEKTIV", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 15)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* PIZZALIEFERANT *: {FFFFFF}/Jc, /Pizzaverkaufen, /Sliste, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Pizzalieferant ist es anderen Pizza zu liefern/verkaufen. \n");
                        format(string2, sizeof(string2), "Die Pizzaria findest du unter /Showjob, zudem hast du an der Pizzaria auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Pizzaverkaufen => Damit verkaufst du Pizza.\n/Sliste => Siehst du eingegangene Bestellungen\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Pizza Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF PIZZALIEFERANT", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 16)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* TAXIFAHRER *: {FFFFFF}/Jc, /Starttaxi, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Taxifahrer ist es andere an bestimmten Orten hinzufahren. \n");
                        format(string2, sizeof(string2), "Die Taxifahrerstation findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Starttaxi => Damit beginnst du die Arbeit und legst ein Fahrpreis fest.\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Taxifahrer Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Verdienst erhältst du cash vom Kunden!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF TAXIFAHRER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 17)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* DROGENDEALER *: {FFFFFF}/Jc, /Paketeinladen, /Paketentladen, /Selldrogen, /Safebox, /Skill, /Showjob");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Drogendealer ist es Pakete aufzuladen und, sie an einem bestimmten Ort zu entladen und Drogen zu verkaufen. \n");
                        format(string2, sizeof(string2), "Die Drogendealer-Cars findest du unter /Showjob. Achte drauf, dass dich kein Polizist beim Drogenverkauf erwischt!\n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Paketeinladen => Damit nimmst Drogenpakete in dein Van auf.\n/Paketentladen => Damit lässt du die aufgeladenen Drogenpakete am SF-Hafen ab.\n/Selldrogen => Damit verkaufst du Drogen.\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt.\n/Jc => Der Dealer Jobchat.\n");
                        format(string4, sizeof(string4), "\n/Skill => Dein aktueller Detektiv-Skill\n\n{00AA00}Dein Gehalt erhältst du vom Käufern!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF DROGENDEALER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 18)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* WAFFENDEALER *: {FFFFFF}/Jc, /Paketeinladen, /Paketentladen, /Sellgun, /Safebox, /Skill, /Showjob");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Waffendealer ist es Pakete aufzuladen und, sie an einem bestimmten Ort zu entladen und Waffen zu verkaufen. \n");
                        format(string2, sizeof(string2), "Die Waffendealer-Cars findest du unter /Showjob. Achte drauf, dass dich kein Polizist beim Waffenverkauf erwischt!\n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Paketeinladen => Damit nimmst du Pakete in dein Van auf.\n/Paketentladen => Damit lässt du die aufgeladenen Pakete am SF-Hafen ab.\n/Sellgun => Damit verkaufst du Waffen, die du aus deinen Waffenteilen baust.\n/Sellwaffenteile => Damit kannst du deine Waffenteile verkaufen.\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Dealer Jobchat\n");
                        format(string4, sizeof(string4), "\n/Skill => Dein aktueller Detektiv-Skill\n\n{00AA00}Dein Gehalt erhältst du vom Käufer!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF WAFFENDEALER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 19)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* TASCHENDIEB *: {FFFFFF}/Jc, /Tascheklauen");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Taschendieb ist es andere zu beklauen. \n");
                        format(string2, sizeof(string2), "Achte drauf, dass dich kein Polizist beim Klauen erwischt!\n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Tascheklauen => Damit beklaust du andere.\n/Jc => Der Taschendieb Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Deine geklaute Beute erhältst du cash!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF TASCHENDIEB", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 20)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* PROSTITUIERTE *: {FFFFFF}/Jc, /Sex");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Prostituierte ist es andere in einem Fahrzeug zu befriedigen. \n");
                        format(string2, sizeof(string2), "Achte drauf, dass keine Geschlechtskrankheiten übertragen werden!\n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Sex => Damit befriedigst du dein Kunden.\n/Jc => Der Huren Jobchat \n");
                        format(string4, sizeof(string4), "\n\n{00AA00}Dein Gehalt erhältst du vom Kunden!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF PROSTITUIERTE", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 21)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* WANTED-HACKER *: {FFFFFF}/Jc, /Wantedhacken, /Wcodes, /Showjob /Sellwantedcodes");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Als Wantedhacker musst du dich in den Polizeicomputer reinhacken. Damit das funktioniert, benötigst du Hackercodes. \n");
                        format(string2, sizeof(string2), "Mit deinen Hackercodes musst du in einem Van sitzen und in der Nähe des Los Santos Police Department sein. \nAchte drauf, dass dich kein Polizist beim Hacken erwischt!\n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Wcodes => Damit generierst du die Wantedcodes\n/Wantedhacken => Damit hackst du dich in den Polizeicomputer hinein.\n/Jc => Der W-Hacker Jobchat \n");
                        format(string4, sizeof(string4), "\n\n{00AA00}Dein Gehalt erhältst du vom Kunden!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF WANTEDHACKER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 22)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* AUTODIEB *: {FFFFFF}/Jc, /Autoknacken");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Autodieb ist es das Privatfahrzeug von anderen zu klauen und zu verkaufen. \n");
                        format(string2, sizeof(string2), "Achte drauf, dass dich kein Polizist beim klauen erwischt!\n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Autoknacken => Damit knackst du Fahrzeuge auf.\n/Jc => Der Autoknacker Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Das Geld für die geklauten Autos erhältst direkt am SF-Kran!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF TASCHENDIEB", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 23)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* ZUGFAHRER *: {FFFFFF}/Jc, /Startzug, /Stopzug, /Showjob, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Zugfahrer ist es mit dem Bus die Haltestellen abzufahren. \n");
                        format(string2, sizeof(string2), "Die Zugstation findest du unter /Showjob, zudem hast du an der Station auch die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Startzug => Damit beginnst du die Arbeit.\n/Stopzug => Damit beendest du die Arbeit\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Zugfahrer Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF ZUGFAHRER", string4, "OK", "");
                    }
                    else if(Spieler[playerid][pJob] == 24)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* HOTDOGMANN *: {FFFFFF}/Jc, /Hotdogverkaufen, /Jobkleidung");
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Deine Aufgabe als Hotdog Verkäufer ist es anderen ein leckeren, warmen Hotdog zu verkaufen \n");
                        format(string2, sizeof(string2), "Deine Arbeitsstelle findest du unter /Showjob, zudem hast du an deinem Arbeitsplatz die Möglichkeit deine Arbeitsuniform anzuziehen. \n");
                        format(string3, sizeof(string3), "\nBefehle:\n{0077FF}/Hotdogverkaufen => Damit kannst du anderen einen Hotdog anbieten.\n/Showjob => Dein Arbeitsplatz/Ort wird dir als Marker angezeigt\n/Jc => Der Jobchat \n");
                        format(string4, sizeof(string4), "\n{00AA00}Dein Gehalt erhältst du am kommenden PayDay!\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                        format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                        ShowPlayerDialog(playerid, DIALOG_BAUERHELP, DIALOG_STYLE_MSGBOX, "BERUF HOTDOG-VERKÄUFER", string4, "OK", "");
                    }
                }
                else if(listitem == 10 ) {
                    if(Spieler[playerid][pFraktion] == 1)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD ALLGEMEIN*: {FFFFFF} /Clear, /Tor, /Dienst, /sliste, /Mitglieder, /Dienstmarke, /sp, /Staatskasse, /Haussuchen, /RufDetektiv, /Beamteon");
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD VOLLSTRECKUNG*: {FFFFFF}/Reinziehen, /Freilassen, /Verhaften, /Entnehmen, /Koffereinziehen, /Offlinearrest");
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD VOLLSTRECKUNG*: {FFFFFF}/Scheinentziehen, /Arrest, /W (Wantedvergabe), /Caufbrechen, /Zollamt, /Ticket, /Schutzgeldstop");
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD VOLLSTRECKUNG*: {FFFFFF}/Aufbrechen, /Knastzeit, /Finden, /Pflanzen verbennen, /Zollsperre, /Parkstrafe, /Strafzettel");
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD CHAT*: {FFFFFF}/Fc, /Bc, /Vk(VERSTÄRKUNG), /Pvk(VERSTÄRKUNG BEI EINZELNE PERSON), /Cpartner, /Ve");
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD KONTROLLEN*: {FFFFFF}/Kofferdurchsuchen, /Durchsuchen /Promille, /Pakte, /Gefangene, /Meldestelle, /Parkscheinkontrolle, /Vamt");
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD AUSRÜSTUNG*: {FFFFFF}/Copman, /Copfrau, /Rank, /Copcap, /Copcapf, /Copmuetze, /Pschild, /Copbrille, /Pswat, /Waffenspind");
                        SendClientMessage(playerid, COLOR_BLUE, "* LSPD SIGNALE*: {FFFFFF}/Vrk, /Hsirene, /Ermitteln, /Pein");

                    }
                    else if(Spieler[playerid][pFraktion] == 2)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI ALLGEMEIN*: {FFFFFF} /Clear, /Tor, /Dienst, /Mitglieder, /Sliste, /Dienstmarke, /Ngb, /Staatskasse, /Haussuchen, /RufDetektiv, /Beamteon");
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI VOLLSTRECKUNG*: {FFFFFF}/Reinziehen, /Freilassen, /Verhaften, /Entnehmen, /Koffereinziehen, /Offlinearrest");
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI VOLLSTRECKUNG*: {FFFFFF}/Scheinentziehen, /Arrest, /W (Wantedvergabe), /Caufbrechen, /Zollamt");
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI VOLLSTRECKUNG*: {FFFFFF}/Aufbrechen, /Knastzeit, /Finden, /Pflanzen verbrennen, /Zollsperre, /Ticket, /Schutzgeldstop");
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI CHAT*: {FFFFFF}/Fc, /Bc, /Vk(VERSTÄRKUNG), /Pvk(VERSTÄRKUNG BEI EINZELNE PERSON), /Cpartner, /Ve");
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI KONTROLLEN*: {FFFFFF}/Kofferdurchsuchen, /Durchsuchen, /Promille, /Pakte, /Gefangene, /Meldestelle, /Vamt");
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI AUSRÜSTUNG*: {FFFFFF}/Cop, /Copcap, /Pschild, /Pswat, /Copbrille, /Rcv");
                        SendClientMessage(playerid, COLOR_BLUE, "* FBI SIGNALE*: {FFFFFF}/Vrk, /Hsirene, /Ermitteln, /Pein");
                    }
                    else if(Spieler[playerid][pFraktion] == 3)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* SA-MD *: {FFFFFF}/Dienst, /Wiederbeleben, /Sheilen, /Mv, /M, /Fc, /Kasse, /Kassenstand");
                        SendClientMessage(playerid, COLOR_BLUE, "* SA-MD *: {FFFFFF}/Mitglieder, /Sfinden, /Bc, /Sliste, /Rtwsirene, /Meinsatz, /Bk, /Dtasche [Links/Rechts]");
                    }
                    else if(Spieler[playerid][pFraktion] == 4)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* SA-NA *: {FFFFFF}/Dienst, /News, /Starteventpoint, /Stopeventpoint, /Interview, /Fc, /Kasse, /Kassenstand, /Mitglieder");
                    }
                    else if(Spieler[playerid][pFraktion] == 5)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* O-AMT ALLGEMEIN*: {FFFFFF}/Dienst, /Ov, /Tor, /Oamt, /Beamteon, /Mitglieder, /Zollamt, /Dienstmarke, /Kasse, /Kassenstand");
                        SendClientMessage(playerid, COLOR_BLUE, "* O-AMT VOLLSTRECKUNG*: {FFFFFF}/Fpunkte, /Ticket, /Strafzettel, /Parkstrafe, /Entnehmen, /Koffereinziehen, /Scheinentziehen, /Blitzerabbauen");
                        SendClientMessage(playerid, COLOR_BLUE, "* O-AMT VOLLSTRECKUNG*: {FFFFFF}/Tierverbot, /Deltierverbot, /Oparken, /Ofreistellen, /Fmparkkralle, /Mparkkralle/Blitzeraufstellen");
                        SendClientMessage(playerid, COLOR_BLUE, "* O-AMT KONTROLLEN*: {FFFFFF}/Durchsuchen /Kofferdurchsuchen, /Vamt, /Pakte, /Kzsuchen, /Kfzsuchen, /Promille");
                        SendClientMessage(playerid, COLOR_BLUE, "* O-AMT KONTROLLEN*: {FFFFFF}/Parkscheinkontrolle, /Meldestelle, /Sliste /Vrk /Vrk2");
                        SendClientMessage(playerid, COLOR_BLUE, "* O-AMT CHAT*: {FFFFFF}/Bc, /Fc, /M, /Ovk(VERSTÄRKUNG)");

                    }
                    else if(Spieler[playerid][pFraktion] == 6)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* GROVE ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* GROVE KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* GROVE BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* GROVE GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* GROVE ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    else if(Spieler[playerid][pFraktion] == 7)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* BALLAS ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* BALLAS KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* BALLAS BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* BALLAS GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* BALLAS ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    else if(Spieler[playerid][pFraktion] == 8)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* FAHRSCHULE *: {FFFFFF}/Startstunde, /Stopstunde, /Startwastunde, /Stopwastunde, /Startwbstunde, /Stopwbstunde");
                        SendClientMessage(playerid, COLOR_BLUE, "* FAHRSCHULE *: {FFFFFF}/Mitglieder, /Fpreis, /Respawnanhanger, /Kasse, /Kassenstand");
                        SendClientMessage(playerid, COLOR_BLUE, "* FAHRSCHULE *: {FFFFFF}/Giveschein, /Fc, /Dienst, /Respawncars, /Fstorauf, /Fstorzu, /Fstuerauf, /Fstuerzu");
                    }
                    else if(Spieler[playerid][pFraktion] == 9)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* STAAT *: {FFFFFF}/Setsteuern, /Smsg, /Bc, /Dienstmarke, /Kasse, /Kassenstand, /Fc, /Mitglieder");
                        SendClientMessage(playerid, COLOR_BLUE, "* STAAT *: {FFFFFF}/Amtssteuern, /Staatssystem, /Jobfeuern, /Gebefirma, /Delfirma, /Stelekom, /Ptorauf, /Ptorzu");
                    }
                    else if(Spieler[playerid][pFraktion] == 10)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* YAKUZA ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* YAKUZA KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* YAKUZA BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* YAKUZA GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* YAKUZA ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    else if(Spieler[playerid][pFraktion] == 11)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* AZTECAS ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* AZTECAS KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* AZTECAS BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* AZTECAS GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* AZTECAS ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    else if(Spieler[playerid][pFraktion] == 12)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* LCN ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* LCN KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* LCN BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* LCN GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* LCN ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    else if(Spieler[playerid][pFraktion] == 13)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* VAGOS ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* VAGOS KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* VAGOS BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* VAGOS GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* VAGOS ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    else if(Spieler[playerid][pFraktion] == 14)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* Hitman *: {FFFFFF}/Accept hitman, /Hitmanwaffen, /Gheilen, /Fc, /Flock, /Hitmanmaske, /Kasse, /Kassenstand, /Mitglieder, /hrelease");
                    }
                    else if(Spieler[playerid][pFraktion] == 15)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* NineDemons *: {FFFFFF}/Ninowaffen, /Gheilen, /Fsafebox, /Fc, /Flock, /Pflanzen");
                        SendClientMessage(playerid, COLOR_BLUE, "* NineDemons *: {FFFFFF}/Samen, /Samenpunkte, /Sellspice, /Kasse, /Kassenstand, /Mitglieder");
                    }
                    else if(Spieler[playerid][pFraktion] == 16)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY ALLGEMEIN*: {FFFFFF} /Clear, /Dienst, /Mitglieder, /Dienstmarke, /Staatskasse, /Beamteon");
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY VOLLSTRECKUNG*: {FFFFFF}/Reinziehen, /Freilassen, /Verhaften, /Entnehmen, /Koffereinziehen, /Offlinearrest");
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY VOLLSTRECKUNG*: {FFFFFF}/Scheinentziehen, /Arrest, /W (Wantedvergabe), /Caufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY VOLLSTRECKUNG*: {FFFFFF}/Aufbrechen, /Knastzeit, /Finden, /Pflanzen verbrennen");
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY CHAT*: {FFFFFF}/Fc, /Bc, /Vk(VERSTÄRKUNG), /Pvk(VERSTÄRKUNG BEI EINZELNE PERSON)");
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY KONTROLLEN*: {FFFFFF}/Kofferdurchsuchen, /Durchsuchen, /Promille, /Pakte, /Gefangene, /Meldestelle, /Vamt");
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY SIGNALE*: {FFFFFF}/Vrk, /Hsirene, /Ermitteln, /Pein");
                        SendClientMessage(playerid, COLOR_BLUE, "* ARMY AUSRÜSTUNG*: {FFFFFF}/Cop, /Copcap, /Pschild, /Pswat, /Copbrille, /Rcv");
                    }
                    else if(Spieler[playerid][pFraktion] == 17)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* WHEELMAN *: {FFFFFF}/Flock, /Wrz, /Wmbefreien, /Wpreis, /Knastbefreien, /Atorhacken, /Kasse, /Kassenstand, /Mitglieder");
                    }
                    else if(Spieler[playerid][pFraktion] == 18)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD ALLGEMEIN*: {FFFFFF} /Clear, /Dienst, /Mitglieder, /Sliste, /Dienstmarke, /Ngb, /Staatskasse, /Haussuchen, /Beamteon");
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD VOLLSTRECKUNG*: {FFFFFF}/Reinziehen, /Freilassen, /Verhaften, /Entnehmen, /Koffereinziehen, /Offlinearrest");
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD VOLLSTRECKUNG*: {FFFFFF}/Scheinentziehen, /Arrest, /W (Wantedvergabe), /Caufbrechen, /Zollamt, /Schutzgeldstop");
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD VOLLSTRECKUNG*: {FFFFFF}/Aufbrechen, /Knastzeit, /Finden, /Pflanzen verbrennen, /Zollsperre, /Parkstrafe, /Strafzettel");
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD CHAT*: {FFFFFF}/Fc, /Bc, /Vk(VERSTÄRKUNG), /Pvk(VERSTÄRKUNG BEI EINZELNE PERSON), /Cpartner, /Ve");
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD KONTROLLEN*: {FFFFFF}/Kofferdurchsuchen, /Durchsuchen, /Promille, /Pakte, /Gefangene, /Meldestelle, /Parkscheinkontrolle, /Vamt");
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD SIGNALE*: {FFFFFF}/Vrk, /Hsirene, /Ermitteln, /Pein");
                        SendClientMessage(playerid, COLOR_BLUE, "* LVPD AUSRÜSTUNG*: {FFFFFF}/Cop, /Copcap, /Pschild, /Pswat, /Copbrille, /Rcv");
                    }
                    else if(Spieler[playerid][pFraktion] == 19)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* TERRORIST *: {FFFFFF}/Fc (Frak-Chat), /Kasse, /Kassenstand, /Mitglieder, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* TERRORIST *: {FFFFFF}/Bombelegen, /Terrorwaffen, /Entfesseln, /Kidnap");
                    }
                    else if(Spieler[playerid][pFraktion] == 20)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* OUTLAWZ ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* OUTLAWZ KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* OUTLAWZ BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* OUTLAWZ GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* OUTLAWZ ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    else if(Spieler[playerid][pFraktion] == 21)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* TRIADEN ALLGEMEIN*: {FFFFFF}/Gangwaffen, /Gheilen, /Mitglieder, /Buendnis, /Kasse, /Kassenstand, /Fc, /Flock");
                        SendClientMessage(playerid, COLOR_BLUE, "* TRIADEN KIDNAP*: {FFFFFF}/Kidnap, /Mundbinde, /Augenbinde, /Fesseln, Entfesseln, /Gangjail, /Aufbrechen");
                        SendClientMessage(playerid, COLOR_BLUE, "* TRIADEN BLACKLIST*: {FFFFFF}/Frakblacklist, /Addfrakblacklist, /Delfrakblacklist");
                        SendClientMessage(playerid, COLOR_BLUE, "* TRIADEN GANGFIGHT*: {FFFFFF}/Gangfight, /Fge(Flaggeerobern), /Gangfightinfo");
                        SendClientMessage(playerid, COLOR_BLUE, "* TRIADEN ERPRESSUNG*: {FFFFFF}/Schutzgeld, /Schutzgeldabbrechen");
                    }
                    if(Spieler[playerid][pFraktion] == 22)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT ALLGEMEIN*: {FFFFFF} /Clear, /Dienst, /Mitglieder, /Dienstmarke, /Staatskasse");
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT VOLLSTRECKUNG*: {FFFFFF}/Reinziehen, /Freilassen, /Verhaften, /Entnehmen, /Koffereinziehen");
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT VOLLSTRECKUNG*: {FFFFFF}/Scheinentziehen, /Arrest, /W (Wantedvergabe), /Caufbrechen, /Zollamt");
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT VOLLSTRECKUNG*: {FFFFFF}/Aufbrechen, /Finden, /Pflanzen verbrennen, /Zollsperre");
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT CHAT*: {FFFFFF}/Fc, /Bc, /Vk(VERSTÄRKUNG), /Zvk(VERSTÄRKUNG BEI EINZELNE PERSON)");
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT KONTROLLEN*: {FFFFFF}/Kofferdurchsuchen, /Durchsuchen, /Promille, /Pakte, /Gefangene, /Meldestelle, /Vamt");
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT SIGNALE*: {FFFFFF}/Vrk, /Hsirene");
                        SendClientMessage(playerid, COLOR_BLUE, "* ZOLLAMT AUSRÜSTUNG*: {FFFFFF}/Cop, /Pschild, /Copbrille, /Rcv");
                    }
                }
                else if(listitem == 11 ) {
                    if(Spieler[playerid][pAdmin] >= 1)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* SUPPORTER *: {FFFFFF}/Goto, /Gethere, /Spawn, /Kick, /ban (Level 1-3), /spec, /specoff, /Adienst, /Aschlagen, /Gebannt, /Spawncar");
                        SendClientMessage(playerid, COLOR_ORANGE, "* SUPPORTER *: {FFFFFF}/Regsperre, /Setafk, /Mute, /Sichercode, /Ac, /Freeze, /Unfreeze, /Guncheck, /Checkscheine, /Supauto /Respawncar");
                        SendClientMessage(playerid, COLOR_BLUE, "* SUPPORT TICKET *: {FFFFFF}/Openticket, /Delticket, /Dticket, /Aticket, /Closeticket, /Tickets");
                        SendClientMessage(playerid, COLOR_ORANGE, "* SUPPORTER JOBS/FRAKTIONEN *: {FFFFFF}/Rjobcars /Rfrakcars /Jobs /Fraktionen");
                    }
                    if(Spieler[playerid][pAdmin] >= 3)
                    {
                        SendClientMessage(playerid, COLOR_ORANGE, "* MODERATOR *: {FFFFFF}/Ban, /Ipban, /Tban, /zollsperre, /Verwarnen, /Prison, /Cprison, /Offprison, /Offcprison, /Clearchat");
                        SendClientMessage(playerid, COLOR_BLUE, "* MODERATOR *: {FFFFFF}/Check, /Gotoliste, /Gotopos, /Gotohaus, /Veh, /Delveh, /Delallvehs, /Spec, /Specoff, /Changeweather");
                        SendClientMessage(playerid, COLOR_BLUE, "* MODERATOR *: {FFFFFF}/Sethp, /Setarmor, /Spielerip, /Akteneintrag, /Waffensperre, /Eventitem /Atafelentmieten");
                        SendClientMessage(playerid, COLOR_ORANGE, "* MODERATOR *: {FFFFFF}/Afkick, /Configplayer, /Entbannen, /Offbannen, /Offtban /Stopevent, /Startevent");
                        SendClientMessage(playerid, COLOR_BLUE, "* MODERATOR *: {FFFFFF}/Fraksperre, /Delfraksperre, /Respawnallcars, /Oafkick, /Offverwarnen, /Eventmarker, /Gebeskill");
                        SendClientMessage(playerid, COLOR_BLUE, "* MODERATOR *: {FFFFFF}/Gcoff, /Inballon, /Eventuhr, /Givecar, /Adminwarnung, /Regsperre");
                    }
                    if(Spieler[playerid][pAdmin] >= 4)
                    {
                        SendClientMessage(playerid, COLOR_ORANGE, "* Administrator *: {FFFFFF}/Sban, /Confighouse, /Configbiz, /Rauswerfenhotel, /Configtanke, /Makeleader, /Setzoneowner");
                        SendClientMessage(playerid, COLOR_ORANGE, "* Administrator *: {FFFFFF}/Gebefirma, /Delfirma, /Gebeclub, /Delclub, /Bfreischalten (2. Biz-Schlüssel), /SFreischalten (6. Schlüssel)");
                    }
                    if(Spieler[playerid][pAdmin] >= 5)
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* SERVER MANAGER *: {FFFFFF}/Givegun, /Createhouse, /Createaplatz, /Createtanke, /Createhotelroom");
                    }
                    if(Spieler[playerid][pAdmin] >= 6)
                    {
                        SendClientMessage(playerid, COLOR_ORANGE, "* PROJEKTLEITER *: {FFFFFF}/Makeadmin, /Gmx, /Event, /MakeBMOD, /Pwchange, /Namechange");
                    }
                    if(IsPlayerAdmin(playerid))
                    {
                        SendClientMessage(playerid, COLOR_BLUE, "* RCON *: /Makeadmin, /Gmx");
                    }
                }
            }
        }
        case DIALOG_ANTWORT:
        {
            if(response)
            {
                if(listitem == 0 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Bei jedem PayDay erhältst du hinzu +1 Respektpunkt. Ein PayDay gibt es alle 60 Minuten.\nWann dein nächstes PayDay ist, wird");
                    format(string2, sizeof(string2), "dir oben rechts angezeigt.\nErreichst du die entsprechende Anzahl an Respektpunkten,");
                    format(string3, sizeof(string3), "steigst du beim PayDay +1 LevelUP!\nDein Level kann jeder sehen und ist ein Nachweis für deine Aktivität.");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "RESPEKTPUNKTE und LevelUP", string4, "OK", "");
                }
                if(listitem == 1 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Geld verdienst du durchs arbeiten! Beim Arbeitsamt werden dir zahlreiche Berufe angeboten,\n");
                    format(string2, sizeof(string2), "die auch bei jedem PayDay(alle 60 Minuten) bezahlt werden.\nAuch als Mitglied einer Fraktion erhältst du Gehalt.\n");
                    format(string3, sizeof(string3), "\n{FF0000}Es ist STRENGST VERBOTEN Geld an andere zu verschenken/verleihen und kann mit einer Sperrung bestraft werden!\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "SPIELGELD", string4, "OK", "");
                }
                if(listitem == 2 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Im Forum hast du die Möglichkeit, mit anderen Mitgliedern des Projektes\n");
                    format(string2, sizeof(string2), "in Themen zu diskutieren. Außerdem kannst du dich für eine Fraktion deiner Wahl bewerben.\n");
                    format(string3, sizeof(string3), "Bewirbst du dich für eine Fraktion, dann beachte bitte die jeweiligen Mindestvoraussetzungen und nutze die Bewerbungsvorlagen.\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "FORUM", string4, "OK", "");
                }
                if(listitem == 3 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Im User Control Panel kannst du deine persönlichen Statistiken einsehen und die aktuellen\n");
                    format(string2, sizeof(string2), "Server Rekorde mitverfolgen. Außerdem kannst du Einstellungen an deinem Spieleraccount vornehmen.\n");
                    format(string3, sizeof(string3), "Unter anderem kannst du dort auch Beschwerden gegen Spieler einreichen, die gegen Regeln des Servers verstoßen haben.\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "UCP", string4, "OK", "");
                }
                if(listitem == 4 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Die Server Regeln stehen im Forum und sind klar definiert.\n");
                    format(string2, sizeof(string2), "Bei Verstoß gegen die Server Regeln(den Spielregeln) kann man durch\n");
                    format(string3, sizeof(string3), "Spiel-Moderatoren entsprechend sanktioniert.\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "SERVER REGELN", string4, "OK", "");
                }
                if(listitem == 5 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Bei administrativen Sanktionierungen, wie Prison, Laufcheckpoints, Verwarnungen\n");
                    format(string2, sizeof(string2), "oder eine Sperrung, muss man im jeweiligen Bereich im Forum ein Antrag stellen.\n");
                    format(string3, sizeof(string3), "Dort wird der Sachverhalt mit den zuständigen Admins diskutiert.\n");
                    format(string4, sizeof(string4), "\n{FFFFFF}Über den Support im Spiel können diese Sachverhalte nicht geklärt werden!\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "Administrative Sanktionierungen", string4, "OK", "");
                }
                if(listitem == 6 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Befindet man sich in einer NoDM Zone, wird es einem unten auf dem Bildschirm eingeblendet.\n");
                    format(string2, sizeof(string2), "In NoDM Zonen ist Deathmatch auf anderen Spielern strengst verboten!\n");
                    format(string3, sizeof(string3), "Sprich: man darf andere Spieler NICHT angreifen oder Schaden zufügen.\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "NoDM Zone", string4, "OK", "");
                }
                if(listitem == 7 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Waffenverbotszonen sind eine Regelung des Staates.\n");
                    format(string2, sizeof(string2), "Innerhalb einer Waffenverbotszone darf man seine Schusswaffen nicht benutzen, noch zeigen.\n");
                    format(string3, sizeof(string3), "Bei Verstoß gegen diese Regelung tritt §3WG des Waffengesetzes ein und der Waffenschein kann durch ein Polizeibeamten entzogen werden.\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "WAFFENVERBOTSZONE", string4, "OK", "");
                }
                if(listitem == 8 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[256];
                    new string5[1024];
                    format(string1, sizeof(string1), "In Häuser kann man sich einmieten und sein Spawnpunkt(mit /SPAWNCHANGE) im Haus festlegen.\nOb Mieter zugelassen werden und");
                    format(string2, sizeof(string2), "wie hoch die Mieten sind, entscheidet der Hausbesitzer.\nAls 'Geschäfte' gelten Verkaufsläden, wie 24/7, Kleidergeschäfte Restaurants");
                    format(string3, sizeof(string3), "und auch Tankstellen./nDie Besitzer verdienen durch Kunden und müssen immer neue Waren kaufen, damit sie weiter verkaufen können.\n");
                    format(string4, sizeof(string4), "Häuser und Geschäfte kann man sich kaufen, dazu gelten aber bestimmte Regelungen, die man unbedingt beachten muss.\n");
                    format(string5, sizeof(string5), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string5, sizeof(string5), "%s%s%s%s%s", string1, string2, string3, string4, string5);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "GESCHÄFTE und HÄUSER", string5, "OK", "");
                }
                if(listitem == 9 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Du kannst 5 Privatfahrzeuge besitzen. Um einer deiner Privatfahrzeuge benutzen zu können, muss du\nals erstes das jeweilige Fahrzeug unter /Carkey auswählen.\n");
                    format(string2, sizeof(string2), "Danach hast du die Möglichkeit, dein Fahrzeug aufzuschließen/abzuschließen, umzuparken oder zu lokalisieren.\nMit /Parken kannst du dein Fahrzeug an einem beliebigen Ort(auf Parkplätzen natürlich) parken,\n");
                    format(string3, sizeof(string3), "dort spawnt es bei jedem deiner Login oder wenn es explodiert. Mit /Findcar wird dir markiert, wo dein Fahrzeug sich befindet\nMit /Carsell verkaufst du dein Fahrzeug -> Vorsicht! Du erhältst nur die Hälfte des Kaufpreises zurück!\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "FAHRZEUGE", string4, "OK", "");
                }
                if(listitem == 10 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[768];
                    format(string1, sizeof(string1), "Die angebotenen Jobs beim Arbeitsamt sind Firmen. Diese Firmen haben ein Inhaber.\n");
                    format(string2, sizeof(string2), "Der Firmeninhaber kann Mitarbeiter seiner Firma entlassen und die Gehälter entscheiden.\n");
                    format(string3, sizeof(string3), "Welcher also der best bezahlte Beruf ist, kann man nie sagen, weil die Firmeninhaber es selbst festlegen und jederzeit ändern können.\n");
                    format(string4, sizeof(string4), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "FIRMEN und BERUFE", string4, "OK", "");
                }
                if(listitem == 11 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[256];
                    new string5[1024];
                    format(string1, sizeof(string1), "An sehr vielen Orten gibt es Geldautomaten, die du mit /Automat bedienen kannst.\nAn den Geldautomaten kannst du Geld einzahlen, abheben und deinen Kontostand abfragen.\n");
                    format(string2, sizeof(string2), "Um ein Bankkonto zu eröffnen, wird eine einmalige Gebühr in Höhe von 1.500$ erhoben.\nDie Bank bietet ein Zinssatz von 0.1Prozent an. Jeden PayDay(alle 60Min.) wird dein Kontostand um 1Prozent verzinst,\n");
                    format(string3, sizeof(string3), "sprich: du erhältst durch die Bank für die Verzinsung Geld! Beispiel: dein Kontostand beträgt 50.000$, 1Prozent Zinsen wären +500$\n");
                    format(string4, sizeof(string4), "Das OnlineBanking erreichst du über dein Internet Browser unter www.Bank.LyD-Roleplay.de.\nDort kannst du Überweisungen an Spieler die online oder offline sind tätigen.\n");
                    format(string5, sizeof(string5), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string5, sizeof(string5), "%s%s%s%s%s", string1, string2, string3, string4, string5);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "BANK, FINANZEN und ONLINEBANKING", string5, "OK", "");
                }
                if(listitem == 12 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[256];
                    new string5[256];
                    new string6[1280];
                    format(string1, sizeof(string1), "Der Elektromarkt befindet sich in Los Santos; /Navi -> Verkaufsgeschäfte -> Elektromarkt\n");
                    format(string2, sizeof(string2), "Dort hast du mit /Elektromarkt eine große Auswahl an Handymarken, von Nokia bis IPhone ist alles zuhaben!\nDer Elektromarkt bietet außerdem auch Handyverträge");
                    format(string3, sizeof(string3), ", CallYa-Karten und Handyguthaben an.\nEin Handyvertrag kosten dich jeden PayDay $1.800, womit du kostenfrei SMS und Anrufe tätigen kannst.\n");
                    format(string4, sizeof(string4), "Der Handyvertrag ist jederzeit beim Elektromarkt kündbar. Die Vertragskosten werden autom. jeden PayDay von deinem Bankkonto abgebucht.\nMit einer CallYa-Karte zahlst du mit deinem");
                    format(string5, sizeof(string5), "verfügbarem Guthaben jeden einzelnen Anrufen ($50) und SMS ($30).\nEine Handynummer erhältst du einmalig und kann nicht gewechselt werden.\n");
                    format(string6, sizeof(string6), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string6, sizeof(string6), "%s%s%s%s%s%s", string1, string2, string3, string4, string5, string6);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "HANDY und GUTHABEN", string6, "OK", "");
                }
                if(listitem == 13 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[256];
                    new string5[1024];
                    format(string1, sizeof(string1), "Unter /Navi -> Kleidergeschäfte werden dir alle Kleidershops aufgelistet, wo du\ndein Skin-Charakter für 500$ wechseln kannst.Solltest du einer Fraktion angehören,");
                    format(string2, sizeof(string2), "werden\n dir dort auch die Kleidung deine Fraktion zur Auswahl stehen.\n");
                    format(string3, sizeof(string3), "Dein ausgewählter Skin-Charakter/deine ausgewählte Kleidung behältst du permanent an und kannst du jederzeit");
                    format(string4, sizeof(string4), "wieder wechseln.\nDie Bewegungsart der verschiedenen Charakteren ist nicht zu ändern!\n");
                    format(string5, sizeof(string5), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string5, sizeof(string5), "%s%s%s%s%s", string1, string2, string3, string4, string5);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "KLEIDUNG und CHARAKTER", string5, "OK", "");
                }
                if(listitem == 14 )
                {
                    new string1[256];
                    new string2[256];
                    new string3[256];
                    new string4[256];
                    new string5[1024];
                    format(string1, sizeof(string1), "Fischen kann man nur am Angelplatz, das du unter /Navi -> Weitere Orte -> Angelplatz findest.\n");
                    format(string2, sizeof(string2), "Um fischen zu können, benötigst du den Angelschein und natürlich auch eine Angel, die du beim Angelshop erwerben kannst.\nMit /Angeln kannst auf dem Angelplatz fischen.");
                    format(string3, sizeof(string3), "Deine gefangenen Fische kannst du anschließend beim Angelshop verkaufen\noder am Lagerfeuer beim LS Strand mit /Grillen grillen und essen.");
                    format(string4, sizeof(string4), "\n");
                    format(string5, sizeof(string5), "\n{FF0000}Bei weiteren Fragen oder Problemen schreib ein Support-Ticket mit dem Befehl /SUP\n");
                    format(string5, sizeof(string5), "%s%s%s%s%s", string1, string2, string3, string4, string5);
                    ShowPlayerDialog(playerid, DIALOG_ANTWORT, DIALOG_STYLE_MSGBOX, "ANGELN und FISCHE", string5, "OK", "");
                }
            }
        }
        case DIALOG_DRINKS: {
            if(response) {
                new
                    String[128];
                if( GetPlayerMoney(playerid) < g_Drinks[listitem][D_iPrice] ) {
                    SendClientMessage(playerid,COLOR_LIGHTRED2,"Du besitzt nicht genug Geld für diesen Drink");
                    return 1;
                }
                KillTimer( Spieler[playerid][tDrink] );
                Spieler[playerid][tDrink] = SetTimerEx("cancelDrink", g_Drinks[listitem][D_iTime] * 1000 , false,"d",playerid);
                format(String,sizeof(String),"Du hast für $%d folgendes Getränk gekauft: %s",g_Drinks[listitem][D_iPrice],g_Drinks[listitem][D_sName]);
                SendClientMessage(playerid,COLOR_BLUE,String);
                GivePlayerCash(playerid,-g_Drinks[listitem][D_iPrice]);
                SetPlayerSpecialAction( playerid , g_Drinks[listitem][D_iAnimation] );
            }
        }
        case DIALOG_TAXI: {
            UnfreezePlayer(playerid);
            if(response) {
                new
                    vehicleid,
                    modelid;
                vehicleid = GetPlayerVehicleID(playerid);
                if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
                    modelid = GetVehicleModel(vehicleid);
                    if(  modelid == 420  ||  modelid == 438 ) {
                        new
                            driver,
                            String[128];
                        driver = VehicleDriverID(vehicleid);
                        if( IsPlayerConnected(driver) ) {
                            format(String,sizeof(String),"Fahrgast %s hat deine Taxi-Fahrt bestätigt.",GetName(playerid));
                            SendClientMessage(driver,COLOR_GREEN,String);
                            format(String,sizeof(String),"Deine Taxifahrt beginnt nun. Die Fahrt kostet dich $%d pro 100m Fahrt!",Spieler[driver][pTaxiPreis]);
                            SendClientMessage(playerid,COLOR_ORANGE,String);

                            AddPlayerTaxiSlot(driver,playerid);

                            //Spieler[driver][tTaxi] = SetTimerEx("Pulse_Taxi",3253,true,"d",driver);
                            return 1;
                        }
                    }
                }
                SendClientMessage(playerid,COLOR_RED,"Du bist nicht mehr im Taxi");
            }
            else {
                RemovePlayerFromVehicle(playerid);
            }
        }
        case DIALOG_CLUBSHOP_DEL: {
            if(response) {
                SendClientMessage(playerid,COLOR_YELLOW,"Das Item wurde entfernt");
                RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_CLUB_SHOP);
            }
        }
        case DIALOG_CLUBSHOP: {
            if(response) {
                if( Spieler[playerid][pDonateRank] < 1) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieser Shop ist nur für Clubmitglieder.");
                }
                if( GetPlayerMoney(playerid) < g_ClubShopItems[listitem][CSI_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_YELLOW,"Du besitzt nicht genug Geld für dieses Item.");
                }
                /*if( !IsPlayerInRangeOfPoint(playerid,5.0,2316.5325,-1010.7850,1054.7188)) {
                    return SendClientMessage(playerid,COLOR_RED,"Du bist nicht an der Club-Garderobe.");
                }*/
                new
                    String[128];
                format(String,sizeof(String),"Du hast folgendes Item ausgewählt: %s  (-$%d)",g_ClubShopItems[listitem][CSI_sName],g_ClubShopItems[listitem][CSI_iPrice]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                SetPlayerAttachedObject(playerid,
                    ATTACHED_INDEX_CLUB_SHOP,
                    g_ClubShopItems[listitem][CSI_iModel],
                    g_ClubShopItems[listitem][CSI_iBone],
                    g_ClubShopItems[listitem][CSI_fX],
                    g_ClubShopItems[listitem][CSI_fY],
                    g_ClubShopItems[listitem][CSI_fZ],
                    g_ClubShopItems[listitem][CSI_fRotX],
                    g_ClubShopItems[listitem][CSI_fRotY],
                    g_ClubShopItems[listitem][CSI_fRotZ],
                    g_ClubShopItems[listitem][CSI_fScaleX],
                    g_ClubShopItems[listitem][CSI_fScaleY],
                    g_ClubShopItems[listitem][CSI_fScaleZ]);
            }
        }
        case DIALOG_GANGSHOP: {
            if(response) {
                if( GetPlayerMoney(playerid) < g_GangShopItems[listitem][GSI_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_YELLOW,"Du besitzt nicht genug Geld für dieses Item!");
                }
                if( !IsPlayerInRangeOfPoint(playerid,5.0,1798.4584,-2124.5525,13.5469) && !IsPlayerInRangeOfPoint(playerid,5.0,2805.5723,-1170.7960,1025.5703) && !IsPlayerInRangeOfPoint(playerid,5.0, YAKUZA_INTERIOR_GANGSHOP_POINT)
                    && !IsPlayerInRangeOfPoint(playerid,5.0,2491.7261,-1701.2618,1018.3438) && !IsPlayerInRangeOfPoint(playerid,5.0, LCN_INTERIOR_GANGSHOP_POINT) && !IsPlayerInRangeOfPoint(playerid,5.0,308.2954,1120.7721,1083.8828)
                    && !IsPlayerInRangeOfPoint(playerid,5.0,TRIADS_INTERIOR_GANGSHOP_POINT)  && !IsPlayerInRangeOfPoint(playerid,5.0,-2159.0173,640.3590,1052.3817)) {
                    return SendClientMessage(playerid,COLOR_RED,"Hier kannst du diesen Befehl nicht ausführen!");
                }
                if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13
                || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Gang/Mafien Mitglied");
                new
                    String[128];
                format(String,sizeof(String),"Du hast folgendes Item ausgewählt: %s  (-$%d)",g_GangShopItems[listitem][GSI_sName],g_GangShopItems[listitem][GSI_iPrice]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                SetPlayerAttachedObject(playerid,
                ATTACHED_INDEX_GANG_SHOP,
                g_GangShopItems[listitem][GSI_iModel],
                g_GangShopItems[listitem][GSI_iBone],
                g_GangShopItems[listitem][GSI_fX],
                g_GangShopItems[listitem][GSI_fY],
                g_GangShopItems[listitem][GSI_fZ],
                g_GangShopItems[listitem][GSI_fRotX],
                g_GangShopItems[listitem][GSI_fRotY],
                g_GangShopItems[listitem][GSI_fRotZ],
                g_GangShopItems[listitem][GSI_fScaleX],
                g_GangShopItems[listitem][GSI_fScaleY],
                g_GangShopItems[listitem][GSI_fScaleZ]);
            }
        }
        case DIALOG_GANGSHOP_DEL: {
            if(response) {
                SendClientMessage(playerid,COLOR_YELLOW,"Das Item wurde entfernt");
                RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_GANG_SHOP);
            }
        }
        case DIALOG_FSKIN: {
            if (response) {
                new skin;
                sscanf(inputtext,"d",skin);
                if (skin == 0)
                    return SendClientMessage(playerid, COLOR_RED, "Ungültige Skin-ID!");

                if (Spieler[playerid][pFraktion] == 15)
                    SetPlayerSkinEx(playerid, skin);
                else
                    SetPlayerSkin(playerid,skin);
            }
        }
        case DIALOG_HITMEN_AUFTRAG: {
            if(response) {
                new
                    String[128],
                    auftraggeber,
                    kopfgeld,
                    opfer;
                auftraggeber = SelectedPlayer[playerid];
                if( Spieler[auftraggeber][pKopfgeldStatus] == true ) {
                    SendClientMessage(playerid,COLOR_YELLOW,"Der Auftrag wurde bereits von einem Hitman angenommen");
                    return 1;
                }
                opfer = Spieler[auftraggeber][pKopfgeldID];
                kopfgeld = Spieler[auftraggeber][pKopfgeld];
                Spieler[auftraggeber][pKopfgeldStatus] = true;
                format(String,sizeof(String),"Dein Auftrag wurde von einem Auftragkiller entgegen genommen und wird %s auslöschen!",GetName(opfer));
                SendClientMessage(auftraggeber,COLOR_YELLOW,String);
                format(String,sizeof(String),"Du hast den Auftrag erfolgreich angenommen. (Zielperson: %s, Kopfgeld: $%s)",GetName(opfer), AddDelimiters(kopfgeld));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                Spieler[playerid][pHitmenAuftragID] = auftraggeber;
                if(Spieler[playerid][pFraktion] == 14){format(String, sizeof(String), "Hitman %s hat den Killauftrag von %s angenommen. Zielperson: %s ($%s)",GetName(playerid),GetName(auftraggeber),GetName(opfer), AddDelimiters(kopfgeld));}
                SendFraktionMessage(14, COLOR_YELLOW, String);

                format(String,sizeof(String),"%s hat den Killauftrag von %s angenommen. Zielperson: %s ($%s)",GetName(playerid),GetName(auftraggeber),GetName(opfer), AddDelimiters(kopfgeld));
                HitmanLog(String);
            }
            return 1;
        }
        case DIALOG_HITMEN_LIST:
        {
            if(response) {
                new
                    auftraggeber,
                    opfer;
                auftraggeber = GetPlayerHitmenIndex(listitem);
                if( auftraggeber != INVALID_PLAYER_ID ) {
                    new
                        kopfgeld = Spieler[auftraggeber][pKopfgeld],
                        String[160];
                    opfer = Spieler[auftraggeber][pKopfgeldID];
                    SelectedPlayer[playerid] = auftraggeber;
                    format(String,sizeof(String),"Auftraggeber: %s ( %d )\nGesuchter Spieler: %s ( %d )\nKopfgeld: $%s",GetName(auftraggeber),auftraggeber,GetName(opfer),opfer, AddDelimiters(kopfgeld));
                    ShowPlayerDialog(playerid,DIALOG_HITMEN_AUFTRAG,DIALOG_STYLE_MSGBOX,"Hitmen Auftrag",String,"Annehmen","Abbruch");
                }
            }
            return 1;
        }
        case DIALOG_WERBUNG:
        {
            if(response) {
                new
                    tick = gettime(),
                    len,
                    preis;
                len = strlen(inputtext);

                if( !IsPlayerInRangeOfPoint(playerid, 5.0, 1412.1915,-1700.3817,13.5395) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2008.1722,1169.3364,10.8203))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Werbe-Platz.");
                if( g_unixWerbung > tick ) {
                    return SendClientMessage(playerid, COLOR_RED, "Die Letzte Werbung ist noch keine 3 Minuten alt.");
                }
                preis = len * 150;
                if( preis > GetPlayerMoney(playerid) ) {
                    return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld um eine Werbung zu schreiben!");
                }
                new
                    String[128];
                SendClientMessageToAll(COLOR_GREEN,inputtext);
                format(String,sizeof(String),"Werbung von %s, Telnr. %d",GetName(playerid),Spieler[playerid][pHandyNr]);
                SendClientMessageToAll(COLOR_GREEN,String);
                GivePlayerCash(playerid,-preis);
                g_unixWerbung = tick + 3 * 60;
                return 1;
            }
        }
        case DIALOG_HWERBUNG:
        {
            if(response) {
                new tick = gettime(),
                    len,
                    preis;
                len = strlen(inputtext);

                if(!IsPlayerInRangeOfPoint(playerid, 5.0, HITMANBASE_AD_POINT)) {
                    return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Werbeplatz.");
                }
                if( g_unixWerbungHitman > tick ) {
                    return SendClientMessage(playerid, COLOR_RED, "Die Letzte Werbung ist noch keine 10 Minuten alt.");
                }
                preis = len * 100;
                if( preis > GetPlayerMoney(playerid) ) {
                    return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld um eine Werbung zu schreiben!");
                }

                new String[128];
                SendClientMessageToAll(COLOR_GREEN,inputtext);
                format(String,sizeof(String),"Werbung von Anonym, Kontakt: /Killauftrag");
                SendClientMessageToAll(COLOR_GREEN,String);
                GivePlayerCash(playerid,-preis);
                g_unixWerbungHitman = tick + 8 * 60;
                return 1;
            }
        }
        case DIALOG_TABMENU_CALL:
        {
            if(response) {
                new
                    giveid = SelectedPlayer[playerid],
                    eingabe[64];
                //printf("DIALOG_TABMENU_CALL giveid:%d",giveid);
                format(eingabe,sizeof(eingabe),"%d",Spieler[giveid][pHandyNr]);
                return cmd_anrufen(playerid,eingabe);
            }
        }
        case DIALOG_TABMENU_SMS:
        {
            if(response) {
                new
                    giveid = SelectedPlayer[playerid],
                    eingabe[128];
                //printf("DIALOG_TABMENU_SMS giveid:%d",giveid);
                format(eingabe,sizeof(eingabe),"%d %s",Spieler[giveid][pHandyNr],inputtext);
                return cmd_sms(playerid,eingabe);
            }
        }
        case DIALOG_TABMENU:
        {
            if(response) {
                if(listitem == 0 ) { // Anrufen
                    ShowPlayerDialog(playerid, DIALOG_TABMENU_CALL, DIALOG_STYLE_MSGBOX, "Spieler Anrufen", "Willst du den Spieler wirklich anrufen?", "Anrufen", "Abbrechen");
                }
                else if(listitem == 1) { // SMS Senden
                    ShowPlayerDialog(playerid, DIALOG_TABMENU_SMS, DIALOG_STYLE_INPUT, "SMS Versenden", "Gib unten die Nachricht ein,die du an den Spieler senden möchtest", "Senden", "Abbrechen");
                }
                else if(listitem == 2 ) {
                    if(Spieler[playerid][pFraktion] == 5)
                    {
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Widerstand gegen Beamte\nErweit. Widerstand gegen Beamte\nSachbeschädigung\nBehinderung eines Beamten\nStVO Verstoß\n");
                        format(string2, sizeof(string2), "Beleidigung/Bedrohung\nIlleg. Waffen/Drogen/Waffenteile/Codes/Spice\nFahrzeugdiebstahl\n");
                        format(string3, sizeof(string4), "Diebstahl eines Dienstfahrzeuges\nBedrohung von Zivilisten/Beamten/Zivilisten\nMissa. des Platzverweises\nBestechungsversuch\nNotrufmissbrauch\nBeschuss auf Beamte");
                        format(string4, sizeof(string4), "%s%s%s", string1, string2, string3);
                        ShowPlayerDialog(playerid, DIALOG_TABMENU_VKO, DIALOG_STYLE_LIST, "Verbrecherkatalog", string4, "Auswählen", "Abbrechen");
                    }
                }
                return 1;
            }
        }
        case DIALOG_TABMENU_VK:
        {
            if(response)
            {
                if (Spieler[playerid][pTot]) return SendClientMessage(playerid, COLOR_RED, "Du bist tot und kannst daher keine Wanteds vergeben.");
                if(listitem == 0)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 5;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen (Beschuss auf Beamte) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 5 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beschuss auf Beamte, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 1)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beschuss auf Zivilisten) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beschuss auf Zivilisten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 2)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Handgreiflicher Angriff auf Beamte) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Handgreiflicher Angriff auf Beamte, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 3)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Handgreiflicher Angriff auf Zivilisten) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Handgreiflicher Angriff auf Zivilisten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 4)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Widerstand gegen die Staatsgewalt) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 5)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Erweiterter Widerstand gegen die Staatsgewalt) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Erweiterter Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 6)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Behilfe zur Flucht) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beihilfe zur Flucht, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 7)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Behinderung der Justiz) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Behinderung der Justiz, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 8)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefährlicher Angriff ins Luft/Straßenverkehr) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefährlicher Angriff ins Luft/Straßenverkehr, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 9)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 6;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Überfall/Raub) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 6 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Überfall/Raub, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 10)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Entführung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Entführung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 11)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Freiheitsberaubung - Einsperren ins GangJail) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Freiheitsberaubung - Einsperren ins GangJail, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 12)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 1;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Sachbeschädigung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 1 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Sachbeschädigung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 13)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beleidigung/Bedrohung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beleidigung/Bedrohung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 14)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Verkehrsunfallflucht) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Verkehrsunfallflucht, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 15)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales eindringen ins Polizeisystem) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales eindringen ins Polizeisystem, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 16)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales mitführen von Schusswaffen/Drogen/Waffenteile/Spice) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales mitführen von Schusswaffen/Drogen/Waffenteile/Spice, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 17)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Fahrzeugdiebstahl) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Fahrzeugdiebstahl, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 18)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Diebstahl eines Dienstfahrzeuges) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Diebstahl eines Dienstfahrzeuges, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 19)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Diebstahl) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Diebstahl, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 20)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beamten-/Zivilisten Mord) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beamten-/Zivilisten Mord, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 21)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales Straßenrennen) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales Straßenrennen, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 22)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Notruf-Missbrauch) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Notruf-Missbrauch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 23)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Unerlaubtes betreten eines Grundstücks) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Unerlaubtes betreten eines Grundstücks, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 24)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 5;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Anschlag) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 5 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Anschlag, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 25)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Bestechungsversuch) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Bestechungsversuch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 26)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales züchten von Spicepflanzen) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales züchten von Spicepflanzen, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 27)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Brandstiftung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Brandstiftung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 28)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefangenenbefreiung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefangenenbefreiung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 29)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefängnisausbruch) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefängnisausbruch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
            }
        }
        case DIALOG_TABMENU_VKO:
        {
            if(response)
            {
                if(listitem == 0)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen (Widerstand gegen die Staatsgewalt) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 1)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Erweiterte Widerstand gegen die Staatsgewalt) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Erweiterte Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 2)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Sachbeschädigung) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Sachbeschädigung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 3)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 1;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Behinderung eines Beamten) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 1 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Behinderung eines Beamten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 4)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefährlicher Eingriff in den Straßen-/Luftverkehr) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefährlicher Eingriff in den Straßen-/Luftverkehr, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 5)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beleidigung/Bedrohung) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beleidigung/Bedrohung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 6)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegale Mitnahme von Drogen/Spice/Waffen/Waffenteile/Codes) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegale Mitnahme von Drogen/Spice/Waffen/Waffenteile/Codes, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 7)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Fahrzeugdiebstahl) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Fahrzeugdiebstahl, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 8)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Diebstahl eines Behördenfahrzeuges) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Diebstahl eines Behördenfahrzeuges, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 9)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Bedrohung von Beamten/Zivilisten) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Bedrohung von Beamten/Zivilisten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 10)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Missachtung des Platzverweises) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Missachtung des Platzverweises, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 11)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Bestechungsversuch) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Bestechungsversuch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 12)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Notrufmissbrauch) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Notrufmissbrauch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 13)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 5;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beschuss auf Beamte) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 5 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beschuss auf Beamte, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
            }
        }
        case DIALOG_ASHOP:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(Spieler[playerid][pAngel] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits eine Angel.");
                    if(GetPlayerMoney(playerid) < 750)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren!");
                    GivePlayerCash(playerid, -750);
                    Spieler[playerid][pAngel] = 1;
                    Biz[39][bKasse] += 750;
                    Biz[39][bWaren] -= 2;
                    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Du hast dir die"COLOR_HEX_BLUE" Angel"COLOR_HEX_WHITE" erfolgreich gekauft!");
                    ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                }
                if(listitem==1)
                {
                    if(GetPlayerMoney(playerid) < 500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    GivePlayerCash(playerid, -500);
                    Biz[39][bKasse] += 500;
                    Biz[39][bWaren] -= 2;
                    Spieler[playerid][pKoeder] += 10;
                    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Du hast dir "COLOR_HEX_BLUE"10 Köder"COLOR_HEX_WHITE" erfolgreich gekauft!");
                    ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pFishLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Angelschein.");
                    if(GetPlayerMoney(playerid) < 1000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    GivePlayerCash(playerid, -1000);
                    Biz[39][bKasse] += 1000;
                    Biz[39][bWaren] -= 2;
                    Spieler[playerid][pFishLic] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Du hast dir den "COLOR_HEX_BLUE"Angelschein"COLOR_HEX_WHITE" erfolgreich gekauft!");
                    ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                }
                if(listitem==3)
                {
                    new string[128];
                    format(string, sizeof(string), COLOR_HEX_WHITE"Bitte tippe ein, wieviele Fische du verkaufen möchtest. "COLOR_HEX_BLUE"(30$ pro Fisch)\n\n"COLOR_HEX_WHITE"Du hast derzeit "COLOR_HEX_BLUE"%d Fische "COLOR_HEX_WHITE"dabei!", Spieler[playerid][pFische]);
                    ShowPlayerDialog(playerid, DIALOG_SELLFISH, DIALOG_STYLE_INPUT, "Angelshop", "Bitte tippe ein, wieviele Fische du verkaufen möchtest. (30$ pro Fisch)", "Verkaufen", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_SELLFISH:
        {
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                return 1;
            }
            if(response)
            {
                if(!strlen(inputtext))
                {
                    ShowPlayerDialog(playerid, DIALOG_SELLFISH, DIALOG_STYLE_INPUT, "Angelshop", "Bitte tippe ein, wieviele Fische du verkaufen möchtest. (30$ pro Fisch)", "Verkaufen", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "* Ungültige Eingabe!");
                    return 1;
                }
                new fische = strval(inputtext);
                if(fische < 1 || fische > 20)return SendClientMessage(playerid,  COLOR_RED, "Der Wert sollte zwischen 1 und 20 liegen.");
                if(fische > Spieler[playerid][pFische])return SendClientMessage(playerid, COLOR_RED, "Soviele Fische hast du nicht!");
                new tempRechnung = fische*30;
                GivePlayerCash(playerid, tempRechnung);
                Spieler[playerid][pFische] -= fische;
                new string[128];
                format(string, sizeof(string), COLOR_HEX_WHITE"Du hast erfolgreich "COLOR_HEX_BLUE"%d Fische"COLOR_HEX_WHITE" für"COLOR_HEX_BLUE" $%s"COLOR_HEX_WHITE" verkauft.", fische, AddDelimiters(tempRechnung));
                SendClientMessage(playerid, COLOR_WHITE, string);
                ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_STADTHALLE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(Spieler[playerid][pPerso] == 0)
                    {
                        if(GetPlayerMoney(playerid) >= 200)
                        {
                            Spieler[playerid][pPerso] = 1;
                            GivePlayerCash(playerid, -200);
                            SendClientMessage(playerid, COLOR_GREEN, "Du hast erfolgreich einen Personalausweis beantragt.");
                            return cmd_stadthalle(playerid);
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt den Personalausweis bereits.");
                        return 1;
                    }
                }
                else if (listitem==1 || listitem == 5 || listitem == 2)
                {
                    new
                        String[128];
                    /*if( gettime() < Spieler[playerid][pJobWechsel] ) {
                        SendClientMessage(playerid, COLOR_RED, "Du hast erst vor kurzem dein Beruf gewechselt, bitte warte einen Moment!");
                        return 1;
                    }*/
                    ShowPlayerDialog(playerid, DIALOG_STADTHALLE, DIALOG_STYLE_LIST, "Stadthalle", String, "Auswählen", "Abbrechen");
                }
                else if(listitem==3)
                {
                    /*if( gettime() < Spieler[playerid][pJobWechsel] ) {
                        SendClientMessage(playerid, COLOR_RED, "Du hast erst vor kurzem dein Beruf gewechselt, bitte warte einen Moment!");
                        return 1;
                    }*/
                    ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                }
                else if(listitem==4)
                {
                    /*if( gettime() < Spieler[playerid][pJobWechsel] ) {
                        SendClientMessage(playerid, COLOR_RED, "Du hast erst vor kurzem dein Beruf gewechselt, bitte warte einen Moment!");
                        return 1;
                    }*/
                    ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                }
                else if(listitem == 6) {
                    if( Spieler[playerid][pHartz4] == 0 ) {
                        if( Spieler[playerid][pJob] == 0 ) {
                            Spieler[playerid][pHartz4] = 1;
                            SendClientMessage(playerid,COLOR_YELLOW,"Du hast Hartz4 beantrag und erhälts nun pro PayDay "#HARTZ4_GELD"$");
                        }
                        else {
                            SendClientMessage(playerid,COLOR_YELLOW,"Da du einen Job hast,kannst du kein Hartz4 beantragen");
                        }
                    }
                    else {
                        Spieler[playerid][pHartz4] = 0;
                        SendClientMessage(playerid,COLOR_YELLOW,"Du beziehst ab nun kein Hartz 4 mehr");
                    }
                }
            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_SELBSTBERUF:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(!(Spieler[playerid][pJob] == 0))
                    {
                        Spieler[playerid][pJob] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast deinen Job gekündigt.");
                        ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                        return 1;
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt gar keinen Job.");
                        return 1;
                    }
                }
                if(Spieler[playerid][pHartz4]) {
                    SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Job annehmen, da du noch Hartz4 beziehst");
                    return 1;
                }
                if(listitem==1)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_KFZ, DIALOG_STYLE_MSGBOX, "Arbeitsamt: KFZ-Mechatroniker", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" KFZ-Mechatroniker\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_ANWALT, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Anwalt", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Anwalt\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Mandant verweigert Kaution zurückzuzahlen.", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBTAXI, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Taxifahrer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Taxifahrer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Kunden ohne Geld", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_EISMANN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Eisverkäufer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Eisverkäufer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_DEDEKTIV, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Detektiv", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Detektiv\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==6)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_PIZZAMAN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Pizzalieferant", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Pizzalieferant\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==7)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBHOTDOG, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Hotdog Verkäufer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Hotdog Verkäufer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==8)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "ILLEGALE BERUFE", COLOR_HEX_WHITE"Illegale Berufe erhältst du nur bei Jeff,\nder bei seinem Van in der Gasse\nhinter dem 24/7 östlich der Stadthalle steht.", "Ok", "");
                    return 1;
                }
                /*if(listitem==23)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(23);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Zugfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%d\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Gefühl fürs Zugfahren\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_ZUGFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Zugfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }*/
            }
            if(!response)
            {
                return 1;
            }
        }

        case DIALOG_AMT:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(!(Spieler[playerid][pJob] == 0))
                    {
                        Spieler[playerid][pJob] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast deinen Job gekündigt.");
                        ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreinger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                        return 1;
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreinger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt gar keinen Job.");
                        return 1;
                    }
                }
                if(Spieler[playerid][pHartz4]) {
                    SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Job annehmen, da du noch Hartz4 beziehst");
                    return 1;
                }
                if(listitem==1)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(1);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Bauer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer], AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_FARMER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Bauer", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(2);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Busfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_BUSFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Busfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(3);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Trucker\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" LKW-Schein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_TRUCKER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Trucker", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(4);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Pilot\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $8500\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Flugschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_PILOT, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Pilot", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(7);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Straßenreiniger\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_STRASSE, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Straßenreiniger", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==6)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(8);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Müllmann\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_MULLMANN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Müllmann", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==7)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(9);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Gärtnerei\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_GARTEN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Gärtnerei", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==8)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(10);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Bauarbeiter\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" LKW-Schein und Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_BAUARBEITER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Bauarbeiter", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==9)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(11);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Schiff-Fahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Bootsschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_SCHIFFFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Schiff-Fahrer", String, "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==10)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(12);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Geld-Tansportfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Überfallen zu werden",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_GELDT, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Geld-Transportfahrer", String, "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==11)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "ILLEGALE BERUFE", COLOR_HEX_WHITE"Illegale Berufe erhältst du nur bei Jeff,\nder bei seinem Van in der Gasse\nhinter dem 24/7 östlich der Stadthalle steht.", "OK", "");
                    return 1;
                }
                /*if(listitem==23)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(23);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Zugfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%d\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Gefühl fürs Zugfahren\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_ZUGFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Zugfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }*/
            }
            if(!response)
            {
                return 1;
            }
        }

        case DIALOG_SCHWARZBERUF:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(!(Spieler[playerid][pJob] == 0))
                    {
                        Spieler[playerid][pJob] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast deinen Job gekündigt.");
                        ShowPlayerDialog(playerid, DIALOG_SCHWARZBERUF, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nTaschendieb\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
                        Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                        return 1;
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, DIALOG_SCHWARZBERUF, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nTaschendieb\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt gar keinen Job.");
                        return 1;
                    }
                }
                if(listitem==1)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_DDEALER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Drogendealer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Drogendealer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_WDEALER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Waffendealer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Waffendealer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_TASCHENDIEB, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Taschendieb", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Taschendieb\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_HURE, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Prostituierte", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Prostituierte\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Aidsgefahr", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBWANTED, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Wanted-Hacker", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Wanted-Hacker\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==6)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBAUTODIEB, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Autodieb", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Autodieb\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                /*if(listitem==23)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(23);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Zugfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%d\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Gefühl fürs Zugfahren\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_ZUGFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Zugfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }*/
            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_CHATOFF:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(pGC[playerid] == 0)
                    {
                        pGC[playerid] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Globalen Chat eingeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                    else if(pGC[playerid] == 1)
                    {
                        pGC[playerid] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Globalen Chat ausgeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                }
                if(listitem==1)
                {
                    if(pJC[playerid] == 0)
                    {
                        pJC[playerid] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Job Chat eingeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                    else if(pJC[playerid] == 1)
                    {
                        pJC[playerid] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Job Chat ausgeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                }
                if(listitem==2)
                {
                    if(pFC[playerid] == 0)
                    {
                        pFC[playerid] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Fraktions Chat eingeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                    else if(pFC[playerid] == 1)
                    {
                        pFC[playerid] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Fraktions Chat ausgeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                }
                if(listitem==3)
                {
                    if(pJL[playerid] == 0)
                    {
                        pJL[playerid] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Join/Leave Chat eingeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                    else if(pJL[playerid] == 1)
                    {
                        pJL[playerid] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Join/Leave Chat ausgeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                }
                if(listitem==4)
                {
                    if(pCC[playerid] == 0)
                    {
                        pCC[playerid] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Clubmitglied Chat eingeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                    else if(pCC[playerid] == 1)
                    {
                        pCC[playerid] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast den Clubmitglied Chat ausgeschaltet.");
                        return cmd_chatoff(playerid,"");
                    }
                }
            }
            if(!response)return 1;
        }
        case DIALOG_GOTOLISTE:
        {
            if(response)
            {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                new vID = GetPlayerVehicleID(playerid);
                if(listitem==0)//LS
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1480.4305,-1745.5150,13.6281);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1480.4305,-1745.5150,13.6281);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid,  1480.4305,-1745.5150,13.6281);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==1)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1218.5142,-919.5847,43.0938);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1218.5142,-919.5847,43.0938);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1218.5142,-919.5847,43.0938);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==2)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1365.7517,-1288.5110,13.5469);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1365.7517,-1288.5110,13.5469);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1365.7517,-1288.5110,13.5469);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==3)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 666.8114,-1880.4503,5.4600);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 666.8114,-1880.4503+2,5.4600);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 666.8114,-1880.4503,5.4600);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==4)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1234.4102,-1823.8929,13.5910);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1234.4102,-1823.8929,13.5910);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1234.4102,-1823.8929,13.5910);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==5)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1804.6133,-1890.9283,13.4073);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1804.6133,-1890.9283,13.4073);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1804.6133,-1890.9283,13.4073);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==6)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, -1996.4822,288.5411,33.9304);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, -1996.4822,288.5411,33.9304);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, -1996.4822,288.5411,33.9304);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==7)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 2006.4841,-1441.3403,13.5635);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 2006.4841,-1441.3403,13.5635);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 2006.4841,-1441.3403,13.5635);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==8)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1460.0717,-1027.2748,23.8281);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1460.0717,-1027.2748,23.8281);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1460.0717,-1027.2748,23.8281);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==9)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1516.6945,-1680.2233,13.7969);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1516.6945,-1680.2233,13.7969);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1516.6945,-1680.2233,13.7969);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==10)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1661.8528,-1881.5745,13.5438);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1661.8528,-1881.5745,13.5438);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1661.8528,-1881.5745,13.5438);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==11)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1841.7158,-2568.3242,13.5469);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1841.7158,-2568.3242,13.5469);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1841.7158,-2568.3242,13.5469);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==12)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 805.7107,-1335.6899,13.5469);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 805.7107,-1335.6899,13.5469);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 805.7107,-1335.6899,13.5469);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==13)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1023.3541,-1134.1473,23.8203);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1023.3541,-1134.1473,23.8203);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1023.3541,-1134.1473,23.8203);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==14)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1310.3245,-1383.1377,13.7432);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1310.3245,-1383.1377,13.7432);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1310.3245,-1383.1377,13.7432);
                        SetCameraBehindPlayer(playerid);
                    }
                }
            }
        }

        case DIALOG_MEMBERS:
        {
            if(response)
            {
                pCurrentSite[playerid] = 0;
                return 1;
            }
            if(!response)
            {
                pCurrentSite[playerid] ++;
                if(pCurrentSite[playerid] == 1)
                {
                    new query[128]/*, pName[24], level[11]*/;
                    format(query, sizeof(query), "SELECT `Name`, `Level`, `Rank`, `Fraktion` FROM `accounts` WHERE `Fraktion` =%d LIMIT 20,40", Spieler[playerid][pFraktion]);
                    mysql_pquery(query,THREAD_DIALOGMEMBERS,playerid,gSQL,MySQLThreadOwner);
                }
                else if(pCurrentSite[playerid] == 2)
                {
                    new query[128]/*, pName[24], level[11]*/;
                    format(query, sizeof(query), "SELECT `Name`, `Level`, `Rank`, `Fraktion` FROM `accounts` WHERE `Fraktion` =%d LIMIT 40,60", Spieler[playerid][pFraktion]);
                    mysql_pquery(query,THREAD_DIALOGMEMBERS,playerid,gSQL,MySQLThreadOwner);
                }
            }
        }
        case DIALOG_HANDYSHOP: {
            if(response) {
                if(listitem == 0) {
                    ShowPlayerHandyList(playerid);
                }
                else if(listitem==1) {
                    /*
                    if(Spieler[playerid][pHandyNr] != 0)
                    {
                        return SendClientMessage(playerid, COLOR_RED , "Du besitzt bereits ein Handy");
                    }
                    */
                    if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast deinen Handy-Vertrag gekündigt.");
                        Spieler[playerid][pHandyGeld] = 0;
                        Spieler[playerid][pHandyNr] = 0;
                        ShowBuyInformation(playerid,"~y~Handyvertrag ~w~gekuendigt!");
                    }
                    else {
                        if(GetPlayerMoney(playerid) < 1500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[HandyShopBiz_Index][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[HandyShopBiz_Index][bWaren] -= 5;
                        Biz[HandyShopBiz_Index][bKasse] += 1500;
                        GivePlayerCash(playerid, -1500);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Handy-Vertrag für $2.000 gekauft.");
                        Spieler[playerid][pHandyGeld] = HANDY_VERTRAG;
                        ShowBuyInformation(playerid,"~y~Handyvertag ~w~gekauft!");
                        GetFreePhoneNumber(playerid);
                    }
                }
                else if (listitem == 2) { // Kamera kaufen
                    if (GetPlayerMoney(playerid) < 750) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                    if (Biz[HandyShopBiz_Index][bWaren] < 1) return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    if (Spieler[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir erst ab Level 3 eine Kamera kaufen.");
                    Biz[HandyShopBiz_Index][bWaren] -= 3;
                    Biz[HandyShopBiz_Index][bKasse] += 750;
                    GivePlayerCash(playerid, -750);
                    SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir eine Kamera mit einem Film für 50 Fotos gekauft!");
                    ShowBuyInformation(playerid,"~y~Kamera ~w~gekauft!");
                    GivePlayerWeapon(playerid, WEAPON_CAMERA, 50);
                }
                else if (listitem == 3) {
                    if (Spieler[playerid][pMP3Player]) return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen MP3-Player.");
                    if (GetPlayerMoney(playerid) < 1500) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                    if (Biz[HandyShopBiz_Index][bWaren] < 3) return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    Biz[HandyShopBiz_Index][bWaren] -= 3;
                    Biz[HandyShopBiz_Index][bKasse] += 1500;
                    GivePlayerCash(playerid, -1500);
                    Spieler[playerid][pMP3Player] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                    ShowBuyInformation(playerid,"~y~MP3-Player ~w~gekauft!");
                }
                else if(listitem==4) { //Call-Ya Handy-Karte Kaufen
                    if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) return SendClientMessage(playerid, COLOR_RED, "Du musst erst deinen Handyvertrag kündigen!");
                    if(GetPlayerMoney(playerid) < 300 )return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                    if(Biz[HandyShopBiz_Index][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    Biz[HandyShopBiz_Index][bWaren] -= 3;
                    Biz[HandyShopBiz_Index][bKasse] += 300;
                    GivePlayerCash(playerid, -300);
                    SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir eine Call-Ya Handykarte für $300 gekauft!");
                    Spieler[playerid][pHandyGeld] = 0;
                    ShowBuyInformation(playerid,"~y~Call Ya Handykarte ~w~gekauft!");
                    GetFreePhoneNumber(playerid);
                }
                else if(listitem==5) { //Call-Ya Guthaben Kaufen
                    ShowPlayerDialog(playerid, DIALOG_HANDYAUFLADEN, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Handy-Shop - Call-Ya Guthaben", "$100\n$500\n$1.000\n$5.000\n$10.000", "Auswählen", "Abbrechen");
                }
            }
        }
        case DIALOG_MARKT:
        {
            if(response)
            {
                if(listitem==0)//Telefonbuch
                {
                    if(Spieler[playerid][pPhoneBook] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Telefonbuch.");
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 2;
                            Biz[39][bKasse] += 400;
                            GivePlayerCash(playerid, -400);
                            Spieler[playerid][pPhoneBook] = 1;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 400$ gekauft.");
                            SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 2;
                        Biz[22][bKasse] += 400;
                        GivePlayerCash(playerid, -400);
                        Spieler[playerid][pPhoneBook] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 400$ gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 2;
                        Biz[23][bKasse] += 400;
                        GivePlayerCash(playerid, -400);
                        Spieler[playerid][pPhoneBook] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 400$ gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 2;
                        Biz[24][bKasse] += 400;
                        GivePlayerCash(playerid, -400);
                        Spieler[playerid][pPhoneBook] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 400$ gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 2;
                        Biz[26][bKasse] += 400;
                        GivePlayerCash(playerid, -400);
                        Spieler[playerid][pPhoneBook] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 400$ gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 2;
                        Biz[27][bKasse] += 400;
                        GivePlayerCash(playerid, -400);
                        Spieler[playerid][pPhoneBook] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 400$ gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 2;
                        Biz[28][bKasse] += 400;
                        GivePlayerCash(playerid, -400);
                        Spieler[playerid][pPhoneBook] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 400$ gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
                    }
                    ShowBuyInformation(playerid,"~y~Telefonbuch ~w~gekauft!");
                }
                if(listitem==1)//5 Kekse
                {
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < 150)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 1;
                            Biz[39][bKasse] += 150;
                            GivePlayerCash(playerid, -150);
                            Spieler[playerid][pKekse] = 5;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 5 Kekse für $150 gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < 150)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 1;
                        Biz[22][bKasse] += 150;
                        GivePlayerCash(playerid, -150);
                        Spieler[playerid][pKekse] += 5;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 5 Kekse für $150 gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < 150)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 1;
                        Biz[23][bKasse] += 150;
                        GivePlayerCash(playerid, -150);
                        Spieler[playerid][pKekse] += 5;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 5 Kekse für $150 gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < 150)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 1;
                        Biz[24][bKasse] += 150;
                        GivePlayerCash(playerid, -150);
                        Spieler[playerid][pKekse] += 5;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 5 Kekse für $150 gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < 150)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 1;
                        Biz[26][bKasse] += 150;
                        GivePlayerCash(playerid, -150);
                        Spieler[playerid][pKekse] += 5;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 5 Kekse für $150 gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < 150)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 1;
                        Biz[27][bKasse] += 150;
                        GivePlayerCash(playerid, -150);
                        Spieler[playerid][pKekse] += 5;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 5 Kekse für $150 gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.");
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < 150)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 1;
                        Biz[28][bKasse] += 150;
                        GivePlayerCash(playerid, -150);
                        Spieler[playerid][pKekse] += 5;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 5 Kekse für $150 gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.");
                    }
                    ShowBuyInformation(playerid,"~y~Kekse ~w~gekauft!");
                }
                if(listitem==2)//Zigs
                {
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < 225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 2;
                            Biz[39][bKasse] += 225;
                            GivePlayerCash(playerid, -225);
                            Spieler[playerid][pZigaretten] = 10;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für $225 gekauft. Verwende sie per /Rauchzig.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < 225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 2;
                        Biz[22][bKasse] += 225;
                        GivePlayerCash(playerid, -225);
                        Spieler[playerid][pZigaretten] += 10;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für $225 gekauft. Verwende sie per /Rauchzig.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < 225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 2;
                        Biz[23][bKasse] += 225;
                        GivePlayerCash(playerid, -225);
                        Spieler[playerid][pZigaretten] += 10;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für $225 gekauft. Verwende sie per /Rauchzig.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < 225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 2;
                        Biz[24][bKasse] += 225;
                        GivePlayerCash(playerid, -225);
                        Spieler[playerid][pZigaretten] += 10;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für $225 gekauft. Verwende sie per /Rauchzig.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < 225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 2;
                        Biz[26][bKasse] += 225;
                        GivePlayerCash(playerid, -225);
                        Spieler[playerid][pZigaretten] += 10;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für $225 gekauft. Verwende sie per /Rauchzig.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < 225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 2;
                        Biz[27][bKasse] += 225;
                        GivePlayerCash(playerid, -225);
                        Spieler[playerid][pZigaretten] += 10;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für $225 gekauft. Verwende sie per /Rauchzig.");
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < 225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 2;
                        Biz[28][bKasse] += 225;
                        GivePlayerCash(playerid, -225);
                        Spieler[playerid][pZigaretten] += 10;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für $225 gekauft. Verwende sie per /Rauchzig.");
                    }
                    ShowBuyInformation(playerid,"~y~Zigeretten ~w~gekauft!");
                }
                if(listitem==3)//brecheisen
                {
                    /*
                    if( Spieler[playerid][pBrecheisen] ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt bereits ein Brecheisen");
                    }
                    */
                    if(Spieler[playerid][pBrecheisen] < 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Brecheisen.");
                    new preis = 3500;
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 2;
                            Biz[39][bKasse] += preis;
                            GivePlayerCash(playerid, -preis);
                            Spieler[playerid][pBrecheisen]++;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir ein Brecheisen gekauft.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 2;
                        Biz[22][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pBrecheisen]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir ein Brecheisen gekauft.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 2;
                        Biz[23][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pBrecheisen]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir ein Brecheisen gekauft.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 2;
                        Biz[24][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pBrecheisen]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir ein Brecheisen gekauft.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 2;
                        Biz[26][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pBrecheisen]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir ein Brecheisen gekauft.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 2;
                        Biz[27][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir ein Brecheisen gekauft.");
                        Spieler[playerid][pBrecheisen]++;
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 2;
                        Biz[28][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir ein Brecheisen gekauft.");
                        Spieler[playerid][pBrecheisen]++;
                    }
                    ShowBuyInformation(playerid,"~y~Brecheisen ~w~gekauft!");
                }
                if(listitem==4)//Helm
                {
                    /*
                    if( Spieler[playerid][pBrecheisen] ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt bereits ein Brecheisen");
                    }
                    */
                    new preis = 2000;
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if( Spieler[playerid][pHelm] ) {
                        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen Helm.");
                    }
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 2;
                            Biz[39][bKasse] += preis;
                            GivePlayerCash(playerid, -preis);
                            Spieler[playerid][pHelm]++;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 2;
                        Biz[22][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pHelm]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 2;
                        Biz[23][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pHelm]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 2;
                        Biz[24][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pHelm]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 2;
                        Biz[26][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pHelm]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 2;
                        Biz[27][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
                        Spieler[playerid][pHelm]++;
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 2;
                        Biz[28][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
                        Spieler[playerid][pHelm]++;
                    }
                    ShowBuyInformation(playerid,"~y~Helm ~w~gekauft!");
                }
                if(listitem==5)//MP3Player
                {
                    new preis = 1500;
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if( Spieler[playerid][pMP3Player] ) {
                        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen MP3-Player.");
                    }
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 3;
                            Biz[39][bKasse] += preis;
                            GivePlayerCash(playerid, -preis);
                            Spieler[playerid][pMP3Player]++;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 3;
                        Biz[22][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pMP3Player]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 3;
                        Biz[23][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pMP3Player]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 3;
                        Biz[24][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pMP3Player]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 3;
                        Biz[26][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pMP3Player]++;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 3;
                        Biz[27][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                        Spieler[playerid][pMP3Player]++;
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 3;
                        Biz[28][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
                        Spieler[playerid][pMP3Player]++;
                    }
                    ShowBuyInformation(playerid,"~y~MP3Player ~w~gekauft!");
                }
                if(listitem==6)//Koffer
                {
                    new preis = 1500;
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if( Spieler[playerid][pKoffer] ) {
                        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen Koffer.");
                    }
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 2;
                            Biz[39][bKasse] += preis;
                            GivePlayerCash(playerid, -preis);
                            Spieler[playerid][pKoffer] = true;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 2;
                        Biz[22][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pKoffer] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 2;
                        Biz[23][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pKoffer] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 2;
                        Biz[24][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pKoffer] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 2;
                        Biz[26][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pKoffer] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 2;
                        Biz[27][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
                        Spieler[playerid][pKoffer] = true;
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 2;
                        Biz[28][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
                        Spieler[playerid][pKoffer] = true;
                    }
                    ShowBuyInformation(playerid,"~y~Koffer ~w~gekauft!");
                }
                if(listitem==7)//RadarfallenWarnung
                {
                    new preis = 15000;
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if( Spieler[playerid][pRadarfallenWarnung] ) {
                        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen Radarfallen-Warner.");
                    }
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 5;
                            Biz[39][bKasse] += preis;
                            GivePlayerCash(playerid, -preis);
                            Spieler[playerid][pRadarfallenWarnung] = true;
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Radarfallen-Warner gekauft.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 5;
                        Biz[22][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pRadarfallenWarnung] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Radarfallen-Warner gekauft.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 5;
                        Biz[23][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pRadarfallenWarnung] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Radarfallen-Warner gekauft.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 5;
                        Biz[24][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pRadarfallenWarnung] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Radarfallen-Warner gekauft.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 5;
                        Biz[26][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        Spieler[playerid][pRadarfallenWarnung] = true;
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Radarfallen-Warner gekauft.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 5;
                        Biz[27][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Radarfallen-Warner gekauft.");
                        Spieler[playerid][pRadarfallenWarnung] = true;
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 5;
                        Biz[28][bKasse] += preis;
                        GivePlayerCash(playerid, -preis);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Radarfallen-Warner gekauft.");
                        Spieler[playerid][pRadarfallenWarnung] = true;
                    }
                    ShowBuyInformation(playerid,"~y~Radarfallen Warner ~w~gekauft!");
                }
                if(listitem==8)//Fallschirm
                {
                    new pVW = GetPlayerVirtualWorld(playerid);
                    if(pVW == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1718.0939,-1770.7455,13.7035))
                        {
                            if(GetPlayerMoney(playerid) < 2500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                            if(Biz[39][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                            Biz[39][bWaren] -= 2;
                            Biz[39][bKasse] += 2500;
                            GivePlayerWeapon(playerid, 46, 1);
                            SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für $2.500 gekauft.");
                            SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste 'Enter' kannst du ihn im Sprung in die Tiefe öffnen.");
                        }
                    }
                    if(pVW == 22)
                    {
                        if(GetPlayerMoney(playerid) < 2500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[22][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[22][bWaren] -= 2;
                        Biz[22][bKasse] += 2500;
                        GivePlayerCash(playerid, -2500);
                        GivePlayerWeapon(playerid, 46, 1);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für $2.500 gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste 'Enter' kannst du ihn im Sprung in die Tiefe öffnen.");
                    }
                    if(pVW == 23)
                    {
                        if(GetPlayerMoney(playerid) < 2500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[23][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[23][bWaren] -= 2;
                        Biz[23][bKasse] += 2500;
                        GivePlayerCash(playerid, -2500);
                        GivePlayerWeapon(playerid, 46, 1);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für $2.500 gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste 'Enter' kannst du ihn im Sprung in die Tiefe öffnen.");
                    }
                    if(pVW == 24)
                    {
                        if(GetPlayerMoney(playerid) < 2500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[24][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[24][bWaren] -= 2;
                        Biz[24][bKasse] += 2500;
                        GivePlayerCash(playerid, -2500);
                        GivePlayerWeapon(playerid, 46, 1);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für $2.500 gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste 'Enter' kannst du ihn im Sprung in die Tiefe öffnen.");
                    }
                    if(pVW == 26)
                    {
                        if(GetPlayerMoney(playerid) < 2500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[26][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[26][bWaren] -= 2;
                        Biz[26][bKasse] += 2500;
                        GivePlayerCash(playerid, -2500);
                        GivePlayerWeapon(playerid, 46, 1);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für $2.500 gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste 'Enter' kannst du ihn im Sprung in die Tiefe öffnen.");
                    }
                    if(pVW == 27)
                    {
                        if(GetPlayerMoney(playerid) < 2500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[27][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[27][bWaren] -= 2;
                        Biz[27][bKasse] += 2500;
                        GivePlayerCash(playerid, -2500);
                        GivePlayerWeapon(playerid, 46, 1);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für $2.500 gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste 'Enter' kannst du ihn im Sprung in die Tiefe öffnen.");
                    }
                    if(pVW == 28)
                    {
                        if(GetPlayerMoney(playerid) < 2500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[28][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[28][bWaren] -= 2;
                        Biz[28][bKasse] += 2500;
                        GivePlayerCash(playerid, -2500);
                        GivePlayerWeapon(playerid, 46, 1);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für $2.500 gekauft.");
                        SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste 'Enter' kannst du ihn im Sprung in die Tiefe öffnen.");
                    }
                    ShowBuyInformation(playerid,"~y~Fallschirm ~w~gekauft!");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_SERVICE:
        {
            new string[128];
            if(response)
            {
                if(listitem==0)//Polizei
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keinen Notruf abgeben!");
                    return cmd_anrufen(playerid,"110");
                }
                if(listitem==1)//Sani
                {
                    // if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keine Sanitäter rufen!");
                    return cmd_anrufen(playerid,"112");
                }
                if(listitem==2)//KFZ-Mechatroniker
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst das hier nicht!");
                    SendClientMessage(playerid, COLOR_BLUE, "Dein Mechaniker-Ruf wurde abgeschickt! Warte auf eine Rückmeldung.");
                    if(NeedKFZ[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen KFZ-Mechatroniker gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 5)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) benötigt einen Mechatroniker! Verwende /Acceptkfz [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es sind keine KFZ-Mechatroniker online!");
                        return 1;
                    }
                    NeedKFZ[playerid] = 1;
                }
                if(listitem==3)//OAMT
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier das Ordnungsamt nicht anrufen.");
                    SendClientMessage(playerid, COLOR_RED, "Hier ist der Notruf der Los Santos Verkehrsüberwachung!");
                    SendClientMessage(playerid, COLOR_BLUE, "Ihr Notruf ist in die Notrufzentrale eingegangen, warten Sie auf eine Rückmeldung!");
                    if(NeedOAMT[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Ordnungsbeamten gerufen, warte auf die Annahme!");
                    new bool: IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 5)
                            {
                                format(string, sizeof(string), "[ZENTRALE] Bürger %s (ID: %d)(Nummer: %d) benötigt einen Ordnungsbeamten! Verwende /Acceptoamt [ID]", GetName(playerid), playerid, Spieler[playerid][pHandyNr]);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Ordnungsbeamter online.");
                        return 1;
                    }
                    NeedOAMT[playerid] = 1;
                }
                if(listitem==4)//Taxi
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier kein Taxi rufen!");
                    SendClientMessage(playerid, COLOR_BLUE, "Dein Taxiruf wurde abgeschickt, warte auf eine Rückmeldung!");
                    if(NeedTAXI[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Taxi gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 16)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) ruft ein Taxi! Verwende /Accepttaxi [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Taxifahrer online.");
                        return 1;
                    }
                    NeedTAXI[playerid] = 1;
                }
                if(listitem==5)//Pizza
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keine Pizza bestellen!");
                    SendClientMessage(playerid, COLOR_BLUE, "Deine Bestellung wurde abgeschickt, warte auf eine Rückmeldung!");
                    if(NeedPIZZA[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits eine Pizza bestellt, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 15)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) bestellt eine Pizza! Verwende /Acceptpizza [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Pizzalieferant online.");
                        return 1;
                    }
                    NeedPIZZA[playerid] = 1;
                }
                if(listitem==6)//Wheelman
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    SendClientMessage(playerid, COLOR_BLUE, "Dein Wheelman Auftrag wurde verschickt. Warte auf eine Annahme!");
                    if(NeedWHEEL[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Wheelman gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 17)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) benötigt ein Wheelman! Verwende /Acceptwheel [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Wheelman online.");
                        return 1;
                    }
                    NeedWHEEL[playerid] = 1;
                }
                if(listitem==7)//Anwalt
                {
                    if (Spieler[playerid][pJailed] == 0) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Gefängnis!");
                    if (Spieler[playerid][pJailed] != 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keinen Anwalt rufen!");
                    SendClientMessage(playerid, COLOR_BLUE, "Du hast ein Anwalt beantragt, warte auf eine Rückmeldung!");
                    if(NeedAWALT[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Anwalt gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 6)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) ist im Los Santos Police Dep. inhaftiert und benötigt einen Anwalt! Verwende /Acceptanwalt [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Anwalt online.");
                        return 1;
                    }
                    NeedAWALT[playerid] = 1;
                }
            }
            if(!response)return 1;
        }
        case DIALOG_WMENU:
        {
            if(response)
            {
                new index;
                if(GetPlayerInterior(playerid) == 4 ) index = GetBizIndexByID(1);
                if(GetPlayerInterior(playerid) == 6 ) index = GetBizIndexByID(41);
                if(GetPlayerInterior(playerid) == 1 ) index = GetBizIndexByID(54);
                if( index == 0 ) return 0;
                {
                    if(Biz[index][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat keine Waren mehr.");
                    if(listitem==0)
                    {
                        if(GetPlayerMoney(playerid) < 750)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 1, 1);
                        GivePlayerCash(playerid, -750);
                        Biz[index][bKasse] += 750;
                        Biz[index][bWaren] -= 1;
                    }
                    if(listitem==1)
                    {
                        if(GetPlayerMoney(playerid) < 900)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 5, 1);
                        GivePlayerCash(playerid, -900);
                        Biz[index][bKasse] += 900;
                        Biz[index][bWaren] -= 1;
                    }
                    if(listitem==2)
                    {
                        if(GetPlayerMoney(playerid) < 900)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 6, 1);
                        GivePlayerCash(playerid, -900);
                        Biz[index][bKasse] += 900;
                        Biz[index][bWaren] -= 1;
                    }
                    if(listitem==3)
                    {
                        if(GetPlayerMoney(playerid) < 2000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        SetPlayerArmour(playerid,100);
                        GivePlayerCash(playerid, -2000);
                        Biz[index][bKasse] += 2000;
                        Biz[index][bWaren] -= 3;
                    }
                    if(listitem==4)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 2100)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 22, 50);
                        GivePlayerCash(playerid, -2100);
                        Biz[index][bKasse] += 2100;
                        Biz[index][bWaren] -= 3;
                    }
                    if(listitem==5)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 50)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 23, 50);
                        GivePlayerCash(playerid, -2600);
                        Biz[index][bKasse] += 2600;
                        Biz[index][bWaren] -= 3;
                    }
                    if(listitem==6)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 3300)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 24, 50);
                        GivePlayerCash(playerid, -3300);
                        Biz[index][bKasse] += 3300;
                        Biz[index][bWaren] -= 5;
                    }
                    if(listitem==7)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 6400)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 25, 20);
                        GivePlayerCash(playerid, -6400);
                        Biz[index][bKasse] += 6400;
                        Biz[index][bWaren] -= 5;
                    }
                    if(listitem==8)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 4500)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 29, 130);
                        GivePlayerCash(playerid, -6800);
                        Biz[index][bKasse] += 6800;
                        Biz[index][bWaren] -= 5;
                    }
                    if(listitem==9)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 11000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 31, 130);
                        GivePlayerCash(playerid, -11000);
                        Biz[index][bKasse] += 11000;
                        Biz[index][bWaren] -= 5;
                    }
                    if(listitem==10)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 11200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 30, 130);
                        GivePlayerCash(playerid, -11200);
                        Biz[index][bKasse] += 11200;
                        Biz[index][bWaren] -= 5;
                    }
                    if(listitem==11)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 12000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 33, 30);
                        GivePlayerCash(playerid, -12000);
                        Biz[index][bKasse] += 12000;
                        Biz[index][bWaren] -= 5;
                    }
                }

                ShowBuyInformation(playerid,"~y~Waffen ~w~gekauft!");
            }

            if (!response) return 1;
        }
        case CDIALOG_WMENU:
        {
            if(response)
            {
                if(GetPlayerInterior(playerid) == 9 || GetPlayerInterior(playerid) == 3)
                {
                    {
                        if(GetPlayerMoney(playerid) < 400)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 1, 1);
                        GivePlayerCash(playerid, -400);
                    }
                    if(listitem==1)
                    {
                        if(GetPlayerMoney(playerid) < 600)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 5, 1);
                        GivePlayerCash(playerid, -600);
                    }
                    if(listitem==2)
                    {
                        if(GetPlayerMoney(playerid) < 600)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 6, 1);
                        GivePlayerCash(playerid, -600);
                    }
                    if(listitem==3)
                    {
                        if(GetPlayerMoney(playerid) < 1200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        SetPlayerArmour(playerid,100);
                        GivePlayerCash(playerid, -1200);
                    }
                    if(listitem==4)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 1500)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 22, 100);
                        GivePlayerCash(playerid, -1500);
                    }
                    if(listitem==5)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 1800)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 23, 100);
                        GivePlayerCash(playerid, -1800);
                    }
                    if(listitem==6)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 2600)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 24, 100);
                        GivePlayerCash(playerid, -2600);
                    }
                    if(listitem==7)
                    {
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe");
                        if(GetPlayerMoney(playerid) < 5000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 25, 50);
                        GivePlayerCash(playerid, -5000);
                    }
                    if(listitem==8)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 5200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 29, 150);
                        GivePlayerCash(playerid, -5200);
                    }
                    if(listitem==9)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 8200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 31, 200);
                        GivePlayerCash(playerid, -8200);
                    }
                    if(listitem==10)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 9200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 30, 200);
                        GivePlayerCash(playerid, -9200);
                    }
                    if(listitem==11)
                    {
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe");
                        if(GetPlayerMoney(playerid) < 10000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 33, 50);
                        GivePlayerCash(playerid, -10000);
                    }
                }
                ShowBuyInformation(playerid,"~y~Waffen ~w~gekauft!");
            }

            if (!response) return 1;
        }
        case DIALOG_MAXBENZIN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe einer Tankstelle.");
                if(listitem==0)
                {
                    if(GetPlayerMoney(playerid) < 10000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 1000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 1000 Liter gesetzt.");
                    GivePlayerCash(playerid, -10000);
                    UpdateTankeText(t);
                }
                if(listitem==1)
                {
                    if(GetPlayerMoney(playerid) < 20000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 2000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 2000 Liter gesetzt.");
                    GivePlayerCash(playerid, -20000);
                    UpdateTankeText(t);
                }
                if(listitem==2)
                {
                    if(GetPlayerMoney(playerid) < 30000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 3000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 3000 Liter gesetzt.");
                    GivePlayerCash(playerid, -30000);
                    UpdateTankeText(t);
                }
                if(listitem==3)
                {
                    if(GetPlayerMoney(playerid) < 40000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 4000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 4000 Liter gesetzt.");
                    GivePlayerCash(playerid, -40000);
                    UpdateTankeText(t);
                }
                if(listitem==4)
                {
                    if(GetPlayerMoney(playerid) < 50000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 5000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 5000 Liter gesetzt.");
                    GivePlayerCash(playerid, -50000);
                    UpdateTankeText(t);
                }
            }
        }
        case DIALOG_MAXWAREN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Geschäftes.");
                if(listitem==0)
                {
                    if(GetPlayerMoney(playerid) < 5000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 100;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 100 Waren gesetzt.");
                    GivePlayerCash(playerid, -5000);
                    UpdateBizText(b);
                }
                if(listitem==1)
                {
                    if(GetPlayerMoney(playerid) < 10000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 200;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 200 Waren gesetzt.");
                    GivePlayerCash(playerid, -10000);
                    UpdateBizText(b);
                }
                if(listitem==2)
                {
                    if(GetPlayerMoney(playerid) < 15000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 300;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 300 Waren gesetzt.");
                    GivePlayerCash(playerid, -15000);
                    UpdateBizText(b);
                }
                if(listitem==3)
                {
                    if(GetPlayerMoney(playerid) < 20000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 400;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 400 Waren gesetzt.");
                    GivePlayerCash(playerid, -20000);
                    UpdateBizText(b);
                }
                if(listitem==4)
                {
                    if(GetPlayerMoney(playerid) < 25000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 500;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 500 Waren gesetzt.");
                    GivePlayerCash(playerid, -25000);
                    UpdateBizText(b);
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGBIZ:
        {
            if(response)
            {
                if(listitem==0)//Rauswerfen des Besitzers
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Besitzer "COLOR_HEX_ORANGE"%s "COLOR_HEX_WHITE"aus dem Geschäft schmeißen?", Biz[b][bBesitzer]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_RAUSWERFEN, DIALOG_STYLE_MSGBOX, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                }
                if(listitem==1)//Kaufpreis
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Biz[b][bPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                }
                if(listitem==2)//Warenpreis
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Warenpreis ändern?\nDer derzeitige Warenpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Biz[b][bWarenPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WARENPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                }
                if(listitem==3)//Status
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", COLOR_HEX_WHITE"Möchtest du wirklich den Status des Geschäftes ändern?\nDann tippe nun "COLOR_HEX_ORANGE"AUF "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"ZU "COLOR_HEX_WHITE"um den Status zu ändern.", "Ändern", "Abbrechen");
                }
                if(listitem==4)//Beschreibung
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Geschäft ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Biz[b][bName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==5)//Maximale Waren
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_MAXWAREN, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "100 Waren\n200 Waren\n300 Waren\n400 Waren\n500 Waren\n1000 Waren\n3000 Waren\n5000 Waren", "Ändern", "Abbrechen");
                }
                if(listitem==6)//Waren
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Waren ändern?\nDerzeitiger Warenstand: "COLOR_HEX_ORANGE"%d", Biz[b][bWaren]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WAREN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==7)//Öffnungszeiten
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel:8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGBIZ_ZEITEN: {
            if(response) {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new
                    auf,zu;
                if(sscanf(inputtext,"dd",auf,zu)) {
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel:8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr\nAchtung: 0 bis 24 ", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if( !( 0 <= auf <= 24 ) || !( 0 <= zu <= 24 ))
                {
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel:8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr\nAchtung: 0 bis 24 ", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if( auf == zu ) {
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel:8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr\nAchtung: 0 bis 24 ", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new
                    Str[128];
                format(Str, sizeof(Str), "Der Öffnungszeiten wurden geändert von %d bis %d auf %d Uhr bis %d Uhr geändert.", Biz[b][bLadenAuf],Biz[b][bLadenZu],auf,zu);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                Biz[b][bLadenAuf] = auf;
                Biz[b][bLadenZu] = zu;
                UpdateBizText(b);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungsze", "Auswählen", "Abbrechen");
            }
            return 1;
        }
        case DIALOG_CONFIGBIZ_WAREN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > Biz[b][bMaxWaren])
                {
                    SendClientMessage(playerid, COLOR_ORANGE, "Die Waren dürfen nicht unter 1 oder über die Maximale Warenanzahl sein!");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Waren ändern?\nDerzeitiger Warenstand: "COLOR_HEX_ORANGE"%d", Biz[b][bWaren]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WAREN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new Str[128];
                new oldwaren = Biz[b][bWaren];
                new newwaren = entry;
                Biz[b][bWaren] = entry;
                UpdateBizText(b);
                format(Str, sizeof(Str), "Der Waren-Stand wurde von %d in %d geändert.", oldwaren, newwaren);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");

            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_MAXWAREN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                if(listitem==0)
                {
                    Biz[b][bMaxWaren] = 100;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 100 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==1)
                {
                    Biz[b][bMaxWaren] = 200;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 200 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==2)
                {
                    Biz[b][bMaxWaren] = 300;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 300 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==3)
                {
                    Biz[b][bMaxWaren] = 400;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 400 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==4)
                {
                    Biz[b][bMaxWaren] = 500;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 500 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==5)
                {
                    Biz[b][bMaxWaren] = 1000;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 1000 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==6)
                {
                    Biz[b][bMaxWaren] = 3000;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 3000 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==7)
                {
                    Biz[b][bMaxWaren] = 5000;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 5000 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_NAME:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Geschäft ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Biz[b][bName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Die Beschreibung muss mindestens 2 Zeichen lang sein.");
                    return 1;
                }
                new oldname[32];
                format(oldname, sizeof(oldname), "%s", Biz[b][bName]);
                format(Biz[b][bName], 32, "%s", inputtext);
                new Str[128];
                format(Str, sizeof(Str), "Die Beschreibung wurde von %s in %s geändert.", oldname, inputtext);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                UpdateBizText(b);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_LOCKSTATUS:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    SendClientMessage(playerid, COLOR_RED, "Fehlerhafte Eingabe!");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", COLOR_HEX_WHITE"Möchtest du wirklich den Status des Geschäftes ändern?\nDann tippe nun "COLOR_HEX_ORANGE"AUF "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"ZU "COLOR_HEX_WHITE"um den Status zu ändern.", "Ändern", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "AUF", true) == 0)
                {
                    Biz[b][bLock] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Geschäft ist nun geöffnet.");
                    UpdateBizText(b);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                    return 1;
                }
                else if(strcmp(inputtext, "ZU", true) == 0)
                {
                    Biz[b][bLock] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Geschäft ist nun geschlossen.");
                    UpdateBizText(b);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                    return 1;
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Fehlerhafte Eingabe!");
                    return 1;
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }


        case DIALOG_CONFIGBIZ_WARENPREIS:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 500)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Warenpreis muss zwischen $1 und $500 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Warenpreis ändern?\nDer derzeitige Warenpreis beträgt:"COLOR_HEX_ORANGE" $%d", Biz[b][bWarenPreis]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WARENPREIS, DIALOG_STYLE_INPUT, "Konfiguration des Geschäftes", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Biz[b][bWarenPreis];
                new newprice = entry;
                Biz[b][bWarenPreis] = entry;
                UpdateBizText(b);
                format(Str, sizeof(Str), "Der Warenpreis wurde von $%d in $%d geändert.", oldprice, newprice);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_KAUFPREIS:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 50000000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Kaufpreis muss zwischen $1 und $50.000.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Biz[b][bPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Biz[b][bPreis];
                new newprice = entry;
                Biz[b][bPreis] = entry;
                UpdateBizText(b);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGBIZ_RAUSWERFEN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                SendClientMessage(playerid, COLOR_RED, "Der Besitzer wurde aus seinem Geschäft rausgeworfen.");
                format(Biz[b][bBesitzer], MAX_PLAYER_NAME, "Niemand");
                UpdateBizText(b);
                //new query[128];
                //format(query, sizeof(query), "UPDATE `accounts` SET `BizKey` = '999' WHERE `BizKey` = %d", b);
                //mysql_pquery(query,THREAD_CONFIGBIZ_RAUSWERFEN,playerid,gSQL,MySQLThreadOwner);
                Biz[b][bKasse] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pPlayerBiz] == b)
                        {
                            Spieler[i][pPlayerBiz] = 999;
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du wurdest aus deinem Geschäft rausgeschmissen.");
                            return 1;
                        }
                    }
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGTANKE:
        {
            if(response)
            {
                if(listitem==0)//Rauswerfen des Besitzers
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Besitzer rauswerfen?\nDerzeitiger Besitzer: "COLOR_HEX_ORANGE"%s", Tanke[t][tBesitzer]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_RAUSWERFEN, DIALOG_STYLE_MSGBOX, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==1)//Kaufpreis ändern
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDerzeitiger Kaufpreis: "COLOR_HEX_ORANGE"%d", Tanke[t][tPreis]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==2)//Benzinkosten ändern
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Benzinkosten ändern?\nDerzeitige Benzinkosten: "COLOR_HEX_ORANGE"%d", Tanke[t][tFillCost]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_BENZINKOSTEN, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==3)//Beschreibung
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Tanke[t][tName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==4)//Max Benzin
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_MAXBENZIN, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "1000 Liter\n2000 Liter\n3000 Liter\n4000 Liter\n5000 Liter", "Auswählen", "Abbrechen");
                }
                if(listitem==5)//Benzinstand
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new string[200];
                    format(string,sizeof(string),COLOR_HEX_WHITE"Möchtest du wirklich den Benzinstand ändern?\nDerzeitiger Warenstand: "COLOR_HEX_ORANGE"%d", Tanke[t][tBenzin]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_BENZIN, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", string , "Ändern", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGTANKE_BENZIN: {
            if(response) {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                new val;
                sscanf(inputtext,"d",val);
                if(val < 1 || val > Tanke[t][tMaxBenzin])
                {
                    SendClientMessage(playerid, COLOR_ORANGE, "Der Benzinstand darf nicht unter 1 oder über dem Maximale Benzinstand sein!");
                    return 1;
                }
                new Str[128];
                new oldbenzin = Tanke[t][tBenzin];
                new newbenzin = val;
                Tanke[t][tBenzin] = val;
                UpdateTankeText(t);
                format(Str, sizeof(Str), "Der Benzinstand wurde von %d in %d geändert.", oldbenzin, newbenzin);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
            }
            else
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGTANKE_MAXBENZIN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                if(listitem==0)
                {
                    Tanke[t][tMaxBenzin] = 1000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 1000 Liter gesetzt.");
                }
                if(listitem==1)
                {
                    Tanke[t][tMaxBenzin] = 2000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 2000 Liter gesetzt.");
                }
                if(listitem==2)
                {
                    Tanke[t][tMaxBenzin] = 3000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 3000 Liter gesetzt.");
                }
                if(listitem==3)
                {
                    Tanke[t][tMaxBenzin] = 4000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 4000 Liter gesetzt.");
                }
                if(listitem==4)
                {
                    Tanke[t][tMaxBenzin] = 5000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 5000 Liter gesetzt.");
                }
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGTANKE_NAME:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Beschreibung muss mindestens 2 Zeichen enthalten!");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Tanke[t][tName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                    return 1;
                }
                new oldname[32];
                format(oldname, sizeof(oldname), "%s", Tanke[t][tName]);
                format(Tanke[t][tName], 32, "%s", inputtext);
                new Str[128];
                format(Str, sizeof(Str), "Die Beschreibung wurde von %s in %s geändert.", oldname, inputtext);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                UpdateTankeText(t);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGTANKE_BENZINKOSTEN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 200)
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Benzinkosten müssen zwischen $1 und $200 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Benzinkosten ändern?\nDerzeitige Benzinkosten: "COLOR_HEX_ORANGE"%d", Tanke[t][tFillCost]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_BENZINKOSTEN, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Tanke[t][tFillCost];
                new newprice = entry;
                Tanke[t][tFillCost] = entry;
                UpdateTankeText(t);
                format(Str, sizeof(Str), "Die Benzinkosten wurden von $%d in $%d geändert.", oldprice, newprice);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGTANKE_KAUFPREIS:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 30000000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Kaufpreis muss zwischen $1 und $30.000.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDerzeitiger Kaufpreis: "COLOR_HEX_ORANGE"$%s", AddDelimiters(Tanke[t][tPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Tanke[t][tPreis];
                new newprice = entry;
                Tanke[t][tPreis] = entry;
                UpdateTankeText(t);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGTANKE_RAUSWERFEN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                format(Tanke[t][tBesitzer], MAX_PLAYER_NAME, "Niemand");
                UpdateTankeText(t);
                //new query[128];
                //format(query, sizeof(query), "UPDATE `accounts` SET `TankKey` = '999' WHERE `TankKey` = %d", t);
                //mysql_pquery(query,THREAD_CONFIGTANKE_RAUSWERFEN,playerid,gSQL,MySQLThreadOwner);
                Tanke[t][tKasse] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pPlayerTank] == t)
                        {
                            Spieler[i][pPlayerTank] = 999;
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du wurdest aus deinem Geschäft rausgeschmissen.");
                            return 1;
                        }
                    }
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGHOUSE:
        {
            if(response)
            {
                if(listitem==0)//Rauswerfen der Bewohner und des Besitzers
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich alle "COLOR_HEX_ORANGE"Bewohner "COLOR_HEX_WHITE"und den "COLOR_HEX_ORANGE"Besitzer %s "COLOR_HEX_WHITE"aus dem Haus rausschmeißen?", Haus[h][hBesitzer]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_RAUSWERFEN, DIALOG_STYLE_MSGBOX, "Konfigurieren des Hauses", dStr, "Ja", "Nein");
                }
                if(listitem==1)//Kaufpreis ändern
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==2)//Mietpreis ändern
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Mietpreis ändern?\nDer derzeitige Mietpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==3)//Miet-Status
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[164];
                    new rentable[12];
                    if(Haus[h][hMieten]==0){rentable="Nein";}
                    else if(Haus[h][hMieten]==1){rentable="Ja";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Miet-Status des Hauses ändern?\nKann gemietet werden: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"JA"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"NEIN"COLOR_HEX_WHITE".", rentable);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==4)//Status (Lock)
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[164];
                    new status[12];
                    if(Haus[h][hLock] == 0){status="Offen";}
                    else if(Haus[h][hLock] == 1){status="Geschlossen";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Lock-Status des Hauses ändern?\nDerzeitiger Lock-Status: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"AUF"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"ZU"COLOR_HEX_WHITE".", status);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==5)//Interior
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_INTERIOR, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Interior 1\nInterior 2\nInterior 3\nInterior 4\nInterior 5\nInterior 6\nInterior 7\nInterior 8\nInterior 9\nInterior 10\nInterior 11\nInterior 12\nInterior 13\nInterior 14\nInterior 15\nInterior 16\nInterior 17\nInterior 18\nInterior 19\nInterior 20", "Auswählen", "Abbrechen");
                }
                if(listitem==6)//Beschreibung(Name)
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Hauses ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Haus[h][hName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==7)//Maximal Anzahl an Mietern
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[200];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die maximale Anzahl an Mietern des Hauses ändern?\nDerzeitige maximale Anzahl: "COLOR_HEX_ORANGE"%d"COLOR_HEX_WHITE"\nDerzeitige Mieter Anzahl: "COLOR_HEX_ORANGE"%d", Haus[h][hMieterMax], Haus[h][hMieterAnzahl]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MAXMIETER, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGHOUSE_MAXMIETER: {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                new anzahl;
                if(sscanf(inputtext,"d",anzahl)) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < 1 || anzahl > 10 ) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < Haus[h][hMieterAnzahl] ) return SendClientMessage(playerid, COLOR_RED, "Es sind zu viele Spieler in das Haus eingemietet, um die Grenze auf diesen Wert festzulegen");
                new Str[128];
                format(Str, sizeof(Str), "Die maximale Anzahl an Mietern wurde auf %d geändert", anzahl);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                Haus[h][hMieterMax] = anzahl;
                UpdateHouseText(h);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGHOUSE_NAME:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Hauses ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Haus[h][hName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Die Beschreibung des Hauses muss mindestens 2 Zeichen haben!");
                    return 1;
                }
                new oldname[32];
                format(oldname, sizeof(oldname), "%s", Haus[h][hName]);
                format(Haus[h][hName], 32, "%s", inputtext);
                new Str[128];
                format(Str, sizeof(Str), "Die Beschreibung wurde von %s in %s geändert.", oldname, inputtext);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                UpdateHouseText(h);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGHOUSE_INTERIOR:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                Haus[h][HouseInteriorID] = listitem + 1;
                SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
                /*
                if(listitem==0)//Interior 1
                {
                    Haus[h][hInterior] = 3;
                    Haus[h][ExitX] = 235.508994;
                    Haus[h][ExitY] = 1189.169897;
                    Haus[h][ExitZ] = 1080.339966;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==1)//Interior 2
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 225.756989;
                    Haus[h][ExitY] = 1240.000000;
                    Haus[h][ExitZ] = 1082.149902;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)//Interior 3
                {
                    Haus[h][hInterior] = 1;
                    Haus[h][ExitX] = 223.043991;
                    Haus[h][ExitY] = 1289.259888;
                    Haus[h][ExitZ] = 1082.199951;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)//Interior 4
                {
                    Haus[h][hInterior] = 7;
                    Haus[h][ExitX] = 225.630997;
                    Haus[h][ExitY] = 1022.479980;
                    Haus[h][ExitZ] = 1084.069946;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)//Interior 5
                {
                    Haus[h][hInterior] = 15;
                    Haus[h][ExitX] = 295.138977;
                    Haus[h][ExitY] = 1474.469971;
                    Haus[h][ExitZ] = 1080.519897;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)//Interior 6
                {
                    Haus[h][hInterior] = 15;
                    Haus[h][ExitX] = 328.493988;
                    Haus[h][ExitY] = 1480.589966;
                    Haus[h][ExitZ] = 1084.449951;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==6)//Interior 7
                {
                    Haus[h][hInterior] = 15;
                    Haus[h][ExitX] = 385.803986;
                    Haus[h][ExitY] = 1471.769897;
                    Haus[h][ExitZ] = 1080.209961;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==7)//Interior 8
                {
                    Haus[h][hInterior] = 1;
                    Haus[h][ExitX] = 244.411987;
                    Haus[h][ExitY] = 305.032989;
                    Haus[h][ExitZ] = 999.148437;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==8)//Interior 9
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 266.8322;
                    Haus[h][ExitY] = 304.8475;
                    Haus[h][ExitZ] = 999.1484;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==9)//Interior 10
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 2468.0276;
                    Haus[h][ExitY] = -1698.2456;
                    Haus[h][ExitZ] = 1013.5078;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==10)//Interior 11
                {
                    Haus[h][hInterior] = 12;
                    Haus[h][ExitX] = 2324.419921;
                    Haus[h][ExitY] = -1145.568359;
                    Haus[h][ExitZ] = 1050.710083;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==11)//Interior 12
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 2237.5356;
                    Haus[h][ExitY] = -1080.9913;
                    Haus[h][ExitZ] = 1049.0234;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==12)//Interior 13
                {
                    Haus[h][hInterior] = 5;
                    Haus[h][ExitX] = 1261.2876;
                    Haus[h][ExitY] = -785.7022;
                    Haus[h][ExitZ] = 1091.9063;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==13)//Interior 14
                {
                    Haus[h][hInterior] = 10;
                    Haus[h][ExitX] = 421.7847;
                    Haus[h][ExitY] = 2536.4045;
                    Haus[h][ExitZ] = 10.0000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==14)//Interior 15
                {
                    Haus[h][hInterior] = 5;
                    Haus[h][ExitX] = 226.7315;
                    Haus[h][ExitY] = 1114.2902;
                    Haus[h][ExitZ] = 1080.9951;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==15)//Interior 16
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 446.9980;
                    Haus[h][ExitY] = 1397.4573;
                    Haus[h][ExitZ] = 1084.3047;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==16)//Interior 17
                {
                    Haus[h][hInterior] = 10;
                    Haus[h][ExitX] = 23.8505;
                    Haus[h][ExitY] = 1340.4427;
                    Haus[h][ExitZ] = 1084.3750;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==17)//Interior 18
                {
                    Haus[h][hInterior] = 5;
                    Haus[h][ExitX] = 140.3000;
                    Haus[h][ExitY] = 1366.2676;
                    Haus[h][ExitZ] = 1083.8594;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==18)//Interior 19
                {
                    Haus[h][hInterior] = 6;
                    Haus[h][ExitX] = 234.0007;
                    Haus[h][ExitY] = 1064.0911;
                    Haus[h][ExitZ] = 1084.2117;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==19)//Interior 20
                {
                    Haus[h][hInterior] = 8;
                    Haus[h][ExitX] = 2365.5159;
                    Haus[h][ExitY] = -1135.0269;
                    Haus[h][ExitZ] = 1050.8750;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                */
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_LOCKSTATUS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[164];
                    new status[12];
                    if(Haus[h][hLock] == 0){status="Offen";}
                    else if(Haus[h][hLock] == 1){status="Geschlossen";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Lock-Status des Hauses ändern?\nDerzeitiger Lock-Status: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"AUF"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"ZU"COLOR_HEX_WHITE".", status);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "AUF", true) == 0)
                {
                    Haus[h][hLock] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Haus ist nun geöffnet.");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                else if(strcmp(inputtext, "ZU", true) == 0)
                {
                    Haus[h][hLock] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Haus ist nun geschlossen.");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                SendClientMessage(playerid, COLOR_RED, "Fehlerhafte eingabe.");
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_MIETSTATUS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[164];
                    new rentable[12];
                    if(Haus[h][hMieten]==0){rentable="Nein";}
                    else if(Haus[h][hMieten]==1){rentable="Ja";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Miet-Status des Hauses ändern?\nKann gemietet werden: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"JA"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"NEIN"COLOR_HEX_WHITE".", rentable);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "JA", true) == 0)
                {
                    Haus[h][hMieten] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "In diesem Haus kann nun gemietet werden!");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                else if(strcmp(inputtext, "NEIN", true) == 0)
                {
                    Haus[h][hMieten] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "In diesem Haus kann nicht mehr gemietet werden!");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                SendClientMessage(playerid, COLOR_RED, "Fehlerhafte eingabe.");
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_RAUSWERFEN:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                SendClientMessage(playerid, COLOR_RED, "Alle Bewohner und der Besitzer wurden aus dem Haus rausgeworfen.");
                new owner;
                sscanf(Haus[h][hBesitzer],"u",owner);
                format(Haus[h][hBesitzer], MAX_PLAYER_NAME, "Niemand");
                new query[128];
                format(query, sizeof(query), "UPDATE `accounts` SET `HouseMieteKey` = '999' WHERE `HouseMieteKey` = %d", Haus[h][hID] );
                mysql_pquery(query,THREAD_CONFIGHOUSE_RAUSWERFEN,playerid,gSQL,MySQLThreadOwner);
                Haus[h][hKasse] = 0;
                Haus[h][hMieterMax] = 10;
                Haus[h][hMieterAnzahl] = 0;
                Haus[h][hMieten] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pHouseMieteKey] == h)
                        {
                            Spieler[i][pSpawnChange] = 0;
                            Spieler[i][pHouseMieteKey] = 999;
                            SendClientMessage(i, COLOR_LIGHTBLUE, "Du wurdest aus deinem Haus geschmissen.");
                        }
                    }
                }
                for(new i ; i < MAX_HAUS_MOEBEL ; i++) {
                    query[0] = '\0';
                    format(query,sizeof(query),"DELETE FROM `hausmoebel` WHERE `id` = %d", g_HausMoebelObjekt[h][i][HMO_iID]);
                    mysql_oquery( query , THREAD_DELETEHAUSMOEBEL , playerid ,gSQL);
                    Hausmoebel_ResetHausMoebel(h,i);
                }
                UpdateHouseText(h);
                if( IsPlayerConnected(owner)) {
                    CheckPlayerHouse(owner);
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_KAUFPREIS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 30000000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Kaufpreis sollte zwischen $1 und $30.000.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new Str[128];
                new oldprice = Haus[h][hPreis];
                new newprice = entry;
                Haus[h][hPreis] = entry;
                UpdateHouseText(h);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_MIETPREIS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 1000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Mietpreis sollte zwischen $1 und $1.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Mietpreis ändern?\nDer derzeitige Mietpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new Str[128];
                new oldprice = Haus[h][hMietPreis];
                new newprice = entry;
                Haus[h][hMietPreis] = entry;
                UpdateHouseText(h);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_NAVI:
        {
            if(response)
            {
                if(listitem == 0)
                {
                    ShowPlayerDialog(playerid, BEHORDEN, DIALOG_STYLE_LIST, "Ämter u. Behörden", "Los Santos Stadthalle (Arbeitsamt & Meldeamt)\nLos Santos Posthaus\nLos Santos Zulassungsstelle\nLos Santos Standesamt (Hochzeit)\nLos Santos TÜV-Amt für Autos u. Motorräder\nLos Santos TÜV-Amt für Flugobjekte", "Auswählen","Beenden");
                }
                if(listitem == 1)
                {
                    ShowPlayerDialog(playerid, NOTDIENSTNAVI, DIALOG_STYLE_LIST, "Polizei u. Notdienste", "Los Santos Polizestation\nSan Andreas FBI\nLos Santos Krankenhaus\nLos Santos Ordnungsamt", "Auswählen","Beenden");
                }
                if(listitem == 2)
                {
                    ShowPlayerDialog(playerid, NAVIFAHRSCHULE, DIALOG_STYLE_LIST, "Fahrschule", "Los Santos Fahrschule", "Auswählen","Beenden");
                }
                if(listitem == 3)
                {
                    new dialogText[512];
                    for (new i; i < sizeof(g_vehicleDealership); i++)
                        format(dialogText, sizeof(dialogText), "%s\n%s", dialogText, g_vehicleDealership[i][VEHICLE_DEALERSHIP_NAME]);

                    ShowPlayerDialog(playerid, AUTOHAUSER, DIALOG_STYLE_LIST, "Fahrzeugverkauf", dialogText, "Auswählen", "Beenden");
                }
                if(listitem == 4)
                {
                    ShowPlayerDialog(playerid, CARSHARING, DIALOG_STYLE_LIST, "CarSharing-Station", "Station am Pizza Stack in Downtown, Los Santos\nStation am Neulingsspawn in Los Santos\nStation nähe Neulingsspawn in Los Santos\nStation am Hauptammunation in Los Santos\nStation Nähe dem Subway in Los Santos\nStation am Los Santos Strand\nStation in Las Venturas\nFlugzeugverleih in Los Santos\nBootsverleih in Los Santos", "Auswählen","Beenden");
                }
                if(listitem == 5)
                {
                    ShowPlayerDialog(playerid, HOTELNAVI, DIALOG_STYLE_LIST, "Hotel", "Hotel im Zentrum von Los Santos", "Auswählen","Beenden");
                }
                if(listitem == 6)
                {
                    ShowPlayerDialog(playerid, BANKEN, DIALOG_STYLE_LIST, "Banken", "Zentralbank der Stadt Los Santos\nZentralbank der Stadt Las Venturas", "Auswählen","Beenden");
                }
                if(listitem == 7)
                {
                    ShowPlayerDialog(playerid, VERSICHERUNGENAVI, DIALOG_STYLE_LIST, "Versicherungen", "Krankenversicherung\nKFZ-Versicherung\nRechtsschutz-Versicherung", "Auswählen","Beenden");
                }
                if(listitem == 8)
                {
                    ShowPlayerDialog(playerid, DIESHOPS, DIALOG_STYLE_LIST, "24/7 Shops", "24/7 Shop in Los Santos, Nähe dem LSPD\n24/7 Shop in Los Santos, Nähe dem Subway\n24/7 Shop in Los Santos, Nähe der Grove Street\n24/7 Shop im Los Santos Shopping Markt", "Auswählen", "Abbrechen");
                }
                if(listitem == 9)
                {
                    ShowPlayerDialog(playerid, TANKSTELLEN, DIALOG_STYLE_LIST, "Tankstellen", "Tankstelle - Los Santos, Nähe BSN\nTankstelle - Los Santos, Nähe Alhambra\nTankstelle - Dillimore\nTankstelle - Landstraße Los Santos -> San Fierro\nTankstelle - San Fierro, Nähe Hbf-SF\nTankstelle - San Fierro, Nähe SFPD\nTankstelle - Wüstengebiet in Las Venturas\nTankstelle - Las Venturas, Nähe BanditoArena\nTankstelle - Los Santos, Nähe Bauernfarm\nTankstelle - Las Venturas, Nähe LVPD", "Auswählen","Beenden");
                }
                if(listitem == 10)
                {
                    ShowPlayerDialog(playerid, KLEIDERLADEN, DIALOG_STYLE_LIST, "Kleidergeschäfte", "ZIP in Los Santos, Nähe der Bank\nBinco in Los Santos, Nähe der Grove Street\nVictim in Los Santos, Nähe Strand\nClub-Kleidergeschäft in Los Santos\nClub-Kleidergeschäft in Las Venturas", "Auswählen", "Beenden");
                }
                if(listitem == 11)
                {
                    ShowPlayerDialog(playerid, RESTO, DIALOG_STYLE_LIST, "Restaurant", "Subway in Los Santos\nBurger Shot South in Los Santos\nPizzaria in Los Santos\nCluckin' Bell North in Los Santos\nCluckin' Bell South in Los Santos\nPizzaria in Las Venturas, Nähe des LVPD\nCluckin' Bell in Las Venturas, Nähe des LVPD", "Auswählen","Beenden");
                }
                if(listitem == 12)
                {
                    ShowPlayerDialog(playerid, CASINOSORT, DIALOG_STYLE_LIST, "Casinos", "Los Santos - Casino", "Auswählen", "Abbrechen");
                }
                if(listitem == 13)
                {
                    ShowPlayerDialog(playerid, AMMUORTE, DIALOG_STYLE_LIST, "Waffenshops", "Haupt-Ammunation in Los Santos\nAmmunation in Downtown, Los Santos\nAmmunation in Las Venturas", "Auswählen", "Abbrechen");
                }
                if(listitem == 14)
                {
                    ShowPlayerDialog(playerid, VERKAUFH, DIALOG_STYLE_LIST, "Weitere Verkaufshäuser", "Elektromarkt in Los Santos\nAngelshop in Los Santos\nTierhandel in Los Santos", "Auswählen", "Abbrechen");
                }
                if(listitem == 15)
                {
                    ShowPlayerDialog(playerid, TUNINGGARAGE, DIALOG_STYLE_LIST, "Tuning-Garagen", "Motorrad Tuningwerkstatt in Los Santos\nTuningwerkstatt in Los Santos (Normal)\nTuningwerkstatt in San Fierro (Normal)\nTuningwerkstatt in Los Santos (Ältere Fahrzeuge)\nTuningwerkstatt in San Fierro (Spezialfahrzeuge)\nLackierstation für Spezialfahrzeug in Los Santos\nLackierstation für Flugzeuge in Los Santos\nAbbauwerkstatt für Auto- u. Motorradtuning", "Auswählen", "Abbrechen");
                }
                if(listitem == 16)
                {
                    ShowPlayerDialog(playerid, JOBINNAVI, DIALOG_STYLE_LIST, "Job und Firmen Orte", "Pilot\nMüllmann\nStraßenreiniger\nPizzalieferant\nGärtner\nSchiffsfahrer\nBusfahrer\nAnwalt\nGeld Transportfahrer\nEisverkäufer\nBauer\nProduktlieferant\nBauarbeiter\nTaxizentrale\nHotdogverkauf", "Auswählen", "Abbrechen");
                }
                if(listitem == 17)
                {
                    ShowPlayerDialog(playerid, GANGFRAKBASE, DIALOG_STYLE_LIST, "Gang/Mafien Base", "Ballas Base\nAztecas Base\nVagos Base\nYakuza Base\nLa Cosa Nostra Base\nGrove Steet Base\nTriaden Base\nOutlawZ Base", "Auswählen", "Abbrechen");
                }
                if(listitem == 18)
                {
                    ShowPlayerDialog(playerid, ILLEGALEORTE, DIALOG_STYLE_LIST, "Illegale Orte", "Illegale Berufe\nSafebox Drogen/Waffenteile in Los Santos\nSafebox Drogen/Waffenteile in Las Venturas\nGangjail\nWaffendealer Platz\nDrogendealer Platz\nWanted-Hacker Codes\nAutodieb Kran SF\nSchmied (Befreiung von Handschellen)", "Auswählen", "Abbrechen");
                }
                if(listitem == 19)
                {
                    ShowPlayerDialog(playerid, WORTE, DIALOG_STYLE_LIST, "Weitere Orte", "Los Santos Flughafen\nSan Fierro Flughafen\nLas Venturas Flughafen\nClubVilla in Los Santos\nClubVilla in Las Venturas\nNeulingsspawn\nLas Venturas Öl-Raffinerie\nLas Venturas Waren-Vergabe\nSan Fierro Hafen\nAngelplatz\nWerbeagentur in Los Santos\nWerbeagentur in Las Venturas\nPaintball Arena\nSportstudio\nShisha-Bar\nSan News Agency", "Auswählen", "Abbrechen");
                }
            }
        }
        case BEHORDEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, CITYHALL_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI4);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Los Santos Stadthalle wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 914.3174,-1004.0942,37.9902, 2.0, CP_NAVI1);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Posthaus in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, REGISTRATIONOFFICE_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI77);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die San Andreas Zulassungsstelle wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, WEDDING_COORDS, 2.0, CP_NAVI38);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das San Andreas Standesamt wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, TUEV_INFO_POINT, 2.0, CP_NAVI3);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos TÜV-Amt für Autos und Motorräder wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, TUEV_AIRCRAFT_POINT, 2.0, CP_NAVI3);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos TÜV-Amt für Helikopter und Flugzeuge wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case NOTDIENSTNAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, LSPD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI1);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Police Department wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, FBI_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI2);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das San Andreas FBI wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, SAMD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI2);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Medical Department wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, POO_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI3);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Ordnungsamt wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }

        case NAVIFAHRSCHULE:
        {
            if(response)
            {

                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1234.2719,-1823.8157,13.5911, 2.0, CP_NAVI5);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Los Santos Fahrschule wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case VERSICHERUNGENAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, SAMD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI8);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Versicherungspolice für Krankenversicherung wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, REGISTRATIONOFFICE_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI9);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Versicherungspolice für KFZ-Versicherung wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, CITYHALL_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI9);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Versicherungspolice für Rechtsschutz wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case BANKEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, BANKINTERIORLS_ENTER_COORDS, 2.0, CP_NAVI8);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Zentralbank in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, BANKINTERIORLV_ENTER_COORDS, 2.0, CP_NAVI9);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Zentralbank in Las Venturas wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }

        case AUTOHAUSER:
        {
            if (!response) return 1;
            if (listitem < 0 || listitem > sizeof(g_vehicleDealership)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] Keine gültige Auswahl.");
            SetPlayerCheckpointEx(playerid, g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_COORD_X], g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_COORD_Y], 
                g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_COORD_Z], 2.0, CP_NAVI9);
            return SCMFormatted(playerid, COLOR_GREEN, "[GPS] {FFFF00}%s {FFFFFF}wurde Rot markiert.", g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_NAME]);
        }
        case CARSHARING:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_IDLEWOOD, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Pizzastack in Downtown, Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_NOOBSPAWN, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Neulingsspawn in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_NOOBSPAWN2, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih in Los Santos, Nähe dem Neulingsspawn, wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_AMMU, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Hauptammunation in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_BSN, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih in Los Santos, Nähe dem Subway, wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_LSBEACH, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Los Santos Strand wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_LV, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 1470.7415,-2410.9363,13.5547, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Flugzeugverleih in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, BOATRENTAL_COORDS, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Bootsverleih in Los Santos wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case RESTO:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, SUBWAY_DRIVEIN_COORDS, 2.0, CP_NAVI12);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Subway in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 817.6655,-1618.9307,13.7034,2.0, CP_NAVI13);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Burger Shot South in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2098.0144,-1806.8236,13.5541,2.0, CP_NAVI14);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Pizzaria in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 925.6447,-1352.1470,13.3761,2.0, CP_NAVI15);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Cluckin' Bell North in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2422.1592,-1508.4604,23.9922,2.0, CP_NAVI16);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Cluckin' Bell South in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 2082.9170,2224.1670,11.0234,2.0, CP_NAVI75);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Pizzaria in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 2102.3757,2229.0376,11.0234,2.0, CP_NAVI75);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Cluckin' Bell in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case TANKSTELLEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1005.5800,-941.1790,42.1320,2.0, CP_NAVI17);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe dem BSN, wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 1944.0356,-1771.8125,13.3906,2.0, CP_NAVI18);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe dem Club Alhambra, wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 653.1495,-570.1783,16.3359,2.0, CP_NAVI19);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe des FBI, wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, -99.1346,-1166.1656,2.5805,2.0, CP_NAVI20);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle - Landstraße Los Santos, Richtung San Fierro, wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, -2023.9924,156.4616,28.8359,2.0, CP_NAVI21);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in San Fierro, Nähe dem Hauptbahnhof San Fierro, wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, -1676.5607,412.4557,7.1797,2.0, CP_NAVI22);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in San Fierro, Nähe des SFPD, wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 612.2504,1694.3873,6.9922,2.0, CP_NAVI23);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle im Wüstengebiet Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 1596.0598,2198.7400,10.8203,2.0, CP_NAVI24);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, 1380.9908,457.3878,19.9316,2.0, CP_NAVI74);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe der Bauernfarm, wurde auf der Karte Rot markiert.");
                }
                if(listitem==9)
                {
                    SetPlayerCheckpointEx(playerid, 2201.8096,2475.6104,10.8203,2.0, CP_NAVI82);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case KLEIDERLADEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1457.8679,-1140.2852,24.0735,2.0, CP_NAVI25);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das ZIP Kleidergeschäft in Los Santos, Nähe der Bank, wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 2244.6521,-1664.0035,15.4766,2.0, CP_NAVI26);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Binco Kleidergeschäft in Los Santos, Nähe der Grove Street, wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 461.0692,-1501.0800,31.0574,2.0, CP_NAVI26);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Victim Kleidergeschäft in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 1022.5134,-1123.2565,23.8703,2.0, CP_NAVI73);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Club-Skinshop in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2127.5486,2378.9626,10.8203,2.0, CP_NAVI73);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Club-Skinshop in Las Venturas wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case DIESHOPS:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1350.0214,-1754.2931,13.3554,2.0, CP_NAVI27);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop in Los Santos, Nähe der Stadthalle, wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 1316.0682,-906.5001,38.3864,2.0, CP_NAVI28);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop in Los Santos, Nähe des Subway, wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2423.7568,-1742.3107,13.5469,2.0, CP_NAVI28);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop in Los Santos, Nähe der Grove Street, wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 1154.7301,-1457.9226,15.7969,2.0, CP_NAVI28);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop im Shopping Market in Los Santos wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case CASINOSORT:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1498.3309,-1585.8683,13.5469, 2.0, CP_NAVI44);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Casino in Los Santos wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case VERKAUFH:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, ELECTRONICSSHOP_COORDS, 2.0, CP_NAVI39);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Elektromarkt in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, FISHINGSHOP_COORDS, 2.0, CP_NAVI39);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Angelshop in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, PETSHOP_COORDS, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Tierhandel in Los Santos wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case GANGFRAKBASE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 2000.7357,-1136.0017,25.3077,2.0, CP_NAVI44);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Ballas Base in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 1816.0269,-2112.6909,13.3828,2.0, CP_NAVI45);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Aztecas Base in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2810.6587,-1581.4873,10.9309,2.0, CP_NAVI46);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Vagos Base in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, YAKUZA_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI47);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Yakuza Base in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, LCN_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI48);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die La Cosa Nostra Base in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 2489.8831,-1668.2643,13.3438,2.0, CP_NAVI48);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Grove Street Base in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 900.4517,-1664.7787,13.5469,2.0, CP_NAVI49);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Triaden Base in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, -49.7421,-301.2473,5.4297,2.0, CP_NAVI49);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Outlawz Base in Los Santos wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case JOBINNAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1930.3031,-2344.5083,13.5469,2.0, CP_NAVI50);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 2112.8987,-2098.1521,13.5469,2.0, CP_NAVI51);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Mülldepo wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2059.0566,-1910.7906,13.5469,2.0, CP_NAVI52);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Stadtreinigung wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 2118.1602,-1775.5365,13.3916,2.0, CP_NAVI53);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Pizzaria wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 1565.7582,23.2893,24.1641,2.0, CP_NAVI54);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Gärtnerei wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 2516.5254,-2253.6462,13.3321,2.0, CP_NAVI55);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Schiffshafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 1257.3948,-1379.4574,13.2933,2.0, CP_NAVI56);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Buszentrale wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, LSPD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI57);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Police Department wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, 1564.5618,-1020.5309,23.9063, 2.0, CP_NAVI58);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Geldtransport Firma wurde auf der Karte Rot markiert.");
                }
                if(listitem==9)
                {
                    SetPlayerCheckpointEx(playerid, 1003.8848,-1350.9558,13.3388, 2.0, CP_NAVI59);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Eisverkauf wurde auf der Karte Rot markiert.");
                }
                if(listitem==10)
                {
                    SetPlayerCheckpointEx(playerid, -12.3201,28.1475,3.1172, 2.0, CP_NAVI60);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Bauern Farm wurde auf der Karte Rot markiert.");
                }
                if(listitem==11)
                {
                    SetPlayerCheckpointEx(playerid, 62.1230,-247.9869,1.5781, 2.0, CP_NAVI61);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fernfahrer Hof wurde auf der Karte Rot markiert.");
                }
                if(listitem==12)
                {
                    SetPlayerCheckpointEx(playerid, 846.9400,885.9145,13.3516, 2.0, CP_NAVI62);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Baustelle wurde auf der Karte Rot markiert.");
                }
                if(listitem==13)
                {
                    SetPlayerCheckpointEx(playerid, TAXISTATIONS_JOBSKIN_POINT_BUSSTATION, 2.0, CP_NAVI80);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Taxizentrale wurde auf der Karte Rot markiert.");
                }
                if(listitem==14)
                {
                    SetPlayerCheckpointEx(playerid, 2390.9146,-1920.6163,13.3828, 2.0, CP_NAVI80);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Hotdogverkauf wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case ILLEGALEORTE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, JEFF_COORDS, 2.0, CP_NAVI64);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der illegale Berufsmarkt wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, SAFEBOX_COORDS_LS, 2.0, CP_NAVI64);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Safebox in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, SAFEBOX_COORDS_LV, 2.0, CP_NAVI64);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Safebox in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 2160.315186, -97.976898, 3.429407, 2.0, CP_NAVI65);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Gangjail wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2298.2554,-2350.6294,13.5469, 2.0, CP_NAVI66);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Waffendealer Platz wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 318.9959,-60.6508,1.5781, 2.0, CP_NAVI67);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Drogendealer Platz wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, WANTEDHACKERBASE_POINT, 2.0, CP_NAVI78);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der WantedCode - Hacker Computer wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, -1548.0554,125.1203,3.5547, 2.0, CP_NAVI79);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Autodieb Kran wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, -382.0342,-1426.4521,26.0822, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Schmied, der von Handschellen befreit, wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case TUNINGGARAGE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1702.9427,-1470.3704,13.5469, 2.0, CP_NAVI68);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Motorrad Tuninggarage wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 1041.0613,-1028.3164,32.1016, 2.0, CP_NAVI69);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die normale Tuninggarage in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, -1935.8890,236.2874,34.3125, 2.0, CP_NAVI70);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die normale Tuninggarage in San Fierro wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 2645.2095,-2035.3197,13.5540, 2.0, CP_NAVI71);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tuninggarage in Los Santos für Oldtimer wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, -2713.5679,217.3422,4.2651, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tuninggarage in Los Santos für Spezialefahrzeuge wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 1763.4915,2080.2959,10.8203, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Lackierstation für Spezialfahrzeuge in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, AIRPORTLS_PAINTJOB_POINT, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Lackierstation für Flugzeuge in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 1782.8275,-1702.7240,13.5096, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Abbauwerkstatt für Auto- und Motorradtuning in Los Santos wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case HOTELNAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1329.4666,-1559.4634,13.5469, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Hotel in Los Santos wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case AMMUORTE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1365.9547,-1279.0731,13.5469, 2.0, CP_NAVI33);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Haupt-Ammunation in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 2400.5369,-1981.5837,13.5469, 2.0, CP_NAVI81);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Ammunation in Downtown, Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2159.1836,943.2106,10.8203, 2.0, CP_NAVI83);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Ammunation in Las Venturas wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case WORTE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1959.5519,-2180.7378,13.5469, 2.0, CP_NAVI29);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, -1547.0936,-431.9405,6.0073, 2.0, CP_NAVI30);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der San Fierro Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 1711.9429,1604.6927,10.0079, 2.0, CP_NAVI31);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Las Venturas Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, CLUBINTERIORLS_ENTER_COORDS, 2.0, CP_NAVI32);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die ClubVilla in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2127.5486,2378.9626,10.8203, 2.0, CP_NAVI32);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die ClubVilla in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, NOOBSPAWN_STARTBONUS_POINT, 2.0, CP_NAVI34);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Neulingsspawn in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 268.9609,1384.2981,10.1610, 2.0, CP_NAVI35);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Las Venturas Öl-Raffinerie wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 577.4390,1221.7273,11.2689, 2.0, CP_NAVI36);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Las Venturas Waren Vergabe wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, -1707.6189,10.5305,3.6368, 2.0, CP_NAVI37);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der San Fierro Hafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==9)
                {
                    SetPlayerCheckpointEx(playerid, FISHINGSHOP_COORDS, 2.0, CP_NAVI40);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Angelplatz wurde auf der Karte Rot markiert.");
                }
                if(listitem==10)
                {
                    SetPlayerCheckpointEx(playerid, 1413.4673,-1698.6144,13.5395, 2.0, CP_NAVI41);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Werbeagentur in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==11)
                {
                    SetPlayerCheckpointEx(playerid, 2008.1722,1169.3364,10.8203, 2.0, CP_NAVI41);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Werbeagentur in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==12)
                {
                    SetPlayerCheckpointEx(playerid, 1738.5869,-1586.3961,13.5555, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Paintball Anlage wurde auf der Karte Rot markiert.");
                }
                if(listitem==13)
                {
                    SetPlayerCheckpointEx(playerid, 660.3523,-1869.5139,5.5537, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Sportstudio in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==14)
                {
                    SetPlayerCheckpointEx(playerid, SHISHABAR_ENTER_COORDS, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Shisha-Bar in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==15)
                {
                    SetPlayerCheckpointEx(playerid, SANABASE_DONATION_POINT, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die San News Agency wurde auf der Karte Rot markiert.");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_MIETEN:
        {
            if (response)
            {
                if (listitem < 0 || listitem > 3)
                    return SendClientMessage(playerid, COLOR_RED, "Kein gültiges Fahrzeug ausgewählt!");

                new noMoneyMessage[64];

                new rentBike[2][4] = {{250, 300, 250, 500}, {509, 510, 481, 462}};
                if (GetPlayerMoney(playerid) < rentBike[0][listitem]) {
                    format(noMoneyMessage, sizeof noMoneyMessage, "Du besitzt nicht genug Geld. ($%s)", AddDelimiters(rentBike[0][listitem]));
                    return SendClientMessage(playerid, COLOR_WHITE, noMoneyMessage);
                }

                new Float:pX, Float:pY, Float:pZ;
                GetPlayerPos(playerid, pX, pY, pZ);
                pCar[playerid] = CreateVehicle(rentBike[1][listitem], pX, pY, pZ, 353.9787, 1, 1, -1);
                aiVehicles[pCar[playerid]] = VEH_CAR;
                GivePlayerCash(playerid, -rentBike[0][listitem]);
                PutPlayerInVehicle(playerid, pCar[playerid], 0);
                SendClientMessage(playerid, COLOR_WHITE, "Zum Abschließen tippe /Lock.");
                SendClientMessage(playerid, COLOR_WHITE, "Zum Abgeben des Fahrzeuges tippe /Entmieten.");
                LockCar(pCar[playerid]);
                GameTextForPlayer(playerid, "~w~Miet-Fahrzeug~n~~r~Abgeschlossen", 3000, 4);
                gGas[pCar[playerid]] = GetMaxTank(pCar[playerid]);
            }
            if(!response){return 1;}
        }

        case DIALOG_FARMER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 1;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Farmer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_BUSFAHRER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 2;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Busfahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        /*case DIALOG_ZUGFAHRER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 23;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Pilot. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nKFZ-Mechatroniker\nAnwalt\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nTaxifahrer\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }*/

        case DIALOG_TRUCKER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 3;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Trucker. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_PILOT:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 4;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Pilot. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_KFZ:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 5;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun KFZ-Mechatroniker. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_ANWALT:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 6;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Anwalt. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_STRASSE:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 7;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Straßenreiniger. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_MULLMANN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 8;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Müllmann. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_GARTEN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 9;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Gärtner. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_BAUARBEITER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 10;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Bauarbeiter. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_SCHIFFFAHRER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 11;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Schiffs-Fahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_GELDT:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 12;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Geld Transportfahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_EISMANN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 13;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Eismann. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_PIZZAMAN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 15;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Pizzalieferant. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_DEDEKTIV:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 14;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Detektiv. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_JOBTAXI:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 16;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Taxifahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_JOBHOTDOG:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 24;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Hotdog Verkäufer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_DDEALER:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 17;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Drogendealer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_WDEALER:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 18;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Waffendealer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_TASCHENDIEB:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 19;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Taschendieb. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_HURE:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 20;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun eine Hure. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
            case DIALOG_JOBWANTED:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 21;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun ein Wanted-Hacker. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_JOBAUTODIEB:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 22;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun ein Autodieb. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_LISTE:
        {
            new string[128];
            new str2[2048];
            if(response)
            {
                if(listitem==0)//Busfahrerliste
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 2)
                            {
                                format(string, sizeof(string), "Busfahrer %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Busfahrer online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_BUSLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Busfahrer-Liste",str2, "Schließen", "");
                }
                if(listitem==1)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 3)
                            {
                                format(string, sizeof(string), "Trucker %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Trucker online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_TRUCKLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Truck-Liste",str2, "Schließen", "");
                }
                if(listitem==2)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 4)
                            {
                                format(string, sizeof(string), "Pilot %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Pilot online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_PILOTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Pilot-Liste",str2, "Schließen", "");
                }
                if(listitem==3)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 5)
                            {
                                format(string, sizeof(string), "KFZ-Mech. %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es sind keine Mechatroniker online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_KFZLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"KFZ-Mech.-Liste",str2, "Schließen", "");
                }
                if(listitem==4)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 6)
                            {
                                format(string, sizeof(string), "Anwalt %s (ID: %i) (Tel: %d) (Skilllvl: %d)\n", GetName(i), i, Spieler[i][pHandyNr],GetPlayerLawyerLevel(i));
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Anwalt online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_ANWALTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Anwalt-Liste",str2, "Schließen", "");
                }
                if(listitem==5)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 16)
                            {
                                format(string, sizeof(string), "Taxifahrer %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Taxifahrer online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_TAXITLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Taxi-Liste",str2, "Schließen", "");
                }
                if(listitem==6)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pAdmin] > 0 && Spieler[i][pAdmin] < 7)
                            {
                                format(string, sizeof(string), "%s %s (ID: %i) (Tel: %d)\n", GetPlayerAdminRang(i), GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Teammitglied online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_ADMINLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Admin-Liste", str2, "Schließen", "");
                }
                if(listitem==7)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 4)
                            {
                                    format(string, sizeof(string), "News Reporter %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                    strcat(str2, string);
                                    IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein News Reporter online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_REPLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"News Reporter Liste",str2, "Schließen", "");
                }
                if(listitem==8)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 3)
                            {
                                    format(string, sizeof(string), "Sanitäter %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                    strcat(str2, string);
                                    IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Sanitäter online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_SANILISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Sanitäter Liste",str2, "Schließen", "");
                }
                if(listitem==9)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 5)
                            {
                                    format(string, sizeof(string), "Ordnungsbeamter %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                    strcat(str2, string);
                                    IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Ordnungsbeamter online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_OAMTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Ordnungsbeamten Liste",str2, "Schließen", "");
                }
                if(listitem == 10)
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 8)
                            {
                                format(string, sizeof(string), "Fahrlehrer %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Fahrlehrer online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_FAHRLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Fahrlehrer Liste", str2, "Schließen", "");
                }
                if(listitem==11)
                {
                    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16)
                    {
                        new bool:IsOnline;
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                            {
                                if(Spieler[i][pWanteds] >= 1)
                                {
                                        format(string, sizeof(string), "Verbrecher %s (ID: %i) (Wantedlevel: %i)\n", GetName(i), i, Spieler[i][pWanteds]);
                                        strcat(str2, string);
                                        IsOnline = true;
                                }
                            }
                        }
                        if(!IsOnline)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Es sind keine Verbrecher online.");
                            return 1;
                        }
                        ShowPlayerDialog(playerid, DIALOG_WTDLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Verbrecher Liste",str2, "Schließen", "");
                    }
                    else if(Spieler[playerid][pFraktion] == 3)
                    {
                        new bool:IsOnline;
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                            {
                                if(Spieler[i][pTotTime] >= 1)
                                {
                                    format(string, sizeof(string), "Toter %s (ID: %i) (Zeit: %i)\n", GetName(i), i, Spieler[i][pTotTime]);
                                    strcat(str2, string);
                                    IsOnline = true;
                                }
                            }
                        }
                        if(!IsOnline)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Es ist niemand tot.");
                            return 1;
                        }
                        ShowPlayerDialog(playerid, DIALOG_TOTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Gestorbenenliste",str2, "Schließen", "");
                    }
                }

            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_REG_STEP_1:
        {
            if(response)
            {
                //Regeln Akzeptiert
                ShowPlayerDialog(playerid, DIALOG_REG_STEP_2,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Registrierung:", COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"Live your Dream - Roleplay\n"COLOR_HEX_WHITE"Registriere dich bitte nun!\n\n"COLOR_HEX_GREEN"Gib bitte nun ein sicheres Passwort ein!\nHINWEIS: Dein Passwort muss mind. 8 stellig sein und 2 Zahlen enthalten,\naußerdem sollte es keine persönlichen Daten beinhaltet!", "OK", "Abbrechen");
                // SetPlayerCameraPos(playerid, 369.8176, -1869.0303, 22.6842);//Brücke Verona Beach
                // SetPlayerCameraLookAt(playerid, 369.7982, -1868.0253, 22.8143);
                // SetPlayerPos(playerid, 381.1510, -1881.4520, 3.7626);
                // SetPlayerView(playerid);
            }
            if(!response)
            {
                //Regeln nicht akzeptiert
                SendClientMessage(playerid, COLOR_RED, "Du hast die Regeln nicht akzeptiert, aus diesem Grund wurdest du gekickt! Versuche es später erneut.");
                Kick(playerid);
            }
        }
        case DIALOG_REG_STEP_2:
        {
            if(response)
            {
                if( IsSecurePassword(inputtext) )
                {
                    new
                        escaped_password[30];
                    mysql_real_escape_string( inputtext, escaped_password );
                    if( !strcmp( inputtext , escaped_password ) ) {
                        CreateAccount(playerid, inputtext);
                        format(Spieler[playerid][pStaat],30,"Zigeuner");
                        Spieler[playerid][pBankKonto] = 0;
                        Spieler[playerid][pBankKontoPin] = 0;
                        SaveAccount(playerid);
                        pMakeTutorial[playerid] = 1;
                        Spieler[playerid][pLevel] = 1;
                        Spieler[playerid][pHandy] = 0; // 0815 Handy
                        // ShowPlayerDialog(playerid, DIALOG_REG_STEP_5, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                        ShowPlayerDialog(playerid, DIALOG_REG_STEP_3, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Vorname", COLOR_HEX_WHITE"Bitte gib nun deinen Vornamen ein.\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Dein Vorname muss mindestens 3 Buchstaben haben, keine Sonderzeichen oder Ziffern", "Absenden", "Abbrechen");
                        gPlayerLogged[playerid] = 1;
                    }
                    else {
                        // Sonderzeichen wurden escaped.
                        ShowPlayerDialog(playerid,DIALOG_REG_STEP_2,DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"Registrierung:",COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"Live your Dream - Roleplay\n"COLOR_HEX_WHITE"Registriere dich bitte nun!\n\n"COLOR_HEX_RED"Gib bitte nun ein sicheres Passwort ein!\nHINWEIS: Dein Passwort muss mind. 8 stellig sein und aus 2 Zahlen bestehen,\naußerdem sollte es keine persönlichen Daten beinhaltet!\n\nDein Passwort enthält ungültige Zeichen!", "OK", "Abbrechen");
                    }

                }
                else
                {
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_2 ,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Registrierung:",  COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"Live your Dream - Roleplay\n"COLOR_HEX_WHITE"Bitte wiederhole nochmal dein Passwort.\n\n"COLOR_HEX_GREEN"Gib bitte nun ein sicheres Passwort ein!", "OK", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Dein Passwort sollte mindestens 8 Zeichen besitzen.\nDavon müssen zwei eine Zahl sein ( 0-9 ).");
                }
            }
            else
            {
                //Registrierung abgebrochen
                SendClientMessage(playerid, COLOR_RED, "Schade, dass du die Registration beendet hast! Aus diesem Grund wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
            }
        }
        case DIALOG_REG_STEP_4: {
            if(response) {
                new email[64];
                mysql_real_escape_string(inputtext,email);
                if( IsValidEmail(email)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `email` = '%s' WHERE `Name` = '%s'",email,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Deine E-Mail Adresse wurde gespeichert! (%s)",email);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_5, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültiger E-Mail Adresse!");
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_4, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: E-Mail", COLOR_HEX_WHITE"Bitte gib nun deine E-Mail Adresse ein.\nDeine E-Mail Adresse wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Es muss sich um eine gültige E-Mail Adresse handeln", "Absenden", "Abbrechen");
                }
            }
            else
            {
                //Registrierung abgebrochen
                SendClientMessage(playerid, COLOR_RED, "Schade, dass du die Registration beendet hast! Aus diesem Grund wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
            }
            return 1;
        }
        case DIALOG_REG_STEP_3:
        {
            if(response) {
                new vorname[64];
                mysql_real_escape_string(inputtext,vorname);
                if( IsValidVorname(vorname)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `vorname` = '%s' WHERE `Name` = '%s'",vorname,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Dein Vorname wurde gespeichert! (%s)",vorname);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_4, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: E-Mail", COLOR_HEX_WHITE"Bitte gib nun deine E-Mail Adresse ein.\nDeine E-Mail Adresse wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Es muss sich um eine gültige E-Mail Adresse handeln", "Absenden", "Abbrechen");
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültiger Vorname!");
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_3, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Vorname", COLOR_HEX_WHITE"Bitte gib nun deinen Vornamen ein.\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Dein Vorname muss mindestens 3 Buchstaben haben, keine Sonderzeichen oder Ziffern", "Absenden", "Abbrechen");
                }
            }
            else
            {
                //Registrierung abgebrochen
                SendClientMessage(playerid, COLOR_RED, "Schade, dass du die Registration beendet hast! Aus diesem Grund wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
            }
            return 1;
        }
        case DIALOG_LOGIN:
        {
            if (response)
            {
                if(strlen(inputtext) == 0 )
                {
                    // Spieler[playerid][pTut] = 1;
                    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"Live your Dream - Roleplay\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nSollte es dein Account sein, dann Logge dich bitte nun ein.\n \n"COLOR_HEX_GREEN"Bitte halte dein Passwort immer für dich!\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", "OK", "Abbrechen");

                    Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerLoginTimeout",30011,false,"d",playerid);
                    Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",5003,false,"dd",playerid,1); // Muss,sonst klappt Spectate nicht
                    return 1;
                }

                LoadPlayer(playerid, inputtext);
                //ShowPlayerDialog(playerid, DIALOG_LOGMSG, DIALOG_STYLE_MSGBOX, "Live your Dream - Roleplay - Willkommen", "Schön das du wieder zu uns gefunden hast!\nProjektdaten:\nServer IP: Server.LyD-Roleplay.de\nTeamspeak IP: Teamspeak.LyD-Roleplay.de\nForum Adresse: www.LyD-Roleplay.de\nFalls du noch kein Forum Account besitzt, bitten wir dich eins zu erstellen!\nHalte dich an die Server Verordnung!", "Akzeptieren", "Ablehnen");
                //TogglePlayerSpectating(playerid,false);
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Da du dich nicht einloggen wolltest, wurdest du gekickt. Versuche es später erneut.");
                Kick(playerid);
            }
        }
        case DIALOG_VORNAME: {
            if(response) {
                new vorname[64];
                mysql_real_escape_string(inputtext,vorname);
                if( IsValidVorname(vorname)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `vorname` = '%s' WHERE `Name` = '%s'",vorname,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Dein Vorname wurde gespeichert! (%s)",vorname);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    IsValidEmailDB(playerid);
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültiger Vorname!");
                    ShowPlayerDialog(playerid,DIALOG_VORNAME,DIALOG_STYLE_INPUT,"Vorname",COLOR_HEX_WHITE "Gib deinen Vornamen an.\n\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich\nder Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
                }
            }
            else {
                SendClientMessage(playerid, COLOR_RED, "Du musst deinen Vornamen angeben.");
                ShowPlayerDialog(playerid,DIALOG_VORNAME,DIALOG_STYLE_INPUT,"Vorname",COLOR_HEX_WHITE "Gib deinen Vornamen an.\n\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich\nder Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
            }
        }
        case DIALOG_EMAIL: {
            if(response) {
                new email[64];
                mysql_real_escape_string(inputtext,email);
                if( IsValidEmail(email)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `email` = '%s' WHERE `Name` = '%s'",email,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Deine E-Mail Adresse wurde gespeichert! (%s)",email);
                    SendClientMessage(playerid,COLOR_YELLOW,String);

                    TogglePlayerSpectating(playerid,false);
                    SpawnPlayerEx(playerid);
                    SetCameraBehindPlayer(playerid);
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültige E-Mail Adresse!");
                    ShowPlayerDialog(playerid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"E-Mail",COLOR_HEX_WHITE "Gib deine E-Mail Adresse an.\n\nDeine E-Mail Adresse wird nicht öffentlich angezeigt,\nsondern dient lediglich der Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
                }
            }
            else {
                SendClientMessage(playerid, COLOR_RED, "Du musst deinen Vornamen angeben.");
                ShowPlayerDialog(playerid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"E-Mail",COLOR_HEX_WHITE "Gib deine E-Mail Adresse an.\n\nDeine E-Mail Adresse wird nicht öffentlich angezeigt,\nsondern dient lediglich der Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
            }
        }
        case DIALOG_REG_STEP_6,DIALOG_GEBURTSTAG:
        {
            if(response) {
                new
                    String[128],
                    geburtstag[20],
                    tag,
                    monat,
                    jahr;
                if(sscanf(inputtext,"p<.>ddd",tag,monat,jahr)) {
                    return ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_INPUT,"Geburtstag",COLOR_HEX_WHITE "Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
                }
                if( !(1 <= tag <= 31 ) || ! (1 <= monat <= 12 ) || !( 1960 <= jahr <= 2012 ) ) {
                    return ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_INPUT,"Geburtstag",COLOR_HEX_WHITE "Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
                }
                format(geburtstag,sizeof(geburtstag),"%02d.%02d.%d",tag,monat,jahr);
                format(String,sizeof(String),"Du hast folgendes Geburtsdatum angegeben: %s",geburtstag);
                SendClientMessage(playerid,COLOR_WHITE,String);
                format(Spieler[playerid][pGeburtstag],20,geburtstag);

                if( dialogid == DIALOG_GEBURTSTAG ) {
                    IsValidVornameDB(playerid);
                }
                else {
                    ShowPlayerDialog(playerid,DIALOG_REG_STEP_7,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Geworben von:", COLOR_HEX_WHITE"Falls du von einem Spieler angeworben wurdest,\nkannst du diesen unten Eintragen.\n\nSolltest du nicht angeworben worden sein,kannst du die Eingabe Überspringen","Bestätigen","Überspringen");
                }

                /*
                if(dialogid == DIALOG_REG_STEP_6 ) {
                }
                else {
                    //
                    SpawnPlayerEx(playerid);
                    SetCameraBehindPlayer(playerid);
                }*/

                format(String,sizeof(String),"UPDATE `accounts` SET `Geburtstag` = '%s' WHERE `Name` = '%s'",geburtstag,GetName(playerid)),
                mysql_pquery(String,THREAD_GEBURTSTAG,playerid,gSQL,MySQLThreadOwner);

            }
            else {
                return ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_INPUT,"Geburtstag","Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
            }
        }
        case DIALOG_REG_STEP_7:
        {
            if(response) {
                // Name
                new
                    String[256];
                mysql_real_escape_string( inputtext, String , gSQL ,sizeof(String) );
                PlayerSQLExtra(playerid,String);
                format(String,sizeof(String),"SELECT `id` FROM `accounts` WHERE `Name` = '%s'",String);
                mysql_pquery(String,THREAD_ANGEWORBEN,playerid,gSQL,MySQLThreadOwner);
            }
            else {
                ShowPlayerDialog(playerid,DIALOG_SECURECODE_REGISTER,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            }
        }
        case DIALOG_REG_STEP_5:
        {
            if(response)
            {
                if(strlen(inputtext) < 4)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_1, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "MANN", true) == 0)
                {
                    Spieler[playerid][pSex] = 1;
                    new string[256];
                    SetPlayerSkinEx(playerid, 101);
                    format(string, sizeof(string), COLOR_HEX_WHITE"Okay, du bist also "COLOR_HEX_ORANGE"Männlich.\n \n"COLOR_HEX_WHITE"Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992");
                    // ShowPlayerDialog(playerid, DIALOG_TUT_2, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Tutorial: Fragen",string, "Weiter", "Abbrechen");
                    ShowPlayerDialog(playerid,DIALOG_REG_STEP_6,DIALOG_STYLE_INPUT,"Geburtstag", string ,"Weiter","");
                    SetPlayerCameraPos(playerid, 447.5718, -1750.7904, 17.8588); //PnS Verona Beach
                    SetPlayerCameraLookAt(playerid, 448.5773, -1750.8137, 17.8939);
                    SetPlayerPos(playerid, 483.1288, -1762.5616, 7.1238);
                    return 1;
                }
                else if(strcmp(inputtext, "FRAU", true) == 0)
                {
                    Spieler[playerid][pSex] = 2;
                    new string[256];
                    SetPlayerSkinEx(playerid, 56);
                    format(string, sizeof(string), COLOR_HEX_WHITE"Okay, du bist also "COLOR_HEX_ORANGE"Weiblich.\n \n"COLOR_HEX_WHITE"Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992");
                    //ShowPlayerDialog(playerid, DIALOG_TUT_2, DIALOG_STYLE_MSGBOX,  COLOR_HEX_LIGHTBLUE"Tutorial: Fragen",string, "Weiter", "Abbrechen");
                    ShowPlayerDialog(playerid,DIALOG_REG_STEP_6,DIALOG_STYLE_INPUT,"Geburtstag", string ,"Weiter","");
                    SetPlayerCameraPos(playerid, 447.5718, -1750.7904, 17.8588); //PnS Verona Beach
                    SetPlayerCameraLookAt(playerid, 448.5773, -1750.8137, 17.8939);
                    SetPlayerPos(playerid, 483.1288, -1762.5616, 7.1238);
                    return 1;
                }
                ShowPlayerDialog(playerid, DIALOG_REG_STEP_5, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_2:
        {
            if(response)
            {
                new
                    String[128];
                ShowPlayerDialog(playerid, DIALOG_TUT_3, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"INFORMATION", COLOR_HEX_WHITE"Jetzt beginnt eine kleine Einführung, bitte lese die Hilfetexte gründlich durch,\num dich auf dem Server zurecht zu finden! ", "Weiter", "Abbrechen");
                format(String,sizeof(String),"Wir begrüßen ganz herzlich unseren neuen Spieler %s!",GetName(playerid));
                SendClientMessageToAll(0xFF00B9FF,String);
                Spieler[playerid][pTut] = 1;
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_3:
        {
            if(response)
            {
                if(listitem!=2)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_4, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Hilfetext 1/4", COLOR_HEX_WHITE"Mit /Help werden Dir alle nötigen Serverbefehle aufgelistet, mit /Navi findest du alle wichtigen Orte.\nBei weiteren Fragen oder Problem bitten wir dich unsere Support-Ticket Funktion in Anspruch zu nehmen.\nMit dem Befehl /Sup erstellt du ein Support-Ticket was an einem Supporter/Admin gesendet wird. ", "Weiter", "Ausloggen");
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_4:
        {
            if(response)
            {
                if(listitem!=3)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_5, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Hilfetext 2/4", COLOR_HEX_WHITE"Du darfst maximal 5 Privatfahrzeuge bei uns besitzen.\nEs gibt eine große Auswahl an Geschäften zum Verkauf, z.B Tankstellen,Restaurants,Kleidergeschäfte,Shops und vieles mehr!\nAußerdem gibt es eine große Auswahl an Häusern und Hotels die du auch kaufen und mieten kannst.", "Weiter", "Ausloggen");
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_5:
        {
            if(response)
            {
                if(listitem!=2)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_6, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Hilfetext 3/4", COLOR_HEX_WHITE"Wir weisen dich nochmal draufhin, dass dies ein Roleplay/Reallife Server ist, wir bitten dich Roleplaymäßig zu spielen!\nDieser Server basiert auf ein 100 Prozentiges Selfmade Script mit einzigartigen Systemen, überzeuge dich selbst!", "Weiter", "Ausloggen");
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_6:
        {
            if(response)
            {
                if(listitem!=2)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_7, DIALOG_STYLE_MSGBOX, "Hilfetext 4/4: Spawn", COLOR_HEX_WHITE"Vielen Dank, dass du Dir Zeit genommen hast, um die Hilfetexte zu lesen.\nWir empfehlen dir, direkt ein Personalausweiß, Führerschein und ein Job zu besorgen.\nProjektdaten:\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak IP: Teamspeak.LyD-Roleplay.de\nBitte melde dich auch in unserem Forum an!", "Spawn", "");
                    return 1;
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_7:
        {
            SpawnPlayerEx(playerid);
            GivePlayerCash(playerid, 40000);
            Spieler[playerid][pLevel] = 1;
            SetPlayerScore(playerid, 1);
        }
        case DIALOG_LINIE:
        {
            if(response)
            {
                new
                    vehicleid = GetPlayerVehicleID(playerid);
                if(vehicleid) {
                    new
                        busIndex = GetBusIndex(vehicleid);
                    if( busIndex != -1 ) {
                        new
                            String[256];
                        DestroyDynamic3DTextLabel(t3dBus[busIndex]);
                        t3dBus[busIndex] = Text3D:CreateDynamic3DTextLabel("Initialisierung...", 0x00FFFFFF, 0.0, 0.0, 0.0 , 14.0 , .attachedvehicle = vehicleid, .testlos = 1 , .streamdistance = 30.0 );

                        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_X , 0.0 );
                        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_Y , 0.0 );
                        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_Z , 1.5 );
                        KillTimer(buswait[playerid]);
                        buswait[playerid] = INVALID_TIMER_ID;
                        UnfreezePlayer(playerid);
                        PlayerTextDrawHide(playerid, BusMessage[playerid]);
                        DisablePlayerCheckpointEx(playerid);
                        if(listitem==0)
                        {
                            SetPlayerCheckpointEx(playerid, 1466.5648,-1729.4851,13.3828, 5.0, CP_BUSLINIE1CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Los Santos Stadthalle");
                            strcat(String,sBusLinie1);
                        }
                        if(listitem==1)
                        {
                            SetPlayerCheckpointEx(playerid, 1360.7312,-1224.7466,14.2254, 5.0, CP_BUSLINIE2CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Hauptammunation");
                            strcat(String,sBusLinie2);
                        }
                        if(listitem==2)
                        {
                            SetPlayerCheckpointEx(playerid, 1639.4159,-1875.4596,13.3828, 5.0, CP_BUSLINIE3CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Motorradhaus");
                            strcat(String,sBusLinie3);
                        }
                        if(listitem==3)
                        {
                            SetPlayerCheckpointEx(playerid, -111.3457,-1169.6807,2.7028, 5.0, CP_BUSLINIE4CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Tankstelle am LS/SF Zoll");
                            strcat(String,sBusLinie4);
                        }
                        format(String,sizeof(String),"%s\n\n"#COL_YELLOW"Ticketpreis: %d$",String,BUS_TICKET_PRICE);
                        UpdateDynamic3DTextLabelText(t3dBus[busIndex],COLOR_LIGHTBLUE, String );
                        Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    }
                }
            }
            return 1;
        }
        case DIALOG_SELLCAR_ECPIN: {
            if(response) { // EC Karte
                new
                    pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    FreezePlayer(playerid);
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt! Kauf abgebrochen");
                }
                SendClientMessage(playerid,COLOR_GREEN,"EC-Pin akzeptiert. Kauf wird durchgeführt!");
                BuyCar(playerid,2);
            }
            else {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
            }
        }
        case DIALOG_SELLCAR_PAYMETHOD: {
            if(response) { // EC Karte
                    if (PlayerHaveCar[playerid][PlayerKey[playerid]]) {
                         FreezePlayer(playerid);
                         RemovePlayerFromVehicle(playerid);
                         UnfreezePlayer(playerid);
                         return SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
                    }
                    ShowPlayerDialog(playerid, DIALOG_SELLCAR_ECPIN, DIALOG_STYLE_INPUT, "{3F62DA}Autohaus - Bankpin", "Bitte geben Sie den EC Pin ein", "Bestätigen", "Abbruch");
            }
            else {
                // Bar
                    if (PlayerHaveCar[playerid][PlayerKey[playerid]]) {
                         FreezePlayer(playerid);
                         RemovePlayerFromVehicle(playerid);
                         UnfreezePlayer(playerid);
                         return SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
                    }

                    BuyCar(playerid, 1);
            }
        }
        case DIALOG_SELLCAR: {
            if(response) {
                new
                    typ,
                    vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                typ = IsAutohausCar(vehicleid);
                if( !(typ==-1) )
                {
                    if (PlayerHaveCar[playerid][PlayerKey[playerid]]) {
                        FreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        UnfreezePlayer(playerid);
                        return SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
                    }
                    ShowPlayerDialog(playerid, DIALOG_SELLCAR_PAYMETHOD, DIALOG_STYLE_MSGBOX, "{3F62DA}Autohaus", "{FFFFFF}Wie möchten Sie bezahlen?", "EC-Karte", "Barzahlung");
                }
            }
            else {
                    FreezePlayer(playerid);
                    RemovePlayerFromVehicle(playerid);
                    // SendClientMessage(playerid, COLOR_WHITE, "Auf diesem Schlüssel ist bereits ein Fahrzeug!");
                    UnfreezePlayer(playerid);
            }
        }
        case DIALOG_CARKEY:
        {
            if(response)
            {
                PlayerKey[playerid] = listitem;
            }
            else
            {
                return 1;
            }
            return 1;
        }

        case DIALOG_MUSIK:
        {
            if(response) {
                // ATTACHED_INDEX_MUSIK 19421
                if(listitem == 0 ) {
                    RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_MUSIK);
                    StopAudioStreamForPlayer(playerid);
                    SetPVarInt(playerid, "MP3.PLAYER", 0);
                    return 1;
                    //StopYoutubeVideoForPlayer(playerid);
                }
                else if(listitem == 1 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://www.wdr.de/wdrlive/media/einslive.m3u");
                }
                else if(listitem == 2 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://listen.technobase.fm/tunein-dsl-pls");
                }
                else if(listitem == 3 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://listen.hardbase.fm/tunein-mp3-pls");
                }
                else if(listitem == 4 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/iloveradio.m3u");
                }
                else if(listitem == 5 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://breakz.us/radio/listen.m3u");
                }
                else if(listitem == 6 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_2.m3u");
                }
                else if(listitem == 7 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/planetradio/mp3/hqlivestream.m3u");
                }
                else if(listitem == 8 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqtheclub.m3u");
                }
                else if(listitem == 9 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqnightwax.m3u");
                }
                else if(listitem == 10 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/ilovemashup.m3u");
                }
                else if(listitem == 11 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://skyserver5.skydisc.net:8000/listen.pls");
                }
                else if(listitem == 12 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/ilovethebattle.m3u");
                }
                else if(listitem == 13 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://iloveradio.de/ilove2dance.m3u");
                }
                else if(listitem == 14 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, URL_LOGINMUSIC);
                }
                else if(listitem == 15 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://mp3.planetradio.de/plrchannels/hqitunes.mp3");
                }
                SetPVarInt(playerid, "MP3.PLAYER", 1);
                /*else if(listitem==16)
                {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    ShowPlayerDialog(playerid,DIALOG_YSTREAM,DIALOG_STYLE_INPUT,"Eigene Musik","Füge bitte einen Link der Musik ein (z.B. ein Youtube Link)","Hören","Abbrechen");
                }*/
            }
        }
        case DIALOG_RADIO:
        {
            if(response)
            {
                if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
                    if (GetPVarInt(playerid, "MP3.PLAYER")) {
                        RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_MUSIK);
                        SetPVarInt(playerid, "MP3.PLAYER", 0);
                    }

                    new vID = GetPlayerVehicleID(playerid);
                    new mod = GetVehicleModel(vID);
                    if(IsBicycle(mod))return SendClientMessage(playerid, COLOR_RED, "Du kannst kein Radio auf einem Fahrrad hören.");
                    if(listitem==0)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                StopAudioStreamForPlayer(i);
                                //StopYoutubeVideoForPlayer(i);
                            }
                        }
                        RadioSender[vID] = 0;
                    }
                    if(listitem==1)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://www.wdr.de/wdrlive/media/einslive.m3u");
                            }
                        }
                        RadioSender[vID] = 1;
                    }
                    if(listitem==2)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://listen.technobase.fm/tunein-dsl-pls");
                            }
                        }
                        RadioSender[vID] = 2;
                    }
                    if(listitem==3)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://listen.hardbase.fm/tunein-mp3-pls");
                            }
                        }
                        RadioSender[vID] = 3;
                    }
                    if(listitem==4)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://iloveradio.de/iloveradio.m3u");
                            }
                        }
                        RadioSender[vID] = 4;
                    }
                    if(listitem==5)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://breakz.us/radio/listen.m3u");
                            }
                        }
                        RadioSender[vID] = 5;
                    }
                    if(listitem==6)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://metafiles.gl-systemhaus.de/hr/youfm_2.m3u");
                            }
                        }
                        RadioSender[vID] = 6;
                    }
                    if(listitem==7)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://streams.planetradio.de/planetradio/mp3/hqlivestream.m3u");
                            }
                        }
                        RadioSender[vID] = 7;
                    }
                    if(listitem==8)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://streams.planetradio.de/plrchannels/mp3/hqtheclub.m3u");
                            }
                        }
                        RadioSender[vID] = 8;
                    }
                    if(listitem==9)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://streams.planetradio.de/plrchannels/mp3/hqnightwax.m3u");
                            }
                        }
                        RadioSender[vID] = 9;
                    }
                    if(listitem==10)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://iloveradio.de/ilovemashup.m3u");
                            }
                        }
                        RadioSender[vID] = 10;
                    }
                    if(listitem==11)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://skyserver5.skydisc.net:8000/listen.pls");
                            }
                        }
                        RadioSender[vID] = 11;
                    }
                    if(listitem==12)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://iloveradio.de/ilovethebattle.m3u");
                            }
                        }
                        RadioSender[vID] = 12;
                    }
                    if(listitem==13)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://iloveradio.de/ilove2dance.m3u");
                            }
                        }
                        RadioSender[vID] = 14;
                    }
                    if(listitem==14)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, URL_LOGINMUSIC);
                            }
                        }
                        RadioSender[vID] = 15;
                    }
                    if(listitem==15)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://mp3.planetradio.de/plrchannels/hqitunes.mp3");
                            }
                        }
                        RadioSender[vID] = 16;
                    }
                    /*else if(listitem==16)
                    {
                        RadioSender[vID] = 17;
                        ShowPlayerDialog(playerid,DIALOG_YSTREAM,DIALOG_STYLE_INPUT,"Eigene Musik","Füge bitte einen Link der Musik ein (z.B. ein Youtube Link)","Hören","Abbrechen");
                    }*/
                }
            }
        }
        case DIALOG_ABHEBEN:
        {
            ClearAnimations(playerid);
            if(response)
            {
                new value = strval(inputtext);
                if(!strlen(inputtext))
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Betrag war ungültig.");
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    return 1;
                }
                /*if(!IsNumeric(inputtext))
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Betrag war ungültig.");
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    return 1;
                }*/
                if(value < 1 || value > 100000000)
                {
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Du kannst nur Beträge von $1 bis $100.000.000 abheben.");
                    return 1;
                }
                if(value > Spieler[playerid][pBank])
                {
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht auf der Bank.");
                    return 1;
                }
                GivePlayerCash(playerid, value);
                Spieler[playerid][pBank] -= value;
                new string[128];
                format(string, sizeof(string), "Du hast $%s von deinem Konto abgehoben. Neuer Kontostand: $%s", AddDelimiters(value), AddDelimiters(Spieler[playerid][pBank]));
                SendClientMessage(playerid, COLOR_GREEN, string);
                new log[156];
                new playerIP[16], ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                GetPlayerIp(playerid, playerIP, 16);
                format(log, sizeof(log), "Name: %s (IP: %s) - Geld: $%s - Ort: %s", GetName(playerid), playerIP, AddDelimiters(value), ort);
                AuszahlenLog(log);
            }
            if(!response)
            {
                return 1;
            }
        }

        case DIALOG_ANLEGEN:
        {
            ClearAnimations(playerid);
            if(response)
            {
                new value = strval(inputtext);
                if(!strlen(inputtext))
                {
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Der Betrag war ungültig.");
                    return 1;
                }
                if(value < 1 || value > 100000000)
                {
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Du kannst nur Beträge von $1 bis $100.000.000 einzahlen.");
                    return 1;
                }
                if(value > GetPlayerMoney(playerid))
                {
                    SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht dabei.");
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                    return 1;
                }
                new string[128];
                GivePlayerCash(playerid, -value);
                Spieler[playerid][pBank] += value;
                format(string, sizeof(string), "Du hast $%s auf dein Konto angelegt. Neuer Kontostand: $%s", AddDelimiters(value), AddDelimiters(Spieler[playerid][pBank]));
                SendClientMessage(playerid, COLOR_GREEN, string);
                new log[156];
                new playerIP[16], ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                GetPlayerIp(playerid, playerIP, 16);
                format(log, sizeof(log), "Name: %s (IP: %s) - Geld: $%s - Ort: %s", GetName(playerid), playerIP, AddDelimiters(value), ort);
                EinzahlenLog(log);
            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_ATM:
        {
            if(response)
            {
                if(listitem==0)
                {
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Bestätige zunächst mit deinem PIN", "Weiter", "Abbrechen");
                }
                else if(listitem==1)
                {
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                }
                else if(listitem==2)
                {
                    new
                        String[128];
                    format(String,sizeof(String),"Bankkonto von: %s\nAktueller Kontostand: $%s",GetName(playerid), AddDelimiters(Spieler[playerid][pBank]));
                    ShowPlayerDialog(playerid, DIALOG_KONTOSTAND, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Kontostand", String , "Zurück", "");
                }
                else if(listitem==3)
                {
                    ShowPlayerDialog(playerid, DIALOG_UEBERWEISEN, DIALOG_STYLE_MSGBOX, "ONLINEBANKING", "Eine Überweisung kann nur über das OnlineBanking unter www.Bank.LyD-Roleplay.de durchgeführt werden!\nIhr Geld wird mit einem SICHEREN Transfer an den gewünschen Empfänger sofort überwiesen.\nSie haben auch eine Übersicht all Ihrer getätigten Überweisungen und können Ihre Bankpin beliebig ändern.\n\nDas ist unser Service für Sie!\n-Ihre Bank", "OK", "");
                    ClearAnimations(playerid);
                }
                /*
                else if(listitem==3) {
                    ShowPlayerDialog(playerid, DIALOG_PIN_AENDERN_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin", COLOR_HEX_WHITE"Bestätige zunächst mit deinem PIN"  , "Fertig", "");
                }
                else if(listitem==4) {
                    if( HasPlayerChecks(playerid) ) {
                        new
                            String[256];
                        for(new i ; i < MAX_PLAYERS ; i++) {
                            if( IsPlayerConnected(i)) {
                                if( Spieler[i][pGeldcheckID] == playerid ) {
                                    // ACHTUNG !!! NICHT DAS FORMAT DER AUSGABE ÄNDERN !!!!!
                                    // NUR NACH RÜCKSPRACHE!!!
                                    format(String,sizeof(String),"%s%s - %d$\n",String,GetName(i),Spieler[i][pGeldcheckBetrag]);
                                }
                            }
                        }
                        ShowPlayerDialog(playerid, DIALOG_CHECKAUSWAHL, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Check einläsen", String  , "Einlösen", "Abbruch");
                        return 1;
                    }
                    else {
                        ClearAnimations(playerid);
                        return SendClientMessage(playerid,COLOR_RED,"Dir wurden keine Geldchecks ausgestellt!");
                    }
                }
*/
            }
            if(!response)
            {
                ClearAnimations(playerid);
                return 1;
            }
        }
        case DIALOG_CHECKAUSWAHL: {
            ClearAnimations(playerid);
            if(response) {
                new
                    betrag,
                    giveid;
                if(sscanf(inputtext,"p<->u{s[10}",giveid)) {
                    //printf("lulz fehler '%s'",inputtext);
                }
                betrag = Spieler[giveid][pGeldcheckBetrag];
                if( !IsPlayerConnected(giveid)) {
                    return SendClientMessage(playerid,COLOR_RED,"Der Check ist nicht mehr gültig");
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast den Geldcheck von %s in Höhe von $%s eingelößt",GetName(giveid), AddDelimiters(betrag));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                format(String,sizeof(String),"%s hat deinen Geldcheck in Höhe von $%s eingelößt",GetName(playerid), AddDelimiters(betrag));
                SendClientMessage(giveid,COLOR_YELLOW,String);
                GivePlayerCash(playerid,betrag);
                Spieler[giveid][pGeldcheckBetrag] = 0;
                Spieler[giveid][pGeldcheckID] = INVALID_PLAYER_ID;
            }
        }
        case DIALOG_KONTOSTAND:
        {
            ClearAnimations(playerid);
            cmd_automat(playerid,"");
            return 1;
        }
        case DIALOG_HANDYAUFLADEN:
        {
            if(response)
            {
                if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
                    return SendClientMessage(playerid,COLOR_YELLOW,"Du hast einen Handy-Vertrag.");
                }
                new bizIndex = HandyShopBiz_Index;
                if(listitem==0)
                {
                    if(Biz[bizIndex][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 100)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -100);
                    Spieler[playerid][pHandyGeld] += 100;
                    Biz[bizIndex][bWaren] -= 2;
                    Biz[bizIndex][bKasse] += 100;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $100 aufgeladen.");
                }
                if(listitem==1)
                {
                    if(Biz[bizIndex][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -500);
                    Spieler[playerid][pHandyGeld] += 500;
                    Biz[bizIndex][bWaren] -= 5;
                    Biz[bizIndex][bKasse] += 500;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $500 aufgeladen.");
                }
                if(listitem==2)
                {
                    if(Biz[bizIndex][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 1000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -1000);
                    Spieler[playerid][pHandyGeld] += 1000;
                    Biz[bizIndex][bWaren] -= 5;
                    Biz[bizIndex][bKasse] += 1000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $1.000 aufgeladen.");
                }
                if(listitem==3)
                {
                    if(Biz[bizIndex][bWaren] < 25)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 5000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -5000);
                    Spieler[playerid][pHandyGeld] += 5000;
                    Biz[bizIndex][bWaren] -= 25;
                    Biz[bizIndex][bKasse] += 5000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $5.000 aufgeladen.");
                }
                if(listitem==4)
                {
                    if(Biz[bizIndex][bWaren] < 50)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 10000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -10000);
                    Spieler[playerid][pHandyGeld] += 10000;
                    Biz[bizIndex][bWaren] -= 50;
                    Biz[bizIndex][bKasse] += 10000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $10.000 aufgeladen.");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_BANKWERT:
        {
            if(response)
            {
                new betrag=strval(inputtext);
                if(betrag >= 1 && betrag <= 100000000)
                {
                    if(Spieler[playerid][pBank] >= betrag)
                    {
                        BankWert[playerid] = betrag;
                        ShowPlayerDialog(playerid, DIALOG_BANKSPIELER, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Überweisung", COLOR_HEX_WHITE"Wem möchtest du das Geld überweisen? (Tippe die ID oder den Namen)", "Überweisen", "Abbrechen");
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht auf der Bank.");
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du kannst maximal $100.000.000 überweisen.");
                    return ShowPlayerDialog(playerid, DIALOG_BANKWERT, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Überweisung", COLOR_HEX_WHITE"Bitte gebe den gewünschten Betrag an.", "Weiter", "Abbrechen");
                }
            }
            if(!response)
            {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return 1;
            }
        }
        case DIALOG_BANKSPIELER:
        {
            if (!response) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return 1;
            }

            sscanf(inputtext, "u", BankAn[playerid]);
            if (!gPlayerLogged[BankAn[playerid]]) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht eingeloggt.");
            }

            if (BankAn[playerid] == playerid) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return SendClientMessage(playerid, COLOR_RED, "Warum willst du dir selber Geld überweisen?");
            }

            if (Spieler[BankAn[playerid]][pLevel] < 4) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return SendClientMessage(playerid, COLOR_RED, "Der Empfänger muss mindestens Level 4 sein!");
            }

            new string[512], oldkonto = Spieler[playerid][pBank], playerName[MAX_PLAYER_NAME], payeeName[MAX_PLAYER_NAME];
            new transferAmountString[64];
            transferAmountString = AddDelimiters(BankWert[playerid]), playerName = GetName(playerid), payeeName = GetName(BankAn[playerid]);
            Spieler[playerid][pBank] -= BankWert[playerid];
            Spieler[BankAn[playerid]][pBank] += BankWert[playerid];
            format(string, sizeof(string), COLOR_HEX_ORANGE "======== KONTOAUSZUG ========\n" COLOR_HEX_WHITE "Überweisungsbetrag: $%s\nEmpfänger: %s\n"\
                "Alter Kontostand: $%s\nNeuer Kontostand: $%s", transferAmountString, payeeName, AddDelimiters(oldkonto), AddDelimiters(Spieler[playerid][pBank]));

            ShowPlayerDialog(playerid, DIALOG_BANKENDE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE "Bank", string, "Schließen", "");
            format(string, sizeof(string), "[Bank] {FFFFFF}Überweisung an {00BB88}%s {FFFFFF}in Höhe von {00BB88}$%s", payeeName, transferAmountString);
            SendClientMessage(playerid, COLOR_GREEN, string);
            format(string, sizeof(string), "[Bank] {FFFFFF}Überweisung von {009D00}%s {FFFFFF}in Höhe von {009D00}$%s", playerName, transferAmountString);
            SendClientMessage(BankAn[playerid], 0x00BB88FF, string);

            new playerIP[16], BankAnIP[16], banklog[156];
            GetPlayerIp(playerid, playerIP, 16);
            GetPlayerIp(BankAn[playerid], BankAnIP, 16);
            format(banklog, sizeof(banklog), "Name: %s (IP: %s) - An: %s (IP: %s) - Geld: %s", playerName, playerIP, payeeName, BankAnIP, transferAmountString);
            BankLog(banklog);
            if (BankWert[playerid] >= MONEY_ALERT_VALUE) sendMoneyAlert(playerid, BankAn[playerid], transferAmountString, (""));
            BankAn[playerid] = 999;
            BankWert[playerid] = 0;
        }
        case DIALOG_FCAROAMT:
         {
            if(response)
            {
                if(GetPlayerMoney(playerid) >= 80000)
                {
                    new
                        vID,
                        fraktion;
                    vID = GetPlayerVehicleID(playerid);
                    fraktion = GetVehicleFraktion(vID);
                    if(fraktion == Spieler[playerid][pFraktion])
                    {
                        if(Spieler[playerid][pCash] < 80000 ) {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "* Du Kaution des Ordnungsamtes beträgt 80.000$. Du besitzt leider nicht so viel Geld");
                            return 1;
                        }
                        g_FraktionAbschleppen[vID][FA_fX] = 0.0;
                        g_FraktionAbschleppen[vID][FA_fY] = 0.0;
                        g_FraktionAbschleppen[vID][FA_fZ] = 0.0;
                        g_FraktionAbschleppen[vID][FA_fFace] = 0.0;
                        g_FraktionAbschleppen[vID][FA_bAbgeschleppt] = false;

                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dein Fahrzeug erfolgreich freigekauft!");
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Das Fraktionsfahrzeug spawnt wieder wie gewohnt.");
                        GameTextForPlayer(playerid, "~r~-$80000", 2000, 1);
                        GivePlayerCash(playerid, -80000);
                        Kasse[Oamt] += 50000;
                        UnfreezePlayer(playerid);
                        ShowBuyInformation(playerid,"~y~Fahrzeug ~w~freigekauft!");
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer!");
                        FreezePlayer(playerid);
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else
                {
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    return 1;
                }
            }
            if(!response)
            {
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                return 1;
            }
        }
        case DIALOG_CAROAMT:
        {
            if(response)
            {
                if(GetPlayerMoney(playerid) >= 35000)
                {
                    new vID = GetPlayerVehicleID(playerid);
                    if(GetCarOwner(vID) == playerid)
                    {
                        new slot = GetCarOwnerSlot(playerid, vID);
                        PlayerCar[playerid][slot][CarState] = e_Vehicle_Status_Normal;
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dein Fahrzeug erfolgreich freigekauft!");
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Denke daran, es wieder per /Parken umzuparken.");
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Und nächstesmal, parke lieber richtig.");
                        GameTextForPlayer(playerid, "~r~-$35.000", 2000, 1);
                        GivePlayerCash(playerid, -35000);
                        Kasse[Oamt] += 35000;
                        UnfreezePlayer(playerid);
                        ShowBuyInformation(playerid,"~y~Fahrzeug ~w~freigekauft!");
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer!");
                        FreezePlayer(playerid);
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else
                {
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    return 1;
                }
            }
            if(!response)
            {
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                return 1;
            }
        }
        case DIALOG_SZETTEL:
        {
            new string[128];
            if(response)
            {
                if(ZettelID[playerid] != 999)
                {
                    if(IsPlayerConnected(ZettelID[playerid]))
                    {
                        GivePlayerCash(playerid, -ZettelPreis[playerid]);
                        format(string, sizeof(string), "* Du hast den Strafzettel von %s für $%s bezahlt.", GetName(ZettelID[playerid]), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(playerid, COLOR_LIGHTRED2, string);
                        format(string, sizeof(string), "* %s hat deinen Strafzettel in Höhe von $%s bezahlt.", GetName(playerid), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(ZettelID[playerid], COLOR_LIGHTRED2, string);
                        ZettelPreis[playerid] = 0;
                        ZettelID[playerid] = 999;
                    }
                }
            }
            if(!response)
            {
                format(string, sizeof(string), "* %s hat deinen Strafzettel abgelehnt.", GetName(playerid));
                SendClientMessage(ZettelID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "* Du hast den Strafzettel von %s abgelehnt.", GetName(ZettelID[playerid]));
                SendClientMessage(playerid, COLOR_RED, string);
                ZettelPreis[playerid] = 0;
                ZettelID[playerid] = 999;
            }
        }
        case DIALOG_SZETTEL1:
        {
            new string[128];
            if(response)
            {
                if(ZettelID[playerid] != 999)
                {
                    if(IsPlayerConnected(ZettelID[playerid]))
                    {
                        GivePlayerCash(playerid, -ZettelPreis[playerid]);
                        format(string, sizeof(string), "* Du hast die Rechnung von %s für $%s bezahlt.", GetName(ZettelID[playerid]), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(playerid, COLOR_LIGHTRED2, string);
                        format(string, sizeof(string), "* %s hat deinen Rechnung in Höhe von $%s bezahlt.", GetName(playerid), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(ZettelID[playerid], COLOR_LIGHTRED2, string);
                        ZettelPreis[playerid] = 0;
                        ZettelID[playerid] = 999;
                    }
                }
            }
            if(!response)
            {
                format(string, sizeof(string), "* %s hat deine Rechnung abgelehnt.", GetName(playerid));
                SendClientMessage(ZettelID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "* Du hast deine Rechnung von %s abgelehnt.", GetName(ZettelID[playerid]));
                SendClientMessage(playerid, COLOR_RED, string);
                ZettelPreis[playerid] = 0;
                ZettelID[playerid] = 999;
            }
        }
    }
    return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if (source != CLICK_SOURCE_SCOREBOARD || playerid == clickedplayerid)
        return 1;

    new dialogList[128], dialogCaption[64];
    SelectedPlayer[playerid] = clickedplayerid;
    format(dialogCaption, sizeof(dialogCaption), "Spieler: %s", GetName(clickedplayerid));
    dialogList = "Anrufen\nSMS senden";
    if (Spieler[playerid][pFraktion] == 5)
        strcat(dialogList,"\nOAMT - Verbrecher Katalog");

    return ShowPlayerDialog(playerid, DIALOG_TABMENU, DIALOG_STYLE_LIST, dialogCaption, dialogList, "Auswählen", "Abbrechen");
}

stock GetName(playerid)
{
    new gName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, gName, sizeof(gName));
    return gName;
}

stock SendPaintballMessage(color, message[])
{
    for (new i = 0; i <= GetPlayerPoolSize(); i++) if (PlayerIsPaintballing[i]) SendClientMessage(i, color, message);
    return 1;
}

/*
wrgaergrg r/subsifellfor
*/
new
    saveaccount[2300]; // Nicht ändern

stock SaveAccount(playerid)
{
    if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
    {
        saveaccount[0] = '\0';
        format(saveaccount,sizeof(saveaccount),"UPDATE `accounts` SET \
                `Level` = %d, \
                `Admin` = %d, \
                `DonateRank` = %d, \
                `Hours` = %d, \
                `Sex` = %d, \
                `Muted` = %d, \
                `Exp` = %d, \
                `Cash` = %d, \
                `Crimes` = %d, \
                `Kills` = %d, \
                `Deaths` = %d, \
                `Arrested` = %d, \
                `WantedDeaths` = %d, \
                `PhoneBook` = %d, \
                `LottoNr` = %d, \
                `Job` = %d, \
                `PayCheck` = %d, \
                `Jailed` = %d, \
                `JailTime` = %d, \
                `Drugs` = %d, \
                `Fraktion` = %d, \
                `Rank` = %d, \
                `Skin` = %d,",
                    Spieler[playerid][pLevel],
                    Spieler[playerid][pAdmin],
                    Spieler[playerid][pDonateRank],
                    Spieler[playerid][pHours],
                    Spieler[playerid][pSex],
                    Spieler[playerid][pMuted],
                    Spieler[playerid][pExp],
                    Spieler[playerid][pCash],
                    Spieler[playerid][pCrimes],
                    Spieler[playerid][pKills],
                    Spieler[playerid][pDeaths],
                    Spieler[playerid][pArrested],
                    Spieler[playerid][pWantedDeaths],
                    Spieler[playerid][pPhoneBook],
                    Spieler[playerid][pLottoNr],
                    Spieler[playerid][pJob],
                    Spieler[playerid][pPayCheck],
                    Spieler[playerid][pJailed],
                    Spieler[playerid][pJailTime],
                    Spieler[playerid][pDrugs],
                    Spieler[playerid][pFraktion],
                    Spieler[playerid][pRank],
                    Spieler[playerid][pSkin]);

        format(saveaccount,sizeof(saveaccount),"%s \
                `CarLic` = %d, \
                `FlyLic` = %d, \
                `BoatLic` = %d, \
                `GunLic` = %d, \
                `GunLicB` = %d, \
                `LKWLic` = %d, \
                `MotoLic` = %d, \
                `PayDay` = %d, \
                `Tut` = %d, \
                `Warns` = %d, \
                `Perso` = %d, \
                `HandyNr` = %d, \
                `HandyGeld` = %d, \
                `Tot` = %d, \
                `Banned` = %d, \
                `Wanteds` = %d, \
                `Bank` = %d, \
                `JailType` = %d, \
                `TotTime` = %d, \
                `TotX` = %.2f, \
                `TotY` = %.2f, \
                `TotZ` = %.2f, \
                `Kanister` = %d, \
                `Waffenteile` = %d,",
                // `Drogen` = %d,",
                    saveaccount,
                    Spieler[playerid][pCarLic],
                    Spieler[playerid][pFlyLic],
                    Spieler[playerid][pBoatLic],
                    Spieler[playerid][pGunLic],
                    Spieler[playerid][pGunLicB],
                    Spieler[playerid][pLKWLic],
                    Spieler[playerid][pMotoLic],
                    Spieler[playerid][pPayDay],
                    Spieler[playerid][pTut],
                    Spieler[playerid][pWarns],
                    Spieler[playerid][pPerso],
                    Spieler[playerid][pHandyNr],
                    Spieler[playerid][pHandyGeld],
                    Spieler[playerid][pTot],
                    Spieler[playerid][pBanned],
                    Spieler[playerid][pWanteds],
                    Spieler[playerid][pBank],
                    Spieler[playerid][pJailType],
                    Spieler[playerid][pTotTime],
                    Spieler[playerid][pTotX],
                    Spieler[playerid][pTotY],
                    Spieler[playerid][pTotZ],
                    Spieler[playerid][pKanister],
                    Spieler[playerid][pWaffenteile]/*,
                    Spieler[playerid][pDrogen]*/ );

        format(saveaccount,sizeof(saveaccount),"%s \
                `SafeTeile` = %d,\
                `SafeDrogen` = %d, \
                `SpawnChange` = %d, \
                `Kekse` = %d, \
                `Zigaretten` = %d, \
                `FrakLohn` = %d, \
                `TimeBan` = %d, \
                `MuteTime` = %d, \
                `Angel` = %d, \
                `Fische` = %d, \
                `Koeder` = %d, \
                `MaxFishes` = %d, \
                `MaxVerloren` = %d, \
                `FishLic` = %d, \
                `FPunkte` = %d, \
                `FBPunkte` = %d, \
                `FlPunkte` = %d, \
                `GunPunkte` = %d, \
                `LKWPunkte` = %d, \
                `MotoPunkte` = %d,",
                    saveaccount,
                    Spieler[playerid][pSafeTeile],
                    Spieler[playerid][pSafeDrogen],
                    Spieler[playerid][pSpawnChange],
                    Spieler[playerid][pKekse],
                    Spieler[playerid][pZigaretten],
                    Spieler[playerid][pFrakLohn],
                    Spieler[playerid][pTimeBan],
                    Spieler[playerid][pMuteTime],
                    Spieler[playerid][pAngel],
                    Spieler[playerid][pFische],
                    Spieler[playerid][pKoeder],
                    Spieler[playerid][pMaxFishes],
                    Spieler[playerid][pMaxVerloren],
                    Spieler[playerid][pFishLic],
                    Spieler[playerid][pFPunkte],
                    Spieler[playerid][pFBPunkte],
                    Spieler[playerid][pFlPunkte],
                    Spieler[playerid][pGunPunkte],
                    Spieler[playerid][pLKWPunkte],
                    Spieler[playerid][pMotoPunkte]
            );
        format(saveaccount,sizeof(saveaccount),"%s \
                `Marriage` = %d,\
                `FrakSperre` = %d, \
                `Hartz4` = %d, \
                `KFZSteuer` = %d, \
                `WantedCodes` = %d, \
                `SafeWantedCodes` = %d, \
                `HurePoints` = %d, \
                `DetectivPoints` = %d, \
                `Staat` = '%s', \
                `LastSeen` = now(), \
                `BankKonto` = %d, \
                `BankPin` = %d, \
                `Boeller` = %d, \
                `Raketen` = %d, \
                `JobWechsel` = %d, \
                `Krankenversicherung` = %d, \
                `DrogenSamen` = %d, \
                `Spice` = %d, \
                `SafeSpice` = %d, \
                `Handy` = %d, \
                `Brecheisen` = %d ",
                    saveaccount,
                    Spieler[playerid][pMarriage],
                    Spieler[playerid][pFrakSperre],
                    Spieler[playerid][pHartz4],
                    Spieler[playerid][pKFZSteuer],
                    Spieler[playerid][pWantedCodes],
                    Spieler[playerid][pSafeWantedCodes],
                    Spieler[playerid][pHurePoints],
                    Spieler[playerid][pDetektivPoints],
                    Spieler[playerid][pStaat],
                    Spieler[playerid][pBankKonto],
                    Spieler[playerid][pBankKontoPin],
                    Spieler[playerid][pBoeller],
                    Spieler[playerid][pRaketen],
                    Spieler[playerid][pJobWechsel],
                    Spieler[playerid][unixKrankenversicherung],
                    Spieler[playerid][pDrogenSamen],
                    Spieler[playerid][pSpice],
                    Spieler[playerid][pSafeSpice],
                    Spieler[playerid][pHandy],
                    Spieler[playerid][pBrecheisen]
        );
        format(saveaccount,sizeof(saveaccount),"%s \
                WHERE `Name` = '%s'",
                    saveaccount,
                    GetName(playerid)
        );
        mysql_oquery(saveaccount,THREAD_SAVEACCOUNT,playerid,gSQL);
        saveaccount[0] = '\0';
        format(saveaccount,sizeof(saveaccount),"UPDATE `accounts` SET \
                `SperreFahr` = %d, \
                `SperreBoot` = %d, \
                `SperreFlug` = %d, \
                `SperreWaffe` = %d, \
                `SperreLKW` = %d, \
                `SperreMoto` = %d, \
                `SSteuer` = %d, \
                `Helm` = %d, \
                `Experte` = %d, \
                `Lobe` = %d, \
                `BMOD` = %d, \
                `Kreditwert` = %d, \
                `KreditGezahlt` = %d, \
                `MP3Player` = %d, \
                `PremiumCarSlot` = %d, ",
                    Spieler[playerid][punixFSperre],
                    Spieler[playerid][punixFBSperre],
                    Spieler[playerid][punixFlSperre],
                    Spieler[playerid][punixGunSperre],
                    Spieler[playerid][punixLKWSperre],
                    Spieler[playerid][punixMotoSperre],
                    Spieler[playerid][pSSteuer],
                    Spieler[playerid][pHelm],
                    Spieler[playerid][pExperte],
                    Spieler[playerid][pLobe],
                    Spieler[playerid][pBMOD],
                    Spieler[playerid][pKreditwert],
                    Spieler[playerid][pKreditGezahlt],
                    Spieler[playerid][pMP3Player],
                    Spieler[playerid][pPremiumCarSlot]
        );
        format(saveaccount,sizeof(saveaccount),"%s \
                `Kampfstyle` = %d, \
                `SpawnX` = %.2f, \
                `SpawnY` = %.2f, \
                `SpawnZ` = %.2f, \
                `SpawnFace` = %.2f, \
                `SpawnInt` = %d, \
                `SpawnVirtual` = %d, \
                `Koffer` = %d, \
                `UpgradeWaffenlager` = %d, \
                `UpgradeSafebox` = %d, \
                `HausWaffenlager` = %d, \
                `HausSafeboxSpice` = %d, \
                `HausSafeboxDrogen` = %d, \
                `Haustier` = %d, \
                `HaustierCooldown` = %d, \
                `HaustierFutter` = %d, \
                `RadarfallenWarnung` = %d, \
                `PremiumBizSlot` = %d, \
                `HouseMieteKey` = %d,",
                    saveaccount,
                    Spieler[playerid][pFightstyle],
                    Spieler[playerid][pSpawnX],
                    Spieler[playerid][pSpawnY],
                    Spieler[playerid][pSpawnZ],
                    Spieler[playerid][pSpawnFace],
                    Spieler[playerid][pSpawnInt],
                    Spieler[playerid][pSpawnVirtual],
                    Spieler[playerid][pKoffer],
                    Spieler[playerid][pUpgradeWaffenlager],
                    Spieler[playerid][pUpgradeSafebox],
                    Spieler[playerid][pHausWaffenlager],
                    Spieler[playerid][pHausSafeboxSpice],
                    Spieler[playerid][pHausSafeboxDrogen],
                    Spieler[playerid][pHaustier],
                    Spieler[playerid][pHaustierCooldown],
                    Spieler[playerid][pHaustierFutter],
                    Spieler[playerid][pRadarfallenWarnung],
                    Spieler[playerid][pPremiumBizSlot],
                    Spieler[playerid][pHouseMieteKey]
        );
        format(saveaccount,sizeof(saveaccount),"%s \
                `PrisonRunCount` = %d, \
                `PrisonRun` = %d, \
                `ZollValid` = %d, \
                `LawyerPoints` = %d, \
                `WaffenSperre` = %d, \
                `KFZVersicherung` = %d, \
                `TrakLic` = %d, \
                `CarmALic` = %d, \
                `KillsGangFight` = %d, \
                `PremiumNeon` = %d, \
                `Automatik` = %d, \
                `DrogenPoints` = %d, \
                `WaffenteilePoints` = %d, \
                `frakwarn` = %d, \
                `Deakacc` = %d, \
                `Schulden` = %d, \
                `Weihnachtsday` = %d, \
                `fahrlehrerboni` = %d, \
                `MarriageName` = '%s',\
                `Deakaccadmin` = '%s'",
                    saveaccount,
                    Spieler[playerid][pPrisonRunCount],
                    Spieler[playerid][pPrisonRun],
                    Spieler[playerid][pZollValid],
                    Spieler[playerid][pLawyerPoints],
                    Spieler[playerid][pWaffenSperre],
                    Spieler[playerid][pKFZVersicherung],
                    Spieler[playerid][pTrakLic],
                    Spieler[playerid][pCarmALic],
                    Spieler[playerid][pKillsGangFight],
                    Spieler[playerid][pPremiumNeon],
                    Spieler[playerid][pAutomatik],
                    Spieler[playerid][pDrogenPoints],
                    Spieler[playerid][pWaffenteilePoints],
                    Spieler[playerid][pfrakwarn],
                    Spieler[playerid][pdeacc],
                    Spieler[playerid][pschulden],
                    Spieler[playerid][pWeihnachtsday],
                    fahrlehrerboni[playerid],
                    Spieler[playerid][pMarriageName],
                    pdeaccadmin[playerid]);
        format(saveaccount,sizeof(saveaccount),"%s \
                WHERE `Name` = '%s'",
                    saveaccount,
                    GetName(playerid)
        );
        mysql_oquery(saveaccount,THREAD_SAVEACCOUNT,playerid,gSQL);
        if( Spieler[playerid][pDonateRank] > 0 ) {
            SavePremiumWeaponData(playerid);
        }
        return 1;
    }
    return 0;
}

new const PlayerColumns[][] = {
    {"id"},
    {"Level"},
    {"Admin"},
    {"DonateRank"},
    {"Hours"},
    {"Sex"},
    {"Muted"},
    {"Exp"},
    //{"MaxExp"},
    {"Cash"},
    {"Crimes"},
    {"Kills"},
    {"Deaths"},
    {"Arrested"},
    {"WantedDeaths"},
    {"PhoneBook"},
    {"LottoNr"},
    {"Job"},
    {"PayCheck"},
    {"Jailed"},
    {"JailTime"},
    //{"Mats"},
    {"Drugs"},
    {"Fraktion"},
    {"Rank"},
    {"Skin"},
    //{"HouseKey"},
    //{"BizKey"},
    {"CarLic"},
    {"FlyLic"},
    {"BoatLic"},
    {"GunLic"},
    {"LKWLic"},
    {"MotoLic"},
    {"PayDay"},
    {"Tut"},
    {"Warns"},
    {"Perso"},
    {"HandyNr"},
    {"HandyGeld"},
    {"Tot"},
    {"Banned"},
    {"Wanteds"},
    {"Bank"},
    {"JailTime"},
    {"TotTime"},
    {"TotX"},
    {"TotY"},
    {"TotZ"},
    {"Kanister"},
    {"Waffenteile"},
    //{"Drogen"},
    {"SafeTeile"},
    {"SafeDrogen"},
    {"SpawnChange"},
    //{"TankKey"},
    {"Kekse"},
    {"Zigaretten"},
    {"FrakLohn"},
    {"TimeBan"},
    {"MuteTime"},
    {"Angel"},
    {"Fische"},
    {"Koeder"},
    {"MaxFishes"},
    {"MaxVerloren"},
    {"FishLic"},
    {"FPunkte"},
    {"FBPunkte"},
    {"FlPunkte"},
    {"GunPunkte"},
    {"LKWPunkte"},
    {"MotoPunkte"},
    {"Marriage"},
    {"FrakSperre"},
    {"Hartz4"},
    {"KFZSteuer"},
    {"WantedCodes"},
    {"SafeWantedCodes"},
    {"Startbonus"},
    {"HurePoints"},
    {"DetectivPoints"},
    {"Staat"},
    {"Bankkonto"},
    {"BankPin"},
    {"Boeller"},
    {"Raketen"},
    {"JobWechsel"},
    {"Krankenversicherung"},
    {"DrogenSamen"},
    {"Geburtstag"},
    {"Spice"},
    {"SafeSpice"},
    {"Handy"},
    {"Kampfstyle"},
    {"Brecheisen"},

    {"SperreFahr"},
    {"SperreBoot"},
    {"SperreFlug"},
    {"SperreWaffe"},
    {"SperreLKW"},
    {"SperreMoto"},
    //{"HotelKey"},

    {"SSteuer"},
    {"Helm"},
    {"Experte"},
    {"Lobe"},

    {"BMOD"},
    {"Kreditwert"},
    {"KreditGezahlt"},
    {"MP3Player"},

    {"PremiumCarSlot"},

    {"SpawnX"},
    {"SpawnY"},
    {"SpawnZ"},
    {"SpawnFace"},
    {"SpawnInt"},
    {"SpawnVirtual"},
    {"Koffer"},

    {"UpgradeWaffenlager"},
    {"UpgradeSafebox"},
    {"HausWaffenlager"},
    {"HausSafeboxSpice"},
    {"HausSafeboxDrogen"},

    {"Haustier"},
    {"HaustierCooldown"},
    {"HaustierFutter"},
    {"GunLicB"},
    {"RadarfallenWarnung"},
    {"PremiumBizSlot"},
    {"HouseMieteKey"},
    {"PrisonRunCount"},
    {"PrisonRun"},
    {"ZollValid"},
    {"LawyerPoints"},
    {"WaffenSperre"},
    {"KFZVersicherung"},
    {"TrakLic"},
    {"CarmALic"},
    {"KillsGangFight"},
    {"PremiumNeon"},
    {"Automatik"},
    {"DrogenPoints"},
    {"WaffenteilePoints"},
    {"MarriageName"},
    {"Frakwarn"}
};

new
    columns[1500];

stock LoadPlayerColumns() {
    columns[0] = '\0';
    for(new i ; i < sizeof(PlayerColumns) ; i++) {
        if( !isnull(columns) ) {
            format(columns,sizeof(columns),"%s,%s",columns,PlayerColumns[i]);
        }
        else {
            format(columns,sizeof(columns),"%s",PlayerColumns[i]);
        }
    }
    //printf("columns len %d",strlen(columns));
    return true;
}

stock LoadPlayer(playerid, inputtext[])
{
    if(IsPlayerConnected(playerid))
    {
        new
            password[128],
            query[ sizeof(columns) + 256 ];
        mysql_real_escape_string(inputtext, password,gSQL,sizeof(password) );
        format(query,sizeof(query),"SELECT %s \
                                FROM `accounts` \
                                WHERE `Passwort` = SHA2(CONCAT('%s',`SaltKey`),256) AND `Name` = '%s' LIMIT 1",columns,password,GetName(playerid) );
        mysql_pquery(query , THREAD_LOADPLAYER , playerid, gSQL,MySQLThreadOwner);
        // -> THREADED
        PlayerSQLExtra(playerid,inputtext);
    }
    return 1;
}

stock GivePlayerCash(playerid, amount)
{
    Spieler[playerid][pCash] += amount;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, Spieler[playerid][pCash]);
    if(Spieler[playerid][pCash]<0)
    {
        Spieler[playerid][pschulden]=-Spieler[playerid][pCash];
    }
    else if(Spieler[playerid][pschulden]!=0)
    {
        Spieler[playerid][pschulden]=0;
    }
    return 1;
}
/*forward schuldenset(playerid,schuldensett);
public schuldenset(playerid,schuldensett)
{
    GivePlayerCash(playerid,-schuldensett);
    printf("schulden: %i",-schuldensett);
}*/
stock ResetPlayerCash(playerid)
{
    Spieler[playerid][pCash] = 0;
    ResetPlayerMoney(playerid);
}

stock CheckMoney(playerid)
{
    return Spieler[playerid][pCash];
}

forward OnPlayerMoneyCheck();
public OnPlayerMoneyCheck()
{
    for(new i ; i < MAX_PLAYERS ; i++)
    {
        if( IsPlayerConnected(i) )
        {
            {
                ResetPlayerMoney(i);
                GivePlayerMoney(i, Spieler[i][pCash]);
            }
            if(fuelcountactive[i]==1&&!IsPlayerInAnyVehicle(i))
            {
                GivePlayerCash(i,-100*fuelcount[i]);
                if(fuelcount[i]>=1)
                {
                    new string[200];
                    format(string,200,"Du hast %d Liter verbraucht. Kosten: $%s",fuelcount[i], AddDelimiters(100*fuelcount[i]));
                    SendClientMessage(i,COLOR_ORANGE,string);
                }
                fuelcountactive[i]=0;
                fuelcount[i]=0;
           }
        }
    }
    return 1;
}

stock FreezePlayer(playerid)
{
    TogglePlayerControllable(playerid, 0);
    return 1;
}

stock UnfreezePlayer(playerid)
{
    TogglePlayerControllable(playerid, 1);
    return 1;
}

forward TogglePlayerControllableEx(playerid,toggle);
public TogglePlayerControllableEx(playerid,toggle) {
    TogglePlayerControllable(playerid,toggle);
}

stock SetPlayerSkinEx(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    Spieler[playerid][pSkin] = skinid;
    return 1;
}

stock ClearPlayerChat(playerid)
{
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    return 1;
}

public PayDay()
{
    for(new playerid;playerid<MAX_PLAYERS;playerid++)
    {
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1&&paydaywait[playerid]==0)
    {
        if( Haustier_OnFoot(playerid) ) {
            if( random(5) == 0 ) {
                new
                    Float:x,
                    Float:y,
                    Float:z;
                GetPlayerPos(playerid,x,y,z);
                if( Spieler[playerid][pHaustier] == 1 ) {
                    SendRoundMessage(x,y,z, COLOR_WHITE, "Hund bellt: Wauu... Wauuuhh...");
                }
                else if( Spieler[playerid][pHaustier] == 2 ) {
                    SendRoundMessage(x,y,z, COLOR_WHITE, "Papagei: Pieepp.. Piiepp...");
                }
                else if( Spieler[playerid][pHaustier] == 3 ) {
                    SendRoundMessage(x,y,z, COLOR_WHITE, "Schildkröte: Pieeps.. Piieps...");
                }
            }
        }

        if(Spieler[playerid][pPayDay] < 59 && Spieler[playerid][pJailed] != 3 && Spieler[playerid][pPrisonRun] <= 0)
        {
            Spieler[playerid][pPayDay]++;
        }
        else if(Spieler[playerid][pPayDay] >= 59)
        {
            Spieler[playerid][pPayDay] = 0;
            Spieler[playerid][pHours]++;
            //House Rent etc.
            if( Spieler[playerid][pHours] == 2 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"Besucherzeit abgelaufen! Du trägst nun keinen Koffer mehr mit dir.");
                RemovePlayerAttachedObject(playerid,2);
            }
            new check;
            if(Spieler[playerid][pFraktion] == 0)
            {
                check = 400;
            }
            else if(Spieler[playerid][pFraktion] == 1)
            {
                if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                {
                    if( Spieler[playerid][pDuty] == 1 ) {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 2)
            {
                if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                {
                    if( Spieler[playerid][pDuty] == 1 ) {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 3)
            {
                if(Kasse[Samd] > Spieler[playerid][pFrakLohn])
                {
                    if( Spieler[playerid][pDuty] == 1 ) {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Samd]-=Spieler[playerid][pFrakLohn];
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der SA-MD Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 4)
            {
                if(Kasse[Sana] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Sana]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der SA-NA Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 5)
            {
                if(Kasse[Oamt] > Spieler[playerid][pFrakLohn])
                {
                    if( Spieler[playerid][pDuty] == 1 ) {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Oamt]-=Spieler[playerid][pFrakLohn];
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Ordnungsamt Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 6)
            {
                if(Kasse[Grove] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Grove]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Grove Street Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 7)
            {
                if(Kasse[Ballas] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Ballas]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Ballas Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 8)
            {
                if(Kasse[Fahrschule] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Fahrschule]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Fahrschul Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 9)
            {
                if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 10)
            {
                if(Kasse[Yakuza] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Yakuza]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Yakuza Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 11)
            {
                if(Kasse[Aztecas] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Aztecas]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Aztecas Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 12)
            {
                if(Kasse[LCN] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[LCN]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der LCN Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 13)
            {
                if(Kasse[Vagos] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Vagos]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Vagos Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 14)
            {
                if(Kasse[Hitman] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Hitman]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Hitman Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 15)
            {
                if(Kasse[BBikerZ] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[BBikerZ]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der NineDemons Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 16)
            {
                if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                {
                    if( Spieler[playerid][pDuty] == 1 ) {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 17)
            {
                if(Kasse[Wheelmenk] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[Wheelmenk]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Wheelman Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 18)
            {
                if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                {
                    if( Spieler[playerid][pDuty] == 1 ) {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 19)
            {
                if(Kasse[TerrorK] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[TerrorK]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Terroristen Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 20)
            {
                if(Kasse[OutlawzK] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[OutlawzK]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Outlawz Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 21)
            {
                if(Kasse[ndgradethaK] > Spieler[playerid][pFrakLohn])
                {
                    check += Spieler[playerid][pFrakLohn];
                    Kasse[ndgradethaK]-=Spieler[playerid][pFrakLohn];
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Triaden Kasse ist kein Geld mehr vorhanden!");
                }
            }
            else if(Spieler[playerid][pFraktion] == 22)
            {
                if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                {
                    if( Spieler[playerid][pDuty] == 1 ) {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                }
            }
            if(Spieler[playerid][pJob] == 22 ) {
                check += Spieler[playerid][pAutoknackerExtraLohn];
            }
            Spieler[playerid][pAutoknackerExtraLohn] = 0;
            check += Spieler[playerid][pPayCheck];
            new finalcheck, earnedExp;
            finalcheck=check+fahrlehrerboni[playerid];
            //jedensamstag
            if (!strcmp(GetWeekDay(), "Samstag", true)) {
                if(Spieler[playerid][pDonateRank] >= 1) earnedExp = 3;
                else earnedExp = 2;
            }
            else {
                if(Spieler[playerid][pDonateRank] >= 1) earnedExp = 2;
                else earnedExp = 1;
            }

            Spieler[playerid][pExp] += earnedExp;
            new maxexp = (Spieler[playerid][pLevel] * 4);
            if( 1 <= Spieler[playerid][pHaustier] <= 3 )
            {
                Spieler[playerid][pHaustierCooldown]--;
                if( Spieler[playerid][pHaustierCooldown] == 0 )
                {
                    new
                        string[128];
                    format(string,sizeof(string),"[TIERBEHÖRDE] Tierhalter %s hat sein Haustier verhungern lassen!",GetName(playerid) );
                    SendFraktionMessage(5, COLOR_RED, string);
                    Spieler[playerid][pHaustier] = 0;
                    SendClientMessage(playerid,COLOR_ORANGE,"Dein Haustier ist vor Hunger gestorben. Die Tierbehörde wurde benachrichtigt.");
                }
                else if( Spieler[playerid][pHaustierCooldown] > 0 && Spieler[playerid][pHaustierCooldown] <= 80 )
                {
                    if(random(3))
                    {
                        SendClientMessage(playerid,COLOR_ORANGE,"Dein Haustier hat Hunger. Du kannst es füttern.");
                    }
                }
            }
            #pragma unused maxexp
            new string[128];
            new tempBank = Spieler[playerid][pBank];
            if(tempBank > 500000000){tempBank = 500000000;  }
            new tempSteuern = (finalcheck/100)*gSteuern;
            new hausmiete;
            new hausstrom;
            new tankestrom;
            new bizstrom;
            new handyvertrag;
            new kreditrest;
            new kreditgezahlt;
            Kasse[Staat] += tempSteuern;
            new fbz = floatround(tempBank * 0.001);
            if( Spieler[playerid][pDuty] == 0 ) {
                SendClientMessage(playerid, COLOR_ORANGE, "Du erhältst keinen extra Lohn, da du nicht im Dienst warst!");
            }
            new hartz4;
            if( Spieler[playerid][pHartz4]==1) {
                hartz4 = HARTZ4_GELD;
                Spieler[playerid][pBank] += 2000;
            }
            else {
                hartz4 = 0;
            }
            //format(string,sizeof(string),"Hartz IV Geld: %d$",hartz4);
            //SendClientMessage(playerid, COLOR_LIGHTGREY, string);
            new bankmoney=(finalcheck-tempSteuern);
            new hotelkosten;
            Spieler[playerid][pBank] += fbz;
            Spieler[playerid][pBank] +=bankmoney;
            Spieler[playerid][pPayCheck] = 0;
            if(GetPlayerHouse(playerid) != INVALID_HOUSE_KEY)
            {
                new house = GetPlayerHouse(playerid);
                if( house != 999 ) {
                    if( Spieler[playerid][pPlayerHouse] == house )
                    {
                        //format(string, sizeof(string), "Haus Stromkosten: -$500");
                        //SendClientMessage(playerid, COLOR_ORANGE, string);
                        hausstrom = 3200;
                        Spieler[playerid][pBank] -= 3200;
                        Biz[5][bKasse] += 2700;
                    }
                    else
                    {
                        //format(string, sizeof(string), "Haus-Miete: -$%d", Haus[index][hMietPreis]);
                        //SendClientMessage(playerid, COLOR_ORANGE, string);
                        Spieler[playerid][pBank] -= Haus[house][hMietPreis];
                        Haus[house][hKasse] += Haus[house][hMietPreis];
                        hausmiete = Haus[house][hMietPreis];
                    }
                }
            }

            if(Spieler[playerid][pPlayerBiz] != 999)
            {
                bizstrom = 3000;
                Biz[ Spieler[playerid][pPlayerBiz] ][bKasse] -= 3000;
                Biz[ StromBiz_Index ][bKasse] += 3000;
            }
            if(Spieler[playerid][pPlayerBizEx] != 999 && Spieler[playerid][pPremiumBizSlot] == 1)
            {
                bizstrom += 3000;
                Biz[ Spieler[playerid][pPlayerBizEx] ][bKasse] -= 3000;
                Biz[ StromBiz_Index ][bKasse] += 3000;
            }
            if(Spieler[playerid][pPlayerHotel] != 999)
            {
                hotelkosten = Hotel[ Spieler[playerid][pPlayerHotel] ][hMietPreis];
                Biz[43][bKasse] += hotelkosten;
                Spieler[playerid][pBank] -= hotelkosten;
            }
            if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
                handyvertrag = 1500;
                Spieler[playerid][pBank] -= handyvertrag;
                Biz[52][bKasse] += 1100;
                //SendClientMessage(playerid, COLOR_ORANGE, "Handy-Vertrag: -2000$");
            }
            if(Spieler[playerid][pPlayerTank] != 999)
            {
                tankestrom = 9000;
                Tanke[ Spieler[playerid][pPlayerTank] ][tKasse] -= 9000;
                Biz[ StromBiz_Index ][bKasse] += 9000;
            }

            if( Spieler[playerid][pKFZSteuer] > 0 ) {
                Spieler[playerid][pBank] -= Spieler[playerid][pKFZSteuer];
            }
            if( Spieler[playerid][pSSteuer] > 0 ) {
                Spieler[playerid][pBank] -= Spieler[playerid][pSSteuer];
            }
            if(Spieler[playerid][pWanteds] >= 1)
            {
                if(Spieler[playerid][pDonateRank] == 0)Spieler[playerid][pWanteds] -= 1;
                else if(Spieler[playerid][pDonateRank] == 1)Spieler[playerid][pWanteds] -= 2;
                if(Spieler[playerid][pWanteds] < 0)Spieler[playerid][pWanteds] = 0;
            }
            if( Spieler[playerid][pZollValid] < gettime() ) {
                Spieler[playerid][pZollValid] = 0;
            }
            GivePlayerStrafpunkte(playerid,1, -1 );
            GivePlayerStrafpunkte(playerid,2, -1 );
            GivePlayerStrafpunkte(playerid,3, -1 );
            GivePlayerStrafpunkte(playerid,4, -1 );
            GivePlayerStrafpunkte(playerid,5, -1 );
            // GivePlayerStrafpunkte(playerid,6, -1 );

            if( Spieler[playerid][pKreditwert] > 0 ) {
                // Hat Kredit
                new
                    kreditrate;
                kreditrate = GetKreditWertRate( Spieler[playerid][pKreditwert] );
                kreditrest = Spieler[playerid][pKreditwert] - Spieler[playerid][pKreditGezahlt];
                kreditgezahlt = kreditrest < kreditrate ? kreditrest : kreditrate;
                Spieler[playerid][pKreditGezahlt] += kreditgezahlt;
                Spieler[playerid][pBank] -= kreditgezahlt;
                printf("kreditrate %d",kreditrate);
                printf("kreditrest %d",kreditrest);
                printf("kreditgezahlt %d",kreditgezahlt);

                printf("Spieler[playerid][pKreditGezahlt] %d",Spieler[playerid][pKreditGezahlt]);
                printf("Spieler[playerid][pKreditwert] %d",Spieler[playerid][pKreditwert]);

                format(string,sizeof(string),"Kredit: %d$, Offene Rückzahlung: %d$, Ratenzahlung: %d$",Spieler[playerid][pKreditwert], ( Spieler[playerid][pKreditwert] - Spieler[playerid][pKreditGezahlt]),kreditgezahlt);
                SendClientMessage(playerid,COLOR_YELLOW,string);
                if( Spieler[playerid][pKreditGezahlt] >= Spieler[playerid][pKreditwert] ) {
                    print("Kredit wurde vollständig abgezahlt!");
                    SendClientMessage(playerid,COLOR_GREEN,"Kredit wurde vollständig abgezahlt!");
                    Spieler[playerid][pKreditGezahlt] = 0;
                    Spieler[playerid][pKreditwert] = 0;
                }
            }
            if (Spieler[playerid][pExp] >= maxexp)
            {
                Spieler[playerid][pLevel]++;
                SetPlayerScore(playerid, Spieler[playerid][pLevel]);
                Spieler[playerid][pExp] = 0;
                GameTextForPlayer(playerid, "~y~Level UP", 4000, 3);
            }

            // Reichensteuer 2.0
            if (fbz > 50000)
                fbz = 50000;

            SendClientMessage(playerid, COLOR_YELLOW, "======================== {FFFFFF}[ PAYDAY ] {FFFF00}========================");

            if (fahrlehrerboni[playerid] == 0)
                format(string, sizeof(string),"Dein Gehalt: "COLOR_HEX_GREEN"$%s"COLOR_HEX_WHITE", Steuerabzug: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE\
                    ", HartzIV Zuschlag: "COLOR_HEX_GREEN"+$%s", AddDelimiters(finalcheck), AddDelimiters(tempSteuern), AddDelimiters(hartz4));
            else
                format(string, sizeof(string),"Dein Gehalt: "COLOR_HEX_GREEN"$%s ($%s Fahrlehrerboni)"COLOR_HEX_WHITE", Steuerabzug: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE\
                    ", HartzIV Zuschlag: "COLOR_HEX_GREEN"+$%s", AddDelimiters(finalcheck), AddDelimiters(fahrlehrerboni[playerid]), AddDelimiters(tempSteuern), AddDelimiters(hartz4));

            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string),"Kontostand: "COLOR_HEX_GREEN"$%s"COLOR_HEX_WHITE", Zinsen: "COLOR_HEX_GREEN"$%s"COLOR_HEX_WHITE", Zinssatz: "COLOR_HEX_GREEN\
                "0.1 Prozent", AddDelimiters(tempBank), AddDelimiters(fbz));
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string,sizeof(string),"Respektpunkte: "COLOR_HEX_GREEN"+%d (%d/%d)"COLOR_HEX_WHITE", Wantedanzahl: " COLOR_HEX_RED "%d", earnedExp, Spieler[playerid][pExp],maxexp,Spieler[playerid][pWanteds]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string,sizeof(string),"Wohnungsmiete: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE", Hotel Miete: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE", Telefonkosten: "\
                COLOR_HEX_RED"-$%s", AddDelimiters(hausmiete), AddDelimiters(hotelkosten), AddDelimiters(handyvertrag));
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string,sizeof(string),"Eigentumshaus: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE", Inhaberkosten - Geschäft: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE\
                ", Tankstelle: "COLOR_HEX_RED"-$%s", AddDelimiters(hausstrom), AddDelimiters(bizstrom), AddDelimiters(tankestrom));
            SendClientMessage(playerid, COLOR_WHITE, string);
            SendClientMessage(playerid, COLOR_YELLOW, "|============================================================|");
            ShowBuyInformation(playerid,"~y~Glueckwunsch,~w~ Zahltag!");
        }
        UpdatePayDayTextdraw(playerid);
    }
    }
    return 1;
}
stock Scheine(playerid, targetid,modus = 0)
{
    if(IsPlayerConnected(targetid))
    {
        new car[40];
        new fly[40];
        new gun[40];
        new lkw[40];
        new moto[40];
        new fish[40];
        new boat[40];
        if(Spieler[targetid][pCarLic] == 0){car ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pCarLic] == 1){car ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pMotoLic] == 0){moto ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pMotoLic] == 1){moto ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pLKWLic] == 0){lkw ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pLKWLic] == 1){lkw ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pFlyLic] == 0){fly ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pFlyLic] == 1){fly ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pBoatLic] == 0){boat ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pBoatLic] == 1){boat ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pFishLic] == 0){fish = "{FF0000}Nicht vorhanden";}
        else if(Spieler[playerid][pFishLic] == 1){fish ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pGunLic] == 1){
            gun ="{00BB00}A";
        }
        else {
            gun ="{FF0000}(A)";
        }
        if(Spieler[targetid][pGunLicB] == 1){
            format(gun,sizeof(gun),"%s {00BB00}B",gun);
        }
        else {
            format(gun,sizeof(gun),"%s {FF0000}(B)",gun);
        }
        if(modus == 0 ) {
            new string1[256];
            new string2[256];
            new string3[256];
            new stringGESAMT[768];
            format(string1, sizeof(string1), "{EEEEEE}Autoschein: %s {FF0000}[%d/10]{EEEEEE}\n{EEEEEE}Motorradschein: %s {FF0000}[%d/10]{EEEEEE}\n", car, Spieler[targetid][pFPunkte], moto, Spieler[targetid][pMotoPunkte]);
            format(string2, sizeof(string2), "{EEEEEE}LKW-Schein: %s {FF0000}[%d/10]{EEEEEE}\n{EEEEEE}{EEEEEE}Flugschein: %s {FF0000}[%d/10]\n{EEEEEE}Bootsschein: %s {FF0000}\n", lkw, Spieler[targetid][pLKWPunkte], fly, Spieler[targetid][pFlPunkte],boat);
            format(string3, sizeof(string3), "{EEEEEE}Angelschein: %s {FF0000}\n{EEEEEE}{EEEEEE}Waffenschein: %s {FF0000}[%d/10]{EEEEEE}\n\n", fish, gun, Spieler[targetid][pGunPunkte]);
            format(stringGESAMT,sizeof(stringGESAMT),"%s\n%s\n%s",string1,string2,string3);
            ShowPlayerDialog(playerid, DIALOG_LICENSES, DIALOG_STYLE_MSGBOX, "Scheine", stringGESAMT, "Ok", "Abbrechen");
        }
        else if(modus == 1 ) {
            new string[128];
            format(string, sizeof(string), "{EEEEEE}Autoschein: %s {FF0000}[%d/10]{EEEEEE}", car, Spieler[targetid][pFPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Motorradschein: %s {FF0000}[%d/10]{EEEEEE}",moto, Spieler[targetid][pMotoPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}LKW-Schein: %s {FF0000}[%d/10]{EEEEEE}", lkw, Spieler[targetid][pLKWPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Flugschein: %s {FF0000}[%d/10]{EEEEEE}", fly, Spieler[targetid][pFlPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Bootschein: %s {FF0000}",boat);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Angelschein: %s {FF0000}",fish);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Waffenschein: %s {FF0000}[%d/10]{EEEEEE}", gun, Spieler[targetid][pGunPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
        }
    }
    return 1;
}

stock Stats(playerid, targetid)
{
    if(IsPlayerConnected(targetid))
    {
        new rankname[35], team[50], jtext[50], dialogCaption[42], lotto[12];
        ReturnPlayerFraktion(targetid, team);
        ReturnPlayerRank(targetid, rankname);
        ReturnPlayerJob(targetid, jtext);

        if (!Spieler[targetid][pLottoNr]) lotto = "Kein Ticket";
        else format(lotto, sizeof(lotto), "%d", Spieler[targetid][pLottoNr]);

        format(dialogCaption, sizeof(dialogCaption), "Statistik von %s", GetName(targetid));

        new final[2000];
        format(final, sizeof(final), #COL_LIGHTBLUE "Spielstand:" #COL_DEFAULT "\n\
            Spielername: [%s], Level: [%d], Geburtstag: [%s], Respektpunkte: [%d/%d] \nSpielstunden: [%d], Geschlecht: [%s], PayDay in: [%d Minuten]\n\
            Accounttyp: [%s], Adminrang: [%d], Adminverwarnungen: [%d/3], Fraktionssperre: [%s]\nBargeld: [$%s], Bank: [$%s], Zusätzliche-Steuern: [$%s]\n\n\
            " #COL_LIGHTBLUE "Daten:" #COL_DEFAULT "\nTelefonnummer: [%d], Handyvertrag: [%s]\nStaatsangehörigkeit: [%s], Verheiratet mit: [%s]\n\n\
            " #COL_LIGHTBLUE "Beruf:" #COL_DEFAULT "\nFraktion: [%s], Rang: [%s], Fraktionswarns: [%i/3], Beruf: [%s]\n\n\
            " #COL_LIGHTBLUE "Inventare:" #COL_DEFAULT "\nDrogen: [%s], Waffenteile: [%s], Wantedcodes: [%s], Spice: [%s] \n\
            Safebox Drogen: [%s], Safebox Waffenteile: [%s], Safebox Wantedcodes: [%s], Safebox Spice: [%s]\n\
            Lotto-Ticket: [%s], Zigaretten: [%s], Kekse: [%s], Tankkanister: [%d]\nFische: [%d], Köder: [%d], Angel: [%s], Lobe: [%d]\n\n\
            " #COL_LIGHTBLUE "Inventare:" #COL_DEFAULT "\nMorde: [%d], Verbrechen: [%d], Tode: [%d], KD-Rate: [%.2f],  Wantedtode: [%d], Wantedlevel: [%d], Knast: [%d]\n\n\
            " #COL_LIGHTBLUE "Sonstiges:" #COL_DEFAULT "\n",
            GetName(targetid), Spieler[targetid][pLevel], Spieler[targetid][pGeburtstag], Spieler[targetid][pExp], Spieler[targetid][pLevel] * 4,
            Spieler[targetid][pHours], Spieler[targetid][pSex] == 1 ? "Männlich" : "Weiblich", 60 - Spieler[targetid][pPayDay],
            Spieler[targetid][pDonateRank] == 0 ? "Normaler User" : "Clubmitglied", Spieler[targetid][pAdmin], Spieler[targetid][pWarns],
            Spieler[targetid][pFrakSperre] ? "Ja" : "Nein", AddDelimiters(GetPlayerMoney(targetid)),
            AddDelimiters(Spieler[targetid][pBank]), AddDelimiters(Spieler[targetid][pSSteuer]), Spieler[targetid][pHandyNr],
            Spieler[targetid][pHandyGeld] == HANDY_VERTRAG ? "Ja" : "Nein", GetPlayerStaat(targetid), Spieler[targetid][pMarriageName], team, rankname, Spieler[targetid][pfrakwarn], jtext,
            AddDelimiters(Spieler[targetid][pDrugs]), AddDelimiters(Spieler[targetid][pWaffenteile]), AddDelimiters(Spieler[targetid][pWantedCodes]),
            AddDelimiters(Spieler[targetid][pSpice]), AddDelimiters(Spieler[targetid][pSafeDrogen]), AddDelimiters(Spieler[targetid][pSafeTeile]),
            AddDelimiters(Spieler[targetid][pSafeWantedCodes]), AddDelimiters(Spieler[targetid][pSafeSpice]), lotto, AddDelimiters(Spieler[targetid][pZigaretten]),
            AddDelimiters(Spieler[targetid][pKekse]), Spieler[targetid][pKanister], Spieler[targetid][pFische], Spieler[targetid][pKoeder],
            Spieler[targetid][pAngel] ? "Ja" : "Nein", Spieler[targetid][pLobe], Spieler[targetid][pKills], Spieler[targetid][pCrimes], Spieler[targetid][pDeaths],
            Spieler[targetid][pDeaths] == 0 ? float(Spieler[targetid][pKills]) : float(Spieler[targetid][pKills]) / float(Spieler[targetid][pDeaths]),
            Spieler[targetid][pWantedDeaths], Spieler[targetid][pWanteds], Spieler[targetid][pArrested]
        );


        new index = GetPlayerHouse(targetid);
        if (index == 999) format(final, sizeof(final), "%sHaus: [Kein Haus]\n", final);
        else if (Spieler[targetid][pPlayerHouse] == 999) format(final, sizeof(final),"%sHaus: [%s - [Nr. %d] (Mieter)]\n", final, Haus[index][hName], Haus[index][hID]);
        else format(final, sizeof(final), "%sHaus: [%s - [Nr. %d] (Besitzer), Kasse: $%s]\n", final, Haus[index][hName], Haus[index][hID], AddDelimiters(Haus[index][hKasse]));

        if (Spieler[targetid][pPlayerBiz] == 999) format(final, sizeof(final), "%sGeschäft: [Kein Geschäft]\n", final);
        else format(final, sizeof(final), "%sGeschäft: [%s, Waren: %s, Kasse: $%s]\n", final, Biz[Spieler[targetid][pPlayerBiz]][bName],
           AddDelimiters( Biz[Spieler[targetid][pPlayerBiz]][bWaren]), AddDelimiters(Biz[Spieler[targetid][pPlayerBiz]][bKasse]));

        if (Spieler[targetid][pPlayerBizEx] != 999 && Spieler[targetid][pPremiumBizSlot])
            format(final, sizeof(final),"%sPremium-Geschäft: [%s, Waren: %s, Kasse: $%s]\n", final, Biz[Spieler[targetid][pPlayerBizEx]][bName],
                AddDelimiters(Biz[Spieler[targetid][pPlayerBizEx]][bWaren]), AddDelimiters(Biz[Spieler[targetid][pPlayerBizEx]][bKasse]));

        if (Spieler[targetid][pPlayerTank] == 999) format(final, sizeof(final), "%sTankstelle: [Keine Tankstelle]\n", final);
        else format(final, sizeof(final), "%sTankstelle: [%s, Benzin: %s, Kasse: $%s]\n", final, Tanke[Spieler[targetid][pPlayerTank]][tName],
            AddDelimiters(Tanke[Spieler[targetid][pPlayerTank]][tBenzin]), AddDelimiters(Tanke[Spieler[targetid][pPlayerTank]][tKasse]));

        if (Spieler[targetid][pPlayerFirma] == 999) format(final, sizeof(final), "%sFirma: [Keine Firma]", final);
        else format(final, sizeof(final), "%sFirma: [%s, Gehalt: $%s, Kasse: $%s]", final, g_Firma[Spieler[targetid][pPlayerFirma]][F_sBezeichnung],
            AddDelimiters(g_Firma[Spieler[targetid][pPlayerFirma]][F_iGehalt]), AddDelimiters(g_Firma[Spieler[targetid][pPlayerFirma]][F_iKasse]));

        ShowPlayerDialog(playerid, DIALOG_STATS, DIALOG_STYLE_MSGBOX, dialogCaption, final, "Schließen", "");
    }
    return 1;
}

stock ReturnPlayerJob(playerid, job[50])
{
    if(Spieler[playerid][pJob] == 0){job="Arbeitslos";}
    else if(Spieler[playerid][pJob] == 1){job="Bauer";}
    else if(Spieler[playerid][pJob] == 2){job="Busfahrer";}
    else if(Spieler[playerid][pJob] == 3){job="Trucker";}
    else if(Spieler[playerid][pJob] == 4){job="Pilot";}
    else if(Spieler[playerid][pJob] == 5){job="KFZ-Mechatroniker";}
    else if(Spieler[playerid][pJob] == 6){job="Anwalt";}
    else if(Spieler[playerid][pJob] == 7){job="Straßenreiniger";}
    else if(Spieler[playerid][pJob] == 8){job="Müllmann";}
    else if(Spieler[playerid][pJob] == 9){job="Gärtnerei";}
    else if(Spieler[playerid][pJob] == 10){job="Bauarbeiter";}
    else if(Spieler[playerid][pJob] == 11){job="Schiffs-Fahrer";}
    else if(Spieler[playerid][pJob] == 12){job="Geld-Transportsfahrer";}
    else if(Spieler[playerid][pJob] == 13){job="Eisverkäufer";}
    else if(Spieler[playerid][pJob] == 14){job="Detektiv";}
    else if(Spieler[playerid][pJob] == 15){job="Pizzalieferant";}
    else if(Spieler[playerid][pJob] == 16){job="Taxifahrer";}
    else if(Spieler[playerid][pJob] == 17){job="Drogendealer";}
    else if(Spieler[playerid][pJob] == 18){job="Waffendealer";}
    else if(Spieler[playerid][pJob] == 19){job="Taschendieb";}
    else if(Spieler[playerid][pJob] == 20){job="Prostituierte";}
    else if(Spieler[playerid][pJob] == 21){job="Wanted Hacker";}
    else if(Spieler[playerid][pJob] == 22){job="Autodieb";}
    else if(Spieler[playerid][pJob] == 23){job="Zugfahrer";}
    else if(Spieler[playerid][pJob] == 24){job="HotDog Verkäufer";}
    return job;
}

stock ReturnPlayerFraktion(playerid, frak[50])
{
    if(Spieler[playerid][pFraktion] == 0)frak ="Zivilist";
    else if(Spieler[playerid][pFraktion] == 1)frak ="LSPD";
    else if(Spieler[playerid][pFraktion] == 2)frak ="FBI";
    else if(Spieler[playerid][pFraktion] == 3)frak ="SAMD";
    else if(Spieler[playerid][pFraktion] == 4)frak ="SA-NA";
    else if(Spieler[playerid][pFraktion] == 5)frak ="Ordnungsamt";
    else if(Spieler[playerid][pFraktion] == 6)frak ="Grove Street";
    else if(Spieler[playerid][pFraktion] == 7)frak ="Ballas";
    else if(Spieler[playerid][pFraktion] == 8)frak ="Fahrschule";
    else if(Spieler[playerid][pFraktion] == 9)frak ="Staat";
    else if(Spieler[playerid][pFraktion] == 10)frak ="Yakuza";
    else if(Spieler[playerid][pFraktion] == 11)frak ="Aztecas";
    else if(Spieler[playerid][pFraktion] == 12)frak ="LCN";
    else if(Spieler[playerid][pFraktion] == 13)frak ="Vagos";
    else if(Spieler[playerid][pFraktion] == 14)frak ="Hitman";
    else if(Spieler[playerid][pFraktion] == 15)frak ="NineDemons";
    else if(Spieler[playerid][pFraktion] == 16)frak ="LVPD";
    else if(Spieler[playerid][pFraktion] == 17)frak ="Wheelman";
    else if(Spieler[playerid][pFraktion] == 18)frak ="Army";
    else if(Spieler[playerid][pFraktion] == 19)frak ="Terrorist";
    else if(Spieler[playerid][pFraktion] == 20)frak ="Outlawz";
    else if(Spieler[playerid][pFraktion] == 21)frak ="Triaden";
    else if(Spieler[playerid][pFraktion] == 22)frak ="Zollamt";
    return frak;
}

stock ReturnFraktionByID(frakid, frak[50])
{
    if(frakid == 0)frak ="Zivilist";
    else if(frakid == 1)frak ="LSPD";
    else if(frakid == 2)frak ="FBI";
    else if(frakid == 3)frak ="SAMD";
    else if(frakid == 4)frak ="SA-NA";
    else if(frakid == 5)frak ="Ordnungsamt";
    else if(frakid == 6)frak ="Grove Street";
    else if(frakid == 7)frak ="Ballas";
    else if(frakid == 8)frak ="Fahrschule";
    else if(frakid == 9)frak ="Staat";
    else if(frakid == 10)frak ="Yakuza";
    else if(frakid == 11)frak ="Aztecas";
    else if(frakid == 12)frak ="LCN";
    else if(frakid == 13)frak ="Vagos";
    else if(frakid == 14)frak ="Hitman";
    else if(frakid == 15)frak ="NineDemons";
    else if(frakid == 16)frak ="LVPD";
    else if(frakid == 17)frak ="Wheelman";
    else if(frakid == 18)frak ="Army";
    else if(frakid == 19)frak ="Terrorist";
    else if(frakid == 20)frak ="Outlawz";
    else if(frakid == 21)frak ="Triaden";
    else if(frakid == 22)frak ="Zollamt";
    else frak = "FraktionsName";
    return frak;
}


CMD:undercover(playerid)
{
    if(pUnderCover[playerid] == 1)
    {
        SendClientMessage(playerid, COLOR_WHITE, "* Du bist nun nicht mehr im Undercover Modus.");
        ResetPlayerWeapons(playerid);
        pUnderCover[playerid] = 0;
        Spieler[playerid][pDuty] = 0;
        Spieler[playerid][pDutyTask] = 0;
        SetPlayerSkin(playerid, Spieler[playerid][pSkin]);
        return 1;
    }
    else
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 244.3387,192.4503,1008.1719) || IsPlayerInRangeOfPoint(playerid, 2.0, LSPD_INTERIOR_DUTY_POINT))
        {
            if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16))return SendClientMessage(playerid, COLOR_RED, "Nur für LSPD/FBI verfügbar!");
            pUnderCover[playerid] = 1;
            Spieler[playerid][pDuty] = 1;
            Spieler[playerid][pDutyTask] = 0;
            GivePlayerWeapon(playerid, 31, 200);
            GivePlayerWeapon(playerid, 24, 80);
            SetPlayerArmour(playerid, 100);
            SetPlayerHealth(playerid, 100);
            if(Spieler[playerid][pSex] == 1)SetPlayerSkin(playerid, 2);
            else if(Spieler[playerid][pSex] == 2)SetPlayerSkin(playerid, 2);
            SendClientMessage(playerid, COLOR_YELLOW, "* Du bist nun im Under-Cover Modus.");
        }
    }
    return 1;
}

CMD:entnehmen(playerid, params[])
{
    new pID, string[128], eingabe[24];
    if(sscanf(params, "us[24]", pID, eingabe))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Entnehmen [SpielerID/Name] [Drogen/Waffenteile/Waffen/Codes/Spice]");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Beamter.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    if(strcmp(eingabe, "drogen", true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
        {
            Spieler[pID][pDrugs] = 0;
            format(string, sizeof(string), "* Du hast die Drogen von %s abgenommen.", GetName(pID));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "* %s nahm die Drogen von %s ab.", GetName(playerid), GetName(pID));
            SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
            return 1;
        }
    }
    else if(strcmp(eingabe, "waffenteile", true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
        {
            Spieler[pID][pWaffenteile] = 0;
            format(string, sizeof(string), "* Du hast die Waffenteile von %s abgenommen.", GetName(pID));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "* %s nahm die Waffenteile von %s ab.", GetName(playerid), GetName(pID));
            SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
            return 1;
        }
    }
    else if(strcmp(eingabe, "waffen", true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
        {
            ResetPlayerWeapons(pID);
            format(string, sizeof(string), "* Du hast die Waffen von %s abgenommen.", GetName(pID));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "* %s nahm die Waffen von %s ab.", GetName(playerid), GetName(pID));
            SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
            return 1;
        }
    }
    else if(strcmp(eingabe, "codes", true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
        {
            Spieler[pID][pWantedCodes] = 0;
            format(string, sizeof(string), "* Du hast die Hacker-Codes von %s abgenommen.", GetName(pID));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "* %s nahm die Wanted-Hacker Codes von %s ab.", GetName(playerid), GetName(pID));
            SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
            return 1;
        }
    }
    else if(strcmp(eingabe, "spice", true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
        {
            Spieler[pID][pSpice] = 0;
            format(string, sizeof(string), "* Du hast die Spice-Drogen von %s abgenommen.", GetName(pID));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "* %s nahm die Spice-Drogen von %s ab.", GetName(playerid), GetName(pID));
            SendRoundMessage(x,y,z, COLOR_PURPLE, string);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
            return 1;
        }
    }
    return 1;
}

CMD:durchsuchen(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Durchsuche [SpielerID/Name]");
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Beamter.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
    {
        format(string, sizeof(string), COLOR_HEX_BLUE"Drogen: "COLOR_HEX_WHITE"%i "COLOR_HEX_ORANGE"|"COLOR_HEX_BLUE" Waffenteile: "COLOR_HEX_WHITE"%i", Spieler[pID][pDrugs], Spieler[pID][pWaffenteile]);
        SendClientMessage(playerid, COLOR_WHITE, string);
        format(string, sizeof(string), COLOR_HEX_BLUE"Wanted-Hacker Codes: "COLOR_HEX_WHITE"%i "COLOR_HEX_ORANGE"|"COLOR_HEX_BLUE" Spice-Drogen: "COLOR_HEX_WHITE"%i", Spieler[pID][pWantedCodes] , Spieler[pID][pSpice]);
        SendClientMessage(playerid, COLOR_WHITE, string);
        new weapons[13][2];
        new wpName1[32], wpName2[32], wpName3[32], wpName4[32], wpName5[32], wpName6[32], wpName7[32];
        new wpName8[32], wpName9[32], wpName10[32], wpName11[32], wpName12[32], wpName13[32];
        for(new i=0;i<13;i++)
        {
            GetPlayerWeaponData(pID, i, weapons[i][0], weapons[i][1]);
        }
        GetWeaponNameEx(weapons[0][0], wpName1, 32);
        GetWeaponNameEx(weapons[1][0], wpName2, 32);
        GetWeaponNameEx(weapons[2][0], wpName3, 32);
        GetWeaponNameEx(weapons[3][0], wpName4, 32);
        GetWeaponNameEx(weapons[4][0], wpName5, 32);
        GetWeaponNameEx(weapons[5][0], wpName6, 32);
        GetWeaponNameEx(weapons[6][0], wpName7, 32);
        GetWeaponNameEx(weapons[7][0], wpName8, 32);
        GetWeaponNameEx(weapons[8][0], wpName9, 32);
        GetWeaponNameEx(weapons[9][0], wpName10, 32);
        GetWeaponNameEx(weapons[10][0], wpName11, 32);
        GetWeaponNameEx(weapons[11][0], wpName12, 32);
        GetWeaponNameEx(weapons[12][0], wpName13, 32);
        format(string, sizeof(string), "Waffen von "COLOR_HEX_BLUE"%s", GetName(pID));
        SendClientMessage(playerid, COLOR_WHITE, string);
        format(string, sizeof(string), "Waffen-Slot 1: %s [%d], Waffen-Slot 2: %s [%d], Waffen-Slot 3: %s [%d]", wpName1,weapons[0][1], wpName2,weapons[1][1], wpName3,weapons[2][1]);
        SendClientMessage(playerid, COLOR_LIGHTGREY, string);
        format(string, sizeof(string), "Waffen-Slot 4: %s [%d], Waffen-Slot 5: %s [%d], Waffen-Slot 6: %s [%d]", wpName4,weapons[3][1], wpName5,weapons[4][1], wpName6,weapons[5][1]);
        SendClientMessage(playerid, COLOR_LIGHTGREY, string);
        format(string, sizeof(string), "Waffen-Slot 7: %s [%d], Waffen-Slot 8: %s [%d], Waffen-Slot 9: %s [%d]", wpName7,weapons[6][1], wpName8,weapons[7][1], wpName9,weapons[8][1]);
        SendClientMessage(playerid, COLOR_LIGHTGREY, string);
        format(string, sizeof(string), "Waffen-Slot 10: %s[%d] , Waffen-Slot 11: %s [%d], Waffen-Slot 12: %s [%d]", wpName10,weapons[9][1], wpName11,weapons[10][1], wpName12,weapons[11][1]);
        SendClientMessage(playerid, COLOR_LIGHTGREY, string);
        format(string, sizeof(string), "Waffen-Slot 13: %s [%d]", wpName13,weapons[12][1]);
        SendClientMessage(playerid, COLOR_ORANGE, string);
        format(string, sizeof(string), "* Beamter %s hat %s nach Gegenständen durchsucht.", GetName(playerid), GetName(pID));
        SendRoundMessage(x, y, z, COLOR_PURPLE, string);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Spielers.");
        return 1;
    }
    return 1;
}

CMD:sliste(playerid, params[])
{
    new entry[24];
    new string[128];
    new str2[2048];
    if(sscanf(params, "s[24]", entry))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sliste [Fraktion/Job]");
    if(strcmp(entry, "fraktion", true) == 0)
    {
        if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedCop[i] == 1)
                    {
                        format(string, sizeof(string), COLOR_HEX_BLUE"%s meldet ein Notruf! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand benötigt einen Polizist.");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Sie können mit /Acceptcop ein Notruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTCOP, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"NOTRUFZENTRALE: "COLOR_HEX_WHITE"Polizei", str2, "Schließen", "");
        }
        else if(Spieler[playerid][pFraktion] == 3)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedMedic[i] == 1)
                    {
                        format(string, sizeof(string), "%s benögtigt meldet ein Notruf! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand benötigt einen Sanitäter.");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Sie können mit /Acceptsani ein Notruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTSANI, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"NOTRUFZENTRALE: "COLOR_HEX_WHITE"Sanitäter", str2, "Schließen", "");
        }
        else if(Spieler[playerid][pFraktion] == 5)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedOAMT[i] == 1)
                    {
                        format(string, sizeof(string), "%s meldet ein Anliegen! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand benötigt einen Ordnungsbeamten.");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Du kannst mit /Acceptoamt [ID] einen Service-Anruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTOAMT, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Service-Liste: "COLOR_HEX_WHITE"Ordnungsamt", str2, "Schließen", "");
        }
    }
    else if(strcmp(entry, "job", true) == 0)
    {
        if(Spieler[playerid][pJob] == 5)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedKFZ[i] == 1)
                    {
                        format(string, sizeof(string), "%s benötigt einen Mechatroniker! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand benötigt einen Mechatroniker.");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Du kannst mit /Acceptkfz [ID] einen Service-Anruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTKFZ, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Service-Liste: "COLOR_HEX_WHITE"Mechatroniker", str2, "Schließen", "");
        }
        else if(Spieler[playerid][pJob] == 6)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedAWALT[i] == 1)
                    {
                        format(string, sizeof(string), "%s benötigt einen Anwalt! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand benötigt einen Anwalt.");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Du kannst mit /Acceptanwalt [ID] einen Service-Anruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTAWALT, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Service-Liste: "COLOR_HEX_WHITE"Anwalt", str2, "Schließen", "");
        }
        else if(Spieler[playerid][pJob] == 15)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedPIZZA[i] == 1)
                    {
                        format(string, sizeof(string), "%s hat eine Pizza bestellt! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand hat eine Pizza bestellt!");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Du kannst mit /Acceptpizza [ID] einen Service-Anruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTPIZZA, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Service-Liste: "COLOR_HEX_WHITE"Pizza", str2, "Schließen", "");
        }
        else if(Spieler[playerid][pJob] == 16)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedTAXI[i] == 1)
                    {
                        format(string, sizeof(string), "%s hat ein Taxi gerufen! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand hat ein Taxi gerufen!");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Du kannst mit /Accepttaxi [ID] einen Service-Anruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTTAXI, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Service-Liste: "COLOR_HEX_WHITE"Taxi", str2, "Schließen", "");
        }
        else if(Spieler[playerid][pFraktion] == 17)
        {
            new bool:IsOnline;
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                {
                    if(NeedWHEEL[i] == 1)
                    {
                        format(string, sizeof(string), "%s ruft ein Wheelman! (ID: %d) (Nummer: %i)\n", GetName(i), i, Spieler[i][pHandyNr]);
                        strcat(str2, string);
                        IsOnline = true;
                    }
                }
            }
            if(!IsOnline)
            {
                SendClientMessage(playerid, COLOR_RED, "Niemand hat ein Wheelman gerufen!");
                return 1;
            }
            SendClientMessage(playerid, COLOR_BLUE, "INFO: "COLOR_HEX_WHITE"Du kannst mit /Acceptwheel [ID] einen Service-Anruf annehmen!");
            ShowPlayerDialog(playerid, DIALOG_SLISTWHEEL, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Service-Liste: "COLOR_HEX_WHITE"Pizza", str2, "Schließen", "");
        }
    }
    return 1;
}

CMD:acceptcop(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Acceptcop [SpielerID/Name]");
    if( !(( Spieler[playerid][pFraktion] == 1) || ( Spieler[playerid][pFraktion] == 2) || ( Spieler[playerid][pFraktion] == 16)) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if(GetPlayerInterior(pID) > 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem Gebäude.");
    if(NeedCop[pID] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler benötigt kein Polizist. Verwende /sliste um den Notruf Computer einzuschalten.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_ACCEPTCOP);
    format(string, sizeof(string), "Ein Streifenwagen hat dein Notruf übernommen. Die Polizei ist unterwegs zu dir!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "HQ: Polizist %s hat den Notruf von %s (ID: %d) angenommen.", GetName(playerid), GetName(pID), pID);
    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
    NeedCop[pID] = 0;
    return 1;
}

CMD:acceptoamt(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_GREY, "* Benutze /Acceptoamt [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 5)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter!");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if(GetPlayerInterior(pID) > 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem Gebäude.");
    if(NeedOAMT[pID] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler benötigt kein Ordnungsbeamten. Verwende /sliste um die Service-Liste zu sehen.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_ACCEPTOAMT);
    format(string, sizeof(string), "* Du hast den Service-Anruf von %s angenommen, ein Roter Punkt wurde auf der Karte markiert.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Ordnungsbeamter %s hat deinen Service-Anruf angenommen und ist nun unterwegs zu dir!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    NeedOAMT[pID] = 0;
    return 1;
}

CMD:acceptanwalt(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Acceptanwalt [SpielerID/Name]");
    if(Spieler[playerid][pJob] != 6)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Anwalt!");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if(NeedAWALT[pID] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler benötigt kein Anwalt. Verwende /sliste um die Service-Liste zu sehen.");
    format(string, sizeof(string), "* Du hast den Service-Anruf von %s angenommen, gehe nun ins LSPD und rede mit ihm!", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Anwalt %s hat deinen Service-Anruf angenommen und ist nun unterwegs ins LSPD!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    NeedAWALT[pID] = 0;
    return 1;
}

CMD:acceptsani(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Acceptsani [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 3)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter!");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if(GetPlayerInterior(pID) > 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem Gebäude.");
    if(NeedMedic[pID] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler benötigt kein Sanitäter. Verwende /sliste um die Service-Liste zu sehen.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_ACCEPTSANI);
    format(string, sizeof(string), "* Du hast den Notruf von %s angenommen, ein Roter Punkt wurde auf der Karte markiert.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "[RETTUNGSDIENST] Sanitäter %s hat deinen Notruf angenommen und ist nun unterwegs zu dir!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    NeedMedic[pID] = 0;
    return 1;
}

CMD:acceptkfz(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Acceptkfz [SpielerID/Name]");
    if(Spieler[playerid][pJob] != 5)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mechatroniker!");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if(GetPlayerInterior(pID) > 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem Gebäude.");
    if(NeedKFZ[pID] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler benötigt kein Mechatroniker. Verwende /sliste um die Service-Liste zu sehen.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_ACCEPTKFZ);
    format(string, sizeof(string), "* Du hast den Service-Anruf von %s angenommen, ein Roter Punkt wurde auf der Karte markiert.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* KFZ-Mechatroniker %s hat deinen Service-Anruf angenommen und ist nun unterwegs zu dir!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    NeedKFZ[pID] = 0;
    return 1;
}

CMD:accepttaxi(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Accepttaxi [SpielerID/Name]");
    if(Spieler[playerid][pJob] != 16)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Taxifahrer!");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if(GetPlayerInterior(pID) > 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem Gebäude.");
    if(NeedTAXI[pID] == 0)return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler benötigt kein Mechatroniker. Verwende /sliste um die Service-Liste zu sehen.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_ACCEPTKFZ);
    format(string, sizeof(string), "* Du hast den Service-Anruf von %s angenommen, ein Roter Punkt wurde auf der Karte markiert.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Taxifahrer %s hat deinen Service-Anruf angenommen und ist nun unterwegs zu dir!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    NeedTAXI[pID] = 0;
    return 1;
}

CMD:acceptwheel(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Acceptwheel [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 17) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman!");
    if(!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if(GetPlayerInterior(pID) > 0) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem Gebäude.");
    if(NeedWHEEL[pID] == 0) return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler benötigt kein Wheelman. Verwende /sliste um die Service-Liste zu sehen.");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    SetPlayerCheckpointEx(playerid, x,y,z, 5.0, CP_ACCEPTKFZ);
    format(string, sizeof(string), "* Du hast den Service-Anruf von %s angenommen, ein Roter Punkt wurde auf der Karte markiert.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Wheelman %s hat deinen Service-Anruf angenommen und ist nun unterwegs zu dir!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    NeedWHEEL[pID] = 0;
    return 1;
}

CMD:alcbefreien(playerid, params[]) {
    return cmd_knastbefreien(playerid, params);
}

CMD:knastbefreien(playerid, params[]) {
    new pID, dialogOfferText[256];

    if (sscanf(params, "u", pID)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /knastbefreien [Spieler ID / Name]");
    if (Spieler[playerid][pFraktion] != 17) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman!");
    if (!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online!");
    if (pID == playerid) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber keine Befreiung anbieten.");
    if (Spieler[pID][pJailed] != 2) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht im Alcatraz gefangen.");
    if (Spieler[playerid][pJailed] == 2) return SendClientMessage(playerid, COLOR_RED, "Du bist selber im Alcatraz gefangen.");
    if (!(IsPlayerInRangeOfPoint(playerid, 10.0, ALCATRAZ_JAILEDGATE_COORDS) && IsPlayerInRangeOfPoint(pID, 10.0, ALCATRAZ_JAILEDGATE_COORDS))) return SendClientMessage(playerid, COLOR_RED, "Ihr seid nicht beide nahe genug am Alcatraz-Tor.");
    if (GetPVarInt(GetPVarInt(playerid, "WHEELMAN.CUSTOMER"), "WHEELMAN.STATUS") == WHEELMAN_STATUS_ESCAPING) return SendClientMessage(playerid, COLOR_RED, "Du befreist bereits jemanden aus dem Alcatraz.");
    if (GetPVarInt(pID, "WHEELMAN.STATUS") == WHEELMAN_STATUS_HAS_OFFER) return SendClientMessage(playerid, COLOR_RED, "Der Gefangene hat bereits ein Befreiungsangebot erhalten.");
    if (GetPVarInt(pID, "WHEELMAN.STATUS") == WHEELMAN_STATUS_ESCAPING) return SendClientMessage(playerid, COLOR_RED, "Der Gefangene wird bereits von einem Wheelman befreit.");
    if (GetPlayerMoney(pID) < 50000) return SendClientMessage(playerid, COLOR_RED, "Der Gefangene hat nicht genügend Geld dabei, um dich zu bezahlen.");

    new message[128];
    format(message, sizeof(message), "Du hast %s eine Alcatraz-Befreiung angeboten.", GetName(pID));
    SendClientMessage(playerid, COLOR_YELLOW, message);

    format(dialogOfferText, sizeof(dialogOfferText), COLOR_HEX_WHITE "Wheelman %s bietet dir eine Befreiung aus dem Alcatraz an.\nDie Befreiung kostet dich " COLOR_HEX_ORANGE "$50.000 " COLOR_HEX_WHITE "und dauert " COLOR_HEX_ORANGE "4 Minuten" COLOR_HEX_WHITE ".\nDu bezahlst erst bei erfolgreicher Befreiung.", GetName(playerid));
    SetPVarInt(pID, "WHEELMAN.STATUS", WHEELMAN_STATUS_HAS_OFFER);
    SetPVarInt(pID, "WHEELMAN.WHEELMAN", playerid);
    return ShowPlayerDialog(pID, DIALOG_WHEELMAN_OFFER, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE "Wheelman Befreiungsangebot:", dialogOfferText, "Akzeptieren", "Ablehnen");
}
 
CMD:atorhacken(playerid, params[]) {
    if (Spieler[playerid][pFraktion] != 17) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman!");
    if (!IsPlayerInRangeOfPoint(playerid, 10.0, ALCATRAZ_ENTRANCEGATE_FOR_RANGE_COORDS)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Alcatraz-Tors.");
    if (gettime() < alcatrazGateHackTimestamp) return SendClientMessage(playerid, COLOR_RED, "Das Tor wird bereits gehackt!");
   
    new message[128], Float:fX, Float:fY, Float:fZ;
    GetDynamicObjectPos(object_alcatraz_entranceGate, fX, fY, fZ);
    if (fZ == ALCATRAZ_ENTRANCEGATE_OPEN_Z) return SendClientMessage(playerid, COLOR_RED, "Das Tor ist bereits offen.");
 
    GetPlayerPos(playerid, fX, fY, fZ);
    format(message, sizeof(message), "** %s beginnt das Alcatraz-Tor zu hacken **", GetName(playerid));
    SendRoundMessage(fX, fY, fZ, COLOR_ORANGE, message, 20.0);
 
    if (random(2)) {
        SendFraktionMessage(1, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht das Alcatraz-Tor zu hacken!");
        SendFraktionMessage(2, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht das Alcatraz-Tor zu hacken!");
        SendFraktionMessage(16, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht das Alcatraz-Tor zu hacken!");
        SendFraktionMessage(18, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Wheelman versucht das Alcatraz-Tor zu hacken!");
 
        SendClientMessage(playerid, COLOR_RED, "Die Polizei hat dich in den Log-Einträgen erwischt und hat die Zentrale benachrichtigt.");
    }
 
    alcatrazGateHackTimestamp = gettime() + 30;
    return SetTimerEx("WHEELMAN_gateHack_pulse", 2000, false, "dd", playerid, alcatrazGateHackTimestamp);
}
 
forward WHEELMAN_gateHack_pulse(playerid, unixtime);
public WHEELMAN_gateHack_pulse(playerid, unixtime) {
    if (gettime() >= unixtime) {
        alcatrazGateHackTimestamp = 0;
        alcatrazGateHackTimeout = gettime() + 20;

		new Float:fX, Float:fY, Float:fZ;
        GetDynamicObjectPos(object_alcatraz_entranceGate, fX, fY, fZ);

        MoveDynamicObject(object_alcatraz_entranceGate, fX, fY, ALCATRAZ_ENTRANCEGATE_OPEN_Z, 2);
        return SendClientMessage(playerid, COLOR_GREEN, "Du hast es geschafft, das Alcatraz-Tor zu hacken.");
    }
 
    if (Spieler[playerid][pTot] > 0) {
        alcatrazGateHackTimestamp = 0;
        return SendClientMessage(playerid, COLOR_RED, "Du bist gestorben und hast es nicht geschafft, das Alcatraz-Tor zu hacken.");
    }
 
    if (!IsPlayerInRangeOfPoint(playerid, 10.0, ALCATRAZ_ENTRANCEGATE_FOR_RANGE_COORDS)) {
        alcatrazGateHackTimestamp = 0;
        return SendClientMessage(playerid, COLOR_RED, "Du bist zu weit vom Alcatraz-Tor entfernt. Das Hacken wurde abgebrochen.");
    }
 
    return SetTimerEx("WHEELMAN_gateHack_pulse", 2000, false, "dd", playerid, unixtime);
}

CMD:service(playerid)
{
    ShowPlayerDialog(playerid, DIALOG_SERVICE, DIALOG_STYLE_LIST, "Service", "Polizei\nRettungsdienst\nADAC Pannenhilfe\nOrdnungsamt\nTaxi-Service\nPizza-Service\nWheelman-Service\nAnwalt\nDetektiv", "Auswählen", "Abbrechen");
    return 1;
}

CMD:event(playerid, params[])
{
    new eingabe[12], entry, string[128];
    if(Spieler[playerid][pAdmin] < 6)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params, "s[12]i", eingabe, entry))
    {
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Event [Typ] [Anzahl]");
        SendClientMessage(playerid, COLOR_ORANGE, "* Typen *: Respekt, Geld, Gehalt, Level");
        return 1;
    }
    if(strcmp(eingabe, "respekt", true) == 0)
    {
        if(entry < 1 || entry > 10)return SendClientMessage(playerid, COLOR_ORANGE, "Die Respektpunkte müssen zwischen RP1 und RP10 liegen.");
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
            {
                Spieler[i][pExp] += entry;
            }
        }
        format(string, sizeof(string), COLOR_HEX_WHITE"Alle Spieler haben von "COLOR_HEX_ORANGE"%s "COLOR_HEX_GREEN"+%d "COLOR_HEX_WHITE"Respektpunkte erhalten.", GetName(playerid), entry);
        SendClientMessageToAll(COLOR_WHITE, string);
    }
    else if(strcmp(eingabe, "gehalt", true) == 0)
    {
        if(entry < 1 || entry > 10000)return SendClientMessage(playerid, COLOR_ORANGE, "Der Gehalt muss zwischen $1 und $10.000 liegen.");
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
            {
                Spieler[i][pPayCheck] += entry;
            }
        }
        format(string, sizeof(string), COLOR_HEX_WHITE"Alle Spieler haben von "COLOR_HEX_ORANGE"%s "COLOR_HEX_GREEN"$%s "COLOR_HEX_WHITE"für den nächsten Zahltag erhalten.", GetName(playerid), AddDelimiters(entry));
        SendClientMessageToAll(COLOR_WHITE, string);
    }
    else if(strcmp(eingabe, "geld", true) == 0)
    {
        if(entry < 1 || entry > 100000)return SendClientMessage(playerid, COLOR_ORANGE, "Das Geld muss zwischen $1 und $100.000 liegen.");
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
            {
                GivePlayerCash(i, entry);
            }
        }
        format(string, sizeof(string), COLOR_HEX_WHITE"Alle Spieler haben von "COLOR_HEX_ORANGE"%s "COLOR_HEX_GREEN"$%s "COLOR_HEX_WHITE"erhalten.", GetName(playerid), AddDelimiters(entry));
        SendClientMessageToAll(COLOR_WHITE, string);
    }
    if(strcmp(eingabe, "level", true) == 0)
    {
        if(entry < 1 || entry > 3)return SendClientMessage(playerid, COLOR_ORANGE, "Es kann nur 1 bis 3 Levels verschenkt werden!");
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
            {
                Spieler[i][pLevel] += entry;
                SetPlayerScore(playerid, Spieler[i][pLevel]);
            }
        }
        format(string, sizeof(string), COLOR_HEX_WHITE"Alle Spieler haben von "COLOR_HEX_ORANGE"%s "COLOR_HEX_GREEN"+%d "COLOR_HEX_WHITE"Level-Up erhalten.", GetName(playerid), entry);
        SendClientMessageToAll(COLOR_WHITE, string);
    }
    return 1;
}


CMD:navi(playerid)
{
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    ShowPlayerDialog(playerid, DIALOG_NAVI, DIALOG_STYLE_LIST, "Navigation", "Ämter und Behörden\nPolizei u. Notdienste\nFahrschule\nFahrzeugverkauf\nCarSharing-Stationen\nHotel\nBanken\nVersicherungen\n24/7 Shops\nTankstellen\nKleidungsgeschäfte\nRestaurant\nCasinos\nWaffenverkauf\nVerkaufshäuser\nTuning-Garagen\nArbeitsstellen\nGang/Mafien Base\nIllegale Orte\nWeitere Orte", "Markieren", "Abbrechen");
    return 1;
}

CMD:werkstattplatz(playerid)
{
    SetPlayerCheckpointEx(playerid, TUEV_AUTO_POINT, 2.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_GREEN, "Die TÜV-Werkstatt für Autos und Motorräder wurde dir auf der Karte markiert!");
    return 1;
}

CMD:zuweifindekalender(playerid)
{
    SetPlayerCheckpointEx(playerid, 1479.2257,-1609.4260,14.0806, 7.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_GREEN, "Der Adventskalender wurde dir auf der Karte markiert!");
    return 1;
}

CMD:showjob(playerid)
{
    if(Spieler[playerid][pJob] == 0) return SendClientMessage(playerid, COLOR_RED, "Du bist Arbeitslos.");
    else if(Spieler[playerid][pJob] == 1)
    {
        SetPlayerCheckpointEx(playerid, -51.4131,-0.0881,3.1172, 7.0, CP_SHOWJOB1);
    }
    else if(Spieler[playerid][pJob] == 2)
    {
        SetPlayerCheckpointEx(playerid, BUSSTATION_JOBSKIN_POINT, 2.0, CP_SHOWJOB2);
    }
    else if(Spieler[playerid][pJob] == 3)
    {
        SetPlayerCheckpointEx(playerid, 65.0772,-254.8746,1.5781, 7.0, CP_SHOWJOB3);
    }
    else if(Spieler[playerid][pJob] == 4)
    {
        SetPlayerCheckpointEx(playerid, 1962.5402,-2203.2803,13.1212, 7.0, CP_SHOWJOB4);
    }
    else if(Spieler[playerid][pJob] == 5)
    {
        return SendClientMessage(playerid, COLOR_YELLOW, "Die Utility Vans und Jobkleidungspunkte sind an allen Tankstellen in LS zu finden (/navi->Tankstellen).");
        //SetPlayerCheckpointEx(playerid, -78.5111,-1125.9220,1.0781, 7.0, CP_SHOWJOB4);
    }
    else if(Spieler[playerid][pJob] == 6)
    {
        SetPlayerCheckpointEx(playerid, 1541.1398,-1675.4747,13.1065, 7.0, CP_SHOWJOB5);
    }
    else if(Spieler[playerid][pJob] == 7)
    {
        SetPlayerCheckpointEx(playerid, 2059.9531,-1911.7333,13.5469, 7.0, CP_SHOWJOB6);
    }
    else if(Spieler[playerid][pJob] == 8)
    {
        SetPlayerCheckpointEx(playerid, 2112.8879,-2100.7773,13.5469, 7.0, CP_SHOWJOB8);
    }
    else if(Spieler[playerid][pJob] == 9)
    {
        SetPlayerCheckpointEx(playerid, GARDENERBASE_JOBSKIN_POINT, 2.0, CP_SHOWJOB9);
    }
    else if(Spieler[playerid][pJob] == 10)
    {
        SetPlayerCheckpointEx(playerid, 855.4802,861.9259,13.3516, 7.0, CP_SHOWJOB10);
    }
    else if(Spieler[playerid][pJob] == 11)
    {
        SetPlayerCheckpointEx(playerid, 2518.3513,-2248.2808,13.5469, 7.0, CP_SHOWJOB11);
    }
    else if(Spieler[playerid][pJob] == 12)
    {
        SetPlayerCheckpointEx(playerid, 1557.0809,-1020.2286,23.9063, 7.0, CP_SHOWJOB12);
    }
    else if(Spieler[playerid][pJob] == 13)
    {
        SetPlayerCheckpointEx(playerid, 1004.8211,-1350.0563,13.3412, 7.0, CP_SHOWJOB13);
    }
    else if(Spieler[playerid][pJob] == 14)
    {
        return SendClientMessage(playerid, COLOR_ORANGE, "Als Detektiv musst du nirgendwo hin. Nutze /Help!");
    }
    else if(Spieler[playerid][pJob] == 15)
    {
        SetPlayerCheckpointEx(playerid, 2114.5002,-1777.3717,13.3907, 7.0, CP_SHOWJOB6);
    }
    else if(Spieler[playerid][pJob] == 16)
    {
        SetPlayerCheckpointEx(playerid, 1272.3879,-1353.3357,13.5069, 7.0, CP_SHOWJOB6);
    }
    else if(Spieler[playerid][pJob] == 17)
    {
        SetPlayerCheckpointEx(playerid, 318.9959,-60.6508,1.5781, 7.0, CP_SHOWJOB6);
    }
    else if(Spieler[playerid][pJob] == 18)
    {
        SetPlayerCheckpointEx(playerid, 2298.2554,-2350.6294,13.5469, 7.0, CP_SHOWJOB7);
    }
    else if(Spieler[playerid][pJob] == 19)
    {
        return SendClientMessage(playerid, COLOR_YELLOW, "Deine Opfer musst du dir selbst suchen.");
    }
    else if(Spieler[playerid][pJob] == 20)
    {
        SetPlayerCheckpointEx(playerid, 2417.1555,-1220.1472,25.3914, 7.0, CP_SHOWJOB7);
    }
    else if(Spieler[playerid][pJob] == 21)
    {
        SetPlayerCheckpointEx(playerid, WANTEDHACKERBASE_POINT, 2.0, CP_SHOWJOB7);
    }
    else if(Spieler[playerid][pJob] == 22)
    {
        return SendClientMessage(playerid, COLOR_YELLOW, "Suche ein Auto, welches du klauen kannst.");
    }
    else if(Spieler[playerid][pJob] == 23)
    {
        SetPlayerCheckpointEx(playerid, 1735.0045,-1944.0450,13.5681, 7.0, CP_SHOWJOB7);
    }
    else if(Spieler[playerid][pJob] == 24)
    {
        SetPlayerCheckpointEx(playerid, 2384.0181,-1915.5509,13.5469, 7.0, CP_SHOWJOB7);
    }

    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte zu deinem Job angezeigt.");
    return 1;
}
CMD:warenverkaufsstelle1(playerid)
{
    SetPlayerCheckpointEx(playerid, 2187.6926,-2263.8967,13.4674, 7.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte zum Warenverkaufsplatz in Los Santos gesetzt.");
    return 1;
}
CMD:warenverkaufsstelle2(playerid)
{
    SetPlayerCheckpointEx(playerid, 2571.6233,-2226.6980,13.3550, 7.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte zum Warenverkaufsplatz in San Fierro gesetzt.");
    return 1;
}
CMD:warenverkaufsstelle3(playerid)
{
    SetPlayerCheckpointEx(playerid, 1035.9789,2135.8733,10.8203, 7.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte zum Warenverkaufsplatz in Las Venturas gesetzt.");
    return 1;
}
CMD:spritverkaufsstelle1(playerid)
{
    SetPlayerCheckpointEx(playerid, -1034.6223,-626.2365,32.0078, 7.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte zum Spritverkaufsplatz im Vorort Los Santos gesetzt.");
    return 1;
}
CMD:spritverkaufsstelle2(playerid)
{
    SetPlayerCheckpointEx(playerid, 2482.8813,-2084.2239,13.5469, 7.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte zum Spritverkaufsplatz in der Stadt Los Santos gesetzt.");
    return 1;
}
CMD:spritverkaufsstelle3(playerid)
{
    SetPlayerCheckpointEx(playerid, 585.5286,1211.6166,12.0090, 7.0, CP_SHOWJOB1);
    SendClientMessage(playerid, COLOR_WHITE, "Es wurde ein Checkpoint auf der Karte zum Spritverkaufsplatz in Las Venturas gesetzt.");
    return 1;
}
CMD:scheinentziehen(playerid, params[])
{
    new pID, schein[32], string[128];
    if(sscanf(params, "us[32]", pID, schein))
    {
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Scheinentziehen [SpielerID/Name] [Schein]");
        SendClientMessage(playerid, COLOR_ORANGE, "* Scheine *: Fahrschein, Motorradschein, Flugschein, Bootsschein, Awaffenschein, Bwaffenschein");
        SendClientMessage(playerid, COLOR_ORANGE, "* Scheine *: Lkwschein, Angelschein");
        return 1;
    }
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Beamter.");
    if(Spieler[pID][pFraktion] == 1 || Spieler[pID][pFraktion] == 2 || Spieler[pID][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22 )return SendClientMessage(playerid, COLOR_RED, "Du kannst anderen Beamten keine Scheine entziehen.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(strcmp(schein, "fahrschein", true) == 0)
    {
        if(Spieler[pID][pCarLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Führerschein!");
        format(string, sizeof(string), "* Dein Führerschein wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den Führerschein von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pCarLic] = 0;
    }
    else if(strcmp(schein, "angelschein", true) == 0)
    {
        if(Spieler[pID][pFishLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Angelschein.");
        format(string, sizeof(string), "* Dein Angelschein wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den Angelschein von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pFishLic] = 0;
    }
    else if(strcmp(schein, "motorradschein", true) == 0)
    {
        if(Spieler[pID][pMotoLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Motorradschein!");
        format(string, sizeof(string), "* Dein Motorradschein wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den Motorradschein von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pMotoLic] = 0;
    }
    else if(strcmp(schein, "flugschein", true) == 0)
    {
        if(Spieler[pID][pFlyLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Flugschein!");
        format(string, sizeof(string), "* Dein Flugschein wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den Flugschein von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pFlyLic] = 0;
    }
    else if(strcmp(schein, "bootsschein", true) == 0)
    {
        if(Spieler[pID][pBoatLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Bootsschein!");
        format(string, sizeof(string), "* Dein Bootsschein wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den Bootsschein von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pBoatLic] = 0;
    }
    else if(strcmp(schein, "awaffenschein", true) == 0)
    {
        if(Spieler[pID][pGunLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Waffenschein Klasse A!");
        format(string, sizeof(string), "* Dein Waffenschein Klasse A wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den Waffenschein Klasse A von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pGunLic] = 0;
    }
    else if(strcmp(schein, "bwaffenschein", true) == 0)
    {
        if(Spieler[pID][pGunLicB] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Waffenschein Klasse B!");
        format(string, sizeof(string), "* Dein Waffenschein Klasse B wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den Waffenschein Klasse B von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pGunLic] = 0;
    }
    else if(strcmp(schein, "lkwschein", true) == 0)
    {
        if(Spieler[pID][pLKWLic] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen LKW-Schein!");
        format(string, sizeof(string), "* Dein LKW-Schein wurde vom Beamten %s abgenommen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast den LKW-Schein von %s abgenommen.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pLKWLic] = 0;
    }
    return 1;
}

CMD:giveschein(playerid, params[])
{
    new pID, schein[32], string[128];
    if(sscanf(params, "us[32]", pID, schein))
    {
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Giveschein [SpielerID/Name] [Schein]");
        SendClientMessage(playerid, COLOR_ORANGE, "* Scheine *: Fahrschein, Motorradschein, Lkwschein, Flugschein, Bootsschein, Awaffenschein, Bwaffenschein");
        return 1;
    }
    if( ( Spieler[playerid][pFraktion] != 8 ) && ( Spieler[playerid][pAdmin] < 2 ) )return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(strcmp(schein, "fahrschein", true) == 0)
    {
        if(Spieler[pID][pCarLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat den Führerschein bereits!");
        if( gettime() < Spieler[pID][punixFSperre] ) {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat noch eine Lizenzsperre");
        }
        format(string, sizeof(string), "* Du hast den Führerschein von Fahrlehrer %s erhalten.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast %s den Führerschein gegeben.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pCarLic] = 1;
    }
    else if(strcmp(schein, "motorradschein", true) == 0)
    {
        if(Spieler[pID][pMotoLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat den Motorradschein bereits!");
        if( gettime() < Spieler[pID][punixMotoSperre] ) {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat noch eine Lizenzsperre");
        }
        format(string, sizeof(string), "* Du hast den Motorradschein von Fahrlehrer %s erhalten.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast %s den Motorradschein gegeben.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pMotoLic] = 1;
    }
    else if(strcmp(schein, "flugschein", true) == 0)
    {
        if(Spieler[pID][pFlyLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat den Flugschein bereits!");
        if( gettime() < Spieler[pID][punixFlSperre] ) {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat noch eine Lizenzsperre");
        }
        format(string, sizeof(string), "* Du hast den Flugschein von Fahrlehrer %s erhalten.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast %s den Flugschein gegeben.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pFlyLic] = 1;
    }
    else if(strcmp(schein, "bootsschein", true) == 0)
    {
        if(Spieler[pID][pBoatLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat den Bootsschein bereits!");
        format(string, sizeof(string), "* Du hast den Bootsschein von Fahrlehrer %s erhalten.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast %s den Bootsschein gegeben.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pBoatLic] = 1;
    }
    else if(strcmp(schein, "awaffenschein", true) == 0)
    {
        if(Spieler[pID][pGunLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat den Waffenschein Klasse A bereits!");
        if(Spieler[pID][pLevel] < 5)return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss mindestens Level 5 sein!");
        if( gettime() < Spieler[pID][punixGunSperre] ) {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat noch eine Lizenzsperre");
        }
        format(string, sizeof(string), "* Du hast den Waffenschein Klasse A von Fahrlehrer %s erhalten.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast %s den Waffenschein Klasse A gegeben.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pGunLic] = 1;
    }
    else if(strcmp(schein, "bwaffenschein", true) == 0)
    {
        if(Spieler[pID][pGunLicB] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat den Waffenschein Klasse B bereits!");
        if(Spieler[pID][pLevel] < 7)return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss mindestens Level 7 sein!");
        if( gettime() < Spieler[pID][punixGunSperre] ) {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat noch eine Lizenzsperre");
        }
        format(string, sizeof(string), "* Du hast den Waffenschein Klasse B von Fahrlehrer %s erhalten.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast %s den Waffenschein Klasse B gegeben.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pGunLicB] = 1;
    }
    else if(strcmp(schein, "lkwschein", true) == 0)
    {
        if(Spieler[pID][pLKWLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat den LKW-Schein bereits!");
        if( gettime() < Spieler[pID][punixLKWSperre] ) {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat noch eine Lizenzsperre");
        }
        format(string, sizeof(string), "* Du hast den LKW-Schein von Fahrlehrer %s erhalten.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du hast %s den LKW-Schein gegeben.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        Spieler[pID][pLKWLic] = 1;
    }
    return 1;
}

CMD:startstunde(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Startstunde [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 8)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if( playerid == pID ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du kannst die Prüfung nicht bei dir selbst starten!");
    }
    pFahrStunde[pID] = 1;
    format(string, sizeof(string), "* Fahrlehrer %s hat deine Fahrstunde gestartet. Befolge nun seinen Anweisungen!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Du hast die Fahrstunde von %s gestartet. Gebe ihm/ihr nun Anweisungen!", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    return 1;
}
CMD:startwastunde(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Startwastunde [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 8)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pLevel] < 3)return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss mindestens Level 3 erreicht haben!");
    if( playerid == pID ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du kannst die Prüfung nicht bei dir selbst starten!");
    }
    if( gettime() < Spieler[pID][punixGunSperre] ) {
        return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt eine Lizenzsperre!");
    }
    pFahrStunde[pID] = 1;
    format(string, sizeof(string), "* Fahrlehrer %s hat die Waffenschein Kl.A Prüfung gestartet. Befolge nun seinen/ihren Anweisungen!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Du hast die Waffenschein Kl.A Prüfung von %s gestartet. Gebe ihm/ihr nun Anweisungen!", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    GivePlayerWeapon(pID, 24, 29);
    return 1;
}
CMD:startwbstunde(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Startwbstunde [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 8)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pLevel] < 6)return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss mindestens Level 6 erreicht haben!");
    if( playerid == pID ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du kannst die Prüfung nicht bei dir selbst starten!");
    }
    if( gettime() < Spieler[pID][punixGunSperre] ) {
        return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt eine Lizenzsperre!");
    }
    pFahrStunde[pID] = 1;
    format(string, sizeof(string), "* Fahrlehrer %s hat die Waffenschein Kl.B Prüfung gestartet. Befolge nun seinen/ihren Anweisungen!", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Du hast die Waffenschein Kl.B Prüfung von %s gestartet. Gebe ihm/ihr nun Anweisungen!", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    GivePlayerWeapon(pID, 31, 29);
    return 1;
}
CMD:stopstunde(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Stopstunde [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 8)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    pFahrStunde[pID] = 0;
    if(IsPlayerInAnyVehicle(pID)){FreezePlayer(pID); UnfreezePlayer(pID); RemovePlayerFromVehicle(pID);}
    format(string, sizeof(string), "* Fahrlehrer %s hat deine Fahrstunde gestoppt.", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Du hast die Fahrstunde von %s gestoppt.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    return 1;
}
CMD:stopwastunde(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Stopwastunde [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 8)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pLevel] < 3)return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss mindestens Level 3 erreicht haben!");
    pFahrStunde[pID] = 0;
    format(string, sizeof(string), "* Fahrlehrer %s hat die Waffenschein Kl.A Prüfung gestoppt.", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Du hast die Waffenschein Kl.A Prüfung von %s gestoppt.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    ResetPlayerWeapons(pID);
    return 1;
}
CMD:stopwbstunde(playerid, params[])
{
    new pID, string[128];
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Stopwbstunde [SpielerID/Name]");
    if(Spieler[playerid][pFraktion] != 8)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer.");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[pID][pLevel] < 5)return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss mindestens Level 5 erreicht haben!");
    pFahrStunde[pID] = 0;
    format(string, sizeof(string), "* Fahrlehrer %s hat die Waffenschein Kl.B Prüfung gestoppt.", GetName(playerid));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "* Du hast die Waffenschein Kl.B Prüfung von %s gestoppt.", GetName(pID));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    ResetPlayerWeapons(pID);
    return 1;
}

CMD:setlohn(playerid, params[])
{
    new pID, string[128], lohn;
    if(Spieler[playerid][pRank] < 5)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Leader.");
    if(sscanf(params, "ui", pID, lohn))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Setlohn [SpielerID/Name] [Lohn]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(Spieler[playerid][pFraktion] != Spieler[pID][pFraktion])return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Fraktion.");
    if(lohn < 0 || lohn > 40000)return SendClientMessage(playerid, COLOR_RED, "Der Lohn sollte zwischen $1 und $40.000 liegen.");
    Spieler[pID][pFrakLohn] = lohn;
    format(string, sizeof(string), "Dein Lohn wurde von Leader %s auf $%s gesetzt.", GetName(playerid), AddDelimiters(lohn));
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    format(string, sizeof(string), "Du hast den Lohn von %s auf $%s gesetzt.", GetName(pID), AddDelimiters(lohn));
    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    return 1;
}

CMD:setrank(playerid, params[])
{
    new pID, string[128], rankid;
    if(Spieler[playerid][pRank] < 5)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Leader.");
    if(sscanf(params, "ui", pID, rankid))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Setrank [SpielerID/Name] [Rank-ID]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if(pID == playerid)return SendClientMessage(playerid, COLOR_RED, "Du kannst deinen eigenen Rank nicht verändern!");
    if(Spieler[playerid][pFraktion] != Spieler[pID][pFraktion])return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Fraktion.");
    if(Spieler[pID][pRank] > 6)return SendClientMessage(playerid, COLOR_RED, "Du kannst den Rank eines Leaders nicht verändern!");
    if(rankid < 0 || rankid > 5)return SendClientMessage(playerid, COLOR_RED, "Du musst eine Rank-ID zwischen 0 und 5 eingeben.");
    Spieler[pID][pRank] = rankid;
    new rankname[35];
    ReturnPlayerRank(pID, rankname);
    format(string, sizeof(string), "[FRAKTIONS-NEWS] Der Rank von %s wurde von %s geändert. Er ist nun %s.", GetName(pID), GetName(playerid), rankname);
    SendFraktionMessage(Spieler[playerid][pFraktion], COLOR_YELLOW, string);
    format(string, sizeof(string), "Du wurdest von %s auf den Rank %s gestuft.", GetName(playerid), rankname);
    SendClientMessage(pID, COLOR_LIGHTBLUE, string);
    return 1;
}

stock ReturnPlayerRank(playerid, rank[35])
{
    if(Spieler[playerid][pFraktion] == 0)//Zivi
    {
        if(Spieler[playerid][pRank] >= 0){rank="-";}
    }
    else if(Spieler[playerid][pFraktion] == 1)//LSPD
    {
        if(Spieler[playerid][pRank] == 0){rank="LSPD Anwärter";}
        else if(Spieler[playerid][pRank] == 1){rank="LSPD Polizeimeister";}
        else if(Spieler[playerid][pRank] == 2){rank="LSPD Polizeiobermeister";}
        else if(Spieler[playerid][pRank] == 3){rank="LSPD Polizeikommissar";}
        else if(Spieler[playerid][pRank] == 4){rank="LSPD Polizeioberkommissar";}
        else if(Spieler[playerid][pRank] == 5){rank="LSPD Stellv. Direktor";}
        else if(Spieler[playerid][pRank] == 6){rank="LSPD Direktor";}
    }
    else if(Spieler[playerid][pFraktion] == 2)//FBI
    {
        if(Spieler[playerid][pRank] == 0){rank =" FBI Anwärter";}
        else if(Spieler[playerid][pRank] == 1){rank ="FBI Agent";}
        else if(Spieler[playerid][pRank] == 2){rank ="FBI Special Agent";}
        else if(Spieler[playerid][pRank] == 3){rank ="FBI Sturmtruppe";}
        else if(Spieler[playerid][pRank] == 4){rank ="FBI Supervisory Agent";}
        else if(Spieler[playerid][pRank] == 5){rank ="FBI Stellv. Direktor";}
        else if(Spieler[playerid][pRank] == 6){rank ="FBI Direktor";}
    }
    else if(Spieler[playerid][pFraktion] == 3)//SAMD
    {
        if(Spieler[playerid][pRank] == 0){rank="Praktikant";}
        else if(Spieler[playerid][pRank] == 1){rank="Arzthelfer";}
        else if(Spieler[playerid][pRank] == 2){rank="Arzt";}
        else if(Spieler[playerid][pRank] == 3){rank="Oberarzt";}
        else if(Spieler[playerid][pRank] == 4){rank="Hauptarzt";}
        else if(Spieler[playerid][pRank] == 5){rank="Einsatzleitung";}
        else if(Spieler[playerid][pRank] == 6){rank="Direktor";}
    }
    else if(Spieler[playerid][pFraktion] == 4)//SA-NA
    {
        if(Spieler[playerid][pRank] == 0){rank ="Praktikant";}
        else if(Spieler[playerid][pRank] == 1){rank="Zeitungsjunge";}
        else if(Spieler[playerid][pRank] == 2){rank ="Lokalreporter";}
        else if(Spieler[playerid][pRank] == 3){rank ="Lokalredakteur";}
        else if(Spieler[playerid][pRank] == 4){rank ="Netzwerk-Kontrolleur";}
        else if(Spieler[playerid][pRank] == 5){rank ="Netzwerk-Redakteur";}
        else if(Spieler[playerid][pRank] == 6){rank ="News Agentur Chef";}
    }
    else if(Spieler[playerid][pFraktion] == 5)//O-Amt
    {
        if(Spieler[playerid][pRank] == 0){rank ="Praktikant";}
        else if(Spieler[playerid][pRank] == 1){rank ="Abschlepper";}
        else if(Spieler[playerid][pRank] ==2){rank ="Kontrolleur";}
        else if(Spieler[playerid][pRank] == 3){rank ="Ordnungshüter";}
        else if(Spieler[playerid][pRank] == 4){rank ="Abteilungsleiter";}
        else if(Spieler[playerid][pRank] == 5){rank ="Stellv. Leiter";}
        else if(Spieler[playerid][pRank] == 6){rank ="Leiter";}
    }
    else if(Spieler[playerid][pFraktion] == 6)//Grove Street
    {
        if(Spieler[playerid][pRank] == 0){rank ="Bengel";}
        else if(Spieler[playerid][pRank] == 1){rank ="Knecht";}
        else if(Spieler[playerid][pRank] == 2){rank ="Associate";}
        else if(Spieler[playerid][pRank] == 3){rank ="Solidier";}
        else if(Spieler[playerid][pRank] == 4){rank ="Capo";}
        else if(Spieler[playerid][pRank] == 5){rank ="Underboss";}
        else if(Spieler[playerid][pRank] == 6){rank ="BigBoss";}
    }
    else if(Spieler[playerid][pFraktion] == 7)//Ballas
    {
        if(Spieler[playerid][pRank] == 0){rank ="Anfänger";}
        else if(Spieler[playerid][pRank] == 1){rank ="Drogenjunkie";}
        else if(Spieler[playerid][pRank] == 2){rank ="Homie";}
        else if(Spieler[playerid][pRank] == 3){rank ="Gangster";}
        else if(Spieler[playerid][pRank] == 4){rank ="Elite";}
        else if(Spieler[playerid][pRank] == 5){rank ="Zweite Hand";}
        else if(Spieler[playerid][pRank] == 6){rank ="Leiter";}
    }
    else if(Spieler[playerid][pFraktion] == 8)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Praktikant";}
        else if(Spieler[playerid][pRank] == 1){rank ="Fahrlehrer";}
        else if(Spieler[playerid][pRank] == 2){rank ="Fahrlehrer";}
        else if(Spieler[playerid][pRank] == 3){rank ="Fahrlehrer";}
        else if(Spieler[playerid][pRank] == 4){rank ="Fahrlehrer";}
        else if(Spieler[playerid][pRank] == 5){rank ="Fahrlehrer";}
        else if(Spieler[playerid][pRank] == 6){rank ="Leiter";}
    }
    else if(Spieler[playerid][pFraktion] == 9)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Praktikant";}
        else if(Spieler[playerid][pRank] == 1){rank ="Bodyguard";}
        else if(Spieler[playerid][pRank] == 2){rank ="Secret Service";}
        else if(Spieler[playerid][pRank] == 3){rank ="Secret Service Chief";}
        else if(Spieler[playerid][pRank] == 4){rank ="Bürgermeister";}
        else if(Spieler[playerid][pRank] == 5){rank ="Minister";}
        else if(Spieler[playerid][pRank] == 6){rank ="Präsident";}
    }
    else if(Spieler[playerid][pFraktion] == 10)
    {
        if(Spieler[playerid][pRank] == 0){rank = "Yurui";}
        else if(Spieler[playerid][pRank] == 1){rank ="Arjukiou";}
        else if(Spieler[playerid][pRank] == 2){rank ="Shatei";}
        else if(Spieler[playerid][pRank] == 3){rank ="Kyodai";}
        else if(Spieler[playerid][pRank] == 4){rank ="Shotoiumi";}
        else if(Spieler[playerid][pRank] == 5){rank ="Saiko-Koman";}
        else if(Spieler[playerid][pRank] == 6){rank ="Oyabun";}
    }
    else if(Spieler[playerid][pFraktion] == 11)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Novel";}
        else if(Spieler[playerid][pRank] == 1){rank ="Nuevo Amigo";}
        else if(Spieler[playerid][pRank] == 2){rank ="Compareno";}
        else if(Spieler[playerid][pRank] == 3){rank ="Soldato";}
        else if(Spieler[playerid][pRank] == 4){rank ="El Consejero";}
        else if(Spieler[playerid][pRank] == 5){rank = "La Vice Jefe";}
        else if(Spieler[playerid][pRank] == 6){rank = "El Jefe";}
    }
    else if(Spieler[playerid][pFraktion] == 12)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Schuhputzer";}
        else if(Spieler[playerid][pRank] == 1){rank ="Soldato";}
        else if(Spieler[playerid][pRank] == 2){rank ="Picciotti";}
        else if(Spieler[playerid][pRank] == 3){rank ="Membro della Famiglia";}
        else if(Spieler[playerid][pRank] == 4){rank ="Addestratore";}
        else if(Spieler[playerid][pRank] == 5){rank = "Consigliere";}
        else if(Spieler[playerid][pRank] == 6){rank = "Don";}
    }
    else if(Spieler[playerid][pFraktion] == 13)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Lacayo";}
        else if(Spieler[playerid][pRank] == 1){rank ="Miembro";}
        else if(Spieler[playerid][pRank] == 2){rank ="Hermano";}
        else if(Spieler[playerid][pRank] == 3){rank ="Compañero";}
        else if(Spieler[playerid][pRank] == 4){rank ="El Consejero";}
        else if(Spieler[playerid][pRank] == 5){rank = "El Vice Jefe";}
        else if(Spieler[playerid][pRank] == 6){rank = "El Jefe";}
    }
    else if(Spieler[playerid][pFraktion] == 14)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Vollstrecker";}
        else if(Spieler[playerid][pRank] == 1){rank ="Mörder";}
        else if(Spieler[playerid][pRank] == 2){rank ="Serienmörder";}
        else if(Spieler[playerid][pRank] == 3){rank ="Attentäter";}
        else if(Spieler[playerid][pRank] == 4){rank ="Spezialagent";}
        else if(Spieler[playerid][pRank] == 5){rank = "Vorstandsmitglied";}
        else if(Spieler[playerid][pRank] == 6){rank = "Direktor";}
    }
    else if(Spieler[playerid][pFraktion] == 15)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Prospect";}
        else if(Spieler[playerid][pRank] == 1){rank ="Patched Member";}
        else if(Spieler[playerid][pRank] == 2){rank ="Biker";}
        else if(Spieler[playerid][pRank] == 3){rank ="The Enforcer";}
        else if(Spieler[playerid][pRank] == 4){rank ="Captain";}
        else if(Spieler[playerid][pRank] == 5){rank = "Vice-President";}
        else if(Spieler[playerid][pRank] == 6){rank = "President";}
    }
    else if(Spieler[playerid][pFraktion] == 16)
    {
        if(Spieler[playerid][pRank] == 0){rank="LVPD Anwärter";}
        else if(Spieler[playerid][pRank] == 1){rank="LVPD Polizeimeister";}
        else if(Spieler[playerid][pRank] == 2){rank="LVPD Polizeiobermeister";}
        else if(Spieler[playerid][pRank] == 3){rank="LVPD Polizeikommisar";}
        else if(Spieler[playerid][pRank] == 4){rank="LVPD Polizeioberkommisar";}
        else if(Spieler[playerid][pRank] == 5){rank="LVPD Stellv. Direktor";}
        else if(Spieler[playerid][pRank] == 6){rank="LVPD Direktor";}
    }
    else if(Spieler[playerid][pFraktion] == 17)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Hangaround";}
        else if(Spieler[playerid][pRank] == 1){rank ="Prospect";}
        else if(Spieler[playerid][pRank] == 2){rank ="Member";}
        else if(Spieler[playerid][pRank] == 3){rank ="Secratary";}
        else if(Spieler[playerid][pRank] == 4){rank ="Road Captain";}
        else if(Spieler[playerid][pRank] == 5){rank = "Sergeant at Arms";}
        else if(Spieler[playerid][pRank] == 6){rank = "President";}
    }
    else if(Spieler[playerid][pFraktion] == 18)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Army Praktikant";}
        else if(Spieler[playerid][pRank] == 1){rank ="Rekrut";}
        else if(Spieler[playerid][pRank] == 2){rank ="Azubi-SC";}
        else if(Spieler[playerid][pRank] == 3){rank ="Privat-AF";}
        else if(Spieler[playerid][pRank] == 4){rank ="Privat-BT";}
        else if(Spieler[playerid][pRank] == 5){rank = "General-SC";}
        else if(Spieler[playerid][pRank] == 6){rank = "General";}
    }
    else if(Spieler[playerid][pFraktion] == 19)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Terrorist";}
        else if(Spieler[playerid][pRank] == 1){rank ="Terrorist";}
        else if(Spieler[playerid][pRank] == 2){rank ="Terrorist";}
        else if(Spieler[playerid][pRank] == 3){rank ="Terrorist";}
        else if(Spieler[playerid][pRank] == 4){rank ="Terrorist";}
        else if(Spieler[playerid][pRank] == 5){rank = "Terrorist Co. Leader";}
        else if(Spieler[playerid][pRank] == 6){rank = "Terrorist Leader";}
    }
    else if(Spieler[playerid][pFraktion] == 20)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Novo";}
        else if(Spieler[playerid][pRank] == 1){rank ="Reclutador";}
        else if(Spieler[playerid][pRank] == 2){rank ="Principiante";}
        else if(Spieler[playerid][pRank] == 3){rank ="Avasando";}
        else if(Spieler[playerid][pRank] == 4){rank ="Familiar";}
        else if(Spieler[playerid][pRank] == 5){rank = "Hermano";}
        else if(Spieler[playerid][pRank] == 6){rank = "Dirigente";}
    }
    else if(Spieler[playerid][pFraktion] == 21)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Shangwang";}
        else if(Spieler[playerid][pRank] == 1){rank ="Tugong";}
        else if(Spieler[playerid][pRank] == 2){rank ="Shusheng";}
        else if(Spieler[playerid][pRank] == 3){rank ="Chengyuan";}
        else if(Spieler[playerid][pRank] == 4){rank ="Shengyu Jiashu";}
        else if(Spieler[playerid][pRank] == 5){rank = "Youshou De Jiazu";}
        else if(Spieler[playerid][pRank] == 6){rank = "Shangsi";}
    }
    else if(Spieler[playerid][pFraktion] == 21)
    {
        if(Spieler[playerid][pRank] == 0){rank ="Zollanwärter";}
        else if(Spieler[playerid][pRank] == 1){rank ="Zollbeamter";}
        else if(Spieler[playerid][pRank] == 2){rank ="Zolloberwachtmeister";}
        else if(Spieler[playerid][pRank] == 3){rank ="Zollhauptwachtmeister";}
        else if(Spieler[playerid][pRank] == 4){rank ="Zollamt Ausbilder";}
        else if(Spieler[playerid][pRank] == 5){rank = "Zollamt Co. Leader";}
        else if(Spieler[playerid][pRank] == 6){rank = "Zollamt Leader";}
    }
    return rank;
}

stock IsBicycle(carid)
{
    if(carid == 481 || carid == 509 || carid == 510)
    {
        return 1;
    }
    return 0;
}

stock SendGlobalMessage(color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(pGC[i])
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}

stock SendFraktionMessage(frakid, color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pFraktion] == frakid)
            {
                if(pFC[i])
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }

    return 1;
}
stock SendClubMessage(color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pDonateRank] >= 1)
            {
                if(pCC[i])
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }
}

stock SendGlobalChatMessage(color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(pGC[i])
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}

stock SendJobMessage(job, color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pJob] == job)
            {
                if(pJC[i])
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }
}

stock SendHelferMessage(color, string[])
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pKFZSteuer] >= 1)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

stock SendAdminMessage(color, string[])
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAdmin] >= 1)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

stock SendModMessage(color, string[])
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAdmin] >= 3)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

stock SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:size, var)
{
    if(var == 0)
    {
        DisablePlayerCheckpoint(playerid);
        pCheckpoint[playerid] = CP_NONE;
        return 1;
    }
    pCheckpoint[playerid] = var;
    SetPlayerCheckpoint(playerid, x,y,z,size);
    return 1;
}
stock DisablePlayerCheckpointEx(playerid)
{
    pCheckpoint[playerid] = CP_NONE;
    DisablePlayerCheckpoint(playerid);
}
forward IsAExhaust(componentid);
public IsAExhaust(componentid)
{
    if(componentid >= 1018 && componentid <= 1022)
    {
        return 1;
    }
    if(componentid >= 1028 && componentid <= 1029)
    {
        return 1;
    }
    if(componentid == 1037 || componentid == 1059 || componentid == 1089 || componentid == 1092 || componentid == 1132)
    {
        return 1;
    }
    if(componentid == 1104 || componentid == 1105 || componentid == 1113 || componentid == 1114 || componentid == 1129)
    {
        return 1;
    }
    if(componentid == 1135 || componentid == 1136)
    {
        return 1;
    }
    if(componentid >= 1043 && componentid <= 1046)
    {
        return 1;
    }
    if(componentid >= 1126 && componentid <= 1127)
    {
        return 1;
    }
    if(componentid >= 1064 && componentid <= 1066)
    {
        return 1;
    }
    return 0;
}

forward IsAWheel(componentid);
public IsAWheel(componentid)
{
    if(componentid >= 1073 && componentid <= 1085)
    {
        return 1;
    }
    if(componentid >= 1096 && componentid <= 1098)
    {
        return 1;
    }
    if(componentid == 1025)
    {
        return 1;
    }
    return 0;
}

forward IsASideR(componentid);
public IsASideR(componentid)
{
    if(componentid == 1007)
    {
        SideL = 1017;
        return 1;
    }
    if(componentid == 1026)
    {
        SideL = 1027;
        return 1;
    }
    if(componentid == 1030)
    {
        SideL = 1031;
        return 1;
    }
    if(componentid == 1040)
    {
        SideL = 1036;
        return 1;
    }
    if(componentid == 1041)
    {
        SideL = 1039;
        return 1;
    }
    if(componentid == 1042)
    {
        SideL = 1099;
        return 1;
    }
    if(componentid == 1051)
    {
        SideL = 1047;
        return 1;
    }
    if(componentid == 1048)
    {
        SideL = 1052;
        return 1;
    }
    if(componentid == 1056)
    {
        SideL = 1062;
        return 1;
    }
    if(componentid == 1063)
    {
        SideL = 1057;
        return 1;
    }
    if(componentid == 1069)
    {
        SideL = 1071;
        return 1;
    }
    if(componentid == 1072)
    {
        SideL = 1070;
        return 1;
    }
    if(componentid == 1094)
    {
        SideL = 1090;
        return 1;
    }
    if(componentid == 1093)
    {
        SideL = 1095;
        return 1;
    }
    if(componentid == 1122)
    {
        SideL = 1101;
        return 1;
    }
    if(componentid == 1102)
    {
        SideL = 1133;
        return 1;
    }
    if(componentid == 1124)
    {
        SideL = 1106;
        return 1;
    }
    if(componentid == 1107)
    {
        SideL = 1108;
        return 1;
    }
    if(componentid == 1118)
    {
        SideL = 1120;
        return 1;
    }
    if(componentid == 1137)
    {
        SideL = 1134;
        return 1;
    }
    return 0;
}

forward IsASideL(componentid);
public IsASideL(componentid)
{
    if(componentid == 1134)
    {
        SideR = 1137;
        return 1;
    }
    if(componentid == 1119)
    {
        SideR = 1121;
        return 1;
    }
    if(componentid == 1120)
    {
        SideR = 1118;
        return 1;
    }
    if(componentid == 1108)
    {
        SideR = 1107;
        return 1;
    }
    if(componentid == 1017)
    {
        SideR = 1007;
        return 1;
    }
    if(componentid == 1027)
    {
        SideR = 1026;
        return 1;
    }
    if(componentid == 1031)
    {
        SideR = 1030;
        return 1;
    }
    if(componentid == 1036)
    {
        SideR = 1040;
        return 1;
    }
    if(componentid == 1039)
    {
        SideR = 1041;
        return 1;
    }
    if(componentid == 1099)
    {
        SideR = 1042;
        return 1;
    }
    if(componentid == 1047)
    {
        SideR = 1051;
        return 1;
    }
    if(componentid == 1052)
    {
        SideR = 1048;
        return 1;
    }
    if(componentid == 1062)
    {
        SideR = 1056;
        return 1;
    }
    if(componentid == 1057)
    {
        SideR = 1063;
        return 1;
    }
    if(componentid == 1071)
    {
        SideR = 1069;
        return 1;
    }
    if(componentid == 1070)
    {
        SideR = 1072;
        return 1;
    }
    if(componentid == 1090)
    {
        SideR = 1094;
        return 1;
    }
    if(componentid == 1095)
    {
        SideR = 1093;
        return 1;
    }
    if(componentid == 1095)
    {
        SideR = 1093;
        return 1;
    }
    if(componentid == 1101)
    {
        SideR = 1122;
        return 1;
    }
    if(componentid == 1133)
    {
        SideR = 1102;
        return 1;
    }
    if(componentid == 1106)
    {
        SideR = 1124;
        return 1;
    }
    return 0;
}

forward IsAFB(componentid);
public IsAFB(componentid)
{
    if(componentid >= 1152 && componentid <= 1153 || componentid >= 1165 && componentid <= 1166)
    {
        return 1;
    }
    if(componentid == 1155 || componentid == 1157 || componentid == 1160 || componentid == 1176 || componentid == 1179 || componentid == 1185)
    {
        return 1;
    }
    if(componentid >= 1169 && componentid <= 1174 || componentid >= 1181 && componentid <= 1182)
    {
        return 1;
    }
    if(componentid >= 1188 && componentid <= 1191)
    {
        return 1;
    }
    return 0;
}

forward IsARB(componentid);
public IsARB(componentid)
{
    if(componentid >= 1140 && componentid <= 1141 || componentid >= 1148 && componentid <= 1151)
    {
        return 1;
    }
    if(componentid == 1154 || componentid == 1156 || componentid == 1159 || componentid == 1161 || componentid == 1175 || componentid == 1180)
    {
        return 1;
    }
    if(componentid >= 1167 && componentid <= 1168 || componentid >= 1177 && componentid <= 1178)
    {
        return 1;
    }
    if(componentid >= 1183 && componentid <= 1184 || componentid >= 1186 && componentid <= 1187)
    {
        return 1;
    }
    if(componentid >= 1192 && componentid <= 1193)
    {
        return 1;
    }
    return 0;
}

forward IsASpoiler(componentid);
public IsASpoiler(componentid)
{
    if(componentid >= 1000 && componentid <= 1003 || componentid >= 1014 && componentid <= 1016)
    {
        return 1;
    }
    if(componentid == 1023 || componentid == 1058 || componentid == 1158)
    {
        return 1;
    }
    if(componentid >= 1049 && componentid <= 1050 || componentid >= 1138 && componentid <= 1139)
    {
        return 1;
    }
    if(componentid >= 1146 && componentid <= 1147 || componentid >= 1162 && componentid <= 1164)
    {
        return 1;
    }
    return 0;
}

forward IsARoof(componentid);
public IsARoof(componentid)
{
    if(componentid >= 1032 && componentid <= 1033 || componentid >= 1053 && componentid <= 1055)
    {
        return 1;
    }
    if(componentid == 1035 || componentid == 1038 || componentid == 1061 || componentid == 1088 || componentid == 1091)
    {
        return 1;
    }
    if(componentid == 1103 || componentid == 1128)
    {
        return 1;
    }
    if(componentid >= 1067 && componentid <= 1068 || componentid >= 1130 && componentid <= 1131)
    {
        return 1;
    }
    return 0;
}

stock LoadPlayerCars(playerid) {
    new
        Query[128];
    for(new i = 0 ; i < MaxVeh ; i++) {
        PlayerCar[playerid][i][CarId] = INVALID_VEHICLE_ID;
        PlayerHaveCar[playerid][i] = 0;
    }
    format(Query,sizeof(Query),"SELECT * FROM `playercar` WHERE `Owner` = '%s' LIMIT %d",GetName(playerid), MaxVehicles(playerid) );
    mysql_pquery(Query , THREAD_LOADPLAYERCARS , playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

stock ini_GetKey( line[] )
{
    new keyRes[256];
    keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
    new valRes[256];
    valRes[0]=0;
    if ( strfind( line , "=" , true ) == -1 ) return valRes;
    strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
    return valRes;
}




IsAutohausCar(carid)
{
    new i;
    for(i=0; i<sizeof(Kaufliste); i++)
    {
        if(Kaufliste[i][Carid]==carid) { return i; }
    }
    return -1;
}

public PlayerCarSpawn(playerid,Slot)
{
    if(IsPlayerConnected(playerid))
    {
        if(!PlayerHaveCar[playerid][Slot])
        {
            PlayerHaveCar[playerid][Slot] = 1;
            PlayerCar[playerid][Slot][ObjectIDNeon1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][Slot][ObjectIDNeon2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][Slot][CarId] = INVALID_VEHICLE_ID;
            if( PlayerCar[playerid][Slot][CarState] == e_Vehicle_Status_Destroyed ) {
                printf("Ein Fahrzeug von %s wird nicht gespawnt da Destroyed",GetName(playerid));
                return false;
            }
            PlayerCar[playerid][Slot][CarId] = CreateVehicle(PlayerCar[playerid][Slot][CarModel],PlayerCar[playerid][Slot][CarPos_x],PlayerCar[playerid][Slot][CarPos_y],PlayerCar[playerid][Slot][CarPos_z],PlayerCar[playerid][Slot][CarRotate],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2], 60000);/*vehicle spawn*/
            aiVehicles[PlayerCar[playerid][Slot][CarId]] = VEH_PRIVAT;
            //CreatePeilsender(playerid,Slot);
            //printf("PlayerCarSpawn(%d,%d) %d",playerid,Slot,PlayerCar[playerid][Slot][CarId]);
            //new snp[24];
            //format(snp, 24, "%s", GetName(playerid));
            if( !strcmp(PlayerCar[playerid][Slot][CarNumberplate],KEIN_KENNZEICHEN)) {
                SetVehicleNumberPlate(PlayerCar[playerid][Slot][CarId], "." );
            }
            else {
                SetVehicleNumberPlate(PlayerCar[playerid][Slot][CarId], PlayerCar[playerid][Slot][CarNumberplate] );
            }
            SetVehicleToRespawn( PlayerCar[playerid][Slot][CarId] );
            ChangeVehicleColor(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2]);
            if(PlayerCar[playerid][Slot][ObjectIDNeon1] > 0 || PlayerCar[playerid][Slot][ObjectIDNeon2] > 0)
            {
                DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon1]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon2]);
            }
            if(PlayerCar[playerid][Slot][isSpecialTuned] > 0)
            {
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned1]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned2]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned3]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned4]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned5]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned6]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned7]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned8]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned9]);
            }
            if(PlayerCar[playerid][Slot][CarPJ] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarPJ]);}
            if(PlayerCar[playerid][Slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarNitro]);}
            if(PlayerCar[playerid][Slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHyd]);}
            if(PlayerCar[playerid][Slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarWheel]);}
            if(PlayerCar[playerid][Slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarAusp]);}
            if(PlayerCar[playerid][Slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideL]);}
            if(PlayerCar[playerid][Slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideR]);}
            if(PlayerCar[playerid][Slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarFB]);}
            if(PlayerCar[playerid][Slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRB]);}
            if(PlayerCar[playerid][Slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSpoiler]);}
            if(PlayerCar[playerid][Slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRoof]);}
            if(PlayerCar[playerid][Slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHood]);}
            if(PlayerCar[playerid][Slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarVents]);}
            if(PlayerCar[playerid][Slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarLamps]);}
            if(PlayerCar[playerid][Slot][CarNeon1] != 0){ PlayerCar[playerid][Slot][ObjectIDNeon1] =CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon1], 0,0,0,0,0,0,0); AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon1] , PlayerCar[playerid][Slot][CarId], -0.8, 0.0, -0.8, 0.0, 0.0, 0.0);}
            if(PlayerCar[playerid][Slot][CarNeon2] != 0){ PlayerCar[playerid][Slot][ObjectIDNeon2] = CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon2], 0,0,0,0,0,0,0); AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon2] , PlayerCar[playerid][Slot][CarId], 0.8, 0.0, -0.8, 0.0, 0.0, 0.0);}
            if(PlayerCar[playerid][Slot][isSpecialTuned] != 0)
            {
                if(PlayerCar[playerid][Slot][isSpecialTuned] == 1)
                {
                    PlayerCar[playerid][Slot][SpecialTuned1] = CreateDynamicObject(1166, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned2] = CreateDynamicObject(1168, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned3] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned4] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned5] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned6] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned7] = CreateDynamicObject(1091, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned8] = CreateDynamicObject(1164, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned9] = CreateDynamicObject(1034, 0,0,0,0,0,0,0);
                }
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned1], PlayerCar[playerid][Slot][CarId], 1.024999, 2.080000, -0.090000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned2], PlayerCar[playerid][Slot][CarId], -1.066002, -1.774998, -0.130000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned3], PlayerCar[playerid][Slot][CarId], -0.946998, 0.149999, -0.589998, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned4], PlayerCar[playerid][Slot][CarId], -0.981998, -0.169999, -0.589998, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned5], PlayerCar[playerid][Slot][CarId], 1.008000, -0.169999, -0.589998, 0.000001, -179.995712, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned6], PlayerCar[playerid][Slot][CarId], 0.978000, 0.174999, -0.589998, 0.000001, -179.995712, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned7], PlayerCar[playerid][Slot][CarId], -0.006999, 0.244999, 0.648500, 0.000001, -0.000116, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned8], PlayerCar[playerid][Slot][CarId], 0.000000, -2.470009, 0.368500, 0.000001, -0.000116, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned9], PlayerCar[playerid][Slot][CarId], -0.009999, -0.240000, -0.106499, 0.000001, -0.000116, 0.000000);

                if(PlayerCar[playerid][Slot][isSpecialTuned] == 2)
                {
                    PlayerCar[playerid][Slot][SpecialTuned1] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned2] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned3] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned4] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned5] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned6] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                }
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned1], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned2], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned3], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned4], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned5], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned6], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);

                if(PlayerCar[playerid][Slot][isSpecialTuned] == 3)
                {
                    PlayerCar[playerid][Slot][SpecialTuned1] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned2] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned3] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned4] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                }
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned1], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned2], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned3], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned4], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            }

            gGas[PlayerCar[playerid][Slot][CarId]] = PlayerCar[playerid][Slot][CarTank];
            RadioSender[PlayerCar[playerid][Slot][CarId]] = 0;
            gMaxGas[PlayerCar[playerid][Slot][CarId]] = GetMaxTank(PlayerCar[playerid][Slot][CarId]);
            g_VehicleDistance[ PlayerCar[playerid][Slot][CarId] ] = PlayerCar[playerid][Slot][CarDistance];

            LockCar(PlayerCar[playerid][Slot][CarId]);
        }
    }
    return true;
}


public OnPlayerCarUpdate(playerid)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(PlayerHaveCar[playerid][x])
        {
            if( PlayerCar[playerid][x][CarId] == INVALID_VEHICLE_ID) {
                continue;
            }

            SavePlayerCar(playerid,x);
            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon2]);

            DestroyVehicle(PlayerCar[playerid][x][CarId]);
            //DestroyPeilsender(playerid,x);
            aiVehicles[ PlayerCar[playerid][x][CarId] ] = VEH_INVALID;

            if(PlayerCar[playerid][x][isSpecialTuned] > 0)
            {
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned1]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned2]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned3]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned4]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned5]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned6]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned7]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned8]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned9]);
            }
            PlayerCar[playerid][x][SpecialTuned1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned3] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned4] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned5] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned6] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned7] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned8] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned9] = INVALID_OBJECT_ID;

            PlayerCar[playerid][x][ObjectIDNeon1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][ObjectIDNeon2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][CarState] = e_Vehicle_Status_Normal;

            PlayerCar[playerid][x][CarId] = INVALID_VEHICLE_ID;
            PlayerCar[playerid][x][Id] = 0;
            PlayerHaveCar[playerid][x] = 0;
        }
    }
    return 1;
}

stock LockCar(carid)
{
    new engine, light, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(carid, engine, light, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(carid, engine, light, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
}

stock UnLockCar(carid)
{
    new engine, light, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(carid, engine, light, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(carid, engine, light, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
}

forward CheckGas();
public CheckGas()
{
    new engine, light, alarm, doors, bonnet, boot, objective;
    for(new i=1 ; i<MAX_VEHICLES ; i++)
    {
        GetVehicleParamsEx(i, engine, light, alarm, doors, bonnet, boot, objective);
        if(!(engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF))
        {
            // Motor an
            // printf("aiVehicles[%d] = %d",i,aiVehicles[i]);
            //if( !(VEH_DROGEN <= aiVehicles[i] <= VEH_KFZCARS) ) {
                if(!IsBicycle( GetVehicleModel(i) ))
                {
                    if(gGas[i] >= 1)
                    {
                        gGas[i] --;
                        for(new playerid;playerid<MAX_PLAYERS;playerid++)
                        {
                            if(IsPlayerConnected(playerid))
                            {
                                if(!IsPlayerNPC(playerid))
                                {
                                    if(fuelcountactive[playerid]==1&&GetPlayerVehicleID(playerid)==i)
                                    {
                                        fuelcount[playerid]++;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        GetVehicleParamsEx(i, engine, light, alarm, doors, bonnet, boot, objective);
                        SetVehicleParamsEx(i, VEHICLE_PARAMS_OFF, light, alarm, doors, bonnet, boot, objective);
                    }
                }
            //}
        }
    }
    return 1;
}


// playerid,menge,price,RefuelType[playerid]
forward Fillup(playerid,menge,price,benzinart, method);
public Fillup(playerid,menge,price,benzinart, method)
{
    if(IsPlayerConnected(playerid))
    {
        new vID = GetPlayerVehicleID(playerid);
        new string[128];
        new t = IsPlayerAtTanke(playerid);

        Refueling[playerid] = 0;
        if (vID) vehicleRefueling[vID] = 0;

        if(t == 999)
        {
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
            UnfreezePlayer(playerid);
            return 1;
        }

        if(!IsPlayerInAnyVehicle(playerid)){
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Fahrzeug.");
            UnfreezePlayer(playerid);
            return 1;
        }

        if (!method && Spieler[playerid][pCash] >= price || method && Spieler[playerid][pBank] >= price) {
            gGas[vID] += menge;
            if (gGas[vID] > gMaxGas[vID]) gGas[vID] = gMaxGas[vID];
            Tanke[t][tBenzin] -= menge;
            Tanke[t][tKasse] += price;
            format(string, sizeof(string), "* Du hast dein Fahrzeug für $%s (%d Liter %s) aufgetankt.", AddDelimiters(price),menge,g_asKraftstoff[benzinart]);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            UnfreezePlayer(playerid);
            if (!method) GivePlayerCash(playerid, -price);
            else Spieler[playerid][pBank] -= price;
        }
        else
        {
            UnfreezePlayer(playerid);
            SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld, um dein Fahrzeug auftanken zu können.");
            return 1;
        }
    }
    return 1;
}

stock IsPlayerAtAngelPlatz(playerid)
{
    for(new a=0;a<iAngel;a++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, Angel[a][PosX], Angel[a][PosY], Angel[a][PosZ]))
        {
            return a;
        }
    }
    return 999;
}

stock IsPlayerAtATM(playerid)
{
    for(new at=0;at<sizeof(ATM);at++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, ATM[at][0], ATM[at][1], ATM[at][2]))
        {
            return 1;
        }
    }
    return 0;
}

forward ChangeWeather();
public ChangeWeather()
{
    new zuf = 2 + random(18);
    SetWeatherEx(zuf);
    CurWeather = zuf;
    return 1;
}


/*forward IntAndVwWFix();
public IntAndVwWFix()
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if( IsPlayerConnected(i) ) {
            if(!(GetPlayerInterior(i) > 0 || GetPlayerVirtualWorld(i) > 0))
            {
                if(pDrogenEinfluss[i] == 0)
                {
                    SetPlayerWeather(i, 0);
                }
                else
                {
                    SetPlayerWeather(i, 2009);
                }
            }
            else
            {
                if(pDrogenEinfluss[i] == 0)
                {
                    SetPlayerWeather(i, 0);
                }
                else
                {
                    SetPlayerWeather(i, 2009);
                }
            }
        }
    }
    return 1;
}*/
/*
stock IsNumeric(const string[]) //By Jan "DracoBlue" Schütze (edited by Gabriel "Larcius" Cordes
{
    new length=strlen(string);
    if(length==0)
    {
        return false;
    }
    for (new i=0; i<length; i++)
    {
        if (!((string[i] <= '9' && string[i] >= '0') || (i==0 && (string[i]=='-' || string[i]=='+'))))
        {
            return false;
        }
    }

    return true;
}
*/

stock isNumeric(const string[])
{
  new length=strlen(string);
  if (length==0) return false;
  for (new i = 0; i < length; i++)
    {
      if (
            (string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') // Not a number,'+' or '-'
             || (string[i]=='-' && i!=0)                                             // A '-' but not at first.
             || (string[i]=='+' && i!=0)                                             // A '+' but not at first.
         ) return false;
    }
  if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
  return true;
}

stock ForbiddenGun(playerid)
{
    new weap = GetPlayerWeapon(playerid);
    if( weap == 7 || weap == 15 || weap == 16 || weap == 18 || weap == 26 || weap == 28|| weap == 32 || weap == 35 || weap == 36 || weap == 37 || weap== 38 || weap == 44 || weap == 45)
    {
        return 1;
    }
    return 0;
}
stock LoadPlayerWeaponArray(playerid) {
    new
        weapon,
        muni,
        weapondata[47];
    for (new j = 0; j < 13; j++) {
        GetPlayerWeaponData(playerid, j, weapon, muni );
        weapondata[ weapon ] = muni;
    }
    return weapondata;
}

stock HasIllegalWeapon(playerid) {
    new
        forbiddenweapons[] = { 3,4,7,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45 },
        weapondata[47];
    weapondata = LoadPlayerWeaponArray(playerid);
    for(new i = 0 ; i < sizeof(forbiddenweapons) ; i++) {
        if( weapondata[ forbiddenweapons[i] ] > 0 ) {
            return 1;
        }
    }
    return 0;
}
forward DetectHacks();
public DetectHacks() {
    new
        now = gettime(),
        speed,
        Float:vx,
        Float:vy,
        Float:vz,
        query[256],
        querystring[256],
        string[128];
    for(new i ; i < MAX_PLAYERS ; i++ ) {
        if( IsPlayerConnected(i) && Spieler[i][pAdmin] < 5) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            // Jetpack
            if( GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK ) {
                format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Jetpack", GetName(i));
                SendAdminMessage(COLOR_RED, string);
                Spieler[i][pBanned] = 1;

                format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Jetpack Hack!") );
                mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                    ("Server-System"),("Jetpack"),GetName(i));
                mysql_oquery(query,THREAD_JETPACK_HACK, INVALID_PLAYER_ID,gSQL);

                KickDelay(i);
                Ban(i);

                continue;
            }
            // Waffen
            if( Spieler[i][pLevel] < 3 ) {
                if( HasIllegalWeapon(i) ) {
                    printf("Spieler %s ist unter Level 3 und besitzt Illegale Waffen",GetName(i) );
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Waffenhack", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Waffenhack!") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Waffenhack"),GetName(i));
                    mysql_oquery(query,THREAD_WEAPON_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    Ban(i);
                    continue;
                }
            }
            if( Spieler[i][pLevel] < 5 ) {
                if( Spieler[i][pCash] >= 2500000 || Spieler[i][pBank] >= 3500000) {
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Verdacht auf Geldwäsche", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Verdacht auf Geldhack!") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Verdacht auf Geldhack"),GetName(i));
                    mysql_oquery(query,THREAD_MONEY_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    continue;
                }
            }
            if( Spieler[i][pLevel] < 15 ) {
                if( Spieler[i][pCash] >= 100000000 || Spieler[i][pBank] >= 100000000) {
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Verdacht auf Geldwäsche", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Verdacht auf Geldhack!") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Verdacht auf Geldhack"),GetName(i));
                    mysql_oquery(query,THREAD_MONEY_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    continue;
                }
            }
            /*
            else {
                if( HasIllegalWeapon(i) ) {
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Waffenhack", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Waffen Hack per Script gefunden") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Waffenhack"),GetName(i));
                    mysql_oquery(query,THREAD_WEAPON_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    continue;
                }
            }
            */
            // Flyhack
            if( !IsPlayerInAnyVehicle(i) && ( Spieler[i][punixFlyhack] < now ) && (( Spieler[i][unixUpdate] + 5 ) > now ) ) {
                GetPlayerVelocity(i,vx,vy,vz);
                speed = floatround( floatpower( vx * vx + vy * vy + vz * vz , 0.5 )  * 100.0 * 2.0);
                if( speed >= 130 ) {
                    format(string,sizeof(string),"[ACHTUNG] Spieler %s FlyHack Warnung: %dKm/h",GetName(i),speed);
                    SendAdminMessage(COLOR_LIGHTRED2,string);
                    Spieler[i][punixFlyhack] = now + 8;
                }
            }
        }
    }
    return 1;
}



public split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc)){
        if(strsrc[i]==delimiter || i==strlen(strsrc)){
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    damagesperre[playerid]=20;
    g_aiLastDamagedByPlayer[playerid] = issuerid;
    if( issuerid != INVALID_PLAYER_ID) {
        PlayerPlaySound(issuerid,17802,0.0,0.0,0.0);
        if( 1 <= Spieler[playerid][pTot] <= 2 ) {
            SetPlayerHealth(playerid,100.0); // Kann man es irgendwie verhindern, dass man kein Leben verliert wenn man Tod ist?
            return 1;
        }
        // Headshot Script von dir, soll NUR für Hitmans eingestellt werden und nur bei der Zielperson funktionieren.
        if( Spieler[issuerid][pFraktion] == 14 ) {
            if(weaponid == 34 ) {
                if(bodypart == 9) {
                    new
                        auftraggeber = Spieler[issuerid][pHitmenAuftragID];
                    if( auftraggeber != INVALID_PLAYER_ID && IsPlayerConnected(auftraggeber) ) {
                        if( Spieler[auftraggeber][pKopfgeldID] == playerid ) {
                            SetPlayerHealth(playerid, 0.0);
                            GameTextForPlayer(playerid, "~r~HEADSHOT", 2000, 1);
                        }
                    }
                }
            }
        }
    }
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
    if(1 <= Spieler[playerid][pJailed] <= 3)
    {
        FreezePlayer(playerid);
        KillTimer(knastunfreezetimer[playerid]);
        SendClientMessage(playerid, COLOR_ORANGE, "Du wurdest für 1 Minuten gefreezed wegen Knast-DM.");
        knastunfreezetimer[playerid] = SetTimerEx("KnastUnfreeze", 60000*1, 0, "i", playerid);
    }
    return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    return 1;
}

forward MySQL_Connection_Check();
public MySQL_Connection_Check() {
    if( MySQLConnected == 0 ) {
        print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        SendRconCommand("exit");
    }
    #if defined Testserveran
    #else
    else if( MySQLConnected == 1 ) {
        print("<-| [MYSQL] WebSQL Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        SendRconCommand("exit");
    }
    #endif
    else if( MySQLConnected == 2 ) {
    }
    return 1;
}
stock Connect_To_Database()
{
    #if defined Testserveran
    mysql_log( LOG_ALL , LOG_TYPE_HTML);
    #endif
    gSQL = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS); //Wir versuchen mit den Angaben die wir oben im Script gemacht haben uns mit dem MySQL Server zu verbinden.
    mysql_oquery("SELECT 1", THREAD_CONNECTION_CHECK1 , INVALID_PLAYER_ID ,gSQL);
    tMySQL = SetTimer("MySQL_Connection_Check",5003,false);
/*    if(mysql_ping() == 1) //Es wird überprüft ob die Verbindung steht.
    {
        //Falls ja wird das in die Console geschrieben und die Funktion wird beendet.
        print("<-| [MYSQL] Verbindung zur Datenbank wurde erfolgreich hergestellt!");
    }
    else
    {
        //Falls nicht wird erneut versucht eine Verbindung aufzubauen.
        print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        print("<-| [MYSQL] Es wird erneut versucht eine Verbindung zur Datenbank herzustellen!");
        gSQL = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS);
        if(mysql_ping() == 1)
        {
            print("<-| [MYSQL] Es konnte im 2 Versuch eine Verbindung hergestellt werden!");
        }
        else
        {
            //Falls das auch nicht Funktioniert wird der Server zur Sicherheit wieder heruntergefahren.
            print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
            print("<-| [MYSQL] Der Server wird nun beendet!");
            SendRconCommand("exit");
        }
    }
 //   gWebSQL = mysql_connect(WEBSQL_HOST, WEBSQL_USER, WEBSQL_DATA, WEBSQL_PASS);
    if(mysql_ping(gWebSQL) == 1) //Es wird überprüft ob die Verbindung steht.
    {
        //Falls ja wird das in die Console geschrieben und die Funktion wird beendet.
        print("<-| [MYSQL] WebSQL Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        return true;
    }
    else
    {
        //Falls nicht wird erneut versucht eine Verbindung aufzubauen.
        print("<-| [MYSQL] WebSQL Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        print("<-| [MYSQL] WebSQL Es wird erneut versucht eine Verbindung zur Datenbank herzustellen!");
        gWebSQL = mysql_connect(WEBSQL_HOST, WEBSQL_USER, WEBSQL_DATA, WEBSQL_PASS);
        if(mysql_ping(gWebSQL) == 1)
        {
            print("<-| [MYSQL] WebSQL Es konnte im 2 Versuch eine Verbindung hergestellt werden!");
            return true;
        }
        else
        {
            //Falls das auch nicht Funktioniert wird der Server zur Sicherheit wieder heruntergefahren.
            print("<-| [MYSQL] WebSQL Es konnte keine Verbindung zur Datenbank hergestellt werden!");
            print("<-| [MYSQL] WebSQL Der Server wird nun beendet!");
            SendRconCommand("exit");
            return true;
        }
    }
    */
}

stock mysql_CheckAccount(playerid)
{
    new Query[128],pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
    mysql_real_escape_string(pName, pName,gSQL,sizeof(pName));
    format(Query, sizeof(Query), "SELECT * FROM `accounts` WHERE `Name` = '%s'", pName);
    mysql_pquery(Query,THREAD_CHECKACCOUNT,playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}
/*
stock mysql_CheckName( name[] ) {
    new Query[128],count;
    mysql_real_escape_string(name, name);
    format(Query, sizeof(Query), "SELECT * FROM `accounts` WHERE `Name` = '%s'", name);
    mysql_oquery(Query,THREAD_CHECKNAME,INVALID_PLAYER_ID,gSQL);
    if( mysql_store_result() ) {
        count = mysql_num_rows();
        mysql_free_result();
    }
    return count;
}*/


stock CreateAccount(playerid, pass[])
{
    new rndstring[33],query[360],pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
    mysql_real_escape_string(pName,pName,gSQL,sizeof(pName));
    mysql_real_escape_string(pass,query,gSQL,sizeof(query));
    randomString( rndstring );
    format(query, sizeof(query), "INSERT INTO `accounts` (`Name`, `Passwort`,`SaltKey`) VALUES ('%s', SHA2(CONCAT('%s','%s'),256),'%s')", pName, query,rndstring,rndstring);
    mysql_pquery(query,THREAD_CREATEACCOUNT,playerid,gSQL,MySQLThreadOwner);
    return true;
}
/*

stock mysql_ReturnPasswort(pName[])
{
    new query[130], Get[130];
    mysql_real_escape_string(pName, pName);
    format(query, sizeof(query), "SELECT `passwort` FROM `accounts` WHERE `Name` = '%s'", pName);
    mysql_oquery(query);
    mysql_store_result();
    mysql_fetch_row(Get);
    mysql_free_result();
    return Get;
}
stock mysql_SetInt(Table[], Field[], To, Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE `%s` SET `%s` = %d WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_oquery(query);
    return true;
}
stock mysql_SetString(Table[], Field[], To[], Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(To, To);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE `%s` SET `%s` = '%s' WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_oquery(query);
    return true;
}
stock mysql_SetFloat(Table[], Field[], Float:To, Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE `%s` SET `%s` = %.2f WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_oquery(query);
    return true;
}

stock mysql_GetString(Table[], Field[], Where[], Is[])
{
    new query[128], Get[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT `%s` FROM `%s` WHERE `%s` = '%s'", Field, Table, Where, Is);
    mysql_oquery(query);
    mysql_store_result();
    mysql_fetch_row(Get);
    mysql_free_result();
    return Get;
}

stock mysql_GetInt(Table[], Field[], Where[], Is[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT `%s` FROM `%s` WHERE `%s` = '%s'", Field, Table, Where, Is);
    mysql_oquery(query);
    mysql_store_result();
    new sqlint = mysql_fetch_int();
    mysql_free_result();
    return sqlint;
}
*/

stock SpawnPlayerEx(playerid)
{
    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
    SpawnPlayer(playerid);
}

stock UpdateInfos()
{
    new string[160];
    format(string, sizeof(string), COLOR_HEX_BLUE"Lagerbestand\n"COLOR_HEX_WHITE"%d Pakete\nTippe "COLOR_HEX_BLUE"/Paketeinladen"COLOR_HEX_WHITE" um Pakete zu entnehmen\n"COLOR_HEX_BLUE"500$ pro Paket", lagerbestand);
    UpdateDynamic3DTextLabelText(lager3d, COLOR_WHITE, string);
    return 1;
}

public SaveInfos()
{
    new
        query[128];
    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", lagerbestand , ("Lager") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Staat] , ("StaatsKasse") ); //id 1,2
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Samd] , ("SAMDKasse") ); //Id 3
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Sana] , ("SANAKasse") ); //id 4
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Oamt] , ("OAMTKasse") ); //id 5
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Grove] , ("GSKasse") ); //id 6
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Ballas] , ("BALLASKasse") ); //id 7
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Fahrschule] , ("SchulKasse") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Yakuza] , ("Yakuza") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Aztecas] , ("Aztecas") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[LCN] , ("LCN") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Vagos] , ("Vagos") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Lottostand , ("Lotto") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Hitman] , ("Hitman") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[BBikerZ] , ("BBikerZ") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Wheelmenk] , ("Wheelmenk") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[TerrorK] , ("TerrorK") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[OutlawzK] , ("OutlawzK") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[ndgradethaK] , ("ndgradethaK") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    return 1;
}

public LoadInfos()
{
    mysql_oquery("SELECT * FROM `infotab` ",THREAD_LOADINFOS,INVALID_PLAYER_ID,gSQL);
/*
    lagerbestand = mysql_GetInt("infotab", "Bestand", "Info", "Lager");
    Kasse[Staat] = mysql_GetInt("infotab", "Bestand", "Info", "StaatsKasse");
    Kasse[Samd] = mysql_GetInt("infotab", "Bestand", "Info", "SAMDKasse");
    Kasse[Sana] = mysql_GetInt("infotab", "Bestand", "Info", "SANAKasse");
    Kasse[Oamt] = mysql_GetInt("infotab", "Bestand", "Info", "OAMTKasse");
    Kasse[Grove] = mysql_GetInt("infotab", "Bestand", "Info", "GSKasse");
    Kasse[Ballas] = mysql_GetInt("infotab", "Bestand", "Info", "BALLASKasse");
    Kasse[Fahrschule] = mysql_GetInt("infotab", "Bestand", "Info", "SchulKasse");
    Kasse[Yakuza] = mysql_GetInt("infotab", "Bestand", "Info", "Yakuza");
    Kasse[Aztecas] = mysql_GetInt("infotab", "Bestand", "Info", "Aztecas");
    Kasse[LCN] = mysql_GetInt("infotab", "Bestand", "Info", "LCN");
    Kasse[LCN] = mysql_GetInt("infotab", "Bestand", "Info", "Vagos");
    Lottostand = mysql_GetInt("infotab", "Bestand", "Info", "Lotto");
    Kasse[Hitman] = mysql_GetInt("infotab", "Bestand", "Info", "Hitman");
    Kasse[BBikerZ] = mysql_GetInt("infotab", "Bestand", "Info", "BBikerZ");
    Kasse[Wheelmenk] = mysql_GetInt("infotab", "Bestand", "Info", "Wheelmenk");
*/
}

LoadWaffenLager() {
    mysql_oquery("SELECT * FROM `waffenlager`",THREAD_LOADWAFFENLAGER,INVALID_PLAYER_ID,gSQL);
    return 1;
}

SaveWaffenLager() {
    new
        query[128];
    for(new i ; i < g_iWaffenLager ; i++) {
        format(query,sizeof(query),"UPDATE `waffenlager` SET `waffenteile` = %d WHERE `fraktion` = %d",g_WaffenLager[i][WL_iWaffenTeile],g_WaffenLager[i][WL_iFraktion]);
        mysql_oquery(query,THREAD_WAFFENLAGERSAVE,i,gSQL);
    }
    return 1;
}

forward TankeSave();
public TankeSave()
{
    new
        query[600];
    //new tanke[10];
    for(new i=0; i<iTanke;i++)
    {
        //format(tanke,sizeof(tanke),"%d",i);
        format(query,sizeof(query),"UPDATE `tanken` SET \
            `EnterX` = %.2f, \
            `EnterY` = %.2f, \
            `EnterZ` = %.2f, \
            `Besitzer` = '%s', \
            `Name` = '%s', \
            `FillCost` = %d, \
            `Kasse` = %d, \
            `Benzin` = %d, \
            `MaxBenzin` = %d, \
            `Preis` = %d, \
            `FillCostBenzin` = %d, \
            `FillCostSuper` = %d, \
            `FillCostDiesel` = %d, \
            `videoueberwachung` = %d, \
            `auto_notruf` = %d, \
            `erpresserfraktion` = %d, \
            `erpresserforderung` = %d, \
            `erpresserstate` = %d \
            WHERE `ID` = %d",
                Tanke[i][EnterX],
                Tanke[i][EnterY],
                Tanke[i][EnterZ],
                Tanke[i][tBesitzer],
                Tanke[i][tName],
                Tanke[i][tFillCost],
                Tanke[i][tKasse],
                Tanke[i][tBenzin],
                Tanke[i][tMaxBenzin],
                Tanke[i][tPreis],
                Tanke[i][taiFillCost][0],
                Tanke[i][taiFillCost][1],
                Tanke[i][taiFillCost][2],
                Tanke[i][tVideoueberwachung],
                Tanke[i][tAutomatischerNotruf],
                Tanke[i][tErpresserFraktion],
                Tanke[i][tErpresserForderung],
                Tanke[i][tErpresserState],
                Tanke[i][tID]
        );
        mysql_oquery(query,THREAD_TANKESAVE,i,gSQL);
        /*
        mysql_SetFloat("tanken", "EnterX", Tanke[i][EnterX], "ID", tanke);
        mysql_SetFloat("tanken", "EnterY", Tanke[i][EnterY], "ID", tanke);
        mysql_SetFloat("tanken", "EnterZ", Tanke[i][EnterZ], "ID", tanke);
        mysql_SetString("tanken", "Besitzer", Tanke[i][tBesitzer], "ID", tanke);
        mysql_SetString("tanken", "Name", Tanke[i][tName], "ID", tanke);
        mysql_SetInt("tanken", "FillCost", Tanke[i][tFillCost], "ID", tanke);
        mysql_SetInt("tanken", "Kasse", Tanke[i][tKasse], "ID", tanke);
        mysql_SetInt("tanken", "Benzin", Tanke[i][tBenzin], "ID", tanke);
        mysql_SetInt("tanken", "MaxBenzin", Tanke[i][tMaxBenzin], "ID", tanke);
        mysql_SetInt("tanken", "Preis", Tanke[i][tPreis], "ID", tanke);
        */
    }
}

forward HouseSave();
public HouseSave()
{
    new query[500];
    //new house[10];
    for(new i=0;i<iHaus;i++)
    {
        //format(house,sizeof(house),"%d",i);
        if(strcmp("geloescht",Haus[i][hName],true)!=0)
        {
            format(query,sizeof(query),"UPDATE `houses` SET \
                `EnterX` = %.2f, \
                `EnterY` = %.2f, \
                `EnterZ` = %.2f, \
                `Besitzer` = '%s', \
                `Name` = '%s', \
                `Preis` = %d, \
                `Mieten` = %d, \
                `Lock` = %d, \
                `MietPreis` = %d, \
                `SellX` = %.2f, \
                `SellY` = %.2f, \
                `SellZ` = %.2f, \
                `SellRot` = %.2f, \
                `HouseInteriorID` = %d, \
                `MieterMax` = %d,\
                `Kasse` = %d \
                WHERE `ID` = %d",
                    Haus[i][EnterX],
                    Haus[i][EnterY],
                    Haus[i][EnterZ],
                    Haus[i][hBesitzer],
                    Haus[i][hName],
                    Haus[i][hPreis],
                    Haus[i][hMieten],
                    Haus[i][hLock],
                    Haus[i][hMietPreis],
                    Haus[i][SellX],
                    Haus[i][SellY],
                    Haus[i][SellZ],
                    Haus[i][SellRot],
                    Haus[i][HouseInteriorID],
                    Haus[i][hMieterMax],
                    Haus[i][hKasse],
                    Haus[i][hID]
            );
            mysql_oquery(query,THREAD_HOUSESAVE,i,gSQL);
            /*
            mysql_SetFloat("houses", "EnterX", Haus[i][EnterX], "ID", house);
            mysql_SetFloat("houses", "EnterY", Haus[i][EnterY], "ID", house);
            mysql_SetFloat("houses", "EnterZ", Haus[i][EnterZ], "ID", house);
            mysql_SetFloat("houses", "ExitX", Haus[i][ExitX], "ID", house);
            mysql_SetFloat("houses", "ExitY", Haus[i][ExitY], "ID", house);
            mysql_SetFloat("houses", "ExitZ", Haus[i][ExitZ], "ID", house);
            mysql_SetInt("houses", "Interior", Haus[i][hInterior], "ID", house);
            mysql_SetString("houses", "Besitzer", Haus[i][hBesitzer], "ID", house);
            mysql_SetString("houses", "Name", Haus[i][hName], "ID", house);
            mysql_SetInt("houses", "Preis", Haus[i][hPreis], "ID", house);
            mysql_SetInt("houses", "Mieten", Haus[i][hMieten], "ID", house);
            mysql_SetInt("houses", "Lock", Haus[i][hLock], "ID", house);
            mysql_SetInt("houses", "MietPreis", Haus[i][hMietPreis], "ID", house);
            */
        }
    }
}

forward AngelSave();
public AngelSave()
{
    new query[180];
    //new angel[10];
    for(new i=0;i<iAngel;i++)
    {
        //format(angel,sizeof(angel),"%d",i);
        format(query,sizeof(query),"UPDATE `angel` SET \
            `PosX` = %.2f, \
            `PosY` = %.2f, \
            `PosZ` = %.2f, \
            `Fische` = %d, \
            `FacingAngle` = %.2f \
            WHERE `ID` = %d",
                Angel[i][PosX],
                Angel[i][PosY],
                Angel[i][PosZ],
                Angel[i][Fische],
                Angel[i][FacingAngle],
                Angel[i][aID]
        );
        mysql_oquery(query,THREAD_ANGELSAVE,i,gSQL);
        /*
        mysql_SetFloat("angel", "PosX", Angel[i][PosX], "ID", angel);
        mysql_SetFloat("angel", "PosY", Angel[i][PosY], "ID", angel);
        mysql_SetFloat("angel", "PosZ", Angel[i][PosZ], "ID", angel);
        mysql_SetInt("angel", "Fische", Angel[i][Fische], "ID", angel);
        mysql_SetFloat("angel", "FacingAngle", Angel[i][FacingAngle], "ID", angel);
        */
    }
}

forward StaticBizSave();
public StaticBizSave()
{
    new query[100];
    for(new i=0;i<MAX_STATIC_BIZES;i++)
    {
        format(query,sizeof(query),"UPDATE `staticbiz` SET \
            `waren` = %d \
            WHERE `sbizid` = %d",
                StaticBiz[i][SBD_iWaren],
                StaticBiz[i][SBD_iID]
        );
        mysql_oquery(query,THREAD_STATICBIZSAVE,i,gSQL);
    }
    return 1;
}
forward BizSave();
public BizSave()
{
    new query[640];
    //new biz[10];
    for(new i=1;i<MAX_BIZES;i++)
    {
        // format(biz,sizeof(biz),"%d",i);
        format(query,sizeof(query),"UPDATE `bizes` SET \
            `EnterX` = %.2f,\
            `EnterY` = %.2f,\
            `EnterZ` = %.2f, \
            `ExitX` = %.2f,\
            `ExitY` = %.2f,\
            `ExitZ` = %.2f,\
            `Besitzer` = '%s',\
            `Name` = '%s',\
            `Preis` = %d,\
            `Lock` = %d,\
            `Interior` = %d,\
            `Kasse` = %d,\
            `Eintritt` = %d,\
            `Waren` = %d,\
            `MaxWaren` = %d,\
            `WarenPreis` = %d,\
            `LadenAuf` = %d,\
            `LadenZu` = %d,\
            `erpresserfraktion` = %d,\
            `erpresserforderung` = %d,\
            `erpresserstate` = %d \
            WHERE `ID` = %d",
                Biz[i][EnterX],
                Biz[i][EnterY],
                Biz[i][EnterZ],
                Biz[i][ExitX],
                Biz[i][ExitY],
                Biz[i][ExitZ],
                Biz[i][bBesitzer],
                Biz[i][bName],
                Biz[i][bPreis],
                Biz[i][bLock],
                Biz[i][bInterior],
                Biz[i][bKasse],
                Biz[i][bEintritt],
                Biz[i][bWaren],
                Biz[i][bMaxWaren],
                Biz[i][bWarenPreis],
                Biz[i][bLadenAuf],
                Biz[i][bLadenZu],
                Biz[i][bErpresserFraktion],
                Biz[i][bErpresserForderung],
                Biz[i][bErpresserState],
                Biz[i][bID]
        );
        mysql_oquery(query,THREAD_BIZSAVE,i,gSQL);
        /*
        mysql_SetFloat("bizes", "EnterX", Biz[i][EnterX], "ID", biz);
        mysql_SetFloat("bizes", "EnterY", Biz[i][EnterY], "ID", biz);
        mysql_SetFloat("bizes", "EnterZ", Biz[i][EnterZ], "ID", biz);
        mysql_SetFloat("bizes", "ExitX", Biz[i][ExitX], "ID", biz);
        mysql_SetFloat("bizes", "ExitY", Biz[i][ExitY], "ID", biz);
        mysql_SetFloat("bizes", "ExitZ", Biz[i][ExitZ], "ID", biz);
        mysql_SetString("bizes", "Besitzer", Biz[i][bBesitzer], "ID", biz);
        mysql_SetString("bizes", "Name", Biz[i][bName], "ID", biz);
        mysql_SetInt("bizes", "Preis", Biz[i][bPreis], "ID", biz);
        mysql_SetInt("bizes", "Lock", Biz[i][bLock], "ID", biz);
        mysql_SetInt("bizes", "Interior", Biz[i][bInterior], "ID", biz);
        mysql_SetInt("bizes", "Kasse", Biz[i][bKasse], "ID", biz);
        mysql_SetInt("bizes", "Eintritt", Biz[i][bEintritt], "ID", biz);
        mysql_SetInt("bizes", "Waren", Biz[i][bWaren], "ID", biz);
        mysql_SetInt("bizes", "MaxWaren", Biz[i][bMaxWaren], "ID", biz);
        mysql_SetInt("bizes", "WarenPreis", Biz[i][bWarenPreis], "ID", biz);
        */
    }
}
stock GetTankIndexByID( id ) {
    for(new i ; i < iTanke ; i++) {
        if( Tanke[i][tID] == id ) return i;
    }
    return 999;
}
forward TankeLoadID(tankeid);
public TankeLoadID(tankeid) {
    if( iTanke >= MAX_TANKEN ) {
        return 0;
    }
    new
        tStr[256];
    format(tStr,sizeof(tStr),"SELECT * FROM `tanken` WHERE `ID` = %d",tankeid);
    mysql_oquery(tStr,THREAD_TANKELOADID,tankeid,gSQL);
    // -> THREADED
    return 1;
}

forward TankeLoad();
public TankeLoad()
{
    mysql_oquery("SELECT * FROM `tanken` LIMIT "#MAX_TANKEN";" , THREAD_TANKELOAD , INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    /*
    {
        format(tanke, sizeof(tanke), "%d", i);
        Tanke[i][tID] = mysql_GetInt("tanken", "ID", "ID", tanke);
        Tanke[i][EnterX] = mysql_GetFloat("tanken", "EnterX", "ID", tanke);
        Tanke[i][EnterY] = mysql_GetFloat("tanken", "EnterY", "ID", tanke);
        Tanke[i][EnterZ] = mysql_GetFloat("tanken", "EnterZ", "ID", tanke);
        format(Tanke[i][tBesitzer], MAX_PLAYER_NAME, "%s", mysql_GetString("tanken", "Besitzer", "ID", tanke));
        format(Tanke[i][tName], 32, "%s", mysql_GetString("tanken", "Name", "ID", tanke));
        Tanke[i][tFillCost] = mysql_GetInt("tanken", "FillCost", "ID", tanke);
        Tanke[i][tKasse] = mysql_GetInt("tanken", "Kasse", "ID", tanke);
        Tanke[i][tBenzin] = mysql_GetInt("tanken", "Benzin", "ID", tanke);
        Tanke[i][tMaxBenzin] = mysql_GetInt("tanken", "MaxBenzin", "ID", tanke);
        Tanke[i][tPreis] = mysql_GetInt("tanken", "Preis", "ID", tanke);
    }
    */
    return 1;
}


forward StaticBizLoad();
public StaticBizLoad()
{
    mysql_oquery("SELECT * FROM `staticbiz`",THREAD_STATICBIZLOAD,INVALID_PLAYER_ID,gSQL);
    return 1;
}
forward BizLoad();
public BizLoad()
{
    mysql_oquery("SELECT * FROM `bizes` WHERE `ID` > 0 AND `ID` <= "#MAX_BIZES"",THREAD_BIZLOAD,INVALID_PLAYER_ID,gSQL);
    return 1;
}

forward AngelLoadID(angelid);
public AngelLoadID(angelid)
{
    if( iAngel >= MAX_APLATZ) {
        return 0;
    }
    new
        aStr[256];
    format(aStr,sizeof(aStr),"SELECT * FROM `angel` WHERE `ID` = %d",angelid);
    mysql_oquery(aStr,THREAD_ANGELLOADID,angelid,gSQL);
    // -> THREADED
    return 1;
}
forward AngelLoad();
public AngelLoad()
{
    mysql_oquery("SELECT * FROM `angel` LIMIT "#MAX_APLATZ";", THREAD_ANGELLOAD, INVALID_PLAYER_ID , gSQL);
    // -> THREADED
    return 1;
}

stock GetHotelIDByIndex( index ) {
    return Hotel[index][hID];
}
stock GetHouseIndexByID( id ) {
    for(new i = 0; i < iHaus ; i++) {
        if( Haus[i][hID] == id ) return i;
    }
    return 999;
}

stock GetHouseInteriorIndexByID( houseinteriorid ) {
    //printf("GetHouseInteriorIndexByID( %d ) Max: %d ", houseinteriorid,g_iHouseInteriors);
    for(new i ; i < g_iHouseInteriors ; i++) {
        if( g_HouseInterior[i][HI_iID] == houseinteriorid ) return i;
    }
    //printf("@@@ Error GetHouseInteriorIndexByID( %d )",houseinteriorid);
    return 999;
}

stock GetHouseIDByIndex( index ) {
    return Haus[index][hID];
}

stock GetHotelIndexByID( id ) {
    for(new i ; i < iHotel ; i++) {
        if( Hotel[i][hID] == id ) return i;
    }
    return 999;
}


stock GetBizIndexByID( id ) {
    for(new i = 1; i < sizeof(Biz) ; i++) {
        if( Biz[i][bID] == id ) return i;
    }
    return 999;
}

forward HouseLoadID(houseid);
public HouseLoadID(houseid) {
    // printf("HouseLoadID(%d) %d %d",houseid,iHaus,MAX_HOUSES);
    if( iHaus >= MAX_HOUSES) {
        return 0;
    }
    new
        hStr[256];
    format(hStr,sizeof(hStr),"SELECT * FROM `houses` WHERE `ID` = %d",houseid);
    mysql_oquery(hStr,THREAD_HOUSELOADID,houseid,gSQL);
    // -> THREADED
    return 1;
}
forward HouseLoad();
public HouseLoad()
{
    mysql_oquery("SELECT * FROM `houses` LIMIT "#MAX_HOUSES";",THREAD_HOUSELOAD,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

forward HouseInteriorLoad();
public HouseInteriorLoad()
{
    mysql_oquery("SELECT * FROM `houseinterior` LIMIT "#MAX_HOUSEINTERIORS";",THREAD_HOUSEINTERIORLOAD,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

forward HotelLoadID(hotelid);
public HotelLoadID(hotelid) {
    // printf("HouseLoadID(%d) %d %d",houseid,iHaus,MAX_HOUSES);
    if( iHotel >= MAX_HOTELS) {
        return 0;
    }
    new
        hStr[256];
    format(hStr,sizeof(hStr),"SELECT * FROM `hotel` WHERE `ID` = %d",hotelid);
    mysql_oquery(hStr,THREAD_HOTELLOADID,hotelid,gSQL);
    // -> THREADED
    return 1;
}
forward HotelLoad();
public HotelLoad()
{
    mysql_oquery("SELECT * FROM `hotel` LIMIT "#MAX_HOTELS";",THREAD_HOTELLOAD,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

forward HotelSave();
public HotelSave()
{
    new query[500];
    for(new i=0;i<iHotel;i++)
    {
        format(query,sizeof(query),"UPDATE `hotel` SET \
            `EnterX` = %.2f, \
            `EnterY` = %.2f, \
            `EnterZ` = %.2f, \
            `ExitX` = %.2f, \
            `ExitY` = %.2f, \
            `ExitZ` = %.2f, \
            `EnterInterior` = %d, \
            `ExitInterior` = %d, \
            `EnterVirtualWorld` = %d, \
            `Besitzer` = '%s', \
            `Name` = '%s', \
            `Lock` = %d, \
            `MietPreis` = %d \
            WHERE `ID` = %d",
                Hotel[i][EnterX],
                Hotel[i][EnterY],
                Hotel[i][EnterZ],
                Hotel[i][ExitX],
                Hotel[i][ExitY],
                Hotel[i][ExitZ],
                Hotel[i][hEnterInterior],
                Hotel[i][hExitInterior],
                Hotel[i][hEnterVirtualWorld],
                Hotel[i][hBesitzer],
                Hotel[i][hName],
                Hotel[i][hLock],
                Hotel[i][hMietPreis],
                Hotel[i][hID]
        );
        mysql_oquery(query,THREAD_HOUSESAVE,i,gSQL);
    }
}
forward DrogenEinfluss(playerid);
public DrogenEinfluss(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(pDrogenEinfluss[playerid] == 1)
        {
            pDrogenEinfluss[playerid] = 0;
            KillTimer(DrogenTimer[playerid]);
            SendClientMessage(playerid, COLOR_WHITE, "Du stehst nun nicht mehr unter Drogeneinfluss.");
        }
    }
    return 1;
}
stock SetPlayerCash(playerid, money)
{
    ResetPlayerCash(playerid);
    GivePlayerCash(playerid, money);
}

stock IsACar(carid)
{
    if(carid == 400 || carid == 401 || carid == 402 || carid == 404 || carid == 405 || carid == 406
    || carid == 407 || carid == 408 || carid == 409 || carid == 410 || carid == 411 || carid == 412 || carid == 413
    || carid == 415 || carid == 416 || carid == 418 || carid == 419 || carid == 420 || carid == 421
    || carid == 422 || carid == 423 || carid == 424 || carid == 426 || carid == 427 || carid == 428 || carid == 429
    || carid == 431 || carid == 433 || carid == 434 || carid == 436 || carid == 437 || carid == 438
    || carid == 439 || carid == 440 || carid == 442 || carid == 445 || carid == 451 || carid == 458 || carid == 459
    || carid == 466 || carid == 467 || carid == 470 || carid == 474
    || carid == 475 || carid == 477 || carid == 478 || carid == 479 || carid == 480 || carid == 482 || carid == 483
    || carid == 489 || carid == 490 || carid == 491 || carid == 492 || carid == 494 || carid == 495 || carid == 496 || carid == 498
    || carid == 500 || carid == 502 || carid == 503 || carid == 504 || carid == 505 || carid == 506 || carid == 507 || carid == 508
    || carid == 516 || carid == 517 || carid == 518 || carid == 526
    || carid == 527 || carid == 528 || carid == 529 || carid == 531 || carid == 532 || carid == 533 || carid == 534
    || carid == 535 || carid == 536 || carid == 540 || carid == 541 || carid == 542 || carid == 543 || carid == 544
    || carid == 545 || carid == 546 || carid == 547 || carid == 549 || carid == 550 || carid == 551 || carid == 552
    || carid == 554 || carid == 555 || carid == 558 || carid == 559 || carid == 560 || carid == 561 || carid == 562
    || carid == 565 || carid == 566 || carid == 567 || carid == 568 || carid == 575 || carid == 576 || carid == 579
    || carid == 580 || carid == 582 || carid == 585 || carid == 587 || carid == 588 || carid == 589
    || carid == 596 || carid == 597 || carid == 598 || carid == 599 || carid == 600 || carid == 601 || carid == 602
    || carid == 603 || carid == 604 || carid == 605 || carid == 609)
    {
        return 1;
    }
    return 0;
}

stock IsAPlane(carid)
{
    if(carid == 592 || carid == 577 || carid == 511 || carid == 512 || carid == 593 || carid == 520
    || carid == 553 || carid == 476 || carid == 519 || carid == 460 || carid == 513 || carid == 548
    || carid == 425 || carid == 417 || carid == 487 || carid == 488 || carid == 497 || carid == 563
    || carid == 447 || carid == 469)
    {
        return 1;
    }
    return 0;
}

stock IsABoat(carid)
{
    if(carid == 472 || carid == 473 || carid == 493 || carid == 595 || carid == 484
    || carid == 430 || carid == 453 || carid == 452 || carid == 446 || carid == 454)
    {
        return 1;
    }
    return 0;
}

stock IsATruck(carid)
{
    if(carid == 435 || carid ==  450 || carid ==  584 || carid ==  591 || carid == 578 || carid == 403 || carid == 406 || carid == 414
    || carid == 432 || carid == 443 || carid == 444 || carid == 455 || carid == 456 || carid == 486 || carid == 499 || carid == 514 || carid == 515
    || carid == 524 || carid == 556 || carid == 557 || carid == 573 || carid == 578|| carid == 525)
    {
        return 1;
    }
    return 0;
}

stock IsABike(carid)
{
    if(carid == 581 || carid == 522 || carid == 521 || carid == 523 || carid == 586 || carid == 448 || carid == 461 || carid == 463 || carid == 468 || carid == 471)return 1;
    return 0;
}

stock IsVehicleOccupied(vehicleid) // Returns 1 if there is anyone in the vehicle
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i)==vehicleid)
            {
                return 1;
            }
        }
    }
    return 0;
}
/*
stock FreeTankCheck()
{
    new ausgabe=-1,query[38];
    for(new i=1;i<MAX_TANKEN;i++)
    {
        format(query, sizeof(query), "SELECT * FROM tanken WHERE ID='%i'", i);
        mysql_oquery(query);
        mysql_store_result();
        if(mysql_num_rows()==0)
        {
            ausgabe=i;break;
        }
    }
    printf("Freie Tanke:%i",ausgabe);
    return  ausgabe;
}

stock FreeAngelCheck()
{
    new a[12], query[128];
    for(new i=1;i<MAX_HOUSES;i++)
    {
        format(a, sizeof(a), "ID=%d", i);
        format(query, sizeof(query), "SELECT * FROM angel WHERE %s", a);
        mysql_oquery(query);
        mysql_store_result();
        if(mysql_num_rows() == 0)return i;
    }
    return 0;
}

stock FreeHouseCheck()
{
    new h[12], query[128];
    for(new i=1;i<MAX_HOUSES;i++)
    {
        format(h, sizeof(h), "ID=%d", i);
        format(query, sizeof(query), "SELECT * FROM houses WHERE %s", h);
        mysql_oquery(query);
        mysql_store_result();
        if(mysql_num_rows()==0)return i;
    }
    return 0;
}
*/

stock IsPlayerAtTanke(playerid , Float:distance = 10.0) {
    new varHouse = 999;
    for(new x = 0; x < iTanke; x++) {
        if(IsPlayerInRangeOfPoint(playerid, distance, Tanke[x][EnterX], Tanke[x][EnterY], Tanke[x][EnterZ])) {
            varHouse = x;
        }
    }
    return varHouse;
}
stock IsPlayerAtHotel(playerid) {
    new varHotel = 999;
    new Float:distance = 10.0;
    new Float:_distance = 10.0;
    for(new x = 0; x < iHotel; x++) {
        //printf("%.2f %.2f %.2f",Hotel[x][EnterX], Hotel[x][EnterY], Hotel[x][EnterZ]);
        _distance = GetPlayerDistanceFromPoint(playerid,Hotel[x][EnterX], Hotel[x][EnterY], Hotel[x][EnterZ]);
        if( _distance < distance ) {
            distance = _distance;
            varHotel = x;
        }
    }
    //printf("IsPlayerAtHotel(%s) -> %d",GetName(playerid),varHotel);
    return varHotel;
}

stock IsPlayerAtTelefonzelle(playerid) {
    new
        Float:X,
        Float:Z,
        Float:Y;
    new varTelefonzelle = 999;
    new Float:distance = 10.0;
    new Float:_distance = 10.0;
    for(new x = 0; x < g_iTelefonzelle; x++) {

        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,g_Telefonzelle[x][T_iObjectID],E_STREAMER_X,X);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,g_Telefonzelle[x][T_iObjectID],E_STREAMER_Y,Y);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,g_Telefonzelle[x][T_iObjectID],E_STREAMER_Z,Z);

        _distance = GetPlayerDistanceFromPoint(playerid, X , Y,Z);
        if( ( _distance < distance ) && ( _distance < 3.0 ) ) {
            distance = _distance;
            varTelefonzelle = x;
        }
    }
    //printf("IsPlayerAtHotel(%s) -> %d",GetName(playerid),varHotel);
    return varTelefonzelle;
}

stock IsPlayerAtBiz(playerid , Float:distance = 4.0) {
    new varHouse = 999;
    for(new x=1;x < MAX_BIZES; x++) {
        if(IsPlayerInRangeOfPoint(playerid, distance, Biz[x][EnterX], Biz[x][EnterY], Biz[x][EnterZ])) {
            varHouse = x;
        }
    }
    return varHouse;
}

stock IsPlayerAtHouse(playerid,Float:distance = 2.0) {
    new varHouse = 999;
    for(new x = 0; x < iHaus; x++) {
        if(IsPlayerInRangeOfPoint(playerid, distance, Haus[x][EnterX], Haus[x][EnterY], Haus[x][EnterZ])) {
            varHouse = x;
        }
    }
    return varHouse;
}

forward UpdateTankeText(tanke);
public UpdateTankeText(tanke)
{
    new tStr[512];
    if(strcmp(Tanke[tanke][tBesitzer], "Niemand", true) == 0)
    {
        format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Diese Tankstelle ist zu verkaufen\nPreis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Tankekaufen ein", Tanke[tanke][tName], AddDelimiters(Tanke[tanke][tPreis]));
        UpdateDynamic3DTextLabelText(Tanke[tanke][tText], COLOR_YELLOW, tStr);
    }
    else
    {
        format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Besitzer: {FFFFFF}%s\n{6DC0F4}Benzin: {FFFFFF}$%d, {6DC0F4}Super: {FFFFFF}$%d, {6DC0F4}Diesel: {FFFFFF}$%d\n{6DC0F4}Kraftstoffmenge: {FFFFFF}%d/%d\n\n{E0E5E7}Betanken mit: /Tanken\nBesuche den Tankshop mit /Tankshop", Tanke[tanke][tName], Tanke[tanke][tBesitzer], Tanke[tanke][taiFillCost][0], Tanke[tanke][taiFillCost][1], Tanke[tanke][taiFillCost][2], Tanke[tanke][tBenzin], Tanke[tanke][tMaxBenzin]);
        if( Tanke[tanke][tErpresserFraktion] != 0 ) {
            new
                frakname[50];
            ReturnFraktionByID( Tanke[tanke][tErpresserFraktion] , frakname );
            format(tStr, sizeof(tStr), "%s\n\nErpresser: %s",tStr,frakname);
        }
        UpdateDynamic3DTextLabelText(Tanke[tanke][tText], COLOR_BLUE, tStr);
    }
}

forward UpdateBizText(biz);
public UpdateBizText(biz)
{
    new bStr[512];
    if(strcmp(Biz[biz][bBesitzer], "Niemand", true) == 0)
    {
        format(bStr, sizeof(bStr), "{FFFFFF}[ {FFB732}%s {FFFFFF}]\n{FFB732}Dieses Geschäft ist zu verkaufen\n{FFB732}Preis: {FFFFFF}$%s\n{FFB732}Öffnungszeiten: {FFFFFF}%d Uhr bis %d Uhr\n\n{E0E5E7}Zum Kaufen tippe /Bizkaufen ein", Biz[biz][bName], AddDelimiters(Biz[biz][bPreis]), Biz[biz][bLadenAuf],Biz[biz][bLadenZu]);
        UpdateDynamic3DTextLabelText(Biz[biz][bText], COLOR_YELLOW, bStr);
    }
    else
    {
        format(bStr, sizeof(bStr), "{FFFFFF}[ {FFB732}%s {FFFFFF}]\n{FFB732}Besitzer: {FFFFFF}%s\n{FFB732}Eintritt: {FFFFFF}$%s\n{FFB732}Warenstand: {FFFFFF}%d/%d\n{FFB732}Öffnungszeiten: {FFFFFF}%d Uhr bis %d Uhr", Biz[biz][bName], Biz[biz][bBesitzer], AddDelimiters(Biz[biz][bEintritt]), Biz[biz][bWaren], Biz[biz][bMaxWaren],Biz[biz][bLadenAuf],Biz[biz][bLadenZu]);
        if( Biz[biz][bErpresserFraktion] != 0 ) {
            new
                frakname[50];
            ReturnFraktionByID( Biz[biz][bErpresserFraktion] , frakname );
            format(bStr, sizeof(bStr), "%s\n\nErpresser: %s",bStr,frakname);
        }
        UpdateDynamic3DTextLabelText(Biz[biz][bText], COLOR_BLUE, bStr);
    }
}

forward UpdateAngelText(platz);
public UpdateAngelText(platz)
{
    new aStr[256];
    format(aStr, sizeof(aStr), COLOR_HEX_BLUE"--> Angelplatz <--\n"COLOR_HEX_WHITE"Fische: %d/%d\nTippe "COLOR_HEX_BLUE"/Angeln "COLOR_HEX_WHITE"zum angeln", Angel[platz][Fische], MAX_FISCHE_PRO_PLATZ);
    UpdateDynamic3DTextLabelText(Angel[platz][aText], COLOR_WHITE, aStr);
}

forward UpdateHouseText(house);
public UpdateHouseText(house)
{
    new hStr[512];
    if(strcmp(Haus[house][hBesitzer], "Niemand", true) == 0)
    {
        format(hStr, sizeof(hStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{62E36D}Hausnummer: {FFFFFF}%d\n{62E36D}Dieses Haus ist zu verkaufen\n{62E36D}Preis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Hauskaufen ein", Haus[house][hName], Haus[house][hID], AddDelimiters(Haus[house][hPreis]));
        UpdateDynamic3DTextLabelText(Haus[house][hText], COLOR_YELLOW, hStr);
    }
    else
    {
        if(Haus[house][hMieten] == 0)
        {
            format(hStr, sizeof(hStr), "{FFFFFF}[ {FF4137}%s {FFFFFF}]\n{FF4137}Hausnummer: {FFFFFF}%d\n{FF4137}Besitzer: {FFFFFF}%s", Haus[house][hName], Haus[house][hID], Haus[house][hBesitzer]);
            UpdateDynamic3DTextLabelText(Haus[house][hText], COLOR_BLUE, hStr);
        }
        else if(Haus[house][hMieten] == 1)
        {
            format(hStr, sizeof(hStr), "{FFFFFF}[ {FFCB2B}%s {FFFFFF}]\n{FFCB2B}Hausnummer: {FFFFFF}%d\n{FFCB2B}Dieses Haus ist zu vermieten\nBesitzer: {FFFFFF}%s\n{FFCB2B}Miet-Preis: {FFFFFF}$%s\n{FFCB2B}Mieter: {FFFFFF}(%d/%d)\n\n{E0E5E7}Zum Mieten tippe /Hausmieten ein", Haus[house][hName], Haus[house][hID], Haus[house][hBesitzer], AddDelimiters(Haus[house][hMietPreis]), Haus[house][hMieterAnzahl], Haus[house][hMieterMax]);
            UpdateDynamic3DTextLabelText(Haus[house][hText], COLOR_BLUE, hStr);
        }
    }
}

forward UpdateStaticBizText(staticbizid);
public UpdateStaticBizText(staticbizid) {
    new
        String[128];
    if( StaticBiz[staticbizid][SBD_iTyp] == 0 ) {
        format(String,sizeof(String),"- Waren -\n\n%d Stk auf Lager\n\n/Entladen\n/Warenkaufen",StaticBiz[staticbizid][SBD_iWaren]);
    }
    else if( StaticBiz[staticbizid][SBD_iTyp] == 1 ) {
        format(String,sizeof(String),"- Benzin -\n\n%d Liter auf Lager\n\n/Entladen\n/Tankkaufen",StaticBiz[staticbizid][SBD_iWaren]);
    }
    //printf("UpdateStaticBizText(%d) Typ: %d String: '%s'",staticbizid,StaticBiz[staticbizid][SBD_iTyp],String);
    UpdateDynamic3DTextLabelText( StaticBiz[staticbizid][SBD_t3dLabel] , COLOR_BLUE, String);
    return 1;
}

stock minrand(min, max) //By Alex "Y_Less" Cole
{
    return random(max-min)+min;
}

stock GetPlayerIdFromName(playername[])
{
  for(new i = 0; i < MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}

stock GetMaxTank(carid)
{
    new model = GetVehicleModel(carid);
    if(model >= 400 && model <= 611)
    {
        return GasMax[(model-400)];
    }
    return 100;
}

stock V_DynamicObject(objectid, Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ)
{
    SetDynamicObjectPos(objectid, X, Y, Z);
    SetDynamicObjectRot(objectid, RX, RY, RZ);
    return 1;
}

stock UhrzeitZeiger()
{
    new Stunde, Minute, Sekunde;
    gettime(Stunde, Minute, Sekunde);
    switch(Stunde)
    {
        case 1: { V_DynamicObject(StundenZeigerObj, 1478.96, -1759.40, 30.48,   -30.00, 180.00, 90.00); }       //1 Uhr
        case 2: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 29.80,   -60.00, 180.00, 90.00); }       //2 Uhr
        case 3: { V_DynamicObject(StundenZeigerObj, 1477.99, -1759.40, 28.96,   -90.00, 180.00, 90.00); }       //3 Uhr
        case 4: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 27.94,   -120.00, 180.00, 90.00); }      //4 Uhr
        case 5: { V_DynamicObject(StundenZeigerObj, 1478.87, -1759.40, 27.34,   -150.00, 180.00, 90.00); }      //5 Uhr
        case 6: { V_DynamicObject(StundenZeigerObj, 1479.81, -1759.40, 27.04,   -180.00, 180.00, 90.00); }      //6 Uhr
        case 7: { V_DynamicObject(StundenZeigerObj, 1480.67, -1759.40, 27.26,   -210.00, 180.00, 90.00); }      //7 Uhr
        case 8: { V_DynamicObject(StundenZeigerObj, 1481.41, -1759.40, 27.94,   -240.00, 180.00, 90.00); }      //8 Uhr
        case 9: { V_DynamicObject(StundenZeigerObj, 1481.65, -1759.40, 28.78,   -270.00, 180.00, 90.00); }      //9 Uhr
        case 10: { V_DynamicObject(StundenZeigerObj, 1481.43, -1759.40, 29.80,   -300.00, 180.00, 90.00); }     //10 Uhr
        case 11: { V_DynamicObject(StundenZeigerObj, 1480.77, -1759.40, 30.42,   -330.00, 180.00, 90.00); }     //11 Uhr
        case 12: { V_DynamicObject(StundenZeigerObj, 1479.82, -1759.40, 30.72,   0.00, 180.00, 90.00); }        //12 Uhr
        case 13: { V_DynamicObject(StundenZeigerObj, 1478.96, -1759.40, 30.48,   -30.00, 180.00, 90.00); }      //13 Uhr
        case 14: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 29.80,   -60.00, 180.00, 90.00); }      //14 Uhr
        case 15: { V_DynamicObject(StundenZeigerObj, 1477.99, -1759.40, 28.96,   -90.00, 180.00, 90.00); }      //15 Uhr
        case 16: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 27.94,   -120.00, 180.00, 90.00); }     //16 Uhr
        case 17: { V_DynamicObject(StundenZeigerObj, 1478.87, -1759.40, 27.34,   -150.00, 180.00, 90.00); }     //17 Uhr
        case 18: { V_DynamicObject(StundenZeigerObj, 1479.81, -1759.40, 27.04,   -180.00, 180.00, 90.00); }     //18 Uhr
        case 19: { V_DynamicObject(StundenZeigerObj, 1480.67, -1759.40, 27.26,   -210.00, 180.00, 90.00); }     //19 Uhr
        case 20: { V_DynamicObject(StundenZeigerObj, 1481.41, -1759.40, 27.94,   -240.00, 180.00, 90.00); }     //20 Uhr
        case 21: { V_DynamicObject(StundenZeigerObj, 1481.65, -1759.40, 28.78,   -270.00, 180.00, 90.00); }     //21 Uhr
        case 22: { V_DynamicObject(StundenZeigerObj, 1481.43, -1759.40, 29.80,   -300.00, 180.00, 90.00); }     //22 Uhr
        case 23: { V_DynamicObject(StundenZeigerObj, 1480.77, -1759.40, 30.42,   -330.00, 180.00, 90.00); }     //23 Uhr
        case 0: { V_DynamicObject(StundenZeigerObj, 1479.82, -1759.40, 30.72,   0.00, 180.00, 90.00); }         //0 Uhr
    }

    switch (Minute)
    {
        case 1: { V_DynamicObject(MinutenZeigerObj, 1479.64, -1759.42, 30.94,   -6.00, 0.00, 90.00); }      //1 Minute
        case 2: { V_DynamicObject(MinutenZeigerObj, 1479.42, -1759.42, 30.89,   -12.00, 0.00, 90.00); }     //2 Minute
        case 3: { V_DynamicObject(MinutenZeigerObj, 1479.19, -1759.42, 30.84,   -18.00, 0.00, 90.00); }     //3 Minute
        case 4: { V_DynamicObject(MinutenZeigerObj, 1479.01, -1759.42, 30.77,   -24.00, 0.00, 90.00); }     //4 Minute
        case 5: { V_DynamicObject(MinutenZeigerObj, 1478.84, -1759.42, 30.68,   -30.00, 0.00, 90.00); }     //5 Minute
        case 6: { V_DynamicObject(MinutenZeigerObj, 1478.66, -1759.42, 30.58,   -36.00, 0.00, 90.00); }     //6 Minute
        case 7: { V_DynamicObject(MinutenZeigerObj, 1478.45, -1759.42, 30.43,   -42.00, 0.00, 90.00); }     //7 Minute
        case 8: { V_DynamicObject(MinutenZeigerObj, 1478.30, -1759.42, 30.26,   -48.00, 0.00, 90.00); }     //8 Minute
        case 9: { V_DynamicObject(MinutenZeigerObj, 1478.18, -1759.42, 30.08,   -54.00, 0.00, 90.00); }     //9 Minute
        case 10: { V_DynamicObject(MinutenZeigerObj, 1478.04, -1759.42, 29.90,   -60.00, 0.00, 90.00); }        //10 Minute
        case 11: { V_DynamicObject(MinutenZeigerObj, 1477.97, -1759.42, 29.72,   -66.00, 0.00, 90.00); }        //11 Minute
        case 12: { V_DynamicObject(MinutenZeigerObj, 1477.89, -1759.42, 29.55,   -72.00, 0.00, 90.00); }        //12 Minute
        case 13: { V_DynamicObject(MinutenZeigerObj, 1477.82, -1759.42, 29.35,   -78.00, 0.00, 90.00); }        //13 Minute
        case 14: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 29.15,   -84.00, 0.00, 90.00); }        //14 Minute
        case 15: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 28.95,   -90.00, 0.00, 90.00); }        //15 Minute
        case 16: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 28.80,   -96.00, 0.00, 90.00); }        //16 Minute
        case 17: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 28.55,   -102.00, 0.00, 90.00); }       //17 Minute
        case 18: { V_DynamicObject(MinutenZeigerObj, 1477.87, -1759.42, 28.30,   -108.00, 0.00, 90.00); }       //18 Minute
        case 19: { V_DynamicObject(MinutenZeigerObj, 1477.94, -1759.42, 28.05,   -114.00, 0.00, 90.00); }       //19 Minute
        case 20: { V_DynamicObject(MinutenZeigerObj, 1478.04, -1759.42, 27.84,   -120.00, 0.00, 90.00); }       //20 Minute
        case 21: { V_DynamicObject(MinutenZeigerObj, 1478.14, -1759.42, 27.71,   -126.00, 0.00, 90.00); }       //21 Minute
        case 22: { V_DynamicObject(MinutenZeigerObj, 1478.27, -1759.42, 27.58,   -132.00, 0.00, 90.00); }       //22 Minute
        case 23: { V_DynamicObject(MinutenZeigerObj, 1478.39, -1759.42, 27.41,   -138.00, 0.00, 90.00); }       //23 Minute
        case 24: { V_DynamicObject(MinutenZeigerObj, 1478.57, -1759.42, 27.26,   -144.00, 0.00, 90.00); }       //24 Minute
        case 25: { V_DynamicObject(MinutenZeigerObj, 1478.95, -1759.42, 27.06,   -156.00, 0.00, 90.00); }       //25 Minute
        case 26: { V_DynamicObject(MinutenZeigerObj, 1478.77, -1759.42, 27.16,   -150.00, 0.00, 90.00); }       //26 Minute
        case 27: { V_DynamicObject(MinutenZeigerObj, 1479.15, -1759.42, 26.94,   -162.00, 0.00, 90.00); }       //27 Minute
        case 28: { V_DynamicObject(MinutenZeigerObj, 1479.40, -1759.42, 26.89,   -168.00, 0.00, 90.00); }       //28 Minute
        case 29: { V_DynamicObject(MinutenZeigerObj, 1479.60, -1759.42, 26.87,   -174.00, 0.00, 90.00); }       //29 Minute
        case 30: { V_DynamicObject(MinutenZeigerObj, 1479.81, -1759.42, 26.83,   -180.00, 0.00, 90.00); }       //30 Minute
        case 31: { V_DynamicObject(MinutenZeigerObj, 1479.99, -1759.42, 26.86,   -186.00, 0.00, 90.00); }       //31 Minute
        case 32: { V_DynamicObject(MinutenZeigerObj, 1480.18, -1759.42, 26.89,   -192.00, 0.00, 90.00); }       //32 Minute
        case 33: { V_DynamicObject(MinutenZeigerObj, 1480.38, -1759.42, 26.92,   -198.00, 0.00, 90.00); }       //33 Minute
        case 34: { V_DynamicObject(MinutenZeigerObj, 1480.59, -1759.42, 26.99,   -204.00, 0.00, 90.00); }       //34 Minute
        case 35: { V_DynamicObject(MinutenZeigerObj, 1480.78, -1759.42, 27.08,   -210.00, 0.00, 90.00); }       //35 Minute
        case 36: { V_DynamicObject(MinutenZeigerObj, 1480.96, -1759.42, 27.18,   -216.00, 0.00, 90.00); }       //36 Minute
        case 37: { V_DynamicObject(MinutenZeigerObj, 1481.14, -1759.42, 27.29,   -222.00, 0.00, 90.00); }       //37 Minute
        case 38: { V_DynamicObject(MinutenZeigerObj, 1481.30, -1759.42, 27.47,   -228.00, 0.00, 90.00); }       //38 Minute
        case 39: { V_DynamicObject(MinutenZeigerObj, 1481.44, -1759.42, 27.64,   -234.00, 0.00, 90.00); }       //39 Minute
        case 40: { V_DynamicObject(MinutenZeigerObj, 1481.59, -1759.42, 27.84,   -240.00, 0.00, 90.00); }       //40 Minute
        case 41: { V_DynamicObject(MinutenZeigerObj, 1481.65, -1759.42, 28.04,   -246.00, 0.00, 90.00); }       //41 Minute
        case 42: { V_DynamicObject(MinutenZeigerObj, 1481.71, -1759.42, 28.19,   -252.00, 0.00, 90.00); }       //42 Minute
        case 43: { V_DynamicObject(MinutenZeigerObj, 1481.77, -1759.42, 28.37,   -258.00, 0.00, 90.00); }       //43 Minute
        case 44: { V_DynamicObject(MinutenZeigerObj, 1481.83, -1759.42, 28.55,   -264.00, 0.00, 90.00); }       //44 Minute
        case 45: { V_DynamicObject(MinutenZeigerObj, 1481.87, -1759.42, 28.78,   -270.00, 0.00, 90.00); }       //45 Minute
        case 46: { V_DynamicObject(MinutenZeigerObj, 1481.85, -1759.42, 28.97,   -276.00, 0.00, 90.00); }       //46 Minute
        case 47: { V_DynamicObject(MinutenZeigerObj, 1481.85, -1759.42, 29.20,   -282.00, 0.00, 90.00); }       //47 Minute
        case 48: { V_DynamicObject(MinutenZeigerObj, 1481.78, -1759.42, 29.41,   -288.00, 0.00, 90.00); }       //48 Minute
        case 49: { V_DynamicObject(MinutenZeigerObj, 1481.70, -1759.42, 29.64,   -294.00, 0.00, 90.00); }       //49 Minute
        case 50: { V_DynamicObject(MinutenZeigerObj, 1481.60, -1759.42, 29.89,   -300.00, 0.00, 90.00); }       //50 Minute
        case 51: { V_DynamicObject(MinutenZeigerObj, 1481.47, -1759.42, 30.05,   -306.00, 0.00, 90.00); }       //51 Minute
        case 52: { V_DynamicObject(MinutenZeigerObj, 1481.32, -1759.42, 30.23,   -312.00, 0.00, 90.00); }       //52 Minute
        case 53: { V_DynamicObject(MinutenZeigerObj, 1481.20, -1759.42, 30.35,   -318.00, 0.00, 90.00); }       //53 Minute
        case 54: { V_DynamicObject(MinutenZeigerObj, 1481.05, -1759.42, 30.47,   -324.00, 0.00, 90.00); }       //54 Minute
        case 55: { V_DynamicObject(MinutenZeigerObj, 1480.87, -1759.42, 30.59,   -330.00, 0.00, 90.00); }       //55 Minute
        case 56: { V_DynamicObject(MinutenZeigerObj, 1480.71, -1759.42, 30.67,   -336.00, 0.00, 90.00); }       //56 Minute
        case 57: { V_DynamicObject(MinutenZeigerObj, 1480.54, -1759.42, 30.78,   -342.00, 0.00, 90.00); }       //57 Minute
        case 58: { V_DynamicObject(MinutenZeigerObj, 1480.35, -1759.42, 30.85,   -348.00, 0.00, 90.00); }       //58 Minute
        case 59: { V_DynamicObject(MinutenZeigerObj, 1480.11, -1759.42, 30.91,   -354.00, 0.00, 90.00); }       //59 Minute
        case 0: { V_DynamicObject(MinutenZeigerObj, 1479.83, -1759.42, 30.95,   0.00, 0.00, 90.00); }           //0 Minute
    }
    return 1;
}

forward StartSpectate(playerid, forplayer);
public StartSpectate(playerid, forplayer)
{
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(forplayer));
    SetPlayerInterior(playerid, GetPlayerInterior(forplayer));
    TogglePlayerSpectating(playerid, 1);
    SpectatedPlayer[playerid] = forplayer;
    if (IsPlayerInAnyVehicle(forplayer))
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(forplayer));
    else
        PlayerSpectatePlayer(playerid, forplayer);

    IsPlayerSpectating[playerid] = 1;
    return 1;
}

forward StopSpectate(playerid);
public StopSpectate(playerid)
{
    TogglePlayerSpectating(playerid, 0);
    SpectatedPlayer[playerid] = INVALID_PLAYER_ID;
    IsPlayerSpectating[playerid] = 0;
    SpawnPlayer(playerid);
    return 1;
}

stock fcopy(oldname[],newname[])
{
    new File:ohnd,File:nhnd;
    if (!fexist(oldname))
    {
        return 0;
    }
    ohnd=fopen(oldname,io_read);
    nhnd=fopen(newname,io_write);
    new buf2[1];
    for (new i=flength(ohnd);i>0;i--)
    {
        fputchar(nhnd, fgetchar(ohnd, buf2[0],false),false);
    }
    fclose(ohnd);
    fclose(nhnd);
    return 1;
}

new gPlayerUsingLoopingAnim[MAX_PLAYERS];
stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp,fs = 0)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp,fs);
}
stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    if (!IsPlayerFalling(playerid)) ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    return 1;
}

stock ConvertUnix(unixtstamp)
{
    new query[128];
    new get[128];
    format(query, 128, "SELECT FROM_UNIXTIME(%d, '%s.%s.%s %s')", unixtstamp, "%e", "%M", "%Y", "%T");
    mysql_oquery(query,THREAD_CONVERTUNIX,unixtstamp,gSQL);
    return 1;
}

/*COMMAND:setgwtime(playerid,params[]) {
    new
        index,
        zeit;
    if(sscanf(params,"dd",index,zeit)) {
        return SendClientMessage(playerid,COLOR_RED,"Idiot! /Setgwtime [index] [zeit]");
    }
    FightSystem[index][fsFightTime] = zeit;
    return 1;
}*/

stock IsAFightFaction(Faction)
{
    if((Faction == 6 || Faction == 7 || Faction == 10 || Faction == 11 || Faction == 12 || Faction == 13|| Faction == 20 || Faction == 21))
        return 1;
    return 0;
}

stock GetZoneColorOfFaction(Faction,trans = 0xFFFFFF90)
{
    new color;
    if(Faction == 6) color = 0x00EA28FF; // Grove Street
    else if(Faction == 7) color =  0xFF43F5FF; // Ballas
    else if(Faction == 10) color =  0xAAAAAAFF; // Yakuza
    else if(Faction == 11) color =  0x00EEFFFF; // Aztecas
    else if(Faction == 12) color =  0x910000FF; // LCN
    else if(Faction == 13) color =  0xFFFF00FF; // Vagos
    else if(Faction == 20) color =  0xFF8200FF; // Outlawz
    else if(Faction == 21) color =  0x002DFFFF; // Triaden
    else color = 0xFFFFFFFF;
    color &= trans;
    return color;
}

stock GetFactionNameOfFaction(Faction){
    new FactionName[64];
    if(Faction == 6) format(FactionName, sizeof(FactionName), "Grove Street");
    else if(Faction == 7) format(FactionName, sizeof(FactionName), "Ballas");
    else if(Faction == 10) format(FactionName, sizeof(FactionName), "Yakuza");
    else if(Faction == 11) format(FactionName, sizeof(FactionName), "Aztecas");
    else if(Faction == 12) format(FactionName, sizeof(FactionName), "LCN");
    else if(Faction == 13) format(FactionName, sizeof(FactionName), "Vagos");
    else if(Faction == 20) format(FactionName, sizeof(FactionName), "Outlawz");
    else if(Faction == 21) format(FactionName, sizeof(FactionName), "Triaden");
    else format(FactionName, sizeof(FactionName), "NoN-Gang");
    return FactionName;
}

stock GetGangFactionIDByName(faction[]) {
    if (!strcmp(faction, "Grove Street"))
        return 6;
    else if (!strcmp(faction, "Ballas"))
        return 7;
    else if (!strcmp(faction, "Yakuza"))
        return 10;
    else if (!strcmp(faction, "Aztecas"))
        return 11;
    else if (!strcmp(faction, "LCN"))
        return 12;
    else if (!strcmp(faction, "Vagos"))
        return 13;
    else if (!strcmp(faction, "Outlawz"))
        return 20;
    else if (!strcmp(faction, "Triaden"))
        return 21;
    else
        return -1;
}

CMD:setzoneowner(playerid, params[]) {
    new zoneid, owner[32];
    if (Spieler[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if (sscanf(params, "is[32]", zoneid, owner)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /setzoneowner [Gangzone ID] [Fraktionsname]");
    if (zoneid < 0 || zoneid >= MAX_GANGZONES) return SendClientMessage(playerid, COLOR_RED, "Keine gültige GangZone-ID.");
    if (g_GangZone[zoneid][GZ_iStatus] == 1) return SendClientMessage(playerid, COLOR_RED, "In dem Gebiet findet gerade ein Gangfight statt.");

    new factionID = GetGangFactionIDByName(owner);
    if (factionID == -1) return SendClientMessage(playerid, COLOR_RED, "Der Fraktionsname ist ungültig oder keine Gang.");

    g_GangZone[zoneid][GZ_iOwner] = factionID;

    new gangzoneLabel[128], gangName[32];
    format(gangName, sizeof(gangName), "%s", GetFactionNameOfFaction(g_GangZone[zoneid][GZ_iOwner]));
    format(gangzoneLabel, sizeof(gangzoneLabel), "-> GEBIET DER %s <-\nErobern mit: /Gangfight\n\n(%d)", gangName, zoneid);
    UpdateDynamic3DTextLabelText(g_GangZone[zoneid][GZ_t3dLabel], 0x1E90FFFF, gangzoneLabel);
    SaveGangZones();

    new adminMessage[128], zoneText[MAX_ZONE_NAME];
    GetPoint2DZone(g_GangZone[zoneid][GZ_fIconX], g_GangZone[zoneid][GZ_fIconY], zoneText, sizeof(zoneText));
    format(adminMessage, sizeof(adminMessage), "%s %s hat das Gebiet in %s (%d) an die Fraktion %s übertragen.", GetPlayerAdminRang(playerid), GetName(playerid), zoneText, zoneid, gangName);
    SendAdminMessage(COLOR_GREEN, adminMessage);
    return 1;
}

stock GetPlayerFaction(playerid)
{
    return Spieler[playerid][pFraktion];
}

stock StripNewLine(str[]) //ysi_misc.own
{
    new
        l = strlen(str);
    while (l-- && str[l] <= ' ') str[l] = '\0';
}

stock LogCommand(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/CommandLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[CMD] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogBus(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/BusLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[BUS] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

/*stock LogAdvents(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Advents/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[ADVENTSKALENDER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}*/

stock LogGlobalChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[GC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogJobChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/JChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[JC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogAdminChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[AC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogFrakChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[FC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogPilot(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/PilotLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[PILOT] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogTrucker(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/TruckerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[TRUCKER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogFarmer(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FarmerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[FARMER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogAnwalt(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AnwaltLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[ANWALT] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogWDealer(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/WDealerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[WDEALER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogDDealer(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/DDealerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[DDealer] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock PayLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/ZahlenLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[ZAHLEN] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock ClubLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[300], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/ClubLog/clublog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock SupporterLog(text[],wertung)
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    if(wertung == 1 ) {
        format(path, sizeof(path), "/Logs/SupporterLog/positiv.txt");
    }
    else {
        format(path, sizeof(path), "/Logs/SupporterLog/negativ.txt");
    }
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    LogFile = fopen(path, io_append);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock BankLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/BankLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[BANK] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock TaschendiebLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/TaschendiebLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[Taschendieb] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock HitmanLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/HitmanLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[Hitman] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock AuszahlenLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AuszahlenLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[AUSZ] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock DrugLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/DrugLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[DRUG] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock CookiesLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/CookiesLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[COOKIES] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock WCodeLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/WCodeLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[WCODES] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock WaffenteileLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/WaffenteileLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[WTEILE] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock EinzahlenLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/EinzahlenLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[EINZ] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock BanLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/BanLog/banlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LoginLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/LoginLog/loginlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}


stock AdminLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Admin/log.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock SkillLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/SkillLog/log.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}


stock MySQLThreadOwnerLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, path[64];
    static string[1024];
    string[0] = '\0';
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/MySQLThreadOwner/loginlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock GeworbenLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, path[64];
    static string[1024];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GeworbenLog/loginlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock FriendLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FriendLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock GebeLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GebeLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[GEBEN] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock GebeCheckLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GebeCheckLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[GEBENCHECK] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}


forward Cooldown_CommandSpam(playerid);
public Cooldown_CommandSpam(playerid) {
    Spieler[playerid][pCommandSpam]--;
    return 1;
}
/*forward Cooldown_ChatSpam(playerid);
public Cooldown_ChatSpam(playerid) {
    Spieler[playerid][pChatSpam]--;
    return 1;
}*/
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    new command[128];
    format(command, sizeof(command), "%s - %s", GetName(playerid), cmdtext);
    LogCommand(command);
    if (Spieler[playerid][pAdmin] < 2) Spieler[playerid][pCommandSpam]++;
    if( Spieler[playerid][pCommandSpam] >= 10 ) {
        new
            string[160];
        format(string, sizeof(string), "[KICK] Du wurdest soeben von dem Server-System gekickt. Grund: %s", ("Command-Spam"));
        SendClientMessage(playerid, COLOR_RED, string);
        format(string, sizeof(string), "[KICK]: Spieler %s wurde von Server-System gekickt, Grund: %s", GetName(playerid), ("Command-Spam"));
        SendAdminMessage(COLOR_RED, string);
        KickDelay(playerid);
        return 1;
    }
    else {
        SetTimerEx("Cooldown_CommandSpam",2000,false,"d",playerid);
    }
    if(!success)
    {
        new string[128];
        format(string, sizeof(string), COLOR_HEX_WHITE"Der Befehl \""COLOR_HEX_ORANGE"%s"COLOR_HEX_WHITE"\" wurde nicht gefunden. Benutze "COLOR_HEX_ORANGE"/Help"COLOR_HEX_WHITE" für Hilfe.", cmdtext);
        SendClientMessage(playerid, COLOR_GREY, string);
        return 1;
    }
    return 1;
}

CMD:gesuchte(playerid, params[])
{
    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 18)
    {
        //SendClientMessage(playerid, COLOR_RED, "Diese Funktion gibt es nicht mehr! Nutze /PAKTE");
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i))
            {
                if(Spieler[i][pWanteds] != 0)
                {
                    new giveplayer[MAX_PLAYER_NAME], string[128];
                    GetPlayerName(i, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "%s[ID:%d]: %d", giveplayer,i,Spieler[i][pWanteds]);
                    SendClientMessage(playerid, COLOR_YELLOW, string);
                }
            }
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Cop!");
    }
    return 1;
}

CMD:gefangene(playerid, params[])
{
    new bool:bPlayerExecutive = (Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18);
    if (bPlayerExecutive || Spieler[playerid][pJob] == 6 || Spieler[playerid][pFraktion] == 17) {
        SendClientMessage(playerid, COLOR_RED, "|____ Inhaftierte Spieler ____|");
        for (new i = 0; i < MAX_PLAYERS; i++) {
            if (!IsPlayerConnected(i))
                continue;

            if (Spieler[i][pJailed] == 1 && (Spieler[playerid][pJob] == 6 || bPlayerExecutive) || Spieler[i][pJailed] == 2 && (bPlayerExecutive || Spieler[playerid][pFraktion] == 17) || Spieler[i][pJailed] == 4 && bPlayerExecutive)
            {
                new giveplayer[MAX_PLAYER_NAME], string[128], jailTypeString[128];
                GetPlayerName(i, giveplayer, sizeof(giveplayer));
                jailTypeString = Spieler[i][pJailed] == 1 ? "Knast" : (Spieler[i][pJailed] == 4 ? "Gangjail" : "Alcatraz");
                new playerJailTimeout = JAIL_TIMEOUT - (gettime() - GetPVarInt(i, "JAIL.TIMESTAMP"));
                if (playerJailTimeout > 0) {
                    if (playerJailTimeout == 1) format(jailTypeString, sizeof(jailTypeString), "%s - eine Sekunde Wartezeit", jailTypeString);
                    else format(jailTypeString, sizeof(jailTypeString), "%s - %d Sekunden Wartezeit", jailTypeString, playerJailTimeout);
                }

                format(string, sizeof(string), "%s [ID: %d]: %d Sekunden [%s]", giveplayer, i, Spieler[i][pJailTime], jailTypeString);
                SendClientMessage(playerid, COLOR_YELLOW, string);
            }
        }
    }
    else
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Exekutivbeamter oder Anwalt!");

    return 1;
}

CMD:fpunkte(playerid,params[])
{
    new
        pID,
        schein,
        anzahl,
        sGrund[100],
        string[256],
        giveplayername[MAX_PLAYER_NAME],
        playername4[MAX_PLAYER_NAME];
    if( Spieler[playerid][pFraktion] != 5 && Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2 && Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitarbeiter des Ordnungsamtes");
    }
    if(sscanf(params, "uiis[100]",pID,schein,anzahl,sGrund))
    {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fpunkte [Playerid] [Schein] [Anzahl] [grund]");
        return SendClientMessage(playerid,COLOR_ORANGE,"SCHEINE: 1 = Fahrschein, 2 = Flugschein, 3 = Motorradschein, 4 = LKW-Schein, 5 = Waffenschein");
    }
    if(!IsPlayerConnected(pID))
    {
        return SendClientMessage(playerid,COLOR_RED,"Kein Spieler mit angegebener ID Online");
    }
    if(anzahl > 11){return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht mehr als 10 Punkte auf einmal geben!");}
    GetPlayerName(playerid, playername4, sizeof(playername4));
    GetPlayerName(pID, giveplayername, sizeof(giveplayername));
    if(schein == 1)
    {
        format(string, sizeof(string), "Du hast Spieler %s[ID:%d] %d Strafpunkte auf seinen Autoschein eingetragen. Grund: %s", giveplayername, pID, anzahl, sGrund);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        format(string, sizeof(string), "{FF3A3A}Ordnungsbeamter {FF6E00}%s {FF3A3A} hat Ihnen {FF6E00}%d{FF3A3A} Strafpunkte auf Ihren Autoschein eingetragen.", playername4, anzahl);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Der Grund dafür lautet: %s", sGrund);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Beamter %s hat %s auf den Autoschein %d Strafpunkte eingetragen, Grund: %s", playername4, giveplayername, anzahl, sGrund);
        SendFraktionMessage(1, COLOR_YELLOW, string);
        SendFraktionMessage(2, COLOR_YELLOW, string);
        SendFraktionMessage(5, COLOR_YELLOW, string);
        SendFraktionMessage(16, COLOR_YELLOW, string);
        GivePlayerStrafpunkte(pID,1,anzahl);
    }
    else if(schein == 2)
    {
        format(string, sizeof(string), "Du hast Spieler %s[ID:%d] %d Strafpunkte auf seinen Flugschein eingetragen. Grund: %s", giveplayername, pID, anzahl, sGrund);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        format(string, sizeof(string), "{FF3A3A}Ordnungsbeamter {FF6E00}%s {FF3A3A} hat Ihnen {FF6E00}%d{FF3A3A} Strafpunkte auf Ihren Flugschein eingetragen.", playername4, anzahl);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Der Grund dafür lautet: %s", sGrund);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Beamter %s hat %s auf den Flugschein %d Strafpunkte eingetragen, Grund: %s", playername4, giveplayername, anzahl, sGrund);
        SendFraktionMessage(1, COLOR_YELLOW, string);
        SendFraktionMessage(2, COLOR_YELLOW, string);
        SendFraktionMessage(5, COLOR_YELLOW, string);
        SendFraktionMessage(16, COLOR_YELLOW, string);
        GivePlayerStrafpunkte(pID,2,anzahl);
    }
    else if(schein == 3)
    {
        format(string, sizeof(string), "Du hast Spieler %s[ID:%d] %d Strafpunkte auf seinen Motorradschein eingetragen. Grund: %s", giveplayername, pID, anzahl, sGrund);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        format(string, sizeof(string), "{FF3A3A}Ordnungsbeamter {FF6E00}%s {FF3A3A} hat Ihnen {FF6E00}%d{FF3A3A} Strafpunkte auf Ihren Motorradschein eingetragen.", playername4, anzahl);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Der Grund dafür lautet: %s", sGrund);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Beamter %s hat %s auf den Motorradschein %d Strafpunkte eingetragen, Grund: %s", playername4, giveplayername, anzahl, sGrund);
        SendFraktionMessage(1, COLOR_YELLOW, string);
        SendFraktionMessage(2, COLOR_YELLOW, string);
        SendFraktionMessage(5, COLOR_YELLOW, string);
        SendFraktionMessage(16, COLOR_YELLOW, string);
        GivePlayerStrafpunkte(pID,3,anzahl);
    }
    else if(schein == 4)
    {
        format(string, sizeof(string), "Du hast Spieler %s[ID:%d] %d Strafpunkte auf seinen LKW-Schein eingetragen. Grund: %s", giveplayername, pID, anzahl, sGrund);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        format(string, sizeof(string), "{FF3A3A}Ordnungsbeamter {FF6E00}%s {FF3A3A} hat Ihnen {FF6E00}%d{FF3A3A} Strafpunkte auf Ihren LKW-Schein eingetragen.", playername4, anzahl);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Der Grund dafür lautet: %s", sGrund);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Beamter %s hat %s auf den LKW-Schein %d Strafpunkte eingetragen, Grund: %s", playername4, giveplayername, anzahl, sGrund);
        SendFraktionMessage(1, COLOR_YELLOW, string);
        SendFraktionMessage(2, COLOR_YELLOW, string);
        SendFraktionMessage(5, COLOR_YELLOW, string);
        SendFraktionMessage(16, COLOR_YELLOW, string);
        GivePlayerStrafpunkte(pID,4,anzahl);
    }
    else if(schein == 5)
    {
        format(string, sizeof(string), "Du hast Spieler %s[ID:%d] %d Strafpunkte auf seinen Waffenschein eingetragen. Grund: %s", giveplayername, pID, anzahl, sGrund);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        format(string, sizeof(string), "{FF3A3A}Ordnungsbeamter {FF6E00}%s {FF3A3A} hat Ihnen {FF6E00}%d{FF3A3A} Strafpunkte auf Ihren Waffenschein eingetragen.", playername4, anzahl);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Der Grund dafür lautet: %s", sGrund);
        SendClientMessage(pID, COLOR_RED, string);
        format(string, sizeof(string), "Beamter %s hat %s auf den Waffenschein %d Strafpunkte eingetragen, Grund: %s", playername4, giveplayername, anzahl, sGrund);
        SendFraktionMessage(1, COLOR_YELLOW, string);
        SendFraktionMessage(2, COLOR_YELLOW, string);
        SendFraktionMessage(5, COLOR_YELLOW, string);
        SendFraktionMessage(16, COLOR_YELLOW, string);
        GivePlayerStrafpunkte(pID,5,anzahl);
    }
    else
    {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fpunkte [Playerid] [Schein ( 1 - 5 )] [Anzahl] [grund]");
    }
    return 1;
}

COMMAND:s(playerid,params[]) {
    if( isnull(params)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /S [Nachricht]");
    }
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    if(Spieler[playerid][pMuted]== 1){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist Gemutet.");
        return 0;
    }
    return SendSchreiMessage(playerid,params);
}

COMMAND:rauswerfen(playerid,params[]) {
    new
        my_vehicle,
        giveid_vehicle,
        giveid;
    my_vehicle = GetPlayerVehicleID(playerid);
    if(!my_vehicle) {
        return SendClientMessage(playerid,COLOR_RED,"Diese Funktion funktioniert nur in einem Fahrzeug!");
    }
    if( GetPlayerVehicleSeat(playerid) != 0 ) {
        return SendClientMessage(playerid,COLOR_RED,"Diese Funktion funktioniert nur als Fahrer des Fahrzeuges!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Rauswerfen [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if(playerid == giveid) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht selber aus dem Fahrzeug werfen.");
    }
    giveid_vehicle = GetPlayerVehicleID(giveid);
    if( giveid_vehicle != my_vehicle ) {
        return SendClientMessage(playerid,COLOR_RED,"Der genannte Spieler befindet sich nicht in deinem Fahrzeug");
    }
    new
        String[128];
    format(String,sizeof(String),"%s hat %s aus seinem Fahrzeug geworfen!",GetName(playerid),GetName(giveid));
    RemovePlayerFromVehicle(giveid);
    OnPlayerExitVehicle(giveid,my_vehicle);
    SendClientMessage(playerid,COLOR_WHITE,String);
    return 1;
}

COMMAND:verwarnen(playerid,params[]) {
    new
        giveid,
        punkte,
        sGrund[128];
    if(Spieler[playerid][pAdmin] >= 2)
    {
        if( sscanf(params,"uds[128]",giveid,punkte,sGrund)) {
            return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Verwarnen [Spieler] [Punkte] [Grund]");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
        }
        new
            String[128+32];
        if( punkte < 0 ) {
            if( punkte < -5 ) {
                return SendClientMessage(playerid, COLOR_RED, "Du kannst maximale 5 Punkte abziehen!");
            }
            format(String,sizeof(String),"[ACHTUNG] %s %s hat dir %d Verwarnungen entfernt!", GetPlayerAdminRang(playerid), GetName(playerid), abs(punkte));
            SendClientMessage(giveid,COLOR_RED,String);
            format(String,sizeof(String),"Anzahl der Verwarnungen die Gelöscht wurden: %d, Grund: %s",abs(punkte),sGrund );
            SendClientMessage(giveid,COLOR_ORANGE,String);
            format(String, sizeof(String), "[A-WARN]: %s %s hat %d Verwarnungen von Spieler %s entfernt, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), GetName(giveid), sGrund);
            SendAdminMessage(COLOR_RED, String);
            Spieler[giveid][pWarns] += punkte;
            format(String,sizeof(String),"Du hast %d Verwarnungen bei Spieler %s gelöscht ( Aktuelle Anzahl an Verwarnungen: %d )", punkte, GetName(giveid), Spieler[giveid][pWarns] );
            SendClientMessage(playerid,COLOR_GREEN,String);
        }
        else if ( punkte > 0 ) {
            if( punkte > 5 ) {
                return SendClientMessage(playerid, COLOR_RED, "Du kannst maximale 5 Punkte vergeben!");
            }
            format(String,sizeof(String),"[ACHTUNG] Du wurdest von %s %s verwarnt!", GetPlayerAdminRang(playerid), GetName(playerid));
            SendClientMessage(giveid,COLOR_RED,String);
            format(String,sizeof(String),"Anzahl der Verwarnungen: %d, Grund: %s",punkte,sGrund );
            SendClientMessage(giveid,COLOR_ORANGE,String);
            format(String,sizeof(String),"Du hast %d Verwarnungen gegen Spieler %s ausgesprochen ( Aktuelle Anzahl an Verwarnungen: %d )", punkte, GetName(giveid), Spieler[giveid][pWarns]);
            SendClientMessage(playerid,COLOR_GREEN,String);
            format(String, sizeof(String), "[A-WARN]: %s %s hat Spieler %s verwarnt. Anzahl der Verwarnungen: %d, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), GetName(giveid), punkte, sGrund);
            SendAdminMessage(COLOR_RED, String);
            Spieler[giveid][pWarns] += punkte;
        }
        else {
            return SendClientMessage(playerid, COLOR_RED, "Diese Aktion ist nicht möglich.");
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte!");
        return 1;
    }
    new
        query[256];
    format(query,sizeof(query),"%s %s hat %d Adminverwarnung(en) gegen den Spieler %s ausgesprochen, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), punkte, GetName(giveid), sGrund);
    SendUCPAktenEintrag( playerid, GetName(playerid) , GetName(giveid) , query );

    return 1;
}

COMMAND:f(playerid,params[]) {
    new
        message[128],
        giveid;
    if( sscanf(params,"us[128]",giveid,message)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /F [Spieler] [Nachricht]");
    }
    if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( giveid == playerid ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst dir nicht selber zuflüstern.");
    }
    if( Spieler[giveid][pAdminDienst] ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst");
    }
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    return SendFluesterMessage(playerid,giveid,message);
}

COMMAND:eisverkaufen(playerid,params[]) {
    #define EISVERKAUFEN_PREIS 50
    if(Spieler[playerid][pJob] == 13) {
        new
            String[128],
            preis,
            Float:X,
            Float:Y,
            Float:Z,
            giveid,
            vehicleid;
        vehicleid = GetPlayerVehicleID(playerid);
        if( !vehicleid ) {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in einem Fahrzeug.");
        }
        if( !IsEismannVehicle(vehicleid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Eiswagen.");
        }
        if(sscanf(params,"ud",giveid,preis)) {
            return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Eisverkaufen [Spieler] [Preis]");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
        }
        if(playerid == giveid) {
            return SendClientMessage(playerid, COLOR_RED, "Du kannst kein Eis an dich selber Verkaufen.");
        }
        if( !( 0 < preis < 200 ) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Preis muss zwischen 1$ und 200$ liegen");
        }
        GetPlayerPos(playerid,X,Y,Z);
        if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler befindet sich nicht in deiner Nähe.");
        }
        if(meslock[playerid]==1)
        {
            return SendClientMessage(playerid, COLOR_RED, "Du hast den Spieler bereits eine Anfrage gestellt. Warte bis er sie akzeptiert." );
        }
        meslock[playerid]=1;
        SetTimerEx("meslockrelease",20000,false,"i",playerid);
        // Verkaufen ???
        Spieler[giveid][pEisVerkaeufer] = playerid;
        Spieler[giveid][pEisPreis] = preis;

        format(String,sizeof(String),"Du bietest %s ein Eis für $%s zum Kauf an.",GetName(giveid), AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_BLUE,String);

        format(String,sizeof(String),"Eismann %s möchte dir ein Eis für $%s verkaufen. Nimm es mit '/Accept eis' an!",GetName(playerid), AddDelimiters(preis));
        SendClientMessage(giveid, COLOR_BLUE,String);
    }
    else {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Eisverkäufer.");
    }
    return 1;
}
COMMAND:hotdogverkaufen(playerid,params[]) {
    #define EISVERKAUFEN_PREIS 50
    if(Spieler[playerid][pJob] == 24) {
        new
            String[128],
            preis,
            Float:X,
            Float:Y,
            Float:Z,
            giveid,
            vehicleid;
        vehicleid = GetPlayerVehicleID(playerid);
        if( !vehicleid ) {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in einem Fahrzeug.");
        }
        if( !IsHotDogVehicle(vehicleid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Hotdog-Fahrzeug.");
        }
        if(sscanf(params,"ud",giveid,preis)) {
            return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hotdogverkaufen [Spieler] [Preis]");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
        }
        if(playerid == giveid) {
            return SendClientMessage(playerid, COLOR_RED, "Du kannst kein Eis an dich selber Verkaufen.");
        }
        if( !( 0 < preis < 200 ) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Preis muss zwischen 1$ und 200$ liegen");
        }
        GetPlayerPos(playerid,X,Y,Z);
        if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler befindet sich nicht in deiner Nähe.");
        }
        if(meslock[playerid]==1)
        {
            return SendClientMessage(playerid, COLOR_RED, "Du hast den Spieler bereits eine Anfrage gestellt. Warte bis er sie akzeptiert." );
        }
        meslock[playerid]=1;
        SetTimerEx("meslockrelease",20000,false,"i",playerid);
        // Verkaufen ???
        Spieler[giveid][pHotDogVerkaeufer] = playerid;
        Spieler[giveid][pHotDogPreis] = preis;

        format(String,sizeof(String),"Du bietest %s ein Hotdog für $%s zum Kauf an.",GetName(giveid), AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_BLUE,String);

        format(String,sizeof(String),"Hotdog-Verkäufer %s möchte dir ein Hotdog für $%s verkaufen. Nimm es mit '/Accept Hotdog' an!",GetName(playerid), AddDelimiters(preis));
        SendClientMessage(giveid, COLOR_BLUE,String);
    }
    else {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Hotdog-Verkäufer.");
    }
    return 1;
}

COMMAND:pizzaverkaufen(playerid,params[]) {
    #define PIZZAVERKAUFEN_PREIS 50
    if(Spieler[playerid][pJob] == 15) {
        new
            String[128],
            preis,
            Float:X,
            Float:Y,
            Float:Z,
            giveid,
            vehicleid;
        vehicleid = GetPlayerVehicleID(playerid);
        if( !vehicleid ) {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in einem Fahrzeug.");
        }
        if( !IsPizzaVehicle(vehicleid) ) {
            return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in einem Pizza-Fahrzeug");
        }
        if(sscanf(params,"ud",giveid,preis)) {
            return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Pizzaverkaufen [Spieler] [Preis]");
        }
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
        }
        if(playerid == giveid) {
            return SendClientMessage(playerid, COLOR_RED, "Du kannst kein Eis an dich selber Verkaufen.");
        }
        if( !( 0 < preis < 200 ) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Preis muss zwischen 1$ und 200$ liegen");
        }
        GetPlayerPos(playerid,X,Y,Z);
        if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler befindet sich nicht in deiner Nähe.");
        }
        if(meslock[playerid]==1)
        {
            return SendClientMessage(playerid, COLOR_RED, "Du hast den Spieler bereits eine Anfrage gestellt. Warte bis er sie akzeptiert." );
        }
        meslock[playerid]=1;
        SetTimerEx("meslockrelease",20000,false,"i",playerid);
        // Verkaufen ???
        Spieler[giveid][pPizzaVerkaeufer] = playerid;
        Spieler[giveid][pPizzaPreis] = preis;

        format(String,sizeof(String),"Du bietest %s eine Pizza für $%s zum Kauf an.",GetName(giveid), AddDelimiters(preis));
        SendClientMessage(playerid, COLOR_BLUE,String);

        format(String,sizeof(String),"Pizzalieferant %s möchte dir eine Pizza für $%s verkaufen. Nimm es mit '/Accept Pizza' an!",GetName(playerid), AddDelimiters(preis));
        SendClientMessage(giveid, COLOR_BLUE,String);
    }
    else {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Pizzalieferant.");
    }
    return 1;
}
stock SendSchreiMessage(playerid,message[],Float:schrei_distance = 50.0) {
    new
        String[128+32],
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    format(String,sizeof(String),"%s schreit: %s",GetName(playerid),message);
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( i != playerid ) {
                if( IsPlayerInRangeOfPoint(i, schrei_distance , X, Y, Z ) ) {
                    SendClientMessage(i,COLOR_WHITE,String);
                }
            }
        }
    }
    format(String,sizeof(String),"Du schreist: %s",message);
    SendClientMessage(playerid,COLOR_WHITE,String);
    return 1;
}

stock SendFluesterMessage(playerid,send_to,message[],Float:fluester_distance = 5.0) {
    new
        String[128+32],
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    if( IsPlayerInRangeOfPoint(send_to, fluester_distance , X, Y, Z ) ) {
        format(String,sizeof(String),"%s flüstert: %s",GetName(playerid),message);
        SendClientMessage(send_to,COLOR_GREY,String);
        format(String,sizeof(String),"Du flüstert: %s",message);
        SendClientMessage(playerid,COLOR_GREY,String);
        format(String, sizeof(String), "** %s flüstert %s zu.", GetName(playerid), GetName(send_to));
        SendRoundMessage(X, Y, Z, COLOR_PURPLE, String);
    }
    else {
        SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt um zu flüstern");
    }
    return 1;
}

stock IsEismannVehicle(vehicleid) {
    for(new i ; i < sizeof(eismann) ; i++) {
        if( eismann[i] == vehicleid ) return 1;
    }
    return 0;
}
stock IsHotDogVehicle(vehicleid) {
    for(new i ; i < sizeof(hotdogcar) ; i++) {
        if( hotdogcar[i] == vehicleid ) return 1;
    }
    return 0;
}
stock IsPizzaVehicle(vehicleid) {
    for(new i ; i < sizeof(pizzacar) ; i++) {
        if( pizzacar[i] == vehicleid ) return 1;
    }
    return 0;
}
/*
    - Die Polizei (LSPD FrakID: 1, FBI FrakID 2) sollen den Befehl /pakte ausführen können.
    Sobald diese den Befehl ausgeführt haben, soll er nach SpielerName abfragen.
    Füllt der Polizist dies aus, soll beim Polizist als SendClientMessang folgendes stehen.
    "____POLIZEI AKTE_____
    Polizei Akte von: [SpielerName]
    Begangene Verbrechen: [Variable "pCrimes" soll abgefragt werden]
    Begangene Morde: [Variable "pKills" soll abgefragt werden]"
    Dieser Befehl soll der Polizist nur neben der entsprechenden Person ausführen können!
    Vom Polizisten soll dann eine Nachricht abgeschickt werden wo steht "Polizeibeamter [POLIZIST] schaut die Polizei-Akte von [SpielerName] an"
    Das sollen auch alle in der Umgebung lesen können.
    Am besten als /me Befehl abschicken lassen.
*/
COMMAND:pakte(playerid,params[]) {
    new
        giveid,
        job[50],
        String[128];
    if( Spieler[playerid][pFraktion] != 5 && Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2 && Spieler[playerid][pFraktion] != 16 && Spieler[playerid][pFraktion] != 18) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist oder Ordnungsbeamter");
    }
    if(sscanf(params, "u", giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Pakte [Spieler]");
    }
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst deine eigene Polizei-Akte nicht einsehen.");
    }
    /* Akte von anderen Polizisten einsehen ?
    if( !(( Spieler[giveid][pFraktion] == 1) || ( Spieler[giveid][pFraktion] == 2)) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    */
    SendClientMessage(playerid,COLOR_RED,"=========POLIZEI-COMPUTER=========");
    format(String,sizeof(String),"Polizeiakte von: "#COLOR_HEX_ORANGE"%s",GetName(giveid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Begangene Verbrechen: "#COLOR_HEX_ORANGE"%d",Spieler[giveid][pCrimes]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Begangene Morde: "#COLOR_HEX_ORANGE"%d",Spieler[giveid][pKills]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Wantedanzahl: "#COLOR_HEX_ORANGE"%d",Spieler[giveid][pWanteds]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    ReturnPlayerJob(giveid,job);
    format(String,sizeof(String),"Beruf: %s",job);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Staatsbürger: %s", GetPlayerStaat(giveid) );
    SendClientMessage(playerid,COLOR_WHITE,String);
    return 1;
}

COMMAND:staatssystem(playerid,params[]) {
    new
        giveid,
        job[50],
        frak[50],
        String[128];
    if( !(( Spieler[playerid][pFraktion] == 9) || ( Spieler[playerid][pFraktion] == 2)) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Regierungsbeamter!");
    }
    if(sscanf(params, "u", giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatssystem [Spieler]");
    }
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst deine eigene Staatsakte nicht einsehen.");
    }
    SendClientMessage(playerid,COLOR_RED,"=========STAATSSYSTEM=========");
    format(String,sizeof(String),"Akte von Bürger: "#COLOR_HEX_ORANGE"%s",GetName(giveid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Begangene Verbrechen: "#COLOR_HEX_ORANGE"%d",Spieler[giveid][pCrimes]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Begangene Morde: "#COLOR_HEX_ORANGE"%d",Spieler[giveid][pKills]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Wanted-Level: "#COLOR_HEX_ORANGE"%d",Spieler[giveid][pWanteds]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"KFZ-Steuern: "#COLOR_HEX_ORANGE"%d",Spieler[giveid][pKFZSteuer]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Bargeld: $%s", AddDelimiters(GetPlayerMoney(giveid)));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Kontostand: $%s", AddDelimiters(Spieler[giveid][pBank]));
    SendClientMessage(playerid,COLOR_WHITE,String);
    ReturnPlayerJob(giveid,job);
    format(String,sizeof(String),"Beruf: %s",job);
    SendClientMessage(playerid,COLOR_WHITE,String);
    ReturnPlayerFraktion(giveid,frak);
    format(String,sizeof(String),"Fraktion: %s",frak);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Gehalt: $%s", AddDelimiters(Spieler[giveid][pFrakLohn]));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Staatsbürger: %s", GetPlayerStaat(giveid) );
    SendClientMessage(playerid,COLOR_WHITE,String);

    format(String,sizeof(String),"schaut die Staats-Akte von %s an",GetName(giveid));
    return cmd_me(playerid,String);
}

COMMAND:tascheklauen(playerid,params[]) {
    new
        giveid,
        Float:X,
        Float:Y,
        Float:Z,
        String[128];
    if( Spieler[playerid][pJob] != 19 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Taschendieb");
    }
    if(Spieler[playerid][pLevel] < 3)return SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 3 sein um andere beklauen zu können!");
    if( Spieler[playerid][pTimerTaschendieb] != INVALID_TIMER_ID ) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast erst vor kurzem jemanden beklaut! Warte 1 Minute.");
    }
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tascheklauen [Spieler]");
    }
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht selber berauben.");
    }
    GetPlayerPos(playerid,X,Y,Z);
    if( !IsPlayerInRangeOfPoint(giveid, 4.0 , X, Y, Z ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist zu weit von dir entfernt.");
    }
    if( IsPlayerInAnyVehicle(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht aus einem Fahrzeug heraus bestehlen.");
    }
    if( IsPlayerInAnyVehicle(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Spieler in einem Fahrzeug bestehlen.");
    }
    if( Spieler[giveid][pLevel] <= 2 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Spieler mit einem Level unter 2 bestehlen.");
    }
    if( Spieler[playerid][pUnixTaschendieb] > gettime() ) {
        return SendClientMessage(playerid, COLOR_ORANGE, "Du musst ein einen Moment warten, bist du erneut jemanden beklauen kannst.");
    }
    if( Spieler[playerid][pJailed] ) {
        return SendClientMessage(playerid, COLOR_RED, "Im Knast kannst du kein anderen Spieler beklauen!");
    }
    if( 1 <= Spieler[playerid][pJailed] <= 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst keine eingesperrten Spieler beklauen!");
    }
    // Wir können rauben!
    format(String,sizeof(String),"%s"#COLOR_HEX_WHITE" versucht "#COLOR_HEX_ORANGE"%s "#COLOR_HEX_WHITE"zu "#COLOR_HEX_RED"überfallen!",GetName(playerid),GetName(giveid));
    SendRoundMessage(X,Y,Z, COLOR_ORANGE, String , 25.0);
    format(String,sizeof(String),"Du wirst von %s überfallen! Renne schnell weg!",GetName(playerid));
    SendClientMessage(giveid, COLOR_BLUE, String );

    Spieler[playerid][pTimerTaschendieb] = SetTimerEx("Pulse_Taschendieb",491,true,"dd",playerid,giveid);
    Spieler[playerid][pTaschendiebCount] = 0;
    Spieler[playerid][pUnixTaschendieb] = gettime() + 60; // 60sec = 1min;


    format(String,sizeof(String),"Taschendieb %s versucht %s zu überfallen. ",GetName(playerid),GetName(giveid));
    TaschendiebLog(String);

    return 1;
}

forward Pulse_Taschendieb(diebid,opferid);
public Pulse_Taschendieb(diebid,opferid){
    new
        String[128],
        Float:X,
        Float:Y,
        Float:Z;
    Spieler[diebid][pTaschendiebCount]++;
    GetPlayerPos(diebid,X,Y,Z);
    if( Spieler[diebid][pTaschendiebCount] <= 10 ) { // ~5 Sekunden muss man dran bleiben
        if( !IsPlayerInRangeOfPoint(opferid, 4.2 , X, Y, Z ) ) {
            // Diebstahl fehlgeschlagen,zu weit weg!
            format(String,sizeof(String),"Räuber %s hat es nicht geschafft %s zu überfallen!",GetName(diebid),GetName(opferid));
            SendRoundMessage(X,Y,Z, COLOR_ORANGE, String , 50.0);
            format(String,sizeof(String),"Du konntest dem Dieb %s entkommen.",GetName(diebid));
            SendClientMessage(opferid,COLOR_GREEN,String);

            format(String,sizeof(String),"Du hast es nicht geschafft %s auszurauben.",GetName(opferid));
            SendClientMessage(diebid,COLOR_RED,String);

            Spieler[diebid][pTaschendiebCount] = 0;
            KillTimer(Spieler[diebid][pTimerTaschendieb]);
            Spieler[diebid][pTimerTaschendieb] = INVALID_TIMER_ID;

            format(String,sizeof(String),"%s hat es nicht geschafft %s zu überfallen. ",GetName(diebid),GetName(opferid));
            TaschendiebLog(String);
        }
    }
    else {
        // Diebstahl hat geklappt!
        new
            beute;
        beute = GetPlayerMoney(opferid);

        format(String,sizeof(String),"Räuber %s hat es geschafft %s zu überfallen!",GetName(diebid),GetName(opferid));
        SendRoundMessage(X,Y,Z, COLOR_ORANGE, String , 50.0);

        if(beute > 0 ) {
            // Maximal kann man 2500$ klauen.
            if( beute > 2500 ) {
                beute = 2500;
            }
            beute = random(beute) + 1;
            GivePlayerCash(diebid,beute);
            GivePlayerCash(opferid,-beute);


            format(String,sizeof(String),"Du konntest dem Dieb %s nicht entkommen und hast dabei $%s verloren.",GetName(diebid),AddDelimiters(beute));
            SendClientMessage(opferid,COLOR_RED,String);

            format(String,sizeof(String),"Du hast es geschafft %s auszurauben. Deine Beute: $%s",GetName(opferid),AddDelimiters(beute));
            SendClientMessage(diebid,COLOR_GREEN,String);
        }
        else {
            format(String,sizeof(String),"Du konntest dem Dieb %s nicht entkommen. Da du pleite bist,geht er leer aus",GetName(diebid));
            SendClientMessage(opferid,COLOR_GREEN,String);

            format(String,sizeof(String),"Du hast es geschafft %s auszurauben. Allerdings ist dein Opfer pleite",GetName(opferid));
            SendClientMessage(diebid,COLOR_RED,String);
        }
        format(String,sizeof(String),"%s hat es geschafft %s zu überfallen. Beute: $%s",GetName(diebid),GetName(opferid),AddDelimiters(beute));
        TaschendiebLog(String);

        Spieler[diebid][pTaschendiebCount] = 0;
        KillTimer(Spieler[diebid][pTimerTaschendieb]);
        Spieler[diebid][pTimerTaschendieb] = INVALID_TIMER_ID;
    }
    return 1;
}

COMMAND:heiraten(playerid,params[]) {
    new
        Float:X,
        Float:Y,
        Float:Z,
        String[128],
        giveid;
    // Spieler[playerid][ID]
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Heiraten [Spieler]");
    }
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( Spieler[playerid][pMarriage] != INVALID_MARRIAGE ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist bereits verheiratet.");
    }
    if( Spieler[giveid][pMarriage] != INVALID_MARRIAGE ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist bereits Verheiratet.");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht selber heiraten.");
    }
    GetPlayerPos(playerid,X,Y,Z);
    if( !IsPlayerInRangeOfPoint(giveid, 3.0 , X, Y, Z ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist zu weit von dir entfernt.");
    }
    if( IsPlayerInAnyVehicle(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst nicht aus einem Fahrzeug heraus heiraten.");
    }
    if( IsPlayerInAnyVehicle(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Spieler in einem Fahrzeug einen Heiratsantrag machen.");
    }
    if( !IsPlayerInRangeOfPoint(playerid,5.0, WEDDING_COORDS) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht am Trau-Platz.");
    }
    format(String,sizeof(String),"%s hat dir einen Heiratsantrag gemacht, du kannst diesen mit /accept Antrag annehmen!",GetName(playerid));
    SendClientMessage(giveid, COLOR_BLUE, String);
    format(String,sizeof(String),"Du hast %s einen Heiratsantrag gemacht.",GetName(giveid));
    SendClientMessage(playerid, COLOR_GREEN, String);

    Spieler[giveid][pHeiratsantragID] = playerid;
    return 1;
}

COMMAND:scheiden(playerid,params[]) {
    new
        String[128],
        giveid_root,
        giveid;
    if( Spieler[playerid][pMarriage] == INVALID_MARRIAGE ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht verheiratet.");
    }
    giveid_root = Spieler[playerid][pMarriage];
    if( !IsPlayerInRangeOfPoint(playerid,5.0, WEDDING_COORDS) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht am Trau-Platz.");
    }
    giveid = GetPlayerIDByUnique(giveid_root);
    if( GetPlayerMoney(playerid) < PREIS_SCHEIDUNG ) {
        return SendClientMessage(playerid, COLOR_RED, "Du benötigst "#PREIS_SCHEIDUNG"$ um dich scheiden zu lassen.");
    }
    if( IsPlayerInAnyVehicle(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht in einem Fahrzeug scheiden lassen.");
    }
    if(!IsPlayerConnected(giveid))
    {
        // Spieler nicht Online ... Versuchen OFFLINE zu Scheiden
        format(String,sizeof(String),"SELECT `Name`,`ID` FROM `accounts` WHERE `ID` = %d LIMIT 1", giveid_root );
        mysql_pquery(String,THREAD_CHECKSCHEIDEN,playerid,gSQL,MySQLThreadOwner);
        // -> THREADED
        return 1;
    }
    // Online Scheiden
    format(String,sizeof(String),"Dein (Ex)-Partner %s hat sich von dir Scheiden lassen!",GetName(playerid));
    SendClientMessage(giveid, COLOR_RED, String );

    format(String,sizeof(String),"Du hast dich von deinem (Ex)-Partner %s Scheiden lassen. ( Kosten: $%s )",GetName(giveid), AddDelimiters(PREIS_SCHEIDUNG));
    SendClientMessage(playerid, COLOR_WHITE, String );

    Spieler[playerid][pMarriage] = INVALID_MARRIAGE;
    Spieler[giveid][pMarriage] = INVALID_MARRIAGE;
    format(Spieler[playerid][pMarriageName],MAX_PLAYER_NAME,"Niemand");
    format(Spieler[giveid][pMarriageName],MAX_PLAYER_NAME,"Niemand");
    GivePlayerCash(playerid,-PREIS_SCHEIDUNG);

    format(String,sizeof(String),"[HOCHZEITSMELDUNG] "#COLOR_HEX_RED"%s und %s sind nicht mehr Verheiratet. %s hat die Scheidung eingereicht!",GetName(playerid),GetName(giveid),GetName(playerid));
    SendClientMessageToAll(COLOR_BLUE,String);
    // SQL Vorsichtshalber
    format(String,sizeof(String),"UPDATE `accounts` SET `Marriage` = %d WHERE `ID` IN(%d,%d)", INVALID_MARRIAGE ,Spieler[giveid][ID],Spieler[playerid][ID]);
    mysql_pquery(String,THREAD_SCHEIDEN,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock GetPlayerIDByUnique( unique ) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( unique == Spieler[i][ID] ) {
            return i;
        }
    }
    return INVALID_PLAYER_ID;
}


stock GetVehicleFraktion(vehicleid) {
	if( vehicleid < 0 || vehicleid > MAX_VEHICLES ) return 0;
	new
	    i;
	if( aiVehicles[vehicleid] == VEH_AZTCARS ) {
		for( i  = 0; i < sizeof(aztcars) ; i++) {
			if( aztcars[i] == vehicleid ) {
			    return 11;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_LCNCARS ) {
		for( i  = 0; i < sizeof(vehicle_lcnExterior) ; i++) {
			if( vehicle_lcnExterior[i] == vehicleid ) {
			    return 12;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_VAGOSCARS ) {
		for( i  = 0; i < sizeof(vagoscars) ; i++) {
			if( vagoscars[i] == vehicleid ) {
			    return 13;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_YAKUCARS ) {
		for( i  = 0; i < sizeof(vehicle_yakuzaExterior) ; i++) {
			if( vehicle_yakuzaExterior[i] == vehicleid ) {
			    return 10;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_STAATCARS ) {
		for( i  = 0; i < sizeof(vehicle_governmentExterior) ; i++) {
			if( vehicle_governmentExterior[i] == vehicleid ) {
			    return 9;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_FSCARS ) {
		for( i  = 0; i < sizeof(fscars) ; i++) {
			if( fscars[i] == vehicleid ) {
			    return 8;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_NEWSCARS ) {
		for( i  = 0; i < sizeof(vehicle_sanaBase) ; i++) {
			if( vehicle_sanaBase[i] == vehicleid ) {
			    return 4;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_LSPDCARS ) {
		for( i  = 0; i < sizeof(vehicle_lspdExterior) ; i++) {
			if( vehicle_lspdExterior[i] == vehicleid ) {
			    return 1;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_SANICARS ) {
		for( i  = 0; i < sizeof(vehicle_samdExterior) ; i++) {
			if( vehicle_samdExterior[i] == vehicleid ) {
			    return 3;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_OAMTCARS ) {
		for( i  = 0; i < sizeof(vehicle_pooExterior) ; i++) {
			if( vehicle_pooExterior[i] == vehicleid )
			    return 5;
			}
		}

	else if( aiVehicles[vehicleid] == VEH_FBICARS ) {
		for( i  = 0; i < sizeof(vehicle_fbiExterior) ; i++) {
			if( vehicle_fbiExterior[i] == vehicleid ) {
			    return 2;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_BALLASCARS ) {
		for( i  = 0; i < sizeof(ballascars) ; i++) {
			if( ballascars[i] == vehicleid ) {
			    return 7;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_GROVECARS ) {
		for( i  = 0; i < sizeof(grovecars) ; i++) {
			if( grovecars[i] == vehicleid ) {
			    return 6;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_HITMANC ) {
		for( i  = 0; i < sizeof(vehicle_hitmanBase) ; i++) {
			if( vehicle_hitmanBase[i] == vehicleid ) {
			    return 14;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_BIKERCARS ) {
		for( i  = 0; i < sizeof(vehicle_nineDemonsBase) ; i++) {
			if( vehicle_nineDemonsBase[i] == vehicleid ) {
			    return 15;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_LVPDCARS ) {
		for( i  = 0; i < sizeof(lvpdcars) ; i++) {
			if( lvpdcars[i] == vehicleid ) {
			    return 16;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_WHEELCARS ) {
		for( i  = 0; i < sizeof(vehicle_wheelmanBase) ; i++) {
			if( vehicle_wheelmanBase[i] == vehicleid ) {
			    return 17;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_ARMYCARS ) {
		for( i  = 0; i < sizeof(armycars) ; i++) {
			if( armycars[i] == vehicleid ) {
			    return 18;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_TERRORCARS ) {
		for( i  = 0; i < sizeof(vehicle_terrorBase) ; i++) {
			if( vehicle_terrorBase[i] == vehicleid ) {
			    return 19;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_OUTLAWZSCARS ) {
		for( i  = 0; i < sizeof(outlawzscars) ; i++) {
			if( outlawzscars[i] == vehicleid ) {
			    return 20;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_TRIADENCARS ) {
		for( i  = 0; i < sizeof(vehicle_triadsExterior) ; i++) {
			if( vehicle_triadsExterior[i] == vehicleid ) {
			    return 21;
			}
		}
	}
	else if( aiVehicles[vehicleid] == VEH_ZOLLCARS ) {
		for( i  = 0; i < sizeof(zollcars) ; i++) {
			if( zollcars[i] == vehicleid ) {
			    return 22;
			}
		}
	}
	return 0;
}

COMMAND:rtwsirene(playerid,params[]) {

    new
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur als Fahrer möglich.");
    }
    modelid = GetVehicleModel(vehicleid);
    if( (modelid != 416) ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kann nur in einem Krankenwagen ausgeführt werden!");
    }
    if( g_aiVehicleSirene[vehicleid][0] == INVALID_OBJECT_ID ) {
        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject( 11701, 0.0, 0.0, 0.0, 0.0, 0.0, 80.0 ); // <rtw hsirene>
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][0] , vehicleid,0.000000, 0.899999, 1.200000, 0.000000, 0.000000, 0.000000 ); // <rtw hsirene>
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject( 18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][1] , vehicleid,1.000000, -3.399999, 1.800000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][2] = CreateDynamicObject( 18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][2] , vehicleid,-1.000000, -3.399998, 1.800000, 0.000000, 0.000000, 0.000000);
        SendClientMessage(playerid,COLOR_GREEN,"Sirene eingeschaltet");
    }
    else {
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][0] );
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][1] );
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][2] );
        g_aiVehicleSirene[vehicleid][2] = INVALID_OBJECT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Sirene ausgeschaltet");
    }
    Streamer_Update(playerid);
    return 1;
}

COMMAND:neonweis(playerid,params[]) {

    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) {
        return SendClientMessage(playerid, COLOR_RED,"Neon kann nicht an Motorrädern angebaut werden!");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur als Fahrer möglich.");
    }
    if( Spieler[playerid][pPremiumNeon] != 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Premium-Neon!");
    }
    if( g_aiVehicleSirene[vehicleid][0] == INVALID_OBJECT_ID ) {
        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject( 18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][0] , vehicleid,-0.899999, 0.100000, -0.500000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject( 18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][1] , vehicleid,0.900000, 0.100000, -0.499999, 0.000000, 0.000000, 0.000000);
        SendClientMessage(playerid,COLOR_GREEN,"Neonlichter aktiviert.");
    }
    else {
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][0] );
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][1] );
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Neonlichter deaktiviert.");
    }
    Streamer_Update(playerid);
    return 1;
}

COMMAND:neonblau(playerid,params[]) {

    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) {
        return SendClientMessage(playerid, COLOR_RED,"Neon kann nicht an Motorrädern angebaut werden!");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur als Fahrer möglich.");
    }
    if( Spieler[playerid][pPremiumNeon] != 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Premium-Neon!");
    }
    if( g_aiVehicleSirene[vehicleid][0] == INVALID_OBJECT_ID ) {
        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject( 18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][0] , vehicleid,-0.899999, 0.100000, -0.500000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject( 18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][1] , vehicleid,0.900000, 0.100000, -0.499999, 0.000000, 0.000000, 0.000000);
        SendClientMessage(playerid,COLOR_GREEN,"Neonlichter aktiviert.");
    }
    else {
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][0] );
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][1] );
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Neonlichter deaktiviert.");
    }
    Streamer_Update(playerid);
    return 1;
}

COMMAND:neongruen(playerid,params[]) {

    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) {
        return SendClientMessage(playerid, COLOR_RED,"Neon kann nicht an Motorrädern angebaut werden!");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur als Fahrer möglich.");
    }
    if( Spieler[playerid][pPremiumNeon] != 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Premium-Neon!");
    }
    if( g_aiVehicleSirene[vehicleid][0] == INVALID_OBJECT_ID ) {
        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject( 18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][0] , vehicleid,-0.899999, 0.100000, -0.500000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject( 18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][1] , vehicleid,0.900000, 0.100000, -0.499999, 0.000000, 0.000000, 0.000000);
        SendClientMessage(playerid,COLOR_GREEN,"Neonlichter aktiviert.");
    }
    else {
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][0] );
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][1] );
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Neonlichter deaktiviert.");
    }
    Streamer_Update(playerid);
    return 1;
}

COMMAND:neonrot(playerid,params[]) {

    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) {
        return SendClientMessage(playerid, COLOR_RED,"Neon kann nicht an Motorrädern angebaut werden!");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur als Fahrer möglich.");
    }
    if( Spieler[playerid][pPremiumNeon] != 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Premium-Neon!");
    }
    if( g_aiVehicleSirene[vehicleid][0] == INVALID_OBJECT_ID ) {
        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject( 18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][0] , vehicleid,-0.899999, 0.100000, -0.500000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject( 18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][1] , vehicleid,0.900000, 0.100000, -0.499999, 0.000000, 0.000000, 0.000000);
        SendClientMessage(playerid,COLOR_GREEN,"Neonlichter aktiviert.");
    }
    else {
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][0] );
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][1] );
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Neonlichter deaktiviert.");
    }
    Streamer_Update(playerid);
    return 1;
}

COMMAND:neonpink(playerid,params[]) {

    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) {
        return SendClientMessage(playerid, COLOR_RED,"Neon kann nicht an Motorrädern angebaut werden!");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur als Fahrer möglich.");
    }
    if( Spieler[playerid][pPremiumNeon] != 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Premium-Neon!");
    }
    if( g_aiVehicleSirene[vehicleid][0] == INVALID_OBJECT_ID ) {
        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject( 18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][0] , vehicleid,-0.899999, 0.100000, -0.500000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject( 18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][1] , vehicleid,0.900000, 0.100000, -0.499999, 0.000000, 0.000000, 0.000000);
        SendClientMessage(playerid,COLOR_GREEN,"Neonlichter aktiviert.");
    }
    else {
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][0] );
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][1] );
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Neonlichter deaktiviert.");
    }
    Streamer_Update(playerid);
    return 1;
}

COMMAND:neongelb(playerid,params[]) {

    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) {
        return SendClientMessage(playerid, COLOR_RED,"Neon kann nicht an Motorrädern angebaut werden!");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur als Fahrer möglich.");
    }
    if( Spieler[playerid][pPremiumNeon] != 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Premium-Neon!");
    }
    if( g_aiVehicleSirene[vehicleid][0] == INVALID_OBJECT_ID ) {
        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject( 18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][0] , vehicleid,-0.899999, 0.100000, -0.500000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject( 18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle( g_aiVehicleSirene[vehicleid][1] , vehicleid,0.900000, 0.100000, -0.499999, 0.000000, 0.000000, 0.000000);
        SendClientMessage(playerid,COLOR_GREEN,"Neonlichter aktiviert.");
    }
    else {
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][0] );
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject( g_aiVehicleSirene[vehicleid][1] );
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Neonlichter deaktiviert.");
    }
    Streamer_Update(playerid);
    return 1;
}

forward Pulse_Bankraub();
public Pulse_Bankraub() {
	KillTimer(g_tPulseBank);
	if( g_iBankraubStatus == Bankraub_Wartezeit ) {
	    MoveDynamicObject(object_bankInteriorLv_vault, BANKINTERIORLV_VAULT_CLOSED, 4);
        g_iBankraubStatus = Bankraub_Bereit;
		SendClientMessageToAll(COLOR_ORANGE,"Die Bank kann jetzt wieder ausgeraubt werden.");
		g_tPulseBank = SetTimer("Pulse_Bankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
	}
	else if( g_iBankraubStatus == Bankraub_Bereit ) {
	    // Whoops.Keine wollte die Bank ausrauben ?!
	}
	else if( g_iBankraubStatus == Bankraub_Aktiv ) {
	    g_iBankraubStatus = Bankraub_Wartezeit;
		g_tPulseBank = SetTimer("Pulse_Bankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
	}
	return 1;
}
forward LVBank_Position(diebid);
public LVBank_Position(diebid) {
    if( GetPlayerInterior(diebid) == 3 )
    if( GetPlayerVirtualWorld(diebid) == VW_BANKINTERIORLV ) {
        if( IsPlayerInRangeOfPoint(diebid,100.0, BANKINTERIORLV_ROB_POINT) ) {
            new
                zeit;
            zeit = ( gettime() - g_unixBankraub );
            if( zeit >= 10*60 ) {
                new
                    // 200.000 bis 400.000
                    beute = (random(40000) * 5 ) + 200000, // 200.000$ - 400.000$ in 5$ Schritten
                    String[128];
                format(String,sizeof(String),"Du hast die Bank erfolgreich ausgeraubt! Deine Beute: $%s", AddDelimiters(beute));
                GivePlayerCash(diebid,beute);
                SendClientMessage(diebid,COLOR_WHITE,String);
                SendClientMessageToAll(COLOR_RED,"[ZENTRALBANK] Die Las Venturas Bank wurde erfolgreich ausgeraubt!");

                KillTimer(g_tPulseBankPosition);
                g_tPulseBankPosition = INVALID_TIMER_ID;

                RemovePlayerAttachedObject(diebid,0);

				Pulse_Bankraub();
			}
		    return 1;
		}
	}
	new
	    String[128];
	SendClientMessage(diebid,COLOR_RED,"Du hast die Bank verlassen! Der Bankraub wurde abgebrochen.");
	format(String,sizeof(String),"Der Bankraub wurde abgebrochen. Bankräuber %s hat die Bank verlassen oder wurde verhaftet.",GetName(diebid));
	SendClientMessageToAll(COLOR_GREEN,String);
	KillTimer(g_tPulseBankPosition);
	g_tPulseBankPosition = INVALID_TIMER_ID;
	RemovePlayerAttachedObject(diebid,0);

	Pulse_Bankraub();
	return 1;
}

forward Bank_Position(diebid);
public Bank_Position(diebid) {
    if( GetPlayerInterior(diebid) == 1 ) {
        if( IsPlayerInRangeOfPoint(diebid, 100.0, BANKINTERIORLS2_ROB_POINT)) {
            new
                zeit;
            zeit = ( gettime() - g_unixBankraub );
            if( zeit >= 10*60 ) {
                new
                    // 200.000 bis 400.000
                    beute = (random(40000) * 5 ) + 200000, // 200.000$ - 400.000$ in 5$ Schritten
                    String[128];
                format(String,sizeof(String),"Du hast die Bank erfolgreich ausgeraubt! Deine Beute: $%s", AddDelimiters(beute));
                GivePlayerCash(diebid,beute);
                SendClientMessage(diebid,COLOR_WHITE,String);
                SendClientMessageToAll(COLOR_RED,"[ZENTRALBANK] Die Los Santos Bank wurde erfolgreich ausgeraubt!");

                KillTimer(g_tPulseBankPosition);
                g_tPulseBankPosition = INVALID_TIMER_ID;

                RemovePlayerAttachedObject(diebid,0);

                Pulse_Bankraub();
            }
            return 1;
        }
    }
    new
        String[128];
    SendClientMessage(diebid,COLOR_RED,"Du hast die Bank verlassen! Der Bankraub wurde abgebrochen.");
    format(String,sizeof(String),"Der Bankraub wurde abgebrochen. Bankräuber %s hat die Bank verlassen oder wurde verhaftet.",GetName(diebid));
    SendClientMessageToAll(COLOR_GREEN,String);
    KillTimer(g_tPulseBankPosition);
    g_tPulseBankPosition = INVALID_TIMER_ID;
    RemovePlayerAttachedObject(diebid,0);
    Pulse_Bankraub();
    return 1;
}

stock HasPlayerWeapon(playerid) {
    new
        weapon,
        ammu;
    for (new i = 1; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, weapon, ammu);
        if( ammu > 1 ) {
            return 1;
        }
    }
    return 0;
}

COMMAND:tresoraufbrechen(playerid,params[]) {
    if( (!IsPlayerInRangeOfPoint(playerid,2.0, BANKINTERIORLV_ROB_POINT) ) || (GetPlayerInterior(playerid) != 3) || (GetPlayerVirtualWorld(playerid) != VW_BANKINTERIORLV) ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Las Venturas Zentralbank.");
        return 1;
    }
    if( g_iBankraubStatus == Bankraub_Wartezeit ) {
        SendClientMessage(playerid, COLOR_RED, "Die Bank kann zur Zeit nicht ausgeraubt werden.");
        return 1;
    }
    if( g_iBankraubStatus == Bankraub_Aktiv ) {
        SendClientMessage(playerid, COLOR_RED, "Ein Bankraub läuft gerade.");
        return 1;
    }
    if( !HasPlayerWeapon(playerid) ) {
        SendClientMessage(playerid, COLOR_RED, "Du kannst die Bank nicht ohne eine Waffe ausrauben.");
        return 1;
    }
    if( GetOnlineExekutive(playerid) < 4) {
        SendClientMessage(playerid, COLOR_RED, "Es sind nicht genug Spieler der Exekutive online.");
	    return 1;
	}
	new
	    String[128];
	format(String,sizeof(String),"[ZENTRALBANK] Bankräuber %s raubt die Las Venturas Zentralbank aus!",GetName(playerid));
	SendClientMessageToAll(COLOR_RED,String);
	PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
	MoveDynamicObject(object_bankInteriorLv_vault, BANKINTERIORLV_VAULT_OPEN,4);

    SendClientMessage(playerid,COLOR_RED,"[ACHTUNG] Die Alarmanlage ist angegangen, die Polizei ist unterwegs! Halte 10 Minuten in der Bank aus!");

    g_tPulseBankPosition = SetTimerEx("LVBank_Position",1373,1,"d",playerid);
    g_iBankraubStatus = Bankraub_Aktiv;
    g_unixBankraub = gettime();

    SetPlayerAttachedObject( playerid, 0, 1550, 15, 0.000000, 0.280000, -0.310000, 0.000000, 15.000000, 0.000000, 1.000000, 1.000000, 1.000000 );

    KillTimer(g_tPulseBank);
    g_tPulseBank = INVALID_TIMER_ID;

    new breakingNewsMessage[145];
    Spieler[playerid][pWanteds] += 6;
    SendClientMessage(playerid, COLOR_DARKRED, "Du hast ein Verbrechen begangen! (Raub/Überfall) Reporter: Polizeizentrale");
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "Dein Aktuelles Wanted Level: %d", Spieler[playerid][pWanteds]);
    SendClientMessage(playerid, COLOR_YELLOW, breakingNewsMessage);
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Raub/Überfall, over.", GetName(playerid), playerid);
    SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: Reporter: Polizeizentrale, Aktuelles Wantedlevel: %d, over", Spieler[playerid][pWanteds]);
    SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);

    return 1;
}

forward ResetEvidenceRoomHeist();
public ResetEvidenceRoomHeist() {
		g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] = EVIDENCEROOM_STATUS_IDLE;
		MoveDynamicObject(object_door_evroomInterior, 1254.1525, -14.1255, 999.9403, 999.0, 0.0000, 0.0000, -90.8999);
		return SendClientMessageToAll(COLOR_RED, "Die Asservatenkammer kann nun wieder ausgeraubt werden.");
}

forward EvidenceRoomHeistFinished();
public EvidenceRoomHeistFinished() {
    new breakingNewsMessage[128];

    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] == INVALID_TIMER_ID) {
        format(breakingNewsMessage, sizeof(breakingNewsMessage), "[EILMELDUNG] Räuber %s hat die Asservatenkammer verlassen oder wurde verhaftet!", GetName(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]));
        SendClientMessageToAll(COLOR_GREEN, breakingNewsMessage);
        SendClientMessageToAll(COLOR_ORANGE, "[EILMELDUNG] Der Überfall auf die Asservatenkammer wurde abgebrochen.");
    } else {
        format(breakingNewsMessage, sizeof(breakingNewsMessage), "[EILMELDUNG] Räuber %s hat die Asservatenkammer erfolgreich ausgeraubt!", GetName(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]));
        SendClientMessageToAll(COLOR_ORANGE, breakingNewsMessage);
        g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] = INVALID_TIMER_ID;

        new lootMoney = random(30000) + 40000;
        new lootDrugs = random(400) + 200;
        new lootMats = random(3000) + 5000;

        Spieler[g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]][pDrugs] += lootDrugs;
        Spieler[g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]][pWaffenteile] += lootMats;
        GivePlayerCash(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER], lootMoney);
        format(breakingNewsMessage, sizeof(breakingNewsMessage), "Du hast $%s, %dg Drogen und %d Waffenteile erbeutet. Lass dich jetzt lieber nicht von den Cops erwischen!", AddDelimiters(lootMoney), lootDrugs, lootMats);
        SendClientMessage(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER], COLOR_YELLOW, breakingNewsMessage);
    }

    g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] = EVIDENCEROOM_STATUS_COOLDOWN;
    SetTimer("ResetEvidenceRoomHeist", 2400000, false);
    return 1;
}

COMMAND:kammerausrauben(playerid, params[]) {
    if (!(IsPlayerInRangeOfPoint(playerid, 2.0, EVIDENCEROOM_INTERIOR_HEIST_P) && GetPlayerInterior(playerid) == 18 && GetPlayerVirtualWorld(playerid) == VW_EVIDENCEROOMINTERIOR)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Asservatenkammer.");
    if (Spieler[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "Du bist noch zu frisch auf dem Server.");
    if (IsPlayerExecutive(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du bist Teil der Exekutive.");
    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_ONGOING) return SendClientMessage(playerid, COLOR_RED, "Es läuft bereits ein Überfall auf die Asservatenkammer.");
    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_COOLDOWN) return SendClientMessage(playerid, COLOR_RED, "Die Asservatenkammer kann noch nicht wieder überfallen werden.");
    if (GetOnlineExekutive(playerid) < 4) return SendClientMessage(playerid, COLOR_RED, "Es sind nicht genug Spieler der Exekutive online.");
    if (!HasPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst die Asservatenkammer nicht ohne eine Waffe ausrauben."); // Es wäre besser, wenn du eine Waffe bei dir hättest.

    new breakingNewsMessage[128];
    g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER] = playerid;
    g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] = EVIDENCEROOM_STATUS_ONGOING;
    Spieler[playerid][pWanteds] += 6;
    SendClientMessage(playerid, COLOR_DARKRED, "Du hast ein Verbrechen begangen! (Raub/Überfall) Reporter: Polizeizentrale");
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "Dein Aktuelles Wanted Level: %d", Spieler[playerid][pWanteds]);
    SendClientMessage(playerid, COLOR_YELLOW, breakingNewsMessage);
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Raub/Überfall, over.", GetName(playerid), playerid);
    SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: Reporter: Polizeizentrale, Aktuelles Wantedlevel: %d, over", Spieler[playerid][pWanteds]);
    SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);

    MoveDynamicObject(object_door_evroomInterior, 1254.1525, -14.1255, 999.9403, 999.0, -90.0000, 0.0000, -90.8999);

    format(breakingNewsMessage, sizeof(breakingNewsMessage), "[EILMELDUNG] Räuber %s raubt die Asservatenkammer aus!", GetName(playerid));
    SendClientMessageToAll(COLOR_RED, breakingNewsMessage);
    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
    SendClientMessage(playerid, COLOR_RED, "[ACHTUNG] Die Alarmanlage ist losgegangen, die Polizei ist unterwegs! Halte 10 Minuten in der Kammer aus!");
    g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] = SetTimer("EvidenceRoomHeistFinished", 600000, false);
    return 1;
}

COMMAND:bankausrauben(playerid,params[]) {
    if ((!IsPlayerInRangeOfPoint(playerid,2.0,2144.1409,1641.5856,993.5761) ) || (GetPlayerInterior(playerid) != 1)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Los Santos Zentralbank.");
    if (g_iBankraubStatus == Bankraub_Wartezeit) return SendClientMessage(playerid, COLOR_RED, "Die Bank kann zur Zeit nicht ausgeraubt werden.");
    if (g_iBankraubStatus == Bankraub_Aktiv) return SendClientMessage(playerid, COLOR_RED, "Ein Bankraub läuft gerade. ");
    if (!HasPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du kannst die Bank nicht ohne eine Waffe ausrauben.");
    if (GetOnlineExekutive(playerid) < 4) return SendClientMessage(playerid, COLOR_RED, "Es sind nicht genug Spieler der Exekutive online.");
    new breakingNewsMessage[128];
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "[ZENTRALBANK] Bankräuber %s raubt die Los Santos Zentralbank aus!", GetName(playerid));
    SendClientMessageToAll(COLOR_RED, breakingNewsMessage);
    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

    SendClientMessage(playerid,COLOR_RED,"[ACHTUNG] Die Alarmanlage ist angegangen, die Polizei ist unterwegs! Halte 10 Minuten in der Bank aus!");

    g_tPulseBankPosition = SetTimerEx("Bank_Position", 1373, 1, "d", playerid);
    g_iBankraubStatus = Bankraub_Aktiv;
    g_unixBankraub = gettime();

    SetPlayerAttachedObject( playerid, 0, 1550, 15, 0.000000, 0.280000, -0.310000, 0.000000, 15.000000, 0.000000, 1.000000, 1.000000, 1.000000 );

    KillTimer(g_tPulseBank);
    g_tPulseBank = INVALID_TIMER_ID;

    Spieler[playerid][pWanteds] += 6;
    SendClientMessage(playerid, COLOR_DARKRED, "Du hast ein Verbrechen begangen! (Raub/Überfall) Reporter: Polizeizentrale");
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "Dein Aktuelles Wanted Level: %d", Spieler[playerid][pWanteds]);
    SendClientMessage(playerid, COLOR_YELLOW, breakingNewsMessage);
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Raub/Überfall, over.", GetName(playerid), playerid);
    SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);
    format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: Reporter: Polizeizentrale, Aktuelles Wantedlevel: %d, over", Spieler[playerid][pWanteds]);
    SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
    SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);

    return 1;
}

COMMAND:flock(playerid,params[]) {
    new
        vehicleid,
        fraktion;
    vehicleid = GetPlayerVehicleID(playerid);
    if( !vehicleid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in einem Fahrzeug.");
    }
    fraktion = GetVehicleFraktion(vehicleid);
    if(!fraktion) {
        return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug ist kein Fraktionsfahrzeug.");
    }
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(doors == VEHICLE_PARAMS_ON)
    {
        UnLockCar(vehicleid);
        GameTextForPlayer(playerid, "~w~Fraktions-Fahrzeug~n~~g~Aufgeschlossen", 3000, 4);
    }
    else if(doors == VEHICLE_PARAMS_OFF || doors == VEHICLE_PARAMS_UNSET)
    {
        LockCar(vehicleid);
        GameTextForPlayer(playerid, "~w~Fraktions-Fahrzeug~n~~r~Abgeschlossen", 3000, 4);
    }
    return 1;
}

COMMAND:werbung(playerid,params[]) {
    new
        tick = gettime();
    if( !IsPlayerInRangeOfPoint(playerid, 5.0, 1412.1915,-1700.3817,13.5395) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2008.1722,1169.3364,10.8203))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Werbe-Platz.");
    if( Spieler[playerid][pLevel] < 5 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 5 sein um eine Werbung zu schreiben!");
    }
    if( g_unixWerbung > tick ) {
        return SendClientMessage(playerid, COLOR_RED, "Die letzte Werbung ist noch keine 3 Minuten alt.");
    }
    ShowPlayerDialog(playerid,DIALOG_WERBUNG,DIALOG_STYLE_INPUT,"Werbung Kaufen","Du kannst eine Werbung kaufen.\nPro Zeichen fallen 200$ Kosten an","Absenden","Abbrechen");
    return 1;
}

COMMAND:hwerbung(playerid,params[]) {
    new tick = gettime();

    if(!IsPlayerInRangeOfPoint(playerid, 5.0, HITMANBASE_AD_POINT)) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Hitman-Werbeplatz.");
    }
    if( !(( Spieler[playerid][pFraktion] == 14)) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Hitman!");
    }
    if( Spieler[playerid][pLevel] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 3 sein um eine Werbung zu schreiben!");
    }
    if( g_unixWerbungHitman > tick ) {
        return SendClientMessage(playerid, COLOR_RED, "Die letzte H-Werbung ist noch keine 8 Minuten alt.");
    }
    ShowPlayerDialog(playerid,DIALOG_HWERBUNG,DIALOG_STYLE_INPUT,"Werbung Kaufen","Du kannst eine Werbung kaufen.\nPro Zeichen fallen 100$ Kosten an","Absenden","Abbrechen");
    return 1;
}

stock GetOnlineExekutive(playerid) {
    new
        c;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 1 ||
                    Spieler[i][pFraktion] == 2 ||
                    Spieler[i][pFraktion] == 16 ) {
                    c++;
                }
            }
        }
    }
    return c;
}

stock IsMedicOnDuty() {
    for (new i; i <= GetPlayerPoolSize(); i++) if (Spieler[i][pFraktion] == 3 && Spieler[i][pDuty]) return true;
    return false;
}

stock GetOnlineMedic(playerid) {
    new
        c;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 3 ) {
                    c++;
                }
            }
        }
    }
    return c;
}

CMD:slap(playerid, params[]) return cmd_aschlagen(playerid, params);

COMMAND:aschlagen(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Aschlagen [Spieler]");
    }
    if(Spieler[playerid][pAdmin] < 1) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        String[128],
        Float:fHealth,
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(giveid,X,Y,Z);
    GetPlayerHealth(giveid,fHealth);
    Z += 5.0;
    fHealth -= 5.0;
    SetPlayerPos(giveid,X,Y,Z);
    SetPlayerHealth(playerid,fHealth);
    format(String,sizeof(String),"%s %s hat %s geschlagen", GetPlayerAdminRang(playerid), GetName(playerid),GetName(giveid));
    SendAdminMessage(COLOR_YELLOW, String);
    PlayerPlaySound(giveid,1190,0.0,0.0,0.0);
    return 1;
}

COMMAND:entbannen(playerid,params[]) {
    new
        Spielername[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",Spielername)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Entbannen [Spielername]");
    }
    if(Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    /*
    if( !mysql_CheckName(Spielername) ) {
        return SendClientMessage(playerid, COLOR_RED, "Dieser Spieler existiert nicht.");
    }
    */
    new
        String[256],
        Query[170];
    mysql_real_escape_string(Spielername,Spielername);
    format(Query,sizeof(Query),"UPDATE `accounts` SET `Banned` = 0 , `TimeBan` = 0,`GebanntVon` = '' , `BanGrund` = ''  WHERE `Name` = '%s'",Spielername);
    mysql_pquery(Query,THREAD_ENTBANNEN,playerid,gSQL,MySQLThreadOwner);
    format(String,sizeof(String),"%s %s hat den Spieler %s entbannt", GetPlayerAdminRang(playerid), GetName(playerid), Spielername);
    SendAdminMessage(COLOR_YELLOW, String);
    format(Query,sizeof(Query),"SELECT `ipadresse` FROM `accounts` WHERE `Name` = '%s'",Spielername);
    mysql_pquery(Query,THREAD_ENTBANNEN_IP,playerid,gSQL,MySQLThreadOwner);

    format(String,sizeof(String),"%s %s hat Spieler %s entbannt.", GetPlayerAdminRang(playerid), GetName(playerid), Spielername);
    AdminLog(String);

    format(Query,sizeof(Query),"%s wurde von %s %s entbannt!",Spielername, GetPlayerAdminRang(playerid), GetName(playerid));
    SendUCPAktenEintrag( playerid,GetName(playerid),Spielername , Query );

    return 1;
}

stock GetPlayerAdminRang(playerid) {
    new adminName[30] = "";
    switch (Spieler[playerid][pAdmin]) {
        case 0: { adminName = "Normalen Spieler"; }
        case 1: { adminName = "Supporter"; }
        case 2: { adminName = "Moderator"; }
        case 3: { adminName = "Moderator"; }
        case 4: { adminName = "Administrator"; }
        case 5: { adminName = "Server Manager"; }
        case 6: { adminName = "Projektleiter"; }
        case 7: { adminName = "Server Gott"; }

        default: {}
    }

    return adminName;
}

COMMAND:delfraksperre(playerid,params[]) {
    new
        sName[MAX_PLAYER_NAME],
        giveid;
    if(sscanf(params,"s[24]",sName)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Delfraksperre [Spieler] ");
    }
    sscanf(sName,"u",giveid);
    if(Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    /*
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber die Fraktionssperre nicht entziehen.");
    }
    */
    mysql_real_escape_string(sName,sName);
    if( IsPlayerConnected(giveid) ) {
        new
            String[128];
        format(String,sizeof(String),"Du hast dem Spieler %s erfolgreich die Fraktionssperre entfernt.",GetName(giveid));
        SendClientMessage(playerid,COLOR_GREEN,String);
        format(String,sizeof(String),"[SPERRE] Deine Fraktionssperre wurde von %s aufgehoben!",GetName(playerid));
        SendClientMessage(giveid,COLOR_GREEN,String);
        Spieler[giveid][pFrakSperre] = 0;

        new
            query[256];
        format(query,sizeof(query),"%s's Fraktionssperre wurde von %s %s aufgehoben!", GetName(giveid), GetPlayerAdminRang(playerid), GetName(playerid) );
        SendUCPAktenEintrag( playerid,GetName(playerid) , GetName(giveid) , query );
    }
    else {
        new
            String[128];
        format(String,sizeof(String),"Du hast dem Spieler %s erfolgreich die Fraktionssperre entfernt.",sName);
        SendClientMessage(playerid,COLOR_GREEN,String);

        format(String,sizeof(String),"UPDATE `accounts` SET `FrakSperre` = 0 WHERE `Name` = '%s'",sName);
        mysql_oquery(String,THREAD_DUMMY,playerid,gSQL);

        String[0] = '\0';
        format(String,sizeof(String),"%s's Fraktionssperre wurde von %s %s aufgehoben!", sName, GetPlayerAdminRang(playerid), GetName(playerid) );
        SendUCPAktenEintrag( playerid,GetName(playerid) ,sName , String );
    }
    return 1;
}
COMMAND:fraksperre(playerid,params[]) {
    new
        giveid = INVALID_PLAYER_ID,
        sName[MAX_PLAYER_NAME],
        reason[128];
    if(sscanf(params,"ss[128]",sName,reason)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fraksperre [Spieler] [Grund]");
    }
    sscanf(sName,"u",giveid);
    if(Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    /*
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    */
    if( playerid == giveid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber keine Fraktionssperre geben.");
    }
    if( IsPlayerConnected(giveid)) {
        new
            query[300],
            String[180];
        format(String,sizeof(String),"Du hast dem Spieler %s erfolgreich eine Fraktionssperre verpasst.",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        format(String,sizeof(String),"[SPERRE] Du hast von %s eine Fraktionssperre erhalten",GetName(playerid));
        SendClientMessage(giveid,COLOR_RED,String);
        format(String,sizeof(String),"Begründung: %s",reason);
        SendClientMessage(giveid,COLOR_RED,String);
        Spieler[giveid][pFrakSperre] = 1;

        format(query,sizeof(query),"%s erhielt von %s %s eine Fraktionssperre, Grund und Dauer: %s!", GetName(giveid), GetPlayerAdminRang(playerid), GetName(playerid), reason);
        mysql_real_escape_string(String,String);
        SendUCPAktenEintrag( playerid,GetName(playerid) , GetName(giveid) , query , THREAD_FRAKSPERRE);
    }
    else {
        new
            query[300],
            String[180];
        format(String,sizeof(String),"Du hast dem Spieler %s erfolgreich eine Fraktionssperre verpasst.",sName);
        SendClientMessage(playerid,COLOR_YELLOW,String);

        format(String,sizeof(String),"UPDATE `accounts` SET `FrakSperre` = 1 WHERE `Name` = '%s'",sName);
        mysql_oquery(String,THREAD_DUMMY,playerid,gSQL);

        format(query,sizeof(query),"%s erhielt von %s %s eine Fraktionssperre, Grund und Dauer: %s!", sName, GetPlayerAdminRang(playerid), GetName(playerid), reason);
        mysql_real_escape_string(String,String);
        SendUCPAktenEintrag( playerid,GetName(playerid) , sName , query , THREAD_FRAKSPERRE);
    }
    return 1;
}

#define MAX_DEATH_NOTICE 50

enum e_DeathNotice {
    DN_iPickup,
    DN_hashOwner,
    //Text:DN_tdText,
    Text3D:DN_t3dLabel,
    DN_tTimer
}

new
    g_iDeathNotice = -1,
    g_DeathNotice[MAX_DEATH_NOTICE][e_DeathNotice];

stock DeathNotice_GetIndex() {
    g_iDeathNotice++;
    if( g_iDeathNotice >= MAX_DEATH_NOTICE ) {
        g_iDeathNotice = 0;
    }
    return g_iDeathNotice;
}

stock CreateDisconnectNotice( playername[], Float:x,Float:y,Float:z,reason) {
    // printf("CreateDisconnectNotice(%s,%.2f,%.2f,%.2f,%d,%d)", playername, x,y,z,interior , reason);
    new
        id,
        sReason[16],
        String[128];
    if(reason == 0 ) {
        sReason = "Timeout/Crash";
    }
    else if(reason == 1 ) {
        sReason = "Ausgeloggt";
    }
    else if(reason == 2 ) {
        sReason = "Kick/Ban";
    }
    id = DeathNotice_GetIndex();
    format(String,sizeof(String),"%s - %s",playername,sReason);
    g_DeathNotice[id][DN_iPickup] = CreateDynamicPickup(1314,1,x,y,z+0.25);
    g_DeathNotice[id][DN_t3dLabel] = CreateDynamic3DTextLabel(String,0xFFFFFFBB,x,y,z + 0.8,30.0, .testlos = 1);
    g_DeathNotice[id][DN_tTimer] = SetTimerEx("DestroyDisconnectNotice",30*1000,0,"d",id);
    strtolower(playername);
    g_DeathNotice[id][DN_hashOwner] = udb_hash( playername );
    return 1;
}

forward DestroyDisconnectNotice(noticeid);
public DestroyDisconnectNotice(noticeid) {
    //printf("DestroyDisconnectNotice(%d)",noticeid);
    DestroyDynamicPickup( g_DeathNotice[noticeid][DN_iPickup] );
    DestroyDynamic3DTextLabel( g_DeathNotice[noticeid][DN_t3dLabel] );
    KillTimer(g_DeathNotice[noticeid][DN_tTimer]);
    g_DeathNotice[noticeid][DN_hashOwner] = 0;
    return 1;
}

COMMAND:killauftrag(playerid,params[]) {
    new giveid, preis;

    if (sscanf(params,"ud",giveid,preis)) return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Killauftrag [Spieler] [Kopfgeld]");
    if (Spieler[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "Du kannst erst ab Level 3 Kopfgeld setzen.");
    if (!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (Spieler[playerid][pFraktion] == 14) return SendClientMessage(playerid, COLOR_RED, "Du kannst als Hitman keine Aufträge setzen.");
    if (playerid == giveid) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber kein Kopfgeld geben.");
    if (Spieler[giveid][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist noch unter Level 3.");
    if (Spieler[playerid][pKopfgeldID] != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Kopfgeld auf einen Spieler gesetzt.");
    if (!(5000 <= preis <= 100000)) return SendClientMessage(playerid, COLOR_RED, "Das Kopfgeld muss zwischen $5.000 und $100.000 liegen");
    if (GetPlayerMoney(playerid) < preis) return SendClientMessage(playerid, COLOR_RED, "Das gesetzte Kopfgeld besitzt du nicht");

    new String[128];
    format(String,sizeof(String),"Spieler %s möchte das %s ermordet wird, Preis $%s. Auftrag mit '/Accept Hitman' annehmen!", GetName(playerid),GetName(giveid), AddDelimiters(preis));
    //SendJobMessage( 15, COLOR_CHAT_JOB, String);
    SendFraktionMessage( 14, COLOR_YELLOW, String);
    format(String,sizeof(String),"Du hast $%s auf die Ermordung von %s gesetzt! Warte bis es ein Hitman annimmt.", AddDelimiters(preis),GetName(giveid));
    SendClientMessage(playerid,COLOR_BLUE,String);
    GivePlayerCash(playerid,-preis);

    format(String,sizeof(String),"Killauftrag von %s auf %s ($%s)",GetName(playerid),GetName(giveid), AddDelimiters(preis));
    HitmanLog(String);

    Spieler[playerid][pKopfgeldID] = giveid;
    Spieler[playerid][pKopfgeld] = preis;
    Spieler[playerid][pKopfgeldStatus] = false;
    return 1;
}

CMD:hrelease(playerid, params[]) {
    if (Spieler[playerid][pFraktion] != 14) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Hitman.");
    if (SelectedPlayer[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "Du hast keinen Auftrag angenommen.");

    new message[128];
    format(message, sizeof(message), "%s hat den Auftrag von %s auf %s wieder freigegeben.", GetName(playerid), GetName(SelectedPlayer[playerid]), GetName(Spieler[SelectedPlayer[playerid]][pKopfgeldID]));
    SendFraktionMessage(14, COLOR_YELLOW, message);

    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, "Dein Auftragskiller hat den Auftrag wieder freigegeben.");
    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, "Dein Auftrag kann wieder von anderen Hitmen angenommen werden.");

    Spieler[SelectedPlayer[playerid]][pKopfgeldStatus] = false;
    SelectedPlayer[playerid] = INVALID_PLAYER_ID;
    Spieler[playerid][pHitmenAuftragID] = INVALID_PLAYER_ID; // fuck berkan

    return 1;
}

stock ShowPlayerHitmenList(playerid) {
    new
        String[512];
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pKopfgeldID] != INVALID_PLAYER_ID ) {
            if( Spieler[i][pKopfgeldStatus] == false ) {
                format(String,sizeof(String),"%s%s - $%s (%s)\n", String , GetName(Spieler[i][pKopfgeldID]), AddDelimiters(Spieler[i][pKopfgeld]),GetName(i) );
            }
        }
    }
    if(!String[0]) {
        ShowPlayerDialog(playerid,DIALOG_HITMEN_E,DIALOG_STYLE_MSGBOX,"Hitmen List","Keine Aufträge vorhanden!","Abbruch","");
        return 0;
    }
    else {
        ShowPlayerDialog(playerid,DIALOG_HITMEN_LIST,DIALOG_STYLE_LIST,"Hitmen List",String,"Annehmen","Ablehnen");
        return 1;
    }
}

stock GetPlayerHitmenIndex(index) {
    new
        j;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pKopfgeldID] != INVALID_PLAYER_ID ) {
            if( Spieler[i][pKopfgeldStatus] == false ) {
                if(index == j ) {
                    return i;
                }
                j++;
            }
        }
    }
    return INVALID_PLAYER_ID;
}
COMMAND:dzeigen(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pJob] != 14) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Detektiv.");
    if ((Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22)) return SendClientMessage(playerid, COLOR_RED, "Du bist ein Exekutivbeamter. Nutze /finden.");
    new giveid, pID;
    if (sscanf(params, "uu", pID, giveid) || pID == INVALID_PLAYER_ID || giveid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING " /Dzeigen [Spieler (dem zu zeigenden)] [Spieler (den zu suchenden)]");

    if (playerid == giveid) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst dich selber nicht orten!");
    if (playerid == pID) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Nutze /DFinden um dir selber die Position eines Spieler anzuzeigen.");
    if (pID == giveid) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst einem Spieler nicht sich selbst zeigen.");

    if (Spieler[giveid][pAdminDienst] || IsPlayerSpectating[giveid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler kann nicht geortet werden.");
    if (Spieler[playerid][tickDfind] > gettime()) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst noch nicht wieder orten.");

    if (!IsPlayerInRangeOfPlayer(playerid, pID, 15.0)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Dein Kunde ist nicht in deiner Nähe.");

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(giveid, X, Y, Z);
    SetPlayerCheckpointEx(pID, X, Y, Z, 1.0, CP_FINDEN);
    Spieler[playerid][tickDfind] = gettime() + GetPlayerDetectivSkillValue(playerid);
    PlayerSkillUpgrade(playerid, pDetektivPoints, 1, 1);
    SCMFormatted(playerid, COLOR_GREEN, "[DETEKTIV] {FFFFFF}Du hast %s den Standort von %s gezeigt.", GetName(pID), GetName(giveid));
    SCMFormatted(pID, COLOR_GREEN, "[DETEKTIV] {FFFFFF}%s zeigt dir den Standort von %s.", GetName(playerid), GetName(giveid));
    return 1;
}

COMMAND:dfinden(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pJob] != 14) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Detektiv.");
    if ((Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22)) return SendClientMessage(playerid, COLOR_RED, "Du bist ein Exekutivbeamter. Nutze /finden.");
    new giveid;
    if (sscanf(params, "u", giveid) || giveid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Dfinden [Spieler]");
    if (playerid == giveid) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst dich selber nicht orten!");
    if (Spieler[giveid][pAdminDienst] || IsPlayerSpectating[giveid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler kann nicht geortet werden.");
    if (Spieler[playerid][tickDfind] > gettime()) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst noch nicht wieder orten.");

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(giveid,X,Y,Z);
    SetPlayerCheckpointEx(playerid, X, Y, Z, 1.0, CP_FINDEN);
    Spieler[playerid][tickDfind] = gettime() + GetPlayerDetectivSkillValue(playerid);
    PlayerSkillUpgrade(playerid, pDetektivPoints, 1, 1);
    return SCMFormatted(playerid, COLOR_ORANGE, "[DETEKTIV] {FFFFFF}Du hast %s geortet.", GetName(giveid));
}

#define MAX_FRAKTIONSSKINS 23

enum e_FraktionsSkins {
    Float:FS_fX,
    Float:FS_fY,
    Float:FS_fZ,
    FS_iFraktion,
    FS_aiSkins[MAX_FRAKTIONSSKINS] // 23
};

new const g_FraktionsSkins[][e_FraktionsSkins] = {
	// X    Y       Z     Frak  { Skin 1-7 }
	{LSPD_INTERIOR_FSKIN_POINT,	    1, { 300 , 301 , 281 , 283 , 267 , 265 , 266 , 265 , 306 , 285 , 284 , 303 , 304 , 192 , 59 , 60 , 72 ,188 , 229 , 93 , 233 , 226 } },
	{SAMD_INTERIOR_FSKIN_POINT,	3, { 70 , 274, 275, 276, 277, 278, 279, 308 , 59 , 60 , 29 , 72 , 188 , 229 , 93 , 233 , 226} },
	{POO_INTERIOR_FSKIN_POINT,	    5, { 71 , 44 , 305 , 59 , 60 , 72 ,188 , 229 , 93 , 233 , 226 } },
	{FBI_INTERIOR_FSKIN_POINT,	2, { 286 , 285 , 309 , 166, 165,59 , 21 , 60 , 72 ,188 , 229 , 93 , 233 , 226 } },
	{-2033.1216, -117.4597,  1035.1719,	8, { 194 , 240 , 151 , 59 , 7 , 101 , 12 , 5 , 24 , 29 , 192 , 56 } },
	{HITMANBASE_FSKIN_POINT,	14, { 2 , 29 , 229 ,  171 , 23 , 19 , 35 , 22 , 11, 8 } },
	{NINEDEMONSBASE_SPAWN_POINT,		15, { 247, 248, 100, 261, 291, 146, 158, 162, 199, 200, 201 } },
	{2284.1960,	2423.7107,	3.4766,		16, { 282 , 285 , 303 , 305 , 304 , 59 , 60 , 72 ,188 , 229 , 93 , 233 , 226 } },
	{307.6244,  -131.3671,  999.6083,	18, { 287 , 303 , 305 , 304 , 44 , 59 , 60 , 72 ,188 , 229 , 93 , 233 , 226 } },
	{326.9853,  306.7588,  999.1484,	22, { 288 , 34 , 29 , 19 , 21 , 59, 211 , 7 , 5 , 24 , 60 } }
};


COMMAND:fskin(playerid,params[]) {
    #pragma unused params
    new String[128], frak = Spieler[playerid][pFraktion];

    if(frak) {
        for(new i; i < sizeof(g_FraktionsSkins); i++) {
            if(frak == g_FraktionsSkins[i][FS_iFraktion]) {
                if(IsPlayerInRangeOfPoint(playerid, 5.0, g_FraktionsSkins[i][FS_fX], g_FraktionsSkins[i][FS_fY], g_FraktionsSkins[i][FS_fZ])) {
                    for (new j; j < MAX_FRAKTIONSSKINS; j++)
                        if (g_FraktionsSkins[i][FS_aiSkins][j] > 0)
                            format(String, sizeof(String), "%s%d\n", String, g_FraktionsSkins[i][FS_aiSkins][j]);

                    ShowPlayerDialog(playerid, DIALOG_FSKIN, DIALOG_STYLE_LIST, "FSKIN", String, "Auswählen", "Abbruch");
                }
                else
                    SendClientMessage(playerid, COLOR_RED, "Du bist nicht am FSKIN-Punkt deiner Fraktion");

                break;
            }
        }
    }
    return 1;
}

COMMAND:knastzeit(playerid,params[]) {
    new
        giveid,
        modus,
        zeit;
    if(sscanf(params,"ucd",giveid,modus,zeit)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Knastzeit [Spieler] [+/-] [Sekunden]");
    }
    if(zeit <= 0 ) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Knastzeit [Spieler] [+/-] [Sekunden]");
    }
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst deine Knastzeit nicht selber setzen.");
    }
    if(Spieler[giveid][pJailed] == 0) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht im Gefängnis.");
    }
    if(modus == '+') {
        Spieler[giveid][pJailTime] += zeit;
    }
    else if(modus == '-') {
        Spieler[giveid][pJailTime] -= zeit;
    }
    else {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Knastzeit [Spieler] [+/-] [Sekunden]");
    }
    new
        String[128];
    format(String,sizeof(String),"Polizeibeamter %s hat die Knastzeit von %s %c %d gesetzt ( Total: %d)",GetName(playerid),GetName(giveid),modus,zeit,Spieler[giveid][pJailTime]);
    SendFraktionMessage(1, COLOR_BLUE, String);
    SendFraktionMessage(2, COLOR_BLUE, String);
    SendFraktionMessage(16, COLOR_BLUE, String);
    SendFraktionMessage(18, COLOR_BLUE, String);
    format(String,sizeof(String),"Polizeibeamter %s hat deine Knastzeit auf %c %d gesetzt ( Total: %d)",GetName(playerid),modus,zeit,Spieler[giveid][pJailTime]);
    SendClientMessage(giveid,COLOR_ORANGE,String);
    return 1;
}

CMD:rallcars(playerid, params[]) return cmd_respawnallcars(playerid, params);

COMMAND:respawnallcars(playerid, params[]) {
    new hour, minu, sec;
    gettime(hour, minu, sec);
    if (Spieler[playerid][pAdmin] < 3 && hour < 23 && hour > 9)
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    else if (Spieler[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");

    new trailerid, bool:excludeVehicles[MAX_VEHICLES];
    for (new i = 0; i < sizeof(vehicle_truckerBase); i++)
        if (IsVehicleOccupied(vehicle_truckerBase[i]) && (trailerid = GetVehicleTrailer(vehicle_truckerBase[i]))) excludeVehicles[trailerid] = true;

    for (new i = 0; i < sizeof(vehicle_pooExterior); i++)
        if (IsVehicleOccupied(vehicle_pooExterior[i]) && (trailerid = GetVehicleTrailer(vehicle_pooExterior[i]))) excludeVehicles[trailerid] = true;

    for (new i = 1; i < MAX_VEHICLES; i++)
        if (!IsVehicleOccupied(i) && !excludeVehicles[i])
            SetVehicleToRespawn(i);
    
    new String[128];
    format(String, sizeof(String), "%s %s hat alle unbesetzten Fahrzeuge zurückgespawnt.", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessageToAll(COLOR_YELLOW, String);
    return 1;
}


stock VehicleDriverID(vehicleid) //By Jan "DracoBlue" Schütze
{
    for(new i ; i < MAX_PLAYERS ; i++) {
        if((GetPlayerVehicleID(i) == vehicleid) && (GetPlayerState(i)==2))  return i;
    }
    return INVALID_PLAYER_ID;
}
//-------------------------------------------------------------------------------

stock IsVehicleInUse(vehicleid) { //By Sacky
    if(VehicleDriverID(vehicleid) != INVALID_PLAYER_ID) {
        return 1;
    }
    return 0;
}

COMMAND:safebox(playerid,params[]) {
    if (!IsPlayerInRangeOfPoint(playerid,3.0, SAFEBOX_COORDS_LS) && !IsPlayerInRangeOfPoint(playerid,3.0, SAFEBOX_COORDS_LV))
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht in der Nähe der Safebox! /Navi -> Illegale Orte -> Safebox");

    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "Du darfst dafür nicht im Fahrzeug sein.");
    new menge, item, sItem[32], aktion, sAktion[32];
    if(sscanf(params,"s[32]s[32]d",sItem,sAktion,menge)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Safebox [Drogen/Waffenteile/Wantedcodes/Spice] [rausnehmen/reinlegen] [Anzahl]");
    }
    if(menge <= 0 ) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Safebox [Drogen/Waffenteile/Wantedcodes/Spice] [rausnehmen/reinlegen] [Anzahl]");
    }
    if(!strcmp(sItem,"drogen",true)) {
        item = 1;
    }
    else if(!strcmp(sItem,"waffenteile",true)) {
        item = 2;
    }
    else if(!strcmp(sItem,"wantedcodes",true)) {
        item = 3;
    }
    else if(!strcmp(sItem,"spice",true)) {
        item = 4;
    }
    if(!item) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Safebox [Drogen/Waffenteile/Wantedcodes/Spice] [rausnehmen/reinlegen] [Anzahl]");
    }
    if(!strcmp(sAktion,"rausnehmen",true)) {
        aktion = 1;
    }
    else if(!strcmp(sAktion,"reinlegen",true)) {
        aktion = 2;
    }
    if(!aktion) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Safebox [Drogen/Waffenteile/Wantedcodes] [rausnehmen/reinlegen] [Anzahl]");
    }
    new
        String[128];
    if(item == 1 ) {    // Drogen
        if(aktion == 1 ) { // rausnehmen
            if( menge > Spieler[playerid][pSafeDrogen] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Drogen entnehmen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeDrogen]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pDrugs] += menge;
            Spieler[playerid][pSafeDrogen] -= menge;
            format(String,sizeof(String),"Du hast %d Stk Drogen aus deiner Safebox entnommen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeDrogen]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
        else if(aktion == 2 ) { // reinlegen
            if( menge > Spieler[playerid][pDrugs] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Drogen einlagern ( Hand: %d Stk )",menge,Spieler[playerid][pDrugs]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pDrugs] -= menge;
            Spieler[playerid][pSafeDrogen] += menge;
            format(String,sizeof(String),"Du hast %d Stk Drogen in deiner Safebox gelagert ( Lager: %d Stk )",menge,Spieler[playerid][pSafeDrogen]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    else if(item == 2 ) { // Waffenteile
        if(aktion == 1 ) { // rausnehmen
            if( menge > Spieler[playerid][pSafeTeile] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Waffenteile entnehmen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeTeile]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pWaffenteile] += menge;
            Spieler[playerid][pSafeTeile] -= menge;
            format(String,sizeof(String),"Du hast %d Stk Waffenteile aus deiner Safebox entnommen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeTeile]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
        else if(aktion == 2 ) { // reinlegen
            if( menge > Spieler[playerid][pWaffenteile] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Waffenteile einlagern ( Hand: %d Stk )",menge,Spieler[playerid][pWaffenteile]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pWaffenteile] -= menge;
            Spieler[playerid][pSafeTeile] += menge;
            format(String,sizeof(String),"Du hast %d Stk Waffenteile in deiner Safebox gelagert ( Lager: %d Stk )",menge,Spieler[playerid][pSafeTeile]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    else if(item == 3 ) { // WantedCodes
        if(aktion == 1 ) { // rausnehmen
            if( menge > Spieler[playerid][pSafeWantedCodes] ) {
                format(String,sizeof(String),"Du kannst keine %d WantedCodes entnehmen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeWantedCodes]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pWantedCodes] += menge;
            Spieler[playerid][pSafeWantedCodes] -= menge;
            format(String,sizeof(String),"Du hast %d WantedCodes aus deiner Safebox entnommen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeWantedCodes]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
        else if(aktion == 2 ) { // reinlegen
            if( menge > Spieler[playerid][pWantedCodes] ) {
                format(String,sizeof(String),"Du kannst keine %d WantedCodes einlagern ( Hand: %d Stk )",menge,Spieler[playerid][pWantedCodes]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pWantedCodes] -= menge;
            Spieler[playerid][pSafeWantedCodes] += menge;
            format(String,sizeof(String),"Du hast %d WantedCodes in deiner Safebox gelagert ( Lager: %d Stk )",menge,Spieler[playerid][pSafeWantedCodes]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    else if(item == 4 ) { // Spice
        if(aktion == 1 ) { // rausnehmen
            if( menge > Spieler[playerid][pSafeSpice] ) {
                format(String,sizeof(String),"Du kannst keine %d Spice entnehmen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeSpice]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pSpice] += menge;
            Spieler[playerid][pSafeSpice] -= menge;
            format(String,sizeof(String),"Du hast %d Spice aus deiner Safebox entnommen ( Lager: %d Stk )",menge,Spieler[playerid][pSafeSpice]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
        else if(aktion == 2 ) { // reinlegen
            if( menge > Spieler[playerid][pSpice] ) {
                format(String,sizeof(String),"Du kannst keine %d Spice einlagern ( Hand: %d Stk )",menge,Spieler[playerid][pSpice]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pSpice] -= menge;
            Spieler[playerid][pSafeSpice] += menge;
            format(String,sizeof(String),"Du hast %d Spice in deiner Safebox gelagert ( Lager: %d Stk )",menge,Spieler[playerid][pSafeSpice]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    return 1;
}

COMMAND:hitmanmaske(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 14 ) {
        return SendClientMessage(playerid,COLOR_RED,"Dieser Befehl ist nur für Hitman möglich");
    }
    if( Spieler[playerid][bMaske] ) {
        KillTimer(Spieler[playerid][tMaske]);
        Spieler[playerid][bMaske] = false;
        SetPlayerColor(playerid, ( GetPlayerColor(playerid) | 0xFF ) );
        for (new i ; i < MAX_PLAYERS ; i++) {
            ShowPlayerNameTagForPlayer(i,playerid,1);
        }
        return SendClientMessage(playerid, COLOR_ORANGE, "Du hast deine Maske vorzeitig abgenommen.");
        // return SendClientMessage(playerid,COLOR_RED,"Du trägst bereits eine Maske");
    }
    if( Spieler[playerid][pHitmenAuftragID] == INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast kein Auftrag! Somit kannst du deine Maske nicht aufsetzen!");
    }
    SendClientMessage(playerid,COLOR_GREEN,"Du hast deine Maske aufgezogen, dein Name ist nun für 5 Minuten verdeckt!");
    Spieler[playerid][tMaske] = SetTimerEx("stopMask",(5*60*1000)+53,false,"d",playerid);
    Spieler[playerid][bMaske] = true;
    SetPlayerColor(playerid, ( GetPlayerColor(playerid) & 0xFFFFFF00 ) );
    for(new i ; i < MAX_PLAYERS ; i++) {
        ShowPlayerNameTagForPlayer(i,playerid,0);
    }
    return 1;
}

forward stopMask(playerid);
public stopMask(playerid) {
    SendClientMessage(playerid,COLOR_ORANGE,"Die 5 Minuten sind um, dein Name ist nun wieder für alle sichtbar!");
    Spieler[playerid][bMaske] = false;
    KillTimer(Spieler[playerid][tMaske]);
    SetPlayerColor(playerid, ( GetPlayerColor(playerid) | 0xFF ) );
    for(new i ; i < MAX_PLAYERS ; i++) {
        ShowPlayerNameTagForPlayer(i,playerid,1);
    }
    return 1;
}

COMMAND:adminmaske(playerid,params[]) {
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    if( Spieler[playerid][abMaske] ) {
        return SendClientMessage(playerid,COLOR_RED,"Du trägst bereits eine Maske");
    }
    SendClientMessage(playerid,COLOR_GREEN,"Du hast deine Maske aufgezogen, dein Name ist nun für 10 Minuten verdeckt!");
    Spieler[playerid][atMaske] = SetTimerEx("astopMask",(10*60*1000)+53,false,"d",playerid);
    Spieler[playerid][abMaske] = true;
    SetPlayerColor(playerid, ( GetPlayerColor(playerid) & 0xFFFFFF00 ) );
    for(new i ; i < MAX_PLAYERS ; i++) {
        ShowPlayerNameTagForPlayer(i,playerid,0);
    }
    return 1;
}

forward astopMask(playerid);
public astopMask(playerid) {
    SendClientMessage(playerid,COLOR_ORANGE,"Die 10 Minuten sind um, dein Name kann nun jeder wieder sehen!");
    Spieler[playerid][abMaske] = false;
    KillTimer(Spieler[playerid][atMaske]);
    SetPlayerColor(playerid, ( GetPlayerColor(playerid) | 0xFF ) );
    for(new i ; i < MAX_PLAYERS ; i++) {
        ShowPlayerNameTagForPlayer(i,playerid,1);
    }
    return 1;
}

COMMAND:augenbinde(playerid,params[]) {
    new
        giveid;
    giveid = Spieler[playerid][iKidnapID];
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13
    || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gang/Mafia Mitglied.");
    /*if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_GREY,"Dein Opfer ist nicht mehr auf dem Server");
    }*/
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if( Spieler[playerid][pFraktion] == 17 ) {
        // Falls Wheelman,giveid anders auslesen
        giveid = Spieler[playerid][iWheelmanID];
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Kein Spieler Online dem du die Augenbinde abnehmen kannst");
        }
    }
    if(!IsPlayerInRangeOfPoint(giveid, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Fahrzeug.");
    if( GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem anderen Fahrzeug.");
    }
    new
        String[128];
    if( Spieler[giveid][bAugenbinde]) {
        new
            Float:X,
            Float:Y,
            Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        format(String,sizeof(String),"Du hast Spieler %s die Augenbinde abgenommen",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat deine Augenbinde abgenommen, du kannst wieder sehen",GetName(playerid));
        SendClientMessage(giveid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat %s die Augenbinde abgenommen",GetName(playerid),GetName(giveid));
        SendRoundMessage(x,y,z,COLOR_LIGHTGREY,String);

        ResetAugenbinde(giveid);
        Spieler[giveid][bAugenbinde] = false;
    }
    else {
        if( Spieler[playerid][pFraktion] == 17 ) {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat keine Augenbinde auf");
            return 1;
        }
        new
            Float:X,
            Float:Y,
            Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        format(String,sizeof(String),"Du hast Spieler %s die Augenbinde aufgesetzt",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat dir eine Augenbinde aufgesetzt, du kannst nichts mehr sehen",GetName(playerid));
        SendClientMessage(giveid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat %s eine Augenbinde ausgesetzt",GetName(playerid),GetName(giveid));
        SendRoundMessage(x,y,z,COLOR_LIGHTGREY,String);

        SetPlayerCameraPos(giveid,3500.0,-2000.0,0.0);
        SetPlayerCameraLookAt(giveid,0.0,0.0,0.0);
        TextDrawShowForPlayer(giveid,BlackBox);
        Spieler[giveid][bAugenbinde] = true;
    }
    return 1;
}

stock ResetAugenbinde(playerid) {
    TextDrawHideForPlayer(playerid,BlackBox);
    SetCameraBehindPlayer(playerid);
    return 1;
}

COMMAND:mundbinde(playerid,params[]) {
    new
        giveid;
    giveid = Spieler[playerid][iKidnapID];
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13
    || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gang/Mafia Mitglied.");
    /*if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Dein Opfer ist nicht mehr auf dem Server");
    }*/
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if( Spieler[playerid][pFraktion] == 17 ) {
        // Falls Wheelman,giveid anders auslesen
        giveid = Spieler[playerid][iWheelmanID];
        if(!IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Kein Spieler Online dem du die Augenbinde abnehmen kannst");
        }
    }
    if(!IsPlayerInRangeOfPoint(giveid, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Fahrzeug.");
    if( GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist in einem anderen Fahrzeug.");
    }
    new
        String[128];
    if( Spieler[giveid][bMundbinde]) {
        new
            Float:X,
            Float:Y,
            Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        format(String,sizeof(String),"Du hast Spieler %s die Mundbinde abgenommen",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat deine Mundbinde abgenommen, du kannst wieder schreiben",GetName(playerid));
        SendClientMessage(giveid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat %s die Mundbinde abgenommen",GetName(playerid),GetName(giveid));
        SendRoundMessage(x,y,z,COLOR_LIGHTGREY,String);

        Spieler[giveid][bMundbinde] = false;
    }
    else {
        if( Spieler[playerid][pFraktion] == 17 ) {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat keine Mundbinde");
            return 1;
        }
        new
            Float:X,
            Float:Y,
            Float:Z;
        GetPlayerPos(playerid,X,Y,Z);
        format(String,sizeof(String),"Du hast Spieler %s die Mundbinde aufgesetzt",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat dir eine Munde aufgesetzt, du kannst nichts mehr schreiben",GetName(playerid));
        SendClientMessage(giveid,COLOR_YELLOW,String);
        format(String,sizeof(String),"%s hat %s eine Mundbinde aufgesetzt",GetName(playerid),GetName(giveid));
        SendRoundMessage(x,y,z,COLOR_LIGHTGREY,String);
        Spieler[giveid][bMundbinde] = true;
    }
    return 1;
}


public OnPlayerEnterDynamicArea(playerid, areaid) {
    //printf("OnPlayerEnterDynamicArea(%d,%d)",playerid,areaid);
    //if(Gate_OnPlayerEnterDynamicArea(playerid,areaid)) return 1;
    Gang_OnPlayerEnterDynamicArea(playerid,areaid);
    for(new i ; i < sizeof(g_aiNoDM) ; i++) {
        if( g_aiNoDM[i] == areaid) {
            TextDrawShowForPlayer(playerid,tdNoDM);
            Spieler[playerid][bNoDMZone] = true;
            break;
        }
    }
    if( areaid == g_iAlhambra ) {
        PlayAudioStreamForPlayer(playerid,SOUND_ALHAMBRA,0.0,0.0,0.0,60.0);
    }

    if( areaid == g_iAlcatraz && Spieler[playerid][pJailed] != 2 && !IsPlayerExecutive(playerid)) {
        SendClientMessage(playerid, 0xCC3333FF, "[STAAT] {FF5500}Achtung! Sie befinden sich in einer Gefahrenzone!");
        SendClientMessage(playerid, 0xCC3333FF, "[STAAT] {FF5500}Verlassen Sie umgehend das Gebiet sonst müssen Sie mit Beschuss rechnen!");
    }
    new e_streamer_extra_id = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( e_streamer_extra_id == AREA_BLITZER_OUTER ) {
        if( Spieler[playerid][pRadarfallenWarnung] == 0 ) return 1;
        if( BlitzerfreieFraktion(playerid) ) return 1;
        if( /*IsPlayerInAnyVehicle(playerid) && */GetPlayerState(playerid) == PLAYER_STATE_DRIVER ) {
            ShowPlayerBlitzerWarnung(playerid);
        }
    }
    else if( e_streamer_extra_id == AREA_BLITZER ) {
        if( gettime() > Spieler[playerid][pBlitzerCooldown] ) {
            if( BlitzerfreieFraktion(playerid) ) return 1;
            if( /*IsPlayerInAnyVehicle(playerid) && */ GetPlayerState(playerid) == PLAYER_STATE_DRIVER ) {
                //for(new i ; i < g_iBlitzer ; i++) {
                    //if( g_Blitzer[i][B_iArea] == areaid ) {
                        new
                            schein[26],
                            String[128],
                            strafpunkte,
                            kmh_zu_schnell,
                            //Float:speed,
                            //SpeedT,
                            vehicleid,
                            modelid,
                            SpeedF;
                        SpeedF = GetPlayerVehicleSpeed(playerid);
                        //SpeedT = floatround(speed)/2;
                        //SpeedF = (SpeedT*1000)/700;
                        Spieler[playerid][pBlitzerCooldown] = gettime() + 5;
                        if( SpeedF > 90 ) {
                            vehicleid = GetPlayerVehicleID(playerid);
                            modelid = GetVehicleModel(vehicleid);
                            kmh_zu_schnell = SpeedF - 90;
                            strafpunkte = floatround(  kmh_zu_schnell / 6.0 , floatround_floor );
                            if( IsACar(modelid)) {
                                GivePlayerStrafpunkte(playerid,1,strafpunkte);
                                schein = "Auto Führerschein";
                            }
                            else if( IsABike(modelid)) {
                                GivePlayerStrafpunkte(playerid,3,strafpunkte);
                                schein = "Motorradschein";
                            }
                            else if( IsATruck(modelid)) {
                                GivePlayerStrafpunkte(playerid,4,strafpunkte);
                                schein = "LKW-Schein";
                            }
                            else {
                                return 1;
                            }

                            format(String,sizeof(String),"Sie haben die zulässige Höchstgeschwindigkeit überschritten! Erlaubt waren 90 km/h, Sie fuhren %d km/h! (%d km/h zu schnell)",SpeedF,kmh_zu_schnell);
                            SendClientMessage(playerid,COLOR_ORANGE,String);

                            format(String,sizeof(String),"Ordnungsgeld: $%s, Anzahl der Strafpunkte %d auf Ihren %s", AddDelimiters(400 * kmh_zu_schnell) ,strafpunkte,schein);
                            SendClientMessage(playerid,COLOR_RED,String);

                            GivePlayerCash(playerid,-100 * kmh_zu_schnell);
                        }
                        //break;
                    //}
                //}
            }
        }
    }
    else if( e_streamer_extra_id == AREA_BLITZER_VEHICLE ) {
        if( gettime() > Spieler[playerid][pBlitzerCooldown] ) {
            if( BlitzerfreieFraktion(playerid) ) return 1;
            if( IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER ) {
                for(new i ; i < g_iBlitzer ; i++) {
                    if( g_Blitzer[i][B_iArea] == areaid ) {
                        new
                            driver,
                            strafe,
                            //schein[26],
                            String[128],
                            //strafpunkte,
                            kmh_zu_schnell,
                            //Float:speed,
                            //SpeedT,
                            vehicleid,
                            vehicleid_blitzer,
                            modelid,
                            strafgeld,
                            SpeedF;
                        vehicleid_blitzer = g_Blitzer[i][B_iVehicle];
                        SpeedF = GetPlayerVehicleSpeed(playerid);
                        // SpeedT = floatround(speed)/2;
                        // SpeedF = (SpeedT*1000)/700;
                        Spieler[playerid][pBlitzerCooldown] = gettime() + 5;
                        if( SpeedF > aiVehicleBlitzer[vehicleid_blitzer][FB_iLimit] ) {
                            vehicleid = GetPlayerVehicleID(playerid);
                            modelid = GetVehicleModel(vehicleid);
                            kmh_zu_schnell = SpeedF - aiVehicleBlitzer[vehicleid_blitzer][FB_iLimit];
                            strafgeld = aiVehicleBlitzer[vehicleid_blitzer][FB_iGeldStrafe];
                            if( !( IsACar(modelid) || IsABike(modelid) || IsATruck(modelid) )) {
                                return 1;
                            }
                            /*
                            strafpunkte = floatround(  kmh_zu_schnell / 6.0 , floatround_floor );
                            if( IsACar(modelid)) {
                                GivePlayerStrafpunkte(playerid,1,strafpunkte);
                                schein = "Auto Führerschein";
                            }
                            else if( IsABike(modelid)) {
                                GivePlayerStrafpunkte(playerid,4,strafpunkte);
                                schein = "Motorradschein";
                            }
                            else if( IsATruck(modelid)) {
                                GivePlayerStrafpunkte(playerid,5,strafpunkte);
                                schein = "LKW-Schein";
                            }
                            else {
                                return 1;
                            }
                            */
                            format(String,sizeof(String),"Sie haben die maximale Geschwindigkeitsbegrenzung überschritten! Erlaubt waren %d km/h, Sie fuhren %d km/h! (%d km/h zu schnell)",aiVehicleBlitzer[vehicleid_blitzer][FB_iLimit] , SpeedF,kmh_zu_schnell);
                            SendClientMessage(playerid,COLOR_ORANGE,String);

                            strafe = strafgeld * kmh_zu_schnell;
                            format(String,sizeof(String),"Ordnungsgeld: $%s ", AddDelimiters(strafe) );
                            SendClientMessage(playerid,COLOR_ORANGE,String);

                            driver = VehicleDriverID(vehicleid);
                            if( IsPlayerConnected(driver) ) {
                                format(String,sizeof(String),"[BLITZER] %s wurde geblitzt! Geschwindigkeit: %d, Bußgeld: $%s",GetName(playerid),SpeedF, AddDelimiters(strafe));
                                SendFraktionMessage(5, COLOR_CHAT_FRAKTION, String);
                                SendFraktionMessage(1, COLOR_CHAT_FRAKTION, String);
                                SendFraktionMessage(2, COLOR_CHAT_FRAKTION, String);
                                SendFraktionMessage(16, COLOR_CHAT_FRAKTION, String);
                            }

                            GivePlayerCash(playerid,-strafe);
                            Kasse[Staat] += strafe;
                        }
                        break;
                    }
                }
            }
        }
    }
    else if( e_streamer_extra_id == AREA_ZOLL ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Sie stehen an einer Zollstation, der Zollübergang kostet $500! Befehl: /Zoll");
    }
    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid) {
    //if(Gate_OnPlayerLeaveDynamicArea(playerid,areaid)) return 1;
    Gang_OnPlayerLeaveDynamicArea(playerid,areaid);
    if( areaid == g_iAlhambra ) {
        StopAudioStreamForPlayer(playerid);
    }
    new e_streamer_extra_id = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( e_streamer_extra_id == AREA_ZOLL ) {
        for(new i ; i < sizeof(g_Zoll); i++) {
            if( areaid == g_Zoll[i][Z_iArea] ) {
                // printf("Zoll_IsOpen(%d)",i, Zoll_IsOpen(i));
                if( Zoll_IsOpen(i) ) {
                    if( playerid == g_Zoll[i][Z_iPlayerID] ) {
                        //SendClientMessage(playerid,COLOR_GREEN,"Zollwächter: Schöne weiterfahrt!");
                        Zoll_Close(i);
                    }
                }
                else if( g_Zoll[i][Z_iStatus] == 1 ) {
                    if( playerid == g_Zoll[i][Z_iPlayerID] ) {
                        // Während des öffnen "abgehauen"... schließen!
                        g_Zoll[i][Z_iStatus] = 2;
                        StopDynamicObject( g_Zoll[i][Z_iObject] );
                        SendClientMessage(playerid,COLOR_ORANGE,"Zollwächter: Die Schranke schließt automatisch, wenn du dich weiter weg bewegst.");
                        Zoll_Close(i);
                    }
                }
                break;
            }
        }
    }
    for(new i ; i < sizeof(g_aiNoDM) ; i++) {
        if( g_aiNoDM[i] == areaid) {
            TextDrawHideForPlayer(playerid,tdNoDM);
            Spieler[playerid][bNoDMZone] = false;
            break;
        }
    }
    return 1;
}
/*COMMAND:weihnachtsmuetze(playerid,params[]){

    if( IsPlayerAttachedObjectSlotUsed(playerid,1) ) {
        RemovePlayerAttachedObject(playerid,1);
        SendClientMessage(playerid,COLOR_YELLOW,"Weihnachtsmütze abgenommen");
    }
    else {
        SetPlayerAttachedObject(playerid, 1, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
        SendClientMessage(playerid,COLOR_YELLOW,"Weihnachtsmütze aufgesetzt");
    }
    return 1;
}

COMMAND:hexenhut(playerid,params[]){

    if( IsPlayerAttachedObjectSlotUsed(playerid,8) ) {
        RemovePlayerAttachedObject(playerid,8);
        SendClientMessage(playerid,COLOR_YELLOW,"Hexen-Hut abgenommen.");
    }
    else {
        SetPlayerAttachedObject(playerid, 8, 19528, 2, 0.114997, 0.006998, 0.001999, 90.000000, -23.199983, 4.999997, 0.615999, 1.008998, 1.222000, 0xFFFF0000, 0xFFFF0000); //hat bottom
        SendClientMessage(playerid,COLOR_GREEN,"Hexen-Hut aufgesetzt.");
    }
    return 1;
}

COMMAND:kurbiskopf(playerid,params[]){

    if( IsPlayerAttachedObjectSlotUsed(playerid,8) ) {
        RemovePlayerAttachedObject(playerid,8);
        SendClientMessage(playerid,COLOR_YELLOW,"Kürbiskopf abgenommen.");
    }
    else {
        SetPlayerAttachedObject(playerid, 8, 19320, 2, 0.162564, 0.009463, 0.003660, 243.790893, 93.450889, 346.318786, 0.699999, 0.699999, 0.699999); //Kürbiskopf
        SendClientMessage(playerid,COLOR_GREEN,"Kürbiskopf aufgesetzt.");
    }
    return 1;
}

COMMAND:messerkopf(playerid,params[]){
    if( IsPlayerAttachedObjectSlotUsed(playerid,8) ) {
        RemovePlayerAttachedObject(playerid,8);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 8, 335, 2, 0.392242, -0.182094, 0.153530, 30.000000, 223.276199, 36.263126, 1.500000, 1.500000, 1.200000 ); // TheParrot1 - papagei
        SendClientMessage(playerid,COLOR_YELLOW,"Messer in Kopf gesteckt.");
    }
    return 1;
}*/

//AMTS AUSRÜSTUNG
COMMAND:medic(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 3) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Medic!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,1) ) {
        RemovePlayerAttachedObject(playerid,1);
        RemovePlayerAttachedObject(playerid,2);
        SendClientMessage(playerid,COLOR_YELLOW,"Medic-Inventare entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 1, 2690, 1, 0.054082, -0.264567, 0.004729, 0.000000, 64.513916, 0.000000, 1.000000, 1.000000, 1.000000 ); // Feuerlöscher
        SetPlayerAttachedObject( playerid, 2, 19472, 2, -0.023322, 0.084270, 0.005550, 334.849060, 172.559661, 15.323401, 1.000000, 1.000000, 1.000000 ); // gasmask01 - gas
        SendClientMessage(playerid,COLOR_YELLOW,"Medic-Inventare genommen");
    }
    return 1;
}
COMMAND:oamt(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 5) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,1) ) {
        RemovePlayerAttachedObject(playerid,1);
        RemovePlayerAttachedObject(playerid,2);
        RemovePlayerAttachedObject(playerid,3);
        RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid,COLOR_YELLOW,"OAMT-Inventare entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 1, 365, 1, -0.139383, -0.153296, -0.034828, 0.000000, 82.242210, 0.000000, 1.000000, 1.000000, 1.000000 ); // spraycan - spray zivicop
        SetPlayerAttachedObject( playerid, 2, 18642, 1, -0.208978, -0.131534, 0.072422, 0.000000, 283.615112, 0.000000, 1.000000, 1.000000, 1.000000 ); // Taser1 - copcuff
        SetPlayerAttachedObject( playerid, 3, 19942, 1, -0.125000, 0.198000, -0.112999, 172.599914, 85.399932, 2.500000, 1.116999, 1.385999, 0.883999, 0, 0); //Funkgerät Mann
        SetPlayerAttachedObject( playerid, 4, 334, 1, -0.157210, -0.015581, 0.224168, 79.199546, 276.988647, 171.322982, 0.899999, 1.500000, 0.899999 ); // Schlagstock
        SendClientMessage(playerid,COLOR_YELLOW,"OAMT-Inventare genommen");
    }
    return 1;
}
/*COMMAND:kuhreitendfddd(playerid,params[]){
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du bist kein Admin.");
    SetPlayerAttachedObject(playerid, 3, 16442, 1, -0.635999,0.319998,-0.012999,100.099929,102.400070,1.700000,0.348000,0.387000,0.348000);
    ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",1000,1,1,1,1,0,1);
    ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",1000,1,1,1,1,0,1);
    SetTimerEx("CowUpdate",100,true,"d",playerid);
    return 1;
}
forward CowUpdate(playerid);
public CowUpdate(playerid)
{
    new Float:x, Float:y, Float:z, Float:a;
    new Keys,ud,lr;
    GetPlayerKeys(playerid,Keys,ud,lr);
    if(ud < 0)
    {
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        SetPlayerPosFindZ(playerid,x + 1*floatcos(90+a, degrees), y+ 1*floatsin(90-a, degrees), z);
        ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",1000,1,1,1,1,0,1);
    }
    if(ud > 0)
    {
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        SetPlayerPosFindZ(playerid,x - 1*floatcos(90+a, degrees), y- 1*floatsin(90-a, degrees), z);
        ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",1000,1,1,1,1,0,1);
    }
    if(lr > 0)
    {
        GetPlayerFacingAngle(playerid, a);
        SetPlayerFacingAngle(playerid, a-10);
    }
    if(lr < 0)
    {
        GetPlayerFacingAngle(playerid, a);
        SetPlayerFacingAngle(playerid, a+10);
    }
    return 1;
}*/

COMMAND:copbrille(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,7) ) {
        RemovePlayerAttachedObject(playerid,7);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 7, 19138, 2, 0.097560, 0.028507, 0.001079, 0.000000, 89.436622, 87.944313, 1.000000, 1.000000, 1.332124 ); // PoliceGlasses1 - brille
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}

COMMAND:tcop(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,1) ) {
        RemovePlayerAttachedObject(playerid,1);
        RemovePlayerAttachedObject(playerid,2);
        RemovePlayerAttachedObject(playerid,3);
        RemovePlayerAttachedObject(playerid,4);
        RemovePlayerAttachedObject(playerid,5);
        RemovePlayerAttachedObject(playerid,6);
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Inventare entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 1, 334, 1, -0.065741, 0.160072, 0.172787, 270.569549, 232.509368, 179.829772, 1.000000, 1.000000, 1.000000 ); // nitestick - temp schlagstock
        SetPlayerAttachedObject( playerid, 2, 365, 1, 0.063731, -0.160821, -0.047001, 0.000000, 66.562774, 356.750793, 1.131842, 1.000000, 1.000000 ); // spraycan - temp spray
        SetPlayerAttachedObject( playerid, 3, 348, 1, 0.121761, -0.053540, -0.227441, 265.897705, 17.023633, 180.622070, 1.000000, 1.000000, 1.000000 ); // desert_eagle - temp waffe
        SetPlayerAttachedObject( playerid, 4, 19418, 1, 0.027343, -0.141089, 0.049022, 0.000000, 285.274627, 0.000000, 1.000000, 1.000000, 1.000000 ); // handcuffs01 - temp handschellen
        SetPlayerAttachedObject( playerid, 5, 18642, 1, 0.038319, 0.181583, -0.080996, 350.396789, 291.574859, 186.331298, 1.133488, 1.000000, 0.707106 ); // Taser1 - temp tazer
        SetPlayerAttachedObject( playerid, 6, 19077, 2, 0.078594, -0.013809, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Hair3 - haare
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Inventare genommen");
    }
    return 1;
}

COMMAND:copman(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    if( IsPlayerAttachedObjectSlotUsed(playerid,1) ) {
        RemovePlayerAttachedObject(playerid,1);
        RemovePlayerAttachedObject(playerid,2);
        RemovePlayerAttachedObject(playerid,3);
        RemovePlayerAttachedObject(playerid,4);
        RemovePlayerAttachedObject(playerid,5);
        RemovePlayerAttachedObject(playerid,8);
        RemovePlayerAttachedObject(playerid,9);
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Inventare entfernt");
    }
    else {
        SetPlayerAttachedObject(playerid, 1, 19942, 1, -0.125000, 0.198000, -0.112999, 172.599914, 85.399932, 2.500000, 1.116999, 1.385999, 0.883999, 0, 0); //Funkgerät Mann
        SetPlayerAttachedObject(playerid, 2, 19773, 1, -0.143000, 0.026999, -0.177999, 84.899955, 90.099967, 93.599998, 1.423998, 1.141999, 0.988000, 0, 0); //Holster
        SetPlayerAttachedObject(playerid, 3, 334, 1, -0.157210, -0.015581, 0.224168, 79.199546, 276.988647, 171.322982, 0.899999, 1.500000, 0.899999 ); // Schlagstock
        SetPlayerAttachedObject(playerid, 4, 365, 1, -0.104437, -0.049196, 0.147933, 297.971160, 102.321350, 351.918975, 1.100000, 1.100000, 0.949999 ); // Spray Mann
        SetPlayerAttachedObject(playerid, 5, 19418, 1, -0.187242, -0.061019, -0.076611, 0.000000, 280.079772, 350.378234, 1.000000, 1.000000, 1.000000 ); //Handschellen Mann
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Inventare genommen");
    }
    return 1;
}

COMMAND:copfrau(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    if( IsPlayerAttachedObjectSlotUsed(playerid,1) ) {
        RemovePlayerAttachedObject(playerid,1);
        RemovePlayerAttachedObject(playerid,2);
        RemovePlayerAttachedObject(playerid,3);
        RemovePlayerAttachedObject(playerid,4);
        RemovePlayerAttachedObject(playerid,5);
        RemovePlayerAttachedObject(playerid,8);
        RemovePlayerAttachedObject(playerid,9);
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Inventare entfernt");
    }
    else {
        SetPlayerAttachedObject(playerid, 1, 19942, 1, -0.114000, 0.133999, -0.112999, 172.599914, 85.399932, 2.500000, 1.116999, 1.385999, 0.883999, 0, 0); //Funkgerät Frau
        SetPlayerAttachedObject(playerid, 2, 19773, 1, -0.143000, 0.032999, -0.177999, 84.899955, 90.099967, 93.599998, 1.423998, 1.141999, 0.928000, 0, 0); //Holster
        SetPlayerAttachedObject(playerid, 3, 334, 1, -0.157210, -0.025581, 0.219168, 79.199546, 276.988647, 171.322982, 0.899999, 1.500000, 0.899999 ); // Schlagstock
        SetPlayerAttachedObject(playerid, 4, 365, 1, -0.062999, -0.127000, 0.107999, 7.499993, 95.599967, 0.000000, 1.000000, 1.000000, 1.000000, 0, 0); //Spray Frau
        SetPlayerAttachedObject(playerid, 5, 19418, 1, -0.143005, -0.100765, -0.064808, 0.000000, 282.527740, 347.844085, 1.000000, 1.000000, 1.000000 ); // Handschellen Frau
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Inventare genommen");
    }
    return 1;
}

COMMAND:armyitem(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Army Mitglied!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,1) ) {
        RemovePlayerAttachedObject(playerid,1);
        RemovePlayerAttachedObject(playerid,2);
        RemovePlayerAttachedObject(playerid,3);
        RemovePlayerAttachedObject(playerid,4);
        RemovePlayerAttachedObject(playerid,5);
        RemovePlayerAttachedObject(playerid,6);
        SendClientMessage(playerid,COLOR_YELLOW,"Army-Inventare entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 1, 356, 1, -0.107171, -0.195649, 0.042077, 0.000000, 24.433380, 0.000000, 1.000000, 1.000000, 1.000000 ); // m4 - army m4
        SetPlayerAttachedObject(playerid, 2, 19942, 1, -0.125000, 0.198000, -0.112999, 172.599914, 85.399932, 2.500000, 1.116999, 1.385999, 0.883999, 0, 0); //Funkgerät Mann
        SetPlayerAttachedObject(playerid, 3, 19773, 1, -0.143000, 0.026999, -0.177999, 84.899955, 90.099967, 93.599998, 1.423998, 1.141999, 0.988000, 0, 0); //Holster
        SetPlayerAttachedObject(playerid, 4, 334, 1, -0.157210, -0.015581, 0.224168, 79.199546, 276.988647, 171.322982, 0.899999, 1.500000, 0.899999 ); // Schlagstock
        SetPlayerAttachedObject(playerid, 5, 343, 1, -0.104437, -0.049196, 0.147933, 297.971160, 102.321350, 351.918975, 1.100000, 1.100000, 0.949999 ); // teargas
        SetPlayerAttachedObject(playerid, 6, 19418, 1, -0.187242, -0.061019, -0.076611, 0.000000, 280.079772, 350.378234, 1.000000, 1.000000, 1.000000 ); //Handschellen Mann
        SendClientMessage(playerid,COLOR_YELLOW,"Army-Inventare genommen");
    }
    return 1;
}

COMMAND:copcap(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,6) ) {
        RemovePlayerAttachedObject(playerid,6);
        SendClientMessage(playerid,COLOR_ORANGE,"Polizei-Cap abgenommen");
    }
    else {
        SetPlayerAttachedObject( playerid, 6, 19161, 2, 0.085200, 0.009999, 0.000000, 0.000000, 356.292083, 346.747100, 1.000000, 1.000000, 1.100000 ); // PoliceHat1 - polizeihut
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Cap aufgesetzt");
    }
    return 1;
}

COMMAND:cophut(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,6) ) {
        RemovePlayerAttachedObject(playerid,6);
        SendClientMessage(playerid,COLOR_ORANGE,"Polizei-Cap abgenommen");
    }
    else {
        SetPlayerAttachedObject(playerid, 6, 19099, 2, 0.168000, 0.002000, -0.001000, 0.000000, 0.699999, 5.800001, 0.962999, 1.166999, 1.235000, 0, 0 );
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Cap aufgesetzt");
    }
    return 1;
}

COMMAND:copmuetze(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,6) ) {
        RemovePlayerAttachedObject(playerid,6);
        SendClientMessage(playerid,COLOR_ORANGE,"Polizei-Cap abgenommen");
    }
    else {
        SetPlayerAttachedObject(playerid, 6, 19521, 2, 0.168000, 0.002000, -0.001000, 0.000000, 0.699999, 5.800001, 0.962999, 1.166999, 1.235000, 0, 0 );
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Cap aufgesetzt");
    }
    return 1;
}

COMMAND:copcapf(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,6) ) {
        RemovePlayerAttachedObject(playerid,6);
        SendClientMessage(playerid,COLOR_ORANGE,"Polizei-Cap abgenommen");
    }
    else {
        SetPlayerAttachedObject( playerid, 6, 19161, 2, 0.073311, -0.008209, 0.000000, 0.000000, 0.000000, 0.000000, 1.100000, 1.100000, 1.100000 ); // PoliceHat1 - polizeimütze woman
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Cap aufgesetzt");
    }
    return 1;
}

COMMAND:pcopcap(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,6) ) {
        RemovePlayerAttachedObject(playerid,6);
        SendClientMessage(playerid,COLOR_ORANGE,"Polizei-Cap abgenommen");
    }
    else {
        SetPlayerAttachedObject( playerid, 6, 19161, 2, 0.085200, -0.014271, 0.000000, 0.000000, 356.292083, 346.747100, 1.000000, 1.000000, 1.100000 ); // PoliceHat1 - polizeigut vor puma
        SendClientMessage(playerid,COLOR_YELLOW,"Polizei-Cap aufgesetzt");
    }
    return 1;
}

COMMAND:pschild(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,9) ) {
        RemovePlayerAttachedObject(playerid,9);
        SendClientMessage(playerid,COLOR_ORANGE,"Polizeischild angesteckt");
    }
    else {
        SetPlayerAttachedObject(playerid,9, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
        SendClientMessage(playerid,COLOR_YELLOW,"Polizeischild abgesteckt");
    }
    return 1;
}
//================WITZ FÜR PUMA=============================
COMMAND:pufeuer(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 18690, 1, 0.200000, 0.000000, -1.600000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 1.000000 ); // deer01 - haustier
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:wasserfallp(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 18720, 1, 1.000000, 0.000000, 0.100000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ); // deer01 - haustier
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:glanzt(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 18724, 1, 0.000000, 0.000000, -1.700000, 0.000000, 0.000000, 0.000000, 50.000000, 50.000000, 1.000000 ); // deer01 - haustier
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:glanzs(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 18710, 1, 0.400000, 0.000000, -1.500000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // deer01 - haustier
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:atanke(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 1676, 1, 0.290895, 0.000000, -0.004422, 357.079620, 86.866310, 358.401214, 1.000000, 1.000000, 1.000000 ); // deer01 - haustier
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:ahaare(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 19274, 2, 0.090415, -0.013583, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); //Haare
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:akuh(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 11470, 15, -0.043005, 0.000000, 0.160083, 350.285247, 359.338409, 167.046310, 1.000000, 1.000000, 1.000000 ); // des_bigbull - kuhh
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}

COMMAND:cjkopf(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 18963, 2, 0.091483, -0.012514, 0.000000, 0.000000, 93.091644, 90.000000, 2.000000, 2.000000, 2.000000 ); // CJElvisHead - gesicht cj
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}

COMMAND:serverengel(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 345, 1, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ); // missile - engel
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}

COMMAND:bankraubtasche(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 1550, 15, 0.000000, 0.280000, -0.310000, 0.000000, 15.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:aosterei(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 19341, 1, -0.324815, 0.027729, 0.000000, 262.441711, 98.712211, 153.388839, 2.099999, 2.099999, 2.099999  ); // osterei
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}
COMMAND:papagei(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 19078, 1, -1.200000, -0.226378, -0.024134, 0.000000, 357.571014, 0.000000, 8.000000, 8.000000, 7.000000 ); // TheParrot1 - papagei
        SendClientMessage(playerid,COLOR_YELLOW,"Angesteckt");
    }
    return 1;
}

COMMAND:ageschenk(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 19056, 1, -0.266277, 0.141012, 0.000000, 0.000000, 87.117065, 0.000000, 1.299999, 1.299999, 1.600000 ); // EnExMarker3 - admin marker
        SendClientMessage(playerid,COLOR_YELLOW,"Aktiviert");
    }
    return 1;
}

COMMAND:amap(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 19167, 1, 0.328450, 0.412087, 0.000000, 271.398742, 4.000000, 269.222015, 4.000000, 4.000000, 4.000000 ); // EnExMarker3 - admin marker
        SendClientMessage(playerid,COLOR_YELLOW,"Aktiviert");
    }
    return 1;
}

COMMAND:asamp(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 5 || Spieler[playerid][pAdmin] == 6) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die nötigen Rechte!");
    }
    /*
    if( GetPlayerSkin(playerid) != 280 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur mit dem Polizei Skin nutzen");
    }
    */
    if( IsPlayerAttachedObjectSlotUsed(playerid,0) ) {
        RemovePlayerAttachedObject(playerid,0);
        SendClientMessage(playerid,COLOR_YELLOW,"Entfernt");
    }
    else {
        SetPlayerAttachedObject( playerid, 0, 18749, 1, 1.003577, 0.040898, 0.005981, 191.017028, 92.195304, 344.806304, 1.000000, 1.000000, 1.000000 ); // EnExMarker3 - admin marker
        SendClientMessage(playerid,COLOR_YELLOW,"Aktiviert");
    }
    return 1;
}
//======================ENDE=======================

COMMAND:vrk(playerid,params[]){
    if (!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22)) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    new modelid, vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if (!vehicleid) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem Fahrzeug nutzen.");
    modelid = GetVehicleModel(vehicleid);
    if ((modelid != 596) &&  (modelid != 560) &&  (modelid != 561) &&  (modelid != 598) &&  (modelid != 525) &&  (modelid != 599) ) return SendClientMessage(playerid, COLOR_RED, "Kein Polizei Auto ");
    if (_:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID ) {
        // Entfernen
        Delete3DTextLabel(g_t3dPolizeiKontrolle[vehicleid]);
        g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    else {
        g_t3dPolizeiKontrolle[vehicleid] = Create3DTextLabel("Allgemeine Verkehrskontrolle\nBitte folgen Sie dem Fahrzeug", 0xFF4500FF, 0.0, 0.0, 0.0, 25.0, 0, 1);
        Attach3DTextLabelToVehicle( g_t3dPolizeiKontrolle[vehicleid],vehicleid,0.0,0.0,0.5);
    }
    return 1;
}

COMMAND:vrk2(playerid,params[]){
    if (Spieler[playerid][pFraktion] != 5) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Beamter des Ordnungsamtes.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if (!vehicleid) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem Fahrzeug nutzen.");

    for (new i = 0; i < sizeof(vehicle_pooExterior); i++) {
        if (vehicle_pooExterior[i] == vehicleid) {
            if (_:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID) {
                Delete3DTextLabel(g_t3dPolizeiKontrolle[vehicleid]);
                g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
            }
            else {
                g_t3dPolizeiKontrolle[vehicleid] = Create3DTextLabel("--> ORDNUNGSAMT <--\nBitte fahren Sie langsamer!", 0xFF4500FF, 0.0, 0.0, 0.0, 25.0, 0, 1);
                Attach3DTextLabelToVehicle( g_t3dPolizeiKontrolle[vehicleid],vehicleid,0.0,0.0,0.5);
            }

            return 1;
        }
    }

    return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem Oamt-Fahrzeug nutzen.");
}

COMMAND:meinsatz(playerid,params[]){
    if (Spieler[playerid][pFraktion] != 3) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied des SAMD.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if (!vehicleid) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem SAMD-Fahrzeug nutzen.");

    for (new i = 0; i < sizeof(vehicle_samdExterior); i++) {
        if (vehicle_samdExterior[i] == vehicleid) {
            if (_:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID) {
                Delete3DTextLabel(g_t3dPolizeiKontrolle[vehicleid]);
                g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
            }
            else {
                g_t3dPolizeiKontrolle[vehicleid] = Create3DTextLabel("--> MEDIC IM EINSATZ <--\nBitte überholen!", 0xFF2000FF, 0.0, 0.0, 0.0, 25.0, 0, 1);
                Attach3DTextLabelToVehicle( g_t3dPolizeiKontrolle[vehicleid],vehicleid,0.0,0.0,0.5);
            }

            return 1;
        }
    }

    return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem SAMD-Fahrzeug nutzen.");
}

COMMAND:pein(playerid,params[]){
    if( !(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    new
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem Fahrzeug nutzen");
    }
    modelid = GetVehicleModel(vehicleid);
    if( (modelid != 596) &&  (modelid != 560) &&  (modelid != 561) &&  (modelid != 598) &&  (modelid != 525) &&  (modelid != 599) ) {
        return SendClientMessage(playerid, COLOR_RED, "Kein Polizei Auto ");
    }
    if( _:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID ) {
        // Entfernen
        Delete3DTextLabel( g_t3dPolizeiKontrolle[vehicleid] );
        g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    else {
        g_t3dPolizeiKontrolle[vehicleid] = Create3DTextLabel(">> POLIZEI IM EINSATZ <<\nÜberholen erlaubt!", 0xFF4500FF, 0.0, 0.0, 0.0, 25.0, 0, 1);
        Attach3DTextLabelToVehicle( g_t3dPolizeiKontrolle[vehicleid],vehicleid,0.0,0.0,0.5);
    }
    return 1;
}

COMMAND:vfahr(playerid,params[]){
    if( !(Spieler[playerid][pAdmin] == 6 || Spieler[playerid][pFraktion] == 8) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Fahrlehrer!");
    }
    new
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nur in einem Fahrzeug nutzen");
    }
    modelid = GetVehicleModel(vehicleid);
    if( (modelid != 405) &&  (modelid != 560) &&  (modelid != 445) &&  (modelid != 507) ) {
        return SendClientMessage(playerid, COLOR_RED, "Kein Fahrschul-Auto ");
    }
    if( _:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID ) {
        // Entfernen
        Delete3DTextLabel( g_t3dPolizeiKontrolle[vehicleid] );
        g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    else {
        g_t3dPolizeiKontrolle[vehicleid] = Create3DTextLabel("!VORSICHT!\n*FAHRSCHULE*", 0xFF4500FF, 0.0, 0.0, 0.0, 23.0, 0, 1);
        Attach3DTextLabelToVehicle( g_t3dPolizeiKontrolle[vehicleid],vehicleid,0.0,0.0,0.5);
    }
    return 1;
}

new
    tickOpenGangJail,
    tOpenGangJail = INVALID_TIMER_ID;
COMMAND:gangjail(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gangjail [Spieler]");
    }
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12
    || Spieler[playerid][pFraktion] == 13 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Gang/Mafia Mitglied.");
    if(!IsPlayerInRangeOfPoint(playerid,5.0,2160.4111,-98.0815,2.8239)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Du bist nicht am Gangjail");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Ungültiger Spieler");
    }
    if(giveid != Spieler[playerid][iKidnapID] ) {
        return SendClientMessage(playerid,COLOR_GREEN,"Du hast diesen Spieler nicht entführt");
    }
    new
        Float:X,
        Float:Y,
        Float:Z,
        String[128];
    GetPlayerPos(playerid,X,Y,Z);

    format(String,sizeof(String),"Du hast %s ins Gangjail gesperrt",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Du wurdest von %s ins Gangjail eingesperrt",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"%s hat %s ins Gangjail gesperrt",GetName(playerid),GetName(giveid));
    SendRoundMessage(X,Y,Z,COLOR_LIGHTRED2,String);
    format(String,sizeof(String),"%s wurde von %s ins Gangjail gesperrt",GetName(giveid),GetName(playerid));
    SendFraktionMessage(1, COLOR_LIGHTRED2, String);
    SendFraktionMessage(2, COLOR_LIGHTRED2, String);
    SendFraktionMessage(16, COLOR_LIGHTRED2, String);
    SendFraktionMessage(18, COLOR_LIGHTRED2, String);

    SetPlayerPos(giveid,2162.6523,-102.3127,2.7500);
    ResetAugenbinde(giveid);
    Spieler[giveid][bAugenbinde] = false;
    Spieler[giveid][bMundbinde] = false;
    UnfreezePlayer(giveid);
    Spieler[giveid][pJailed] = 4;
    Spieler[giveid][bKidnapped] = false;

    Spieler[playerid][iKidnapID] = INVALID_PLAYER_ID;
    return 1;
}

COMMAND:aufbrechen(playerid,params[]) {
    if(Spieler[playerid][pTot] == 1 || Spieler[playerid][pTot] == 2 )return SendClientMessage(playerid, COLOR_RED, "Während du Tot bist, kannst du diese Funktion nicht nutzen.");
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13 || Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2
     || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 17 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21  || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist, Wheelmen oder Gang/Mafia Mitglied.");
    if(!IsPlayerInRangeOfPoint(playerid,5.0,2160.4111,-98.0815,2.8239)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Du bist nicht am Gangjail");
    }
    if( Spieler[playerid][pJailed] == 4 ) {
        return SendClientMessage(playerid,COLOR_RED,"Als Gefangener kannst du das Gangjail nicht knacken");
    }
    if( tOpenGangJail != INVALID_TIMER_ID ) {
        return SendClientMessage(playerid,COLOR_RED,"Es wird bereits versucht das Gangjail zu knacken");
    }
    new
        Float:X,
        Float:Y,
        Float:Z,
        String[128];
    GetPlayerPos(playerid,X,Y,Z);
    format(String,sizeof(String),"%s versucht die Gangjail Tore aufzubrechen",GetName(playerid));
    tOpenGangJail = SetTimerEx("checkGangJail",1669,true,"d",playerid);
    tickOpenGangJail = gettime() + 30;
    SendRoundMessage(X,Y,Z,COLOR_LIGHTRED2,String);
    return 1;
}
forward checkGangJail(playerid);
public checkGangJail(playerid) {
    new
        String[128];
    if( !IsPlayerInRangeOfPoint(playerid,5.0,2162.6523,-102.3127,2.7500) ) {
        format(String,sizeof(String),"%s hat es nicht geschafft die Gangjail Tore aufzubrechen",GetName(playerid));
        SendRoundMessage(2162.6523,-102.3127,2.7500,COLOR_LIGHTRED2,String);
        KillTimer(tOpenGangJail);
        tOpenGangJail = INVALID_TIMER_ID;
        return 1;
    }
    if( tickOpenGangJail <= gettime() ) {
        new
            c;
        KillTimer(tOpenGangJail);
        tOpenGangJail = INVALID_TIMER_ID;
        format(String,sizeof(String),"%s hat es geschafft die Gangjail Tore aufzubrechen",GetName(playerid));
        SendRoundMessage(2160.4111,-98.0815,2.8239,COLOR_GREEN,String);
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pJailed] == 4 ) {
                    SetPlayerPos(i,2160.4048 + float(random(3)) - float(random(3)) , -98.1445  + float(random(3)) - float(random(3)) , 2.8204);
                    SetPlayerFacingAngle(i,239.8035);
                    Spieler[i][pJailed] = 0;
                    c++;
                }
            }
        }
        if(!c) {
            SendClientMessage(playerid,COLOR_GREEN,"Das Gangjail war leider leer!");
        }
        else {
            format(String,sizeof(String),"Du hast %d Spieler zur Flucht verholfen",c);
            SendClientMessage(playerid,COLOR_GREEN,String);
        }
    }
    return 1;
}


COMMAND:clubshop(playerid,params[]) {
    //2316.5325,-1010.7850,1054.7188
    //if (!IsPlayerInRangeOfPoint(playerid,5.0,2316.5325,-1010.7850,1054.7188))
        //return SendClientMessage(playerid,COLOR_RED,"Du bist nicht an der Club-Garderobe");

    if( Spieler[playerid][pDonateRank] < 1) {
        return SendClientMessage(playerid,COLOR_RED,"Dieser Shop ist nur für Club-Mitglieder");
    }

    if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_CLUB_SHOP) ) {
        // Nur Entfernen
        ShowPlayerDialog(playerid,DIALOG_CLUBSHOP_DEL,DIALOG_STYLE_MSGBOX,"Club-Garderobe","Willst du das Club-Item entfernen?","Entfernen","Abbruch");
    }
    else {
        new
            String[820];
        for(new i ; i < sizeof(g_ClubShopItems) ; i++) {
            format(String,sizeof(String),"%s%s - $%d\n",String,g_ClubShopItems[i][CSI_sName],g_ClubShopItems[i][CSI_iPrice]);
        }
        ShowPlayerDialog(playerid,DIALOG_CLUBSHOP,DIALOG_STYLE_LIST,"Club-Garderobe",String,"Ausrüsten","Abbruch");

    }
    return 1;
}

COMMAND:gangitem(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,5.0,1798.4584,-2124.5525,13.5469) && !IsPlayerInRangeOfPoint(playerid,5.0,2805.5723,-1170.7960,1025.5703) && !IsPlayerInRangeOfPoint(playerid,5.0, YAKUZA_INTERIOR_GANGSHOP_POINT)
    && !IsPlayerInRangeOfPoint(playerid,5.0,2491.7261,-1701.2618,1018.3438) && !IsPlayerInRangeOfPoint(playerid,5.0, LCN_INTERIOR_GANGSHOP_POINT) && !IsPlayerInRangeOfPoint(playerid,5.0,308.2954,1120.7721,1083.8828)
    && !IsPlayerInRangeOfPoint(playerid,5.0,TRIADS_INTERIOR_GANGSHOP_POINT) && !IsPlayerInRangeOfPoint(playerid,5.0,-2159.0173,640.3590,1052.3817)) {
        return SendClientMessage(playerid,COLOR_RED,"Hier kannst du diesen Befehl nicht ausführen!");
    }
    if(!(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12 || Spieler[playerid][pFraktion] == 13
    || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21)) return SendClientMessage(playerid,COLOR_RED,"Du bist kein Gang/Mafien Mitglied.");
    if (GetPlayerVirtualWorld(playerid) >= VW_PAINTBALLGYMLS) return SendClientMessage(playerid, COLOR_RED, "Hier kannst du diesen Befehl nicht ausführen!");

    if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_GANG_SHOP) ) {
        // Nur Entfernen
        ShowPlayerDialog(playerid,DIALOG_GANGSHOP_DEL,DIALOG_STYLE_MSGBOX,"Gang-Skin","Willst du das Gang-Item entfernen?","Entfernen","Abbruch");
    }
    else {
        new
            String[128];
        for(new i ; i < sizeof(g_GangShopItems) ; i++) {
            format(String,sizeof(String),"%s%s - $%d\n",String,g_GangShopItems[i][GSI_sName],g_GangShopItems[i][GSI_iPrice]);
        }
        ShowPlayerDialog(playerid,DIALOG_GANGSHOP,DIALOG_STYLE_LIST,"Gang-Skin",String,"Ausrüsten","Abbruch");

    }
    return 1;
}

COMMAND:settime(playerid,params[]) {
    new
        time;
    if(sscanf(params,"i",time)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Settime [Uhrzeit]");
    }
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if( !(0 <= time <= 24 ) ) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Settime [Uhrzeit ( 0 - 24 )]");
    }
    new
        String[128];
    format(String,sizeof(String),"Die Uhrzeit wurde auf %02d:00 Uhr gesetzt",time);
    SendClientMessage(playerid, COLOR_YELLOW,String);
    SetWorldTime(time);
    return 1;
}

COMMAND:motorradfarbe(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,5.0,1702.9427,-1470.3704,13.5469)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Du bist nicht an einer Motorradlackiererei");
    }
    new
        color1,
        color2,
        vehicleid,
        modelid,
        colorid[2];
    if(sscanf(params,"iI(-1)",colorid[0],colorid[1])) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Motorradfarbe [ID]");
        return SendClientMessage(playerid,COLOR_GREEN,"0 = Schwarz, 1 = Weiß, 2 = Blau, 3 = Rot, 5 = Pink, 6 = Gelb, 7 = Grün, 8 = Grau, 9 = Braun");
    }
    if( colorid[1] == -1) { // keine farbe 2, dann farbe1 doppeln
        colorid[1] = colorid[0];
    }
    if( !(0 <= colorid[0] <= 9 ) || !(0 <= colorid[1] <= 9 )) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Motorradfarbe [ID]");
        return SendClientMessage(playerid,COLOR_GREEN,"0 = Schwarz, 1 = Weiß, 2 = Blau, 3 = Rot, 5 = Pink, 6 = Gelb, 7 = Grün, 8 = Grau, 9 = Braun");
    }
    if( GetPlayerMoney(playerid) < 2000 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst 2.000$ um dein Motorrad umzulackieren.");
    }
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Motorrad");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsABike(modelid)) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Motorrad");
    }
    new
        owner,
        String[128];
    format(String,sizeof(String),"Die Farbe deines Motorrades wurde geändert auf ID %d und %d",colorid[0],colorid[1]);
    SendClientMessage(playerid,COLOR_GREEN,String);
    switch(colorid[0]) {
        case 0: color1 = 0;
        case 1: color1 = 1;
        case 2: color1 = 7;
        case 3: color1 = 3;
        case 4: color1 = 16;
        case 5: color1 = 126;
        case 6: color1 = 6;
        case 7: color1 = 16;
        case 8: color1 = 13;
        case 9: color1 = 30;
    }
    switch(colorid[1]) {
        case 0: color2 = 0;
        case 1: color2 = 1;
        case 2: color2 = 7;
        case 3: color2 = 3;
        case 4: color2 = 16;
        case 5: color2 = 126;
        case 6: color2 = 6;
        case 7: color2 = 16;
        case 8: color2 = 13;
        case 9: color2 = 30;
    }
    GivePlayerCash(playerid,-2000);
    ChangeVehicleColor(vehicleid,color1,color2);
    owner = GetCarOwner(vehicleid);
    if( owner == playerid ) { // Wenn man als Besitzer die Farbe ändert
        new
            slot;
        slot = GetCarOwnerSlot(owner,vehicleid);
        if( slot != 555 ) {
            PlayerCar[owner][slot][CarC1] = color1;
            PlayerCar[owner][slot][CarC2] = color2;
        }
    }
    return 1;
}

COMMAND:autofarbe(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,5.0,1763.4915,2080.2959,10.8203)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Du bist nicht an einer Autolackiererei!");
    }
    new
        color1,
        color2,
        vehicleid,
        modelid,
        colorid[2];
    if(sscanf(params,"iI(-1)",colorid[0],colorid[1])) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Autofarbe [Farben-ID] ([Farben-ID])");
        return SendClientMessage(playerid,COLOR_GREEN,"0 = Schwarz, 1 = Weiß, 2 = Blau, 3 = Rot, 5 = Pink, 6 = Gelb");
    }
    if( colorid[1] == -1) { // keine farbe 2, dann farbe1 doppeln
        colorid[1] = colorid[0];
    }
    if( !(0 <= colorid[0] <= 6 ) || !(0 <= colorid[1] <= 6 )) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Autofarbe [Farben-ID]  ([Farben-ID])");
        return SendClientMessage(playerid,COLOR_GREEN,"0 = Schwarz, 1 = Weiß, 2 = Blau, 3 = Rot, 5 = Pink, 6 = Gelb");
    }
    if( GetPlayerMoney(playerid) < 1500 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst 1500$ um dein Auto umzulackieren");
    }
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Auto");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Auto");
    }
    new
        owner,
        String[128];
    format(String,sizeof(String),"Die Farbe deines Autos wurde geändert auf ID %d und %d",colorid[0],colorid[1]);
    SendClientMessage(playerid,COLOR_GREEN,String);
    switch(colorid[0]) {
        case 0: color1 = 0;
        case 1: color1 = 1;
        case 2: color1 = 7;
        case 3: color1 = 3;
        case 4: color1 = 16;
        case 5: color1 = 126;
        case 6: color1 = 6;
    }
    switch(colorid[1]) {
        case 0: color2 = 0;
        case 1: color2 = 1;
        case 2: color2 = 7;
        case 3: color2 = 3;
        case 4: color2 = 16;
        case 5: color2 = 126;
        case 6: color2 = 6;
    }
    GivePlayerCash(playerid,-1500);
    ChangeVehicleColor(vehicleid,color1,color2);
    owner = GetCarOwner(vehicleid);
    if( owner == playerid ) { // Wenn man als Besitzer die Farbe ändert
        new
            slot;
        slot = GetCarOwnerSlot(owner,vehicleid);
        if( slot != 555 ) {
            PlayerCar[owner][slot][CarC1] = color1;
            PlayerCar[owner][slot][CarC2] = color2;
        }
    }
    return 1;
}
COMMAND:flugzeugfarbe(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,5.0, AIRPORTLS_PAINTJOB_POINT)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Du bist nicht an einer Flugzeuglackiererei!");
    }
    new
        color1,
        color2,
        vehicleid,
        modelid,
        colorid[2];
    if(sscanf(params,"iI(-1)",colorid[0],colorid[1])) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Flugzeugfarbe [Farben-ID] ([Farben-ID])");
        return SendClientMessage(playerid,COLOR_GREEN,"0 = Schwarz, 1 = Weiß, 2 = Blau, 3 = Rot, 5 = Pink, 6 = Gelb");
    }
    if( colorid[1] == -1) { // keine farbe 2, dann farbe1 doppeln
        colorid[1] = colorid[0];
    }
    if( !(0 <= colorid[0] <= 6 ) || !(0 <= colorid[1] <= 6 )) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /flugzeugfarbe [Farben-ID]  ([Farben-ID])");
        return SendClientMessage(playerid,COLOR_GREEN,"0 = Schwarz, 1 = Weiß, 2 = Blau, 3 = Rot, 5 = Pink, 6 = Gelb");
    }
    if( GetPlayerMoney(playerid) < 4500 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst 4500$ um dein Flugzeug umzulackieren");
    }
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Flugzeug");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsAPlane(modelid)) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Flugzeug");
    }
    new
        owner,
        String[128];
    format(String,sizeof(String),"Die Farbe von deinem Flugzeug wurde geändert auf ID %d und %d",colorid[0],colorid[1]);
    SendClientMessage(playerid,COLOR_GREEN,String);
    switch(colorid[0]) {
        case 0: color1 = 0;
        case 1: color1 = 1;
        case 2: color1 = 7;
        case 3: color1 = 3;
        case 4: color1 = 16;
        case 5: color1 = 126;
        case 6: color1 = 6;
    }
    switch(colorid[1]) {
        case 0: color2 = 0;
        case 1: color2 = 1;
        case 2: color2 = 7;
        case 3: color2 = 3;
        case 4: color2 = 16;
        case 5: color2 = 126;
        case 6: color2 = 6;
    }
    GivePlayerCash(playerid,-4500);
    ChangeVehicleColor(vehicleid,color1,color2);
    owner = GetCarOwner(vehicleid);
    if( owner == playerid ) { // Wenn man als Besitzer die Farbe ändert
        new
            slot;
        slot = GetCarOwnerSlot(owner,vehicleid);
        if( slot != 555 ) {
            PlayerCar[owner][slot][CarC1] = color1;
            PlayerCar[owner][slot][CarC2] = color2;
        }
    }
    return 1;
}

stock LoadFraktionsSafeBox() {
    new
        query[128];
    format(query,sizeof(query),"SELECT * FROM `frakbox` LIMIT %d",sizeof(g_FraktionsSafeBox));
    mysql_oquery(query,THREAD_LOADFRAKTIONSSAFEBOX,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}
stock SaveFraktionsSafeBox() {
    new
        query[200];
    for(new i = 0; i < sizeof(g_FraktionsSafeBox) ; i++) {
        format(query,sizeof(query),"UPDATE `frakbox` SET `drogen` = %d,`waffenteile` = %d,`spice` = %d WHERE `fraktionsid` = %d",
            g_FraktionsSafeBox[i][FSB_iDrogen],
            g_FraktionsSafeBox[i][FSB_iWaffenteile],
            g_FraktionsSafeBox[i][FSB_iSpice],
            i
        );
        mysql_oquery(query,THREAD_SAVEFRAKTIONSSAFEBOX,INVALID_PLAYER_ID,gSQL);
    }
}

enum e_FraktionsSafeBoxLocation {
    FSBL_iFraktion,
    Float:FSBL_fX,
    Float:FSBL_fY,
    Float:FSBL_fZ
}

new g_FraktionsSafeBoxLocation[][e_FraktionsSafeBoxLocation] = {
    {15, NINEDEMONSBASE_SAFEBOX_POINT},
    {6,2498.2847,-1710.8126,1014.7422},
    {7,333.7054,1121.7754,1083.8903},
    {10, YAKUZA_INTERIOR_SAFEBOX_POINT},
    {11,505.9030,-79.8864,998.9609},
    {12, LCN_INTERIOR_SAFEBOX_POINT},
    {21, TRIADS_INTERIOR_SAFEBOX_POINT},
    {20,-2170.3828,635.3927,1052.3750},
    {13,2811.7188,-1165.9420,1025.5703}
};

COMMAND:fsafeboxinfo(playerid,params[]) {
    new fraktion, frak_index = -1;

    for( new i = 0 ; i < sizeof(g_FraktionsSafeBoxLocation) ; i++) {
        if( Spieler[playerid][pFraktion] == g_FraktionsSafeBoxLocation[i][FSBL_iFraktion] ) {
            frak_index = i;
        }
    }

    if( frak_index == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Deine Fraktion besitzt keine SafeBox.");
    }

    if (Spieler[playerid][pFraktion] == 21 && GetPlayerVirtualWorld(playerid) != VW_TRIADSINTERIOR)
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht bei der SafeBox deiner Fraktion.");

    if( !IsPlayerInRangeOfPoint(playerid,5.0,g_FraktionsSafeBoxLocation[frak_index][FSBL_fX],g_FraktionsSafeBoxLocation[frak_index][FSBL_fY],g_FraktionsSafeBoxLocation[frak_index][FSBL_fZ]) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht bei der SafeBox deiner Fraktion.");
    }

    fraktion = Spieler[playerid][pFraktion];
    SendClientMessage(playerid, COLOR_GREEN, "=== {FFFFFF}[ FRAKTIONS-SAFEBOX ] {009D00}===");
    new message[145];
    format(message, sizeof(message), "Drogen: {FFFFFF}%s Gramm", AddDelimiters(g_FraktionsSafeBox[fraktion][FSB_iDrogen]));
    SendClientMessage(playerid, COLOR_YELLOW, message);
    format(message, sizeof(message), "Waffenteile: {FFFFFF}%s Stück", AddDelimiters(g_FraktionsSafeBox[fraktion][FSB_iWaffenteile]));
    SendClientMessage(playerid, COLOR_YELLOW, message);
    format(message, sizeof(message), "Spice: {FFFFFF}%s Gramm", AddDelimiters(g_FraktionsSafeBox[fraktion][FSB_iSpice]));
    SendClientMessage(playerid, COLOR_YELLOW, message);
    return SendClientMessage(playerid, COLOR_GREEN, "===========================");
}

COMMAND:fsafebox(playerid,params[]) {
    new fraktion, frak_index = -1;

    for( new i = 0 ; i < sizeof(g_FraktionsSafeBoxLocation) ; i++) {
        if( Spieler[playerid][pFraktion] == g_FraktionsSafeBoxLocation[i][FSBL_iFraktion] ) {
            frak_index = i;
        }
    }

    if( frak_index == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Deine Fraktion besitzt keine SafeBox.");
    }

    if( !IsPlayerInRangeOfPoint(playerid,5.0,g_FraktionsSafeBoxLocation[frak_index][FSBL_fX],g_FraktionsSafeBoxLocation[frak_index][FSBL_fY],g_FraktionsSafeBoxLocation[frak_index][FSBL_fZ]) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht bei der SafeBox deiner Fraktion.");
    }

    fraktion = Spieler[playerid][pFraktion];
    new
        menge,
        item,
        sItem[32],
        aktion,
        sAktion[32];

    if(sscanf(params,"s[32]s[32]d",sItem,sAktion,menge)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fsafebox [Drogen/Waffenteile/Spice] [rausnehmen/reinlegen] [Anzahl]");
    }
    if(menge <= 0 ) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fsafebox [Drogen/Waffenteile/Spice] [rausnehmen/reinlegen] [Anzahl]");
    }
    if(!strcmp(sItem,"drogen",true)) {
        item = 1;
    }
    else if(!strcmp(sItem,"waffenteile",true)) {
        item = 2;
    }
    else if(!strcmp(sItem,"spice",true)) {
        item = 3;
    }
    if(!item) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fsafebox [Drogen/Waffenteile/Spice] [rausnehmen/reinlegen] [Anzahl]");
    }
    if(!strcmp(sAktion,"rausnehmen",true)) {
        aktion = 1;
    }
    else if(!strcmp(sAktion,"reinlegen",true)) {
        aktion = 2;
    }
    if(!aktion) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fsafebox [Drogen/Waffenteile/Spice] [rausnehmen/reinlegen] [Anzahl]");
    }

    new String[128];
    fraktion = Spieler[playerid][pFraktion];
    if(item == 1 ) {    // Drogen
        if(aktion == 1 ) { // rausnehmen
            if( Spieler[playerid][pRank] >= 5 ) {
                if( menge > g_FraktionsSafeBox[fraktion][FSB_iDrogen] ) {
                    format(String,sizeof(String),"Du kannst keine %d Stk Drogen entnehmen ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iDrogen]);
                    SendClientMessage(playerid,COLOR_RED,String);
                    return 1;
                }
                Spieler[playerid][pDrugs] += menge;
                g_FraktionsSafeBox[fraktion][FSB_iDrogen] -= menge;
                format(String,sizeof(String),"Du hast %d Stk Drogen aus deiner Frak-Safebox entnommen ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iDrogen]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
            else {
            SendClientMessage(playerid,COLOR_RED,"Dein Fraktionsrank reicht nicht aus, um Drogen aus der Box zu nehmen.");
            }
        }
        else if(aktion == 2 ) { // reinlegen
            if( menge > Spieler[playerid][pDrugs] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Drogen einlagern ( Hand: %d Stk )",menge,Spieler[playerid][pDrugs]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pDrugs] -= menge;
            g_FraktionsSafeBox[fraktion][FSB_iDrogen] += menge;
            format(String,sizeof(String),"Du hast %d Stk Drogen in die Frak-Safebox gelagert ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iDrogen]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    else if(item == 2 ) { // Waffenteile
        if(aktion == 1 ) { // rausnehmen
            if( Spieler[playerid][pRank] >= 5 ) {
            if( menge > g_FraktionsSafeBox[fraktion][FSB_iWaffenteile] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Waffenteile entnehmen ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iWaffenteile]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pWaffenteile] += menge;
            g_FraktionsSafeBox[fraktion][FSB_iWaffenteile] -= menge;
            format(String,sizeof(String),"Du hast %d Stk Waffenteile aus deiner Frak-Safebox entnommen ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iWaffenteile]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            }
            else {
            SendClientMessage(playerid,COLOR_RED,"Dein Fraktionsrank reicht nicht aus, um Waffenteile aus der Box zu nehmen.");
            }
        }
        else if(aktion == 2 ) { // reinlegen
            if( menge > Spieler[playerid][pWaffenteile] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Waffenteile einlagern ( Hand: %d Stk )",menge,Spieler[playerid][pWaffenteile]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pWaffenteile] -= menge;
            g_FraktionsSafeBox[fraktion][FSB_iWaffenteile] += menge;
            format(String,sizeof(String),"Du hast %d Stk Waffenteile in die Frak-Safebox gelagert ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iWaffenteile]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    else if(item == 3 ) { // Spice
        if(aktion == 1 ) { // rausnehmen
            if( Spieler[playerid][pRank] >= 5 ) {
                if( menge > g_FraktionsSafeBox[fraktion][FSB_iSpice] ) {
                    format(String,sizeof(String),"Du kannst keine %d Stk Spice entnehmen ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iSpice]);
                    SendClientMessage(playerid,COLOR_RED,String);
                    return 1;
                }
                Spieler[playerid][pSpice] += menge;
                g_FraktionsSafeBox[fraktion][FSB_iSpice] -= menge;
                format(String,sizeof(String),"Du hast %d Stk Spice aus deiner Frak-Safebox entnommen ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iSpice]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
            else {
                SendClientMessage(playerid,COLOR_RED,"Dein Fraktionsrank reicht nicht aus, um Spice aus der Box zu nehmen.");
            }
        }
        else if(aktion == 2 ) { // reinlegen
            if( menge > Spieler[playerid][pSpice] ) {
                format(String,sizeof(String),"Du kannst keine %d Stk Spice einlagern ( Hand: %d Stk )",menge,Spieler[playerid][pSpice]);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            Spieler[playerid][pSpice] -= menge;
            g_FraktionsSafeBox[fraktion][FSB_iSpice] += menge;
            format(String,sizeof(String),"Du hast %d Stk Spice in die Frak-Safebox gelagert ( Frak-Lager: %d Stk )",menge,g_FraktionsSafeBox[fraktion][FSB_iSpice]);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    return 1;
}


COMMAND:sex(playerid,params[]){
    new
        giveid,
        price;
    if(Spieler[playerid][pJob] != 20 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist keine Prostituierte.");
    }
    if(sscanf(params,"ud",giveid,price)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sex [Spieler] [Preis]");
    }
    if( !( 0 <= price <= 10000 ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Preis muss zwischen 1$ und 10000$ liegen");
    }
    if(playerid == giveid) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dir selber keinen Sex anbieten.");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht Online.");
    }
    new
        String[128],
        Float:X,
        Float:Y,
        Float:Z,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if( !IsACar( GetVehicleModel(vehicleid)) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in einem Auto.");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst die Fahrerin des Fahrzeuges sein.");
    }
    GetPlayerPos(playerid,X,Y,Z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler befindet sich nicht in deiner Nähe.");
    }
    if( Spieler[playerid][bHasSex] ) {
        return SendClientMessage(playerid, COLOR_RED, "Du hast bereits Sex.");
    }
    new
        Float:health;
    GetPlayerHealth(playerid,health);
    if( health >= 80.0 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst kein Sex haben, deine Energie ist bereits zu hoch.");
    }
    GetPlayerHealth(giveid,health);
    if( health >= 80.0 ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst kein Sex haben, weil die Energie deines Partners zu hoch ist.");
        return 1;
    }
    Spieler[playerid][bHasSex] = false;
    Spieler[giveid][bHasSex] = false;

    Spieler[giveid][pHureID] = playerid;
    Spieler[giveid][pHurePreis] = price;
    format(String,sizeof(String),"Du bietest deine Sex-Dienste %s für $%s an.",GetName(giveid), AddDelimiters(price));
    SendClientMessage(playerid, COLOR_BLUE,String);
    format(String,sizeof(String),"Prostituierte %s bietet dir Sex für $%s an. Nimm es mit /Accept sex an!",GetName(playerid), AddDelimiters(price));
    SendClientMessage(giveid, COLOR_BLUE,String);
    return 1;
}

stock BlitzerfreieFraktion(playerid) {
    switch(Spieler[playerid][pFraktion]) {
        case 1,2,3,5,9,16,18: return 1;
    }
    return 0;
}

stock Class_CompressWeaponInfo(weaponid,ammo) {
    new
        info;
    if( ammo <= 0 ) {
        return 0;
    }
    info = ( ammo << 7 ) | weaponid;
    return info;
}
stock Class_SplitWeaponInfo(weaponinfo,&weaponid,&ammo) {
    new
        info;
    info = weaponinfo;
    weaponid = ( info & 0x3F);
    ammo = ( info >> 7 );
    return 1;
}

stock Store_PlayerWeapons(playerid) {
    new tempweapon, tempammo, Float:armourInfo;

    GetPlayerArmour(playerid, armourInfo);
    Spieler[playerid][pArmourInfo] = armourInfo;
    GetPlayerHealth(playerid, armourInfo);
    Spieler[playerid][pHealthInfo] = armourInfo;
    for(new i = 0; i < 12 ; i++) {
        GetPlayerWeaponData(playerid, i, tempweapon, tempammo );
        Spieler[playerid][pWeaponInfo][i] = Class_CompressWeaponInfo( tempweapon , tempammo );
    }
    return 1;
}
stock ReStore_PlayerWeapons(playerid) {
    new tempweapon, tempammo;
    SetPlayerArmour(playerid, Spieler[playerid][pArmourInfo]);
    Spieler[playerid][pArmourInfo] = 0.0;
    SetPlayerHealth(playerid, Spieler[playerid][pHealthInfo]);
    Spieler[playerid][pHealthInfo] = 1.0;
    ResetPlayerWeapons(playerid);
    for(new i = 0; i < 12 ; i++) {
        Class_SplitWeaponInfo( Spieler[playerid][pWeaponInfo][i] , tempweapon , tempammo );
        GivePlayerWeapon(playerid, tempweapon, tempammo);
        Spieler[playerid][pWeaponInfo][i] = 0;
    }
    return 1;
}

/*COMMAND:staatssystem(playerid,params[]) {
    #pragma unused params
    if(Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Mitglied des Stadtamts.");
    }
    SendClientMessage(playerid,COLOR_LIGHTRED,"________Staats-System________");
    SendClientMessage(playerid,COLOR_WHITE,"/Kfzzulassen");
    SendClientMessage(playerid,COLOR_WHITE,"/Kfzabmelden");
    SendClientMessage(playerid,COLOR_WHITE,"/Kfzsuchen");
    SendClientMessage(playerid,COLOR_WHITE,"/Jobfeuern");
    SendClientMessage(playerid,COLOR_WHITE,"/Amtssteuern");
    SendClientMessage(playerid,COLOR_WHITE,"/Staatmelden");
    return 1;
}*/


stock ClearKFZZulassung(playerid) {
    for(new i ; i < MaxVeh ; i++) {
        g_KFZZulassung[playerid][i][0] = '\0';
    }
    return 1;
}
/*
COMMAND:kfzzulassen(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied des Stadtamts.");
    }
    new
        giveid,
        slot,
        kennzeichen[32];
    if(sscanf(params,"uds[32]",giveid,slot,kennzeichen)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Benutze: /kfzzulassen [Spieler] [Fahrzeug] [Kennzeichen]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht Online.");
    }
    if( !( 0 <= slot <= MaxVeh ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug muss zwischen 0 und "#MaxVeh" liegen.");
    }
    if( !PlayerHaveCar[giveid][slot] ) {
        return SendClientMessage(playerid, COLOR_GREY, "Der Spieler hat in diesem Slot kein Fahrzeug");
    }
    if( !strcmp(KEIN_KENNZEICHEN,kennzeichen) ) {
        return SendClientMessage(playerid, COLOR_GREY, "Dieses Kennzeichen ist bereits belegt");
    }
    new len = strlen(kennzeichen);
    if( !( 4 < len < 32) ) { // 32 sind theoretisch Möglich,es passen aber nur 8 sichtbare Buchstaben auf das Nummernschild
        return SendClientMessage(playerid, COLOR_RED, "Ein Kennzeichen muss zwischen 4 und 32 Zeichen haben");
    }
    if( !isnull( g_KFZZulassung[giveid][slot] ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Dem Spieler wurde bereits für diese Fahrzeug eine Zulassung angeboten");
    }
    if( HasVehicleLicence(giveid,slot) ) {
        return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat bereits eine KFZ-Zulassung");
    }
    PlayerSQLExtra(playerid,params);
    IsNumberplateFree(playerid,kennzeichen);
    // -> THREADED
    return 1;
}

COMMAND:kennzeichen(playerid,params[]) {
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist nur in einem Fahrzeug möglich.");
    }
    for(new x=0;x<MaxVeh;x++)
    {
        if( PlayerHaveCar[playerid][x] )
        {
            if( vehicleid == PlayerCar[playerid][x][CarId] ) {
                // in seinem Fahrzeug
                if( !isnull(g_KFZZulassung[playerid][x]) ) {
                    // Neue Kennzeichen möglich
                    if( !IsNumberplateFree( g_KFZZulassung[playerid][x] )) {
                        new
                            String[128];
                        format(String,sizeof(String),"Zu spät,dass Kennzeichen %s wurde in der Zwischenzeit bereits belegt!", g_KFZZulassung[playerid][x] );
                        SendClientMessage(playerid,COLOR_RED,String);
                        g_KFZZulassung[playerid][x][0] = '\0';
                        return 1;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Dein Fahrzeug ist nun offiziell zugelassen! Dein Amtlicheskennzeichen: '%s', Gute Weiterfahrt!", g_KFZZulassung[playerid][x] );
                    SendClientMessage(playerid,COLOR_GREEN,String);
                    format(PlayerCar[playerid][x][CarNumberplate],32,"%s",g_KFZZulassung[playerid][x]);
                    SetVehicleNumberPlate( vehicleid ,g_KFZZulassung[playerid][x]);
                    g_KFZZulassung[playerid][x][0] = '\0';
                    SavePlayerCar(playerid,x);
                }
                else {
                    // Kein Kennzeichen neu vergeben
                    SendClientMessage(playerid, COLOR_RED, "Für diese Fahrzeug wurde dir kein neues Kennzeichen zugewiesen");
                }
                return 1;
            }
        }
    }
    SendClientMessage(playerid, COLOR_RED, "Diese Fahrzeug gehört nicht dir.");
    return 1;
}
COMMAND:kfzabmelden(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid, COLOR_GREY, "Du bist kein Mitglied des Stadtamts.");
    }
    new
        giveid,
        slot;
    if(sscanf(params,"ud",giveid,slot)) {
        return SendClientMessage(playerid,COLOR_GREEN,"Benutze: /kfzabmelden [Spieler] [Fahrzeug]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_GREY, "Der Spieler ist nicht Online.");
    }
    if( !( 0 <= slot < MaxVeh ) ) {
        return SendClientMessage(playerid, COLOR_GREY, "Das Fahrzeug muss zwischen 0 und "#MaxVeh" liegen.");
    }
    if( !PlayerHaveCar[giveid][slot] ) {
        return SendClientMessage(playerid, COLOR_GREY, "Der Spieler hat in diesem Slot kein Fahrzeug");
    }
    new
        String[128];

    format(PlayerCar[giveid][slot][CarNumberplate] ,32, KEIN_KENNZEICHEN);
    SetVehicleNumberPlate( PlayerCar[giveid][slot][CarId], ".");

    format(String,sizeof(String),"Stadtamt Mitarbeiter %s hat dein KFZ abgemeldet ( Fahrzeug: %d )",GetName(playerid),slot);
    SendClientMessage(giveid,COLOR_WHITE,String);

    format(String,sizeof(String),"Du hast die KFZ Zulassung %s entzogen ( Fahrzeug: %d )",GetName(giveid),slot);
    SendClientMessage(playerid,COLOR_WHITE,String);

    SavePlayerCar(playerid,slot);
    return 1;
}*/

COMMAND:kzsuchen(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 5 && Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2 && Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
    }
    new
        kennzeichen[32];
    if(sscanf(params,"s[32]",kennzeichen)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /kzsuchen [Kennzeichen]");
    }
    if(!strcmp(kennzeichen,KEIN_KENNZEICHEN)) {
        return SendClientMessage(playerid,COLOR_BLUE, "Ungültiges Kennzeichen.");
    }
    new
        giveid = INVALID_PLAYER_ID,
        slot;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            for(new x = 0 , j = MaxVehicles(i) ; x < j;x++) {
                if( (0 < PlayerCar[i][x][CarId] < INVALID_VEHICLE_ID) ) {
                    if( !strcmp(PlayerCar[i][x][CarNumberplate],kennzeichen,true) ) {
                        slot = x;
                        giveid = i;
                        break;
                    }
                }
            }
        }
    }
    if( giveid == INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_BLUE, "Kein Fahrzeughalter mit diesem Kennzeichen gefunden.");
    }
    /*
    _______KFZ-AKTE_______
    Fahrzeughalter: [Besitzer vom Fahrzeug]
    Amtskennzeichen: [Kennzeichen]
    Zulassung: [Nicht Zugelassen/Zugelassen]
    Fahrzeug: [Fahrzeugschlüssel]
    Steuern: [Gesetzte Steuern bei /Amtssteuern ablesen]
    Beruf: [Job]
    */
    new
        vehicleid,
        modelid,
        job[50],
        String[128];
    vehicleid = PlayerCar[giveid][slot][CarId];
    modelid = GetVehicleModel(vehicleid);
    SendClientMessage(playerid,COLOR_LIGHTRED2,"_______KFZ-AKTE_______");
    format(String,sizeof(String),"Fahrzeughalter: %s",GetName(giveid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Amtskennzeichen: %s", PlayerCar[giveid][slot][CarNumberplate] );
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Zulassung: %s",HasVehicleLicence(giveid,slot) ? ("Ja"):("Nein"));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Fahrzeug: %s",CarName[modelid-400]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"TÜV: %s", PlayerCar[giveid][slot][TUV] == 0 ? ("Vorhanden") : ("Nicht vorhanden") );
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Steuern: $%s", AddDelimiters(Spieler[giveid][pKFZSteuer]));
    SendClientMessage(playerid,COLOR_WHITE,String);
    ReturnPlayerJob(giveid,job);
    format(String,sizeof(String),"Beruf: %s",job);
    SendClientMessage(playerid,COLOR_WHITE,String);
    return 1;
}

COMMAND:kfzsuchen(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 5 && Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2 && Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
    }
    new
        giveid,
        slot;
    if(sscanf(params,"ud",giveid,slot)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kfzsuchen [Spieler] [Fahrzeug]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht Online.");
    }
    if( !( 0 <= slot < MaxVehicles(playerid) ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug muss zwischen 0 und "#MaxVeh" liegen.");
    }
    if( !PlayerHaveCar[giveid][slot] ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat in diesem Slot kein Fahrzeug");
    }
    /*
    _______KFZ-AKTE_______
    Fahrzeughalter: [Besitzer vom Fahrzeug]
    Amtskennzeichen: [Kennzeichen]
    Zulassung: [Nicht Zugelassen/Zugelassen]
    Fahrzeug: [Fahrzeugschlüssel]
    Steuern: [Gesetzte Steuern bei /Amtssteuern ablesen]
    Beruf: [Job]
    */
    new
        vehicleid,
        modelid,
        job[50],
        String[128];
    vehicleid = PlayerCar[giveid][slot][CarId];
    modelid = GetVehicleModel(vehicleid);
    SendClientMessage(playerid,COLOR_LIGHTRED2,"_______KFZ-AKTE_______");
    format(String,sizeof(String),"Fahrzeughalter: %s",GetName(giveid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Amtskennzeichen: %s", PlayerCar[giveid][slot][CarNumberplate] );
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Zulassung: %s",HasVehicleLicence(giveid,slot) ? ("Ja"):("Nein"));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Fahrzeug: %s",CarName[modelid-400]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"TÜV: %s", PlayerCar[giveid][slot][TUV] == 0 ? ("Vorhanden") : ("Nicht vorhanden") );
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Steuern: $%s", AddDelimiters(Spieler[giveid][pKFZSteuer]));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Bargeld: $%s", AddDelimiters(Spieler[giveid][pCash]));
    SendClientMessage(playerid,COLOR_WHITE,String);
    ReturnPlayerJob(playerid,job);
    format(String,sizeof(String),"Beruf: %s",job);
    SendClientMessage(playerid,COLOR_WHITE,String);
    return 1;
}
COMMAND:jobfeuern(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 9 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitglied der Regierung");
    }
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Jobfeuern [Spieler]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht Online.");
    }
    if(playerid == giveid) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst dich selber nicht feuern");
    }
    if( Spieler[giveid][pJob] == 0 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keinen Job");
    }
    new
        job[50],
        String[128];

    ReturnPlayerJob(giveid,job);
    format(String,sizeof(String),"Staatsbeamter %s hat dich aus deinem Beruf '%s' fristlos gekündigt!",GetName(playerid),job);
    SendClientMessage(giveid,COLOR_RED,String);

    format(String,sizeof(String),"Du hast %s seinen %s Job gekündigt",GetName(giveid),job);
    SendClientMessage(playerid,COLOR_YELLOW,String);

    Spieler[giveid][pJob] = 0;
    return 1;
}

COMMAND:kfzsteuern(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 9 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitarbeiter der Regierung");
    }
    new
        giveid,
        betrag;
    if(sscanf(params,"ud",giveid,betrag)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kfzsteuern [Spieler] [Betrag]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht Online.");
    }
    if( betrag < 0 ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Betrag kann nicht negativ sein");
    }
    new
        String[128];
    format(String,sizeof(String),"[STEUERN] Staatsbeamter %s hat deine KFZ-Steuer auf folgenden Betrag geändert: $%s",GetName(playerid), AddDelimiters(betrag));
    SendClientMessage(giveid,COLOR_ORANGE,String);

    format(String,sizeof(String),"Die KFZ-Steuer von %s wurde auf folgenden Betrag geändert: $%s",GetName(giveid), AddDelimiters(betrag));
    SendClientMessage(playerid,COLOR_GREEN,String);

    Spieler[giveid][pKFZSteuer] = betrag;
    return 1;
}

COMMAND:amtssteuern(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 9 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Mitarbeiter der Regierung");
    }
    new
        giveid,
        betrag;
    if(sscanf(params,"ud",giveid,betrag)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Amtssteuern [Spieler] [Betrag]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht Online.");
    }
    if( betrag < 0 ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Betrag kann nicht negativ sein");
    }
    new
        String[128];
    format(String,sizeof(String),"[STEUERN] Staatsbeamter %s hat deine Steuer auf folgenden Betrag geändert: $%s",GetName(playerid), AddDelimiters(betrag));
    SendClientMessage(giveid,COLOR_ORANGE,String);

    format(String,sizeof(String),"Die Steuer von %s wurde auf folgenden Betrag geändert: $%s",GetName(giveid), AddDelimiters(betrag));
    SendClientMessage(playerid,COLOR_GREEN,String);

    Spieler[giveid][pSSteuer] = betrag;
    return 1;
}

stock IsNumberplateFree(playerid,numberplate[]) {
    new
        query[128];
    mysql_real_escape_string(numberplate,numberplate);
    format(query,sizeof(query),"SELECT * FROM `playercar` WHERE `numberplate` = '%s'",numberplate);
    mysql_pquery(query,THREAD_ISNUMBERPLATEFREE,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock HasVehicleLicence(playerid,slot) {
    if( !strcmp(KEIN_KENNZEICHEN,PlayerCar[playerid][slot][CarNumberplate])) {
        return 0;
    }
    return 1;
}
COMMAND:fahrzeugschein(playerid,params[]) {
    new
        str[64],
        giveid;
    format(str,sizeof(str),"U(%d)",playerid);
    if(sscanf(params,str,giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fahrzeugschein [Spieler]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht Online.");
    }
    new
        Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,X,Y,Z)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    }
    if( !PlayerHaveCar[playerid][PlayerKey[playerid]] ) {
        return SendClientMessage(playerid, COLOR_RED, "Du hast gerade kein Fahrzeug gewählt ( /carkey ).");
    }
    new
        slot,
        vehicleid,
        modelid,
        String[128];
    slot = PlayerKey[playerid];
    vehicleid = PlayerCar[playerid][slot][CarId];
    modelid = GetVehicleModel(vehicleid);
    if(playerid != giveid) {
        format(String,sizeof(String),"Du hast dein Fahrzeugschein %s gezeigt",GetName(giveid));
        SendClientMessage(playerid,COLOR_WHITE,String);
        format(String,sizeof(String),"Spieler %s zeigt dir seinen Fahrzeugschein",GetName(playerid));
        SendClientMessage(giveid,COLOR_LIGHTRED2,String);
    }
    SendClientMessage(giveid,COLOR_GREEN,"_______FAHRZEUGSCHEIN_______");
    format(String,sizeof(String),"Fahrzeughalter: %s", GetName(playerid) );
    SendClientMessage(giveid,COLOR_WHITE,String);
    format(String,sizeof(String),"Amtskennzeichen: %s", PlayerCar[playerid][slot][CarNumberplate] );
    SendClientMessage(giveid,COLOR_WHITE,String);
    format(String,sizeof(String),"Zulassung: %s", HasVehicleLicence(playerid,slot) ? ("ZUGELASSEN"):("NICHT ZUGELASSEN") );
    SendClientMessage(giveid,COLOR_WHITE,String);
    format(String,sizeof(String),"Fahrzeug: %s",CarName[modelid-400]);
    SendClientMessage(giveid,COLOR_WHITE,String);
    format(String,sizeof(String),"TÜV: %s", PlayerCar[playerid][slot][TUV] == 0 ? ("Vorhanden") : ("Nicht vorhanden") );
    SendClientMessage(giveid,COLOR_WHITE,String);
    return 1;
}

forward SetPlayerPosEx(playerid,Float:x,Float:y,Float:z, interior, virtualworld);
public SetPlayerPosEx(playerid,Float:x,Float:y,Float:z, interior, virtualworld) {
	TogglePlayerControllableEx(playerid,0);
	SetPlayerPos(playerid,x,y,z);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, virtualworld);Streamer_UpdateEx(playerid, x, y, z, .compensatedtime = 1500);
	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, 1);
	return 1;
}

/* Taschendieb 1x pro Minute
    Nachricht beim einsteigen falls nicht angemeldet
    Taschendieb bei Jail verbieten

*/

enum e_Event {
    bool:E_bStatus,
    Float:E_fX,
    Float:E_fY,
    Float:E_fZ,
    E_iInterior,
    E_iVirtualworld
}
new g_Event[e_Event];

COMMAND:startevent(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    if( g_Event[E_bStatus] ) {
        return SendClientMessage(playerid, COLOR_RED, "Ein Event läuft noch");
    }
    new
        String[128],
        Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    format(String,sizeof(String),"[EVENT] %s %s startet ein Event!", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessageToAll(COLOR_GREEN,String);
    SendClientMessageToAll(COLOR_ORANGE,"Mit /Gotoevent könnt Ihr euch zum Event teleportieren!");

    g_Event[E_fX] = X;
    g_Event[E_fY] = Y;
    g_Event[E_fZ] = Z;
    g_Event[E_bStatus] = true;
    g_Event[E_iInterior] =  GetPlayerInterior(playerid);
    g_Event[E_iVirtualworld] = GetPlayerVirtualWorld(playerid);
    return 1;
}

COMMAND:stopevent(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    if( !g_Event[E_bStatus] ) {
        return SendClientMessage(playerid, COLOR_RED, "Aktuell läuft kein Event");
    }
    new
        String[128];
    format(String,sizeof(String),"[EVENT] %s %s stoppt das Event. Ihr könnt euch nicht mehr zum Start teleportieren!", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessageToAll(COLOR_LIGHTRED2,String);

    g_Event[E_bStatus] = false;
    return 1;
}

COMMAND:gotoevent(playerid,params[]) {
    if( !g_Event[E_bStatus] ) {
        return SendClientMessage(playerid, COLOR_BLUE, "Aktuell läuft kein Event");
    }
    if( 1 <= Spieler[playerid][pJailed] <= 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Pech gehabt! Du kannst aus dem Gefängnis heraus an keinem Event teilnehmen!");
    }
    new
        String[128];
    format(String,sizeof(String),"[EVENT] %s hat sich zum Event teleportiert ( /Gotoevent )",GetName(playerid));
    SendClientMessageToAll(COLOR_ORANGE,String);

    Streamer_UpdateEx(playerid,g_Event[E_fX],g_Event[E_fY],g_Event[E_fZ],g_Event[E_iVirtualworld],g_Event[E_iVirtualworld]);
    SetPlayerPos(playerid,g_Event[E_fX],g_Event[E_fY],g_Event[E_fZ]);
    SetPlayerVirtualWorld(playerid,g_Event[E_iVirtualworld]);
    SetPlayerInterior(playerid,g_Event[E_iInterior]);
    return 1;
}

stock ShowPlayerBan(playerid) {
    new
        query[200];
    format(query,sizeof(query),"SELECT `Banned`,`TimeBan`,FROM_UNIXTIME(`TimeBan`,'%%d.%%m.%%Y %%H:%%i'),`GebanntVon`,`BanGrund` FROM `accounts` WHERE `Name` = '%s'",GetName(playerid));
    mysql_pquery(query,THREAD_SHOWPLAYERBAN,playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

COMMAND:offbannen(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    new
        sSpieler[MAX_PLAYER_NAME],
        sGrund[128];
    if(sscanf(params,"s[24]s[128]",sSpieler,sGrund)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Offbannen [Spieler] [Grund]");
    }
    /*
    if(!mysql_CheckPlayerNameAccount(sSpieler)) {
        return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler existiert nicht");
    }*/
    new
        query[256];
    mysql_real_escape_string(sSpieler,sSpieler);
    format(query,sizeof(query),"UPDATE `accounts` SET `Banned` = 1,`BanGrund` = '%s',`GebanntVon` = '%s' WHERE `Name` = '%s'",
        sGrund,GetName(playerid),sSpieler);
    mysql_pquery(query,THREAD_OFFBANNEN,playerid,gSQL,MySQLThreadOwner);

    format(query,sizeof(query),"[OFFLINE-BAN] Spieler %s wurde von %s dauerhaft vom Server gebannt! ( OFFLINE BAN )",sSpieler,GetName(playerid) );
    SendAdminMessage(COLOR_RED, query);

    format(query,sizeof(query),"%s wurde von %s %s offline dauerhaft gebannt, Grund: %s", sSpieler, GetPlayerAdminRang(playerid), GetName(playerid), sGrund);
    SendUCPAktenEintrag( playerid, GetName(playerid) , sSpieler , query );

    return 1;
}
COMMAND:oafkick(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    }
    new
        sSpieler[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",sSpieler)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Oafkick [Spieler]");
    }
    /*
    if(!mysql_CheckPlayerNameAccount(sSpieler)) {
        return SendClientMessage(playerid,COLOR_RED,"Dieser Spieler existiert nicht");
    }*/
    new
        query[128];
    mysql_real_escape_string(sSpieler,sSpieler);
    format(query,sizeof(query),"UPDATE `accounts` SET `Fraktion` = 0,`Rank` = 0,`Skin` = 2 WHERE `Name` = '%s'",sSpieler);
    mysql_pquery(query,THREAD_OAFKICK,playerid,gSQL,MySQLThreadOwner);
    format(query,sizeof(query),"[FKICK] Der Spieler %s wurde von %s aus seiner Fraktion gekickt ( OFFLINE )",sSpieler,GetName(playerid) );
    SendAdminMessage(COLOR_YELLOW, query);
    return 1;
}


stock sendMoneyAlert(playerid, giveid, money[], reason[]) {
    new String[128];
    format(String,sizeof(String),"[WARNUNG] Spieler %s hat %s $%s überwiesen!", GetName(playerid), GetName(giveid), money);
    if (!isnull(reason)) format(String, sizeof(String), "%s Begründung: %s", String, reason);
    SendAdminMessage(COLOR_YELLOW, String);
    return 1;
}

COMMAND:autoknacken(playerid,params[]) {
    if(Spieler[playerid][pJob] != 22 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Autoknacker");
        return 1;
    }
    new
        vehicleid;
    vehicleid = GetClosestVehicle(playerid,4.0);
    if( vehicleid == INVALID_VEHICLE_ID ) {
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in direkter Nähe zu einem Fahrzeug");
        return 1;
    }
    if( Spieler[playerid][pAutoknackerVehicleID] != INVALID_VEHICLE_ID ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist bereits am knacken eines Autos oder hast gerade eines geknackt.");
        return 1;
    }
    new
        Float:X,
        Float:Y,
        Float:Z,
        String[128];
    GetPlayerPos(playerid,X,Y,Z);
    format(String,sizeof(String),"%s versucht ein Fahrzeug aufzubrechen",GetName(playerid));
    SendRoundMessage( X,Y,Z , COLOR_LIGHTRED2, String);

    Spieler[playerid][pAutoknackerVehicleID] = vehicleid;
    Spieler[playerid][tAutoknacken] = SetTimerEx("pulse_Autoknacken",1046,true,"dd",playerid,vehicleid);
    Spieler[playerid][punixAutoknacken] = gettime() + 10;
    return 1;
}

forward pulse_Autoknacken(playerid,vehicleid);
public pulse_Autoknacken(playerid,vehicleid) {
    new
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    if( GetVehicleDistanceFromPoint(vehicleid, X,Y,Z) > 4.0 ) {
        SendClientMessage(playerid, COLOR_RED, "Du hast dich zu weit vom Auto entfernt.");
        Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
        KillTimer(Spieler[playerid][tAutoknacken]);
        return 1;
    }
    if( gettime() >= Spieler[playerid][punixAutoknacken] ) {
        new
            owner = GetCarOwner(vehicleid);
        KillTimer(Spieler[playerid][tAutoknacken]);
        if( owner == INVALID_VEHICLE_ID ) {
            SendClientMessage(playerid, COLOR_ORANGE, "Das Auto gehört keinem Spieler. Daher kannst du es nicht knacken!");
            Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
            return 1;
        }

        if( owner == playerid ) {
            SendClientMessage(playerid, COLOR_ORANGE, "Dein eigenes Auto zu knacken ist bescheuert");
            Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
            return 1;
        }

        new
            String[128];
        SendClientMessage(playerid, COLOR_GREEN, "Fahre das Fahrzeug nun zum SF Kran, wo es auf ein Schiff transportiert wird.");
        format(String,sizeof(String),"Autodieb %s hat ein Auto aufgebrochen!",GetName(playerid));
        SendRoundMessage( X,Y,Z , COLOR_LIGHTRED2, String);
        UnLockCar(vehicleid);
        SetPlayerCheckpointEx(playerid, -1548.0554,125.1203,3.5547, 7.0, CP_SFKRAN);
        Spieler[playerid][pAutoknackerVehicleID] = vehicleid;
    }
    return 1;
}
stock GetClosestVehicle(playerid, Float:range)
{
    new     Float:p_X;
    new     Float:p_Y;
    new     Float:p_Z;

    new     Float:Distance;
    new     Float:PretendentDistance = range +1;
    new     Pretendent = INVALID_VEHICLE_ID;

    GetPlayerPos(playerid, p_X, p_Y, p_Z);

    for(new vehicleid=1; vehicleid < MAX_VEHICLES; vehicleid++)
    {
        Distance = GetVehicleDistanceFromPoint(vehicleid, p_X, p_Y, p_Z);
        if( Distance == 0.0 ) continue ;
        // printf("Distance %.1f, range %.1f, prententDistance %.1f ",Distance,range,PretendentDistance);
        if(Distance <= range && Distance <= PretendentDistance)
        {
            Pretendent = vehicleid;
            PretendentDistance = Distance;
        }
    }

    return Pretendent;
}

COMMAND:starttaxi(playerid,params[]) {
    if(Spieler[playerid][pJob] != 16 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Taxifahrer");
        return 1;
    }
    new
        preis;
    if(sscanf(params,"d",preis)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Starttaxi [Preis]");
    }
    if( !( 10 <= preis <= 500 ) ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Preis muss zwischen 10$ und 500$ liegen");
    }
    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich in keinem Fahrzeug");
    }
    modelid = GetVehicleModel(vehicleid);
    if( !(( modelid == 420 ) || ( modelid == 438 )) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in einem Taxi");
    }
    if( HasPlayerTaxiCustomers(playerid)) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast bereits Fahrgäste. Aktion ist daher nicht möglich");
    }
    new
        String[64];
    format(String,sizeof(String),"Taxifahrer: %s\nFahrpreis: %d$",GetName(playerid),preis);
    //printf("Starttaxi HasPlayerTaxiCustomers(%d) = %d t3dTaxi[%d] = %d",playerid,HasPlayerTaxiCustomers(playerid),vehicleid,_:g_t3dTaxi[vehicleid]);
    if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
        Update3DTextLabelText( g_t3dTaxi[vehicleid] , 0xFFD700FF,String );
        format(String,sizeof(String),"Du hast deinen Tarif angepasst. Fahrpreis: %d$/100m",preis);
    }
    else {
        g_t3dTaxi[vehicleid] = Create3DTextLabel( String , 0xFFD700FF, 0.0, 0.0, 0.0, 18.0, 0, 1);
        Attach3DTextLabelToVehicle( g_t3dTaxi[vehicleid],vehicleid,0.0,0.0,0.6);
        format(String,sizeof(String),"Du hast deinen Taxidienst gestartet. Fahrpreis: %d$/100m",preis);
        // Nur wenn neuer Start
        Spieler[playerid][pTaxiVehicle] = vehicleid;
        CreateTaxiTextdraw(playerid);
        ClearPlayerTaxiSlots(playerid);
    }
    SendClientMessage(playerid,COLOR_LIGHTRED2,String);
    Spieler[playerid][pTaxiPreis] = preis;
    return 1;
}

COMMAND:getraenk(playerid,params[]) {
    //if( !IsPlayerInRangeOfPoint(playerid,15.0,499.4468,-20.7656,1000.6797) ) {
    if (!IsPlayerInRangeOfPoint(playerid, 4.0, SHISHABAR_DRINK_POINT) && !IsPlayerInRangeOfPoint(playerid,4.0, ALHAMBRAINTERIOR_BUYDRINK_POINT) && !IsPlayerInRangeOfPoint(playerid,4.0, CLUBINTERIORLOS_DRINKS_POINT) && !IsPlayerInRangeOfPoint(playerid,4.0,1455.8802,-1741.8704,13.5469)
        && !IsPlayerInRangeOfPoint(playerid,4.0,1215.3011,-13.0128,1000.9219) && !IsPlayerInRangeOfPoint(playerid,4.0, CASINO_INTERIOR_BUYDRINK_POINT) && !IsPlayerInRangeOfPoint(playerid,4.0,-2653.6023,1407.0844,906.2734) ) {
        return SendClientMessage(playerid,COLOR_ORANGE,"Du befindest dich nicht in der Bar");
    }
    showDrinks(playerid);
    return 1;
}

stock showDrinks(playerid) {
    new
        String[150];
    for(new i ; i < sizeof(g_Drinks) ; i++) {
        format(String,sizeof(String),"%s%s - %d$\n",String,g_Drinks[i][D_sName],g_Drinks[i][D_iPrice]);
    }
    ShowPlayerDialog(playerid,DIALOG_DRINKS,DIALOG_STYLE_LIST,"Drinkbar",String,"Kaufen","Abbruch");
    return 1;
}

forward cancelDrink(playerid);
public cancelDrink(playerid) {
    Spieler[playerid][tDrink] = INVALID_TIMER_ID;
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    return 1;
}
COMMAND:wcodes(playerid,params[]) {
    if(Spieler[playerid][pJob] != 21 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Wantedhacker.");
        return 1;
    }
    if( !IsPlayerInRangeOfPoint(playerid,3.0, WANTEDHACKERBASE_POINT) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht am Wantedhacker Platz.");
    }
    if( gettime() < Spieler[playerid][punixWantedCodes] ) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst noch warten bis du erneut Wantedcodes erhältst.");
    }
    new
        String[128],
        codes;
    codes = 4 + random(6);
    Spieler[playerid][punixWantedCodes] = gettime() + 20*60;
    Spieler[playerid][pWantedCodes] += codes;
    format(String,sizeof(String),"Du hast %d Wantedcodes erhalten (Hand: %d).",codes,Spieler[playerid][pWantedCodes]);
    SendClientMessage(playerid,COLOR_GREEN,String);
    return 1;
}
COMMAND:wantedhacken(playerid,params[])
{
    new
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(Spieler[playerid][pJob] != 21 )
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Wantedhacker");
        return 1;
    }
    else if(!IsPlayerInDynamicArea(playerid,g_iWantedHackerZone))
    {
        SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in der Nähe des Polizei Präsidiums.");
    }
    modelid = GetVehicleModel(vehicleid);
    if( (modelid != 413) &&  (modelid != 459) &&  (modelid != 482) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Van.");
    }
    else if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER )
    {
        SendClientMessage(playerid,COLOR_RED,"Du musst der Fahrer des Wagens sein");
    }
    else if(Spieler[playerid][pWantedCodes]<=0)
    {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Wantedcodes auf der Hand.");
    }
    else
    {
        ShowPlayerDialog(playerid,DIALOG_WANTEDCODES,DIALOG_STYLE_LIST,"Wantedhacking","Wanteds löschen\nGesuchten-Liste anzeigen\nAlle Cops anzeigen","Auswählen","Abbrechen");
    }
    return 1;
}
forward Pulse_WantedHacker(playerid,giveid,wantedcodes);
public Pulse_WantedHacker(playerid,giveid,wantedcodes) {
    if(Spieler[playerid][pJob] != 21 ) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        SendClientMessage(playerid, COLOR_LIGHTRED2, "Du bist kein WantedHacker mehr! Vorgang gescheitert");
        return 1;
    }
    if( !IsPlayerInDynamicArea(playerid,g_iWantedHackerZone)) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast dich zu weit vom Polizei Präsidium entfernt! Vorgang gescheitert");
    }
    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du darfst dein Fahrzeug nicht verlassen! Vorgang gescheitert");
    }
    modelid = GetVehicleModel(vehicleid);
    if( (modelid != 413) &&  (modelid != 459) &&  (modelid != 482) ) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich mehr in einem Pony! Vorgang gescheitert");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_RED,"Du sitzt nicht als Fahrer im Pony! Vorgang gescheitert");
    }
    if( gettime() > Spieler[playerid][punixWantedCodesDone] ) {
        new
            String[128];
        KillTimer(Spieler[playerid][tWantedCodes]);
        Spieler[playerid][bWantedHacking] = false;
        if( Spieler[giveid][pWanteds] == 0 ) {
            format(String,sizeof(String),"Der Spieler %s besitzt keine Wanteds. Du konntest daher keine Wanteds löschen!",GetName(giveid));
            SendClientMessage(playerid,COLOR_LIGHTRED2,String);
            format(String,sizeof(String),"Du erhältst %d WantedCodes zurück",wantedcodes);
            SendClientMessage(playerid,COLOR_GREEN,String);
            Spieler[playerid][pWantedCodes] += wantedcodes;
            return 1;
        }
        if( wantedcodes > Spieler[giveid][pWanteds] ) {
            new
                ueberschuss;
            ueberschuss = wantedcodes - Spieler[giveid][pWanteds];
            format(String,sizeof(String),"Du hast versucht Spieler %s %d Wanteds zu reinigen,er hat aber nur %d Wanteds.",GetName(giveid),wantedcodes,Spieler[giveid][pWanteds]);
            SendClientMessage(playerid,COLOR_LIGHTRED2,String);
            format(String,sizeof(String),"Daher erhältst du %d WantedCodes zurück",ueberschuss );
            SendClientMessage(playerid,COLOR_GREEN,String);
            Spieler[playerid][pWantedCodes] += ueberschuss;
            wantedcodes = ( wantedcodes - ueberschuss );
        }
        format(String,sizeof(String),"WantedHacker %s hat für dich %d Wanted/s gereinigt!",GetName(playerid),wantedcodes);
        SendClientMessage(giveid,COLOR_LIGHTRED2,String);
        format(String,sizeof(String),"Du hast erfolgreich %d Wanted/s für %s gereinigt. ( WantedCodes: %d )",wantedcodes,GetName(giveid),Spieler[playerid][pWantedCodes]);
        SendClientMessage(playerid,COLOR_GREEN,String);
        Spieler[giveid][pWanteds] -= wantedcodes;
    }
    return 1;
}

stock GetRandomPlayer(playerid) {
    new
        player,
        players,
        aiConnected[MAX_PLAYERS];
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            if( i != playerid ) {
                aiConnected[players] = i;
                players++;
            }
        }
    }
    player = aiConnected[ random(players) ];
    return player;
}

forward SetPlayerView(playerid,step);
public SetPlayerView(playerid,step) {
    /*
    new
        players;
    players = GetOnlinePlayers();
    // printf("players %d",players);
    if( players > 1 ) {
        new
            spectateid = GetRandomPlayer(playerid);
        if( IsPlayerSpawned(spectateid) ) {
            //printf("spectateid = %d",spectateid);
            StartSpectate(playerid,spectateid);
            //TogglePlayerSpectating(playerid,1);
            //PlayerSpectatePlayer(playerid,spectateid);
            //PlayerSpectateVehicle(playerid,4);
        }
        else {
            SetPlayerCameraPos(playerid, 1334.5095,-894.5165,95.0 );
            SetPlayerCameraLookAt(playerid,1428.4849,-793.6905,90.0);
            SetPlayerPos(playerid,1416.5498,-806.5092,85.0357);
            SetPlayerWeather(playerid,18);
        }
    }
    else {
        SetPlayerCameraPos(playerid, 1334.5095,-894.5165,95.0 );
        SetPlayerCameraLookAt(playerid,1428.4849,-793.6905,90.0);
        SetPlayerPos(playerid,1416.5498,-806.5092,85.0357);
        SetPlayerWeather(playerid,18);
    }
    */
    /*
    new
        String[128];
    format(String,sizeof(String),"SetPlayerView(%d,%d)",playerid,step);
    SendClientMessage(playerid,COLOR_WHITE,String);
    printf("SetPlayerView(%d,%d)",playerid,step );
    */
    /*if( 0 <= step <= 4 ) {
        SetPlayerCameraPos(playerid,-625.0858,855.845,30.0);
        SetPlayerCameraLookAt(playerid, -688.1018,931.2471,25.0);
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView", 251 ,false,"dd",playerid, ++step );
    }
    else if(step == 5 ) {
        TogglePlayerSpectating(playerid,true);

        InterpolateCameraPos(playerid,-625.0858,855.8456,30.0, -688.2957,850.4716,36.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, -688.1018,931.2471,25.0 , -688.1018,931.2471,26.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",6563,false,"dd",playerid,++step );
    }
    else if(step == 6 ) {
        TogglePlayerSpectating(playerid,true);
        InterpolateCameraPos(playerid, -688.2957,850.4716,30.0, -738.4070,884.7025,36.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, -688.1018,931.2471,25.0 , -701.3433,937.2500,26.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",11617,false,"dd",playerid,++step );
    }
    else if(step == 7 ) {
        InterpolateCameraPos(playerid, -738.4070,884.7025,30.0, -625.0858,855.8456,36.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, -701.3433,937.2500,25.0 , -688.1018,931.2471,26.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",14087,false,"dd",playerid,++step );
    }
    else if(step == 8 ) {
        TogglePlayerSpectating(playerid,false);
    }
    //City Los Santos
    if( 0 <= step <= 4 ) {
        SetPlayerCameraPos(playerid,1003.0427,-789.3499,136.0);
        SetPlayerCameraLookAt(playerid, 1184.1705,-969.9221,136.0);
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView", 251 ,false,"dd",playerid, ++step );
    }
    else if(step == 5 ) {
        TogglePlayerSpectating(playerid,true);

        InterpolateCameraPos(playerid,1003.0427,-789.3499,136.0,959.2967,-897.6666,115.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 1184.1705,-969.9221,135.0 , 1184.1705,-969.9221,140.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",6563,false,"dd",playerid,++step );
    }
    else if(step == 6 ) {
        TogglePlayerSpectating(playerid,true);
        InterpolateCameraPos(playerid, 1092.9565,-1058.2958,110.0, 959.2967,-897.6666,118.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 1238.1628,-921.3459,115.0 , 1238.1628,-921.3459,118.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",11617,false,"dd",playerid,++step );
    }
    else if(step == 7 ) {
        InterpolateCameraPos(playerid, 959.2967,-897.6666,118.0, 1092.9565,-1058.2958,115.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 1184.1705,-969.9221,140.0 , 1238.1628,-921.3459,115.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",14087,false,"dd",playerid,++step );
    }
    else if(step == 8 ) {
        TogglePlayerSpectating(playerid,false);
    }*/
    SetPlayerVirtualWorld(playerid, VW_MAIN);
    Streamer_UpdateEx(playerid, 1564.733398, -1738.897827, 62.053535, 0);
    InterpolateCameraPos(playerid, 1564.733398, -1738.897827, 62.053535, 1395.101562, -1748.152099, 66.176651, 25000);
    InterpolateCameraLookAt(playerid, 1561.099609, -1741.746337, 60.134815, 1398.683105, -1750.965820, 64.113708, 25000);

    return 1;
}

stock DestroyTaxiTextdraw(playerid) {
    //printf("DestroyTaxiTextdraw(%s) %d Text:%d",GetName(playerid),playerid,_:Spieler[playerid][tdTaxi]);
    TextDrawHideForAll(Spieler[playerid][tdTaxi]);
    TextDrawDestroy(Spieler[playerid][tdTaxi]);
    Spieler[playerid][tdTaxi] = Text:INVALID_TEXT_DRAW;
    return 1;
}

stock CreateTaxiTextdraw(playerid) {
    new Text:Textdraw0 = Text:0;
    new fails = 0;
    do {
        Textdraw0 = TextDrawCreate(320.000000, 361.000000, "~y~Taxameter~n~~n~~w~Wird geladen ..");
        //printf("CreateTaxiTextdraw(%s) %d Text:%d - 0 - f:%d",GetName(playerid),playerid, _:Spieler[playerid][tdTaxi] , fails);
        fails++;
    }
    while( _:Textdraw0 == 0 && fails <= 5 );
    TextDrawAlignment(Textdraw0, 2);
    TextDrawBackgroundColor(Textdraw0, 255);
    TextDrawFont(Textdraw0, 1);
    new
        Float:height = 0.30;
    TextDrawLetterSize(Textdraw0, height, height * 4.0625 ); // 4.0625
    TextDrawColor(Textdraw0, -1);
    TextDrawSetOutline(Textdraw0, 0);
    TextDrawSetProportional(Textdraw0, 1);
    TextDrawSetShadow(Textdraw0, 1);
    TextDrawUseBox(Textdraw0, 1);
    TextDrawBoxColor(Textdraw0, 102);
    TextDrawTextSize(Textdraw0, 426.000000, 162.000000);
    Spieler[playerid][tdTaxi] = Textdraw0;
    TextDrawShowForPlayer(playerid,Spieler[playerid][tdTaxi]);
    //printf("CreateTaxiTextdraw(%s) %d Text:%d",GetName(playerid),playerid, _:Spieler[playerid][tdTaxi] );
    return 1;
}

/*stock CreateTaxiTextdraw(playerid) {
    new Text:Textdraw0;
    Textdraw0 = TextDrawCreate(320.000000, 361.000000, "~y~Taxameter~n~~n~~w~Wird geladen ..");
    TextDrawAlignment(Textdraw0, 2);
    TextDrawBackgroundColor(Textdraw0, 255);
    TextDrawFont(Textdraw0, 1);
    new
        Float:height = 0.30;
    TextDrawLetterSize(Textdraw0, height, height * 4.0625 ); // 4.0625
    TextDrawColor(Textdraw0, -1);
    TextDrawSetOutline(Textdraw0, 0);
    TextDrawSetProportional(Textdraw0, 1);
    TextDrawSetShadow(Textdraw0, 1);
    TextDrawUseBox(Textdraw0, 1);
    TextDrawBoxColor(Textdraw0, 102);
    TextDrawTextSize(Textdraw0, 426.000000, 162.000000);
    Spieler[playerid][tdTaxi] = Textdraw0;
    TextDrawShowForPlayer(playerid,Spieler[playerid][tdTaxi]);
    printf("CreateTaxiTextdraw(%s) %d Text:%d",GetName(playerid),playerid, _:Spieler[playerid][tdTaxi] );
    return 1;
}*/

forward Pulse_Taxi();
public Pulse_Taxi() {
    //printf("Pulse_Taxi %d",gettime());
    new
        vehicleid,
        Float:fHealth,
        Mitfahrer[128],
        String[256],
        preis;
    for(new driverid ; driverid < MAX_PLAYERS ; driverid++) {
        if( IsPlayerConnected(driverid)) {
            if( Spieler[driverid][pJob] == 16 ) {
                vehicleid = Spieler[driverid][pTaxiVehicle];
                if( vehicleid != INVALID_VEHICLE_ID ) {
                    //printf("Taxifahrer %s(%d) Text:%d #1",GetName(driverid),driverid, _:Spieler[driverid][tdTaxi] );
                    if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
                        //printf("Taxifahrer %s(%d) Text:%d #2",GetName(driverid),driverid, _:Spieler[driverid][tdTaxi] );
                        if( HasPlayerTaxiCustomers(driverid) ) {
                            //
                            for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
                                if( Spieler[driverid][pTaxiKunden][i] != INVALID_PLAYER_ID ) {
                                    format(Mitfahrer,sizeof(Mitfahrer),"%s~y~~h~%s~w~: ~g~$%d", Mitfahrer , GetName(Spieler[driverid][pTaxiKunden][i]), GetPlayerTaxiCosts(driverid,Spieler[driverid][pTaxiKunden][i]) );
                                }
                            }
                            //
                            preis = Spieler[driverid][pTaxiPreis];
                            format(String,sizeof(String),"~y~Taxameter (ID: %d)~n~~n~~w~\
                                %s\
                                ~n~~w~Preis:~g~$%d~w~/~y~100m",driverid,Mitfahrer,preis,Spieler[driverid][pTaxiPreis]
                            );
                            GetVehicleHealth(vehicleid,fHealth);
                            //printf("vehicleid %d",vehicleid);
                            if( g_iVehicleFixNotation{vehicleid} == 1 || fHealth <= 400.0 ) {
                                CancelTaxi(driverid,vehicleid,3);
                            }
                        }
                        else {
                            preis = Spieler[driverid][pTaxiPreis];
                            format(String,sizeof(String),"~y~Taxameter (ID: %d)~n~~n~~w~\
                                ~p~Keine Fahrgaeste\
                                ~n~~w~Preis:~g~$%d~w~/~y~100m",driverid,preis,Spieler[driverid][pTaxiPreis]
                            );
                        }
                        TextDrawSetString( Spieler[driverid][tdTaxi] , String );
                    }
                }
            }
        }
    }
    return 1;
}

forward CancelTaxi(driverid,vehicle,mode);
public CancelTaxi(driverid,vehicle,mode) {
    //printf("CancelTaxi(%s,%d,%d)",GetName(driverid),vehicle,mode);
    new
        String[128];
    if(mode == 0 ) {
        format(String,sizeof(String),"** Taxifahrt abgebrochen.Der Fahrer %s hat den Server verlassen! Es werden keine Kosten berechnet",GetName(driverid));
        SetVehicleToRespawn(vehicle);
    }
    else if(mode == 1 ) {
        format(String,sizeof(String),"** Taxifahrt abgebrochen.Der Fahrer %s hat das Fahrzeug vollkommen zerstört!",GetName(driverid));
        // SetVehicleToRespawn(vehicle);
        SendClientMessage(driverid,COLOR_ORANGE,"Taxifahrt abgebrochen. Du hast das Taxi komplett zerstört.");
    }
    else if(mode == 2 ) {
        format(String,sizeof(String),"** Taxifahrt abgebrochen.Der Fahrer %s ist geflüchtet. Es werden keine Fahrkosten berechnet",GetName(driverid));
        SetVehicleToRespawn(vehicle);
        SendClientMessage(driverid,COLOR_ORANGE,"Taxifahrt abgebrochen. Du hast das Fahrzeug verlassen.");
    }
    else if(mode == 3 ) {
        format(String,sizeof(String),"** Taxifahrt abgebrochen. Das Fahrzeug ist zu sehr beschädigt, dir werden keine Fahrkosten berechnet");
        SendClientMessage(driverid,COLOR_ORANGE,String);
    }
    Spieler[driverid][pTaxiVehicle] = INVALID_VEHICLE_ID;
    SendTaxiMessage(driverid,COLOR_ORANGE,String);
    ClearPlayerTaxiSlots(driverid,1);
    DestroyTaxiTextdraw(driverid);
    if( vehicle != INVALID_VEHICLE_ID && _:g_t3dTaxi[vehicle] != INVALID_3DTEXT_ID ) {
        Delete3DTextLabel( g_t3dTaxi[vehicle] );
        g_t3dTaxi[vehicle] = Text3D:INVALID_3DTEXT_ID;
    }
    return 1;
}

forward AFK_Check();
public AFK_Check() {
    new
        t;
    t = gettime();
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( !IsAFK[i] ) {
                if( ( Spieler[i][unixUpdate] + ( 210 * 60 ) ) < t ) {
                    //SendClientMessage(playerid, COLOR_YELLOW,"Du bist im AFK-Modus, weil du zu lange weg warst! Verlasse mit /Back den AFK-Modus!");
                    cmd_afk(i,"");
                }
            }
            else {
                if( Spieler[i][unixAFKNotice] <= t ) {
                    SendClientMessage(i,COLOR_YELLOW,"Du bist noch im AFK-Modus, daher geht dein PayDay nicht weiter! Mit /BACK gehst du aus dem AFK-Modus.");
                    Spieler[i][unixAFKNotice] = t + 5*60 ;
                }
            }
        }
    }
    return 1;
}

COMMAND:startbonus(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,3.0, NOOBSPAWN_STARTBONUS_POINT) ) {
        return SendClientMessage(playerid,COLOR_RED,"Den Startbonus gibt es hier nicht.");
    }
    if( Spieler[playerid][pStartbonus] ) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Startbonus genommen!");
    }
    ShowPlayerDialog(playerid,DIALOG_STARTBONUS,DIALOG_STYLE_LIST,"Startbonus","+3 Respektpunkte\n+15.000$\nZufallsgeschenk","Annehmen","Abbruch");
    return 1;
}

COMMAND:waffenspind(playerid,params[]) {

		return cmd_waffenspint(playerid, params);
}

COMMAND:waffenspint(playerid,params[]) {
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, LSPD_INTERIOR_WEAPONS_LOCKER_POINT) && !IsPlayerInRangeOfPoint(playerid, 5.0, FBI_INTERIOR_WEAPONS_LOCKER_POINT) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht am Waffenspint der Polizei!");
    }
    if( !IsCop(playerid)) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    ShowPlayerDialog(playerid,DIALOG_WLAGERCOP,DIALOG_STYLE_LIST,"Waffenspint","MP5 - Schuss: 150\nShotgun - Schuss: 20\nSniper - Schuss: 20\nRauchbombe - Anzahl: 10\nKamera - Anzahl: 30\nFallschirm","Annehmen","Abbruch");
    return 1;
}

stock IsBizOpened(biz) {
    new
        h,
        m,
        s;
    gettime( h , m , s );
    if( Biz[biz][bLadenAuf] < Biz[biz][bLadenZu] ) {
        return ( Biz[biz][bLadenAuf] <= h < Biz[biz][bLadenZu] );
    }
    if( Biz[biz][bLadenAuf] > Biz[biz][bLadenZu] ) {
        if( h >= Biz[biz][bLadenAuf] ) return 1;
        if( h < Biz[biz][bLadenZu] ) return 1;
    }
    return 0;
}

COMMAND:geben(playerid,params[]) {

    new
        methode,
        giveid,
        inventar[24],
        anzahl;
    if(sscanf(params,"us[24]d",giveid,inventar,anzahl)) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Geben [SPIELERNAME/ID] [INVENTAR] [ANZAHL]");
        return SendClientMessage(playerid,COLOR_ORANGE,"Inventar = Waffen, Kekse, Zigaretten, Tankkanister oder Fische");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Der Spieler konnte nicht gefunden werden.");
    }
    if( Spieler[giveid][pAdminDienst] ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst.");
    }
    if( Spieler[playerid][pLevel] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst Level 3 sein um einem anderen Spieler etwas zu geben!");
    }
    if( Spieler[giveid][pLevel] < 3 ) {
        return SendClientMessage(giveid, COLOR_RED, "Der Spieler muss mindestens Level 3 sein!");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Das ergibt keinen Sinn. Wirklich nicht.");
    }
    if( anzahl <= 0 ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Gebe eine gültige Anzahl ein.");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z)) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Der Spieler ist nicht in deiner Nähe.");
    }
    if(!strcmp(inventar,"Waffen", true) || !strcmp(inventar,"Waffe", true)) {
        inventar = "Waffen";
        methode = 1;
    }
    else if(!strcmp(inventar,"Kekse", true)) {
        methode = 2;
    }
    else if(!strcmp(inventar,"Zigaretten", true)) {
        methode = 3;
    }
    else if(!strcmp(inventar,"Tankkanister", true) || !strcmp(inventar,"Kanister", true)) {
        inventar = "einen Kanister";
        methode = 4;
    }
    else if(!strcmp(inventar,"Fische", true)) {
        methode = 5;
    }
    new
        String[128];
    if( methode == 0 ) {
        SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Geben [SPIELERNAME/ID] [INVENTAR] [ANZAHL]");
        return SendClientMessage(playerid,COLOR_ORANGE,"Inventar = Waffen, Kekse, Zigaretten, Tankkanister oder Fische");
    }
    else if( methode == 1 ) {
        //Waffen
        new
            weapon,
            muni;
        weapon = GetPlayerWeapon(playerid);
        if( weapon ) {
            if(HasWeaponBlock(giveid)) {
                SendClientMessage(playerid,COLOR_ORANGE,"Der Spieler hat noch eine Waffensperre.");
                return SendWeaponBlockInfo(giveid);
            }
            new
                armed_weapon,
                slot;
            slot = GetWeaponSlot(weapon);
            GetPlayerWeaponData( playerid,slot,weapon,muni);
            if( muni < anzahl ) {
                return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du besitzt nicht genug Munition von dieser Waffe.");
            }
            armed_weapon = GetPlayerWeapon(giveid);
            GivePlayerWeapon( giveid, weapon , anzahl );
            if( armed_weapon ) {
                SetPlayerArmedWeapon(playerid,armed_weapon);
            }
            if( GetPlayerState(giveid) == PLAYER_STATE_PASSENGER ) {
                if( weapon == 29 || weapon == 31 ) {
                    SetPlayerArmedWeapon(playerid,weapon);
                }
                else {
                    SetPlayerArmedWeapon(playerid,0);
                }
            }
            GivePlayerWeapon( playerid, weapon , -anzahl );
        }
        else {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du musst die Waffe auf der Hand tragen.");
        }
    }
    else if( methode == 2 ) {
        //Kekse
        // Spieler[playerid][pKekse]
        if( Spieler[playerid][pKekse] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast nicht genug Kekse.");
        }
        if (anzahl > 100) return SendClientMessage(playerid, COLOR_LIGHTRED2, "Du darfst maximal 100 Kekse vergeben.");
        Spieler[playerid][pKekse] -= anzahl;
        Spieler[giveid][pKekse] += anzahl;
    }
    else if( methode == 3 ) {
        //Zigaretten
        // pZigaretten
        if( Spieler[playerid][pZigaretten] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast nicht genug Zigaretten.");
        }
        Spieler[playerid][pZigaretten] -= anzahl;
        Spieler[giveid][pZigaretten] += anzahl;
    }
    else if( methode == 4 ) {
        //Tankkanister
        // pKanister
        anzahl = 1;
        if( Spieler[playerid][pFische] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast keinen Tankkanister.");
        }
        Spieler[playerid][pFische] -= anzahl;
        Spieler[giveid][pFische] += anzahl;
    }
    else if( methode == 5 ) {
        //Fische
        // pFische
        if( Spieler[playerid][pFische] < anzahl ) {
            return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast nicht genug Fische.");
        }
        Spieler[playerid][pFische] -= anzahl;
        Spieler[giveid][pFische] += anzahl;
    }
    format(String, sizeof(String), "* %s gab %s %s.", GetName(playerid), GetName(giveid), inventar);
    SendRoundMessage(x,y,z, COLOR_PURPLE, String);
    // ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
    // ApplyAnimation(giveid,"BAR","Barserve_give",4.1,0,1,1,1,1);

    format(String,sizeof(String),"Du hast %s %d %s gegeben.",GetName(giveid),anzahl,inventar);
    SendClientMessage(playerid,COLOR_GREEN,String);

    format(String,sizeof(String),"Du hast von %s %d %s erhalten!",GetName(playerid),anzahl,inventar);
    SendClientMessage(giveid,COLOR_GREEN,String);

    format(String,sizeof(String),"%s hat %s %d %s gegeben",GetName(playerid),GetName(giveid),anzahl,inventar);
    GebeLog(String);
    return 1;
}

stock GetWeaponSlot(weaponid)
{
    new slot;
    switch(weaponid)
    {
    case 0,1: slot = 0;
    case 2 .. 9: slot = 1;
    case 10 .. 15: slot = 10;
    case 16 .. 18, 39: slot = 8;
    case 22 .. 24: slot =2;
    case 25 .. 27: slot = 3;
    case 28, 29, 32: slot = 4;
    case 30, 31: slot = 5;
    case 33, 34: slot = 6;
    case 35 .. 38: slot = 7;
    case 40: slot = 12;
    case 41 .. 43: slot = 9;
    case 44 .. 46: slot = 11;
    }
    return slot;
}

CMD:sanagarage(playerid, params[]) {
	if (Spieler[playerid][pFraktion] != 4) return SendClientMessage(playerid, COLOR_RED, "Du bist kein News-Reporter.");
	if (!IsPlayerInRangeOfPoint(playerid, 20.0, SANABASE_GARAGE_FOR_RANGE_COORDS)) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe des Garagentores.");

	new Float:fX, Float:fY, Float:fZ;
	GetDynamicObjectPos(object_sanaBase_garageDoor, fX, fY, fZ);

	if (fZ == SANABASE_GARAGE_OPEN_Z)
		MoveDynamicObject(object_sanaBase_garageDoor, fX, fY, SANABASE_GARAGE_CLOSED_Z, 2.0);
	else
		MoveDynamicObject(object_sanaBase_garageDoor, fX, fY, SANABASE_GARAGE_OPEN_Z, 2.0);

	return 1;
}

COMMAND:interview(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Interview [SPIELERNAME/ID]");
    }
    if( Spieler[playerid][pFraktion] != 4 ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du bist kein News-Reporter");
    }
    if(Spieler[playerid][pRank] < 3) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Dein Rank ist zu niedrig! Du musst mind. Rank 3 sein, um ein Interview machen zu dürfen.");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Spieler konnte nicht gefunden werden");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Das macht keinen Sinn");
    }
    if( Spieler[giveid][pInterviewer] == playerid ) {
        new
            String[128];
        if( Spieler[playerid][ibInterviewStat] == 2) {
            format(String,sizeof(String),"%s hat das Interview mit %s beendet!",GetName(playerid),GetName(giveid));
        }
        else {
            format(String,sizeof(String),"%s hat das Interviewangebot an %s zurückgezogen!",GetName(playerid),GetName(giveid));
        }
        SendClientMessageToAll(COLOR_CHAT_JOB,String);
        Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
        Spieler[giveid][pInterviewer] = INVALID_PLAYER_ID;
        Spieler[playerid][ibInterviewStat] = 0;
        Spieler[giveid][ibInterviewStat] = 0;
        UnfreezePlayer(playerid);
        UnfreezePlayer(giveid);
        return 1;
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,3.0,x,y,z) ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Dein Gesprächspartner befindet sich nicht in deiner direkten Nähe");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du musst zu Fuß unterwegs sein");
    }
    if( GetPlayerState(giveid) != PLAYER_STATE_ONFOOT ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Dein Interview Partner muss zu Fuß sein");
    }
    if( Spieler[playerid][pInterviewer] != INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast bereits ein Interview(angebot) versendet");
    }
    if( Spieler[giveid][pInterviewer] != INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Der Spieler hat bereits ein Interview(angebot)");
    }
    new
        String[128];
    format(String,sizeof(String),"News-Reporter %s möchte mit dir ein Interview führen ( /Acceptinterview , /Stopinterview )",GetName(playerid));
    SendClientMessage(giveid,COLOR_GREEN,String);
    format(String,sizeof(String),"Du hast %s eine Interview Anfrage gesendet",GetName(giveid));
    SendClientMessage(playerid,COLOR_GREEN,String);
    Spieler[giveid][pInterviewer] = playerid;
    Spieler[playerid][pInterviewer] = giveid;
    return 1;
}
COMMAND:acceptinterview(playerid,params[]) {
    if( Spieler[playerid][pInterviewer] == INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast kein Interviewangebot");
    }
    if( Spieler[playerid][ibInterviewStat] != 0) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast bereits ein Interview angenommen");
    }
    new
        interviewer;
    interviewer = Spieler[playerid][pInterviewer];
    if( !IsPlayerConnected(interviewer)) {
        Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Der News-Reporter ist nicht mehr Online");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(interviewer,5.0,x,y,z)) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Der News-Reporter ist zu weit weg von dir");
    }
    new
        String[128];
    format(String,sizeof(String),"[INTERVIEW] Reporter %s interviewt nun %s",GetName(interviewer),GetName(playerid));
    SendClientMessageToAll(COLOR_CHAT_JOB,String);
    Spieler[interviewer][ibInterviewStat] = 2; // <- Ist Interviewe
    Spieler[playerid][ibInterviewStat] = 1; // <- Ist Person die interviewt wird
    FreezePlayer(playerid);
    FreezePlayer(interviewer);
    return 1;
}

COMMAND:stopinterview(playerid,params[]) {
    new
        String[128],
        interviewer;
    interviewer = Spieler[playerid][pInterviewer];
    if( Spieler[playerid][ibInterviewStat] == 1 ) {
        format(String,sizeof(String),"%s hat das Interview mit %s beendet!",GetName(playerid),GetName(interviewer));
        SendClientMessageToAll(COLOR_CHAT_JOB,String);
        Spieler[playerid][ibInterviewStat] = 0;
        Spieler[interviewer][ibInterviewStat] = 0;
        Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
        Spieler[interviewer][pInterviewer] = INVALID_PLAYER_ID;
        UnfreezePlayer(playerid);
        UnfreezePlayer(interviewer);
        return 1;
    }
    if( Spieler[playerid][pInterviewer] != INVALID_PLAYER_ID ) {
        format(String,sizeof(String),"%s hat das Interviewangebot von %s abgelehnt",GetName(playerid),GetName(interviewer));
        SendClientMessageToAll(COLOR_CHAT_JOB,String);
        Spieler[playerid][ibInterviewStat] = 0;
        Spieler[interviewer][ibInterviewStat] = 0;
        Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
        Spieler[interviewer][pInterviewer] = INVALID_PLAYER_ID;
        UnfreezePlayer(playerid);
        UnfreezePlayer(interviewer);
        return 1;
    }
    SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast kein Interview(angebot) welches du stoppen kannst");
    return 1;
}

stock SendFahrgeschaeftMessage(fahrgeschaeft,color,msg[]) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == fahrgeschaeft ) {
            SendClientMessage(i,color,msg);
        }
    }
}
stock IsPlayerExecutive(playerid) {
    if( IsPlayerConnected(playerid)) {
        return ( Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 9 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22);
    }
    return 0;
}
stock SendExecutiveMessage(color,msg[]) {
    SendFraktionMessage(1, color, msg);
    SendFraktionMessage(2, color, msg);
    SendFraktionMessage(16, color, msg);
    SendFraktionMessage(18, color, msg);
    SendFraktionMessage(22, color, msg);
    return 1;
}

enum e_EventPoint {
    bool:EP_bStatus,
    Float:EP_fX,
    Float:EP_fY,
    Float:EP_fZ,
    EP_iInterior,
    EP_iVirtualworld
}

new g_EventPoint[e_EventPoint];

COMMAND:starteventpoint(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein News-Reporter");
    }
    if(Spieler[playerid][pRank] < 3) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Dein Rank ist zu niedrig! Du musst mind. Rank 3 sein, um ein Event starten zu können.");
    }
    if( g_EventPoint[EP_bStatus] ) {
        return SendClientMessage(playerid, COLOR_RED, "Ein Eventpoint wurde bereits gesetzt");
    }
    new
        String[128],
        Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    format(String,sizeof(String),"[EVENT] Newsreporter %s startet nun ein Event! Mit /eventpoint wird dir der Standort als Marker angezeigt!",GetName(playerid));
    SendClientMessageToAll(COLOR_GREEN,String);

    g_EventPoint[EP_fX] = X;
    g_EventPoint[EP_fY] = Y;
    g_EventPoint[EP_fZ] = Z;
    g_EventPoint[EP_bStatus] = true;
    g_EventPoint[EP_iInterior] =  GetPlayerInterior(playerid);
    g_EventPoint[EP_iVirtualworld] = GetPlayerVirtualWorld(playerid);
    return 1;
}
COMMAND:stopeventpoint(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein News-Reporter");
    }
    if( !g_EventPoint[EP_bStatus] ) {
        return SendClientMessage(playerid, COLOR_RED, "Es wurde kein Eventpoint gesetzt");
    }
    new
        String[128],
        Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    format(String,sizeof(String),"[EVENT] Newsreporter %s hat das Event beendet",GetName(playerid));
    SendClientMessageToAll(COLOR_ORANGE,String);

    g_EventPoint[EP_bStatus] = false;
    return 1;
}
COMMAND:eventpoint(playerid,params[]) {
    if( !g_EventPoint[EP_bStatus] ) {
        return SendClientMessage(playerid, COLOR_RED, "Es wurde kein Eventpoint gesetzt");
    }
    SendClientMessage(playerid,COLOR_GREEN,"Dir wurde ein Marker zum Event gesetzt!");
    SetPlayerCheckpointEx(playerid,g_EventPoint[EP_fX],g_EventPoint[EP_fY],g_EventPoint[EP_fZ],5.0,CP_EVENTPOINT);
    return 1;
}

stock abs( value )
{
    return ((value < 0 ) ? (-value) : (value));
}

COMMAND:offverwarnen(playerid,params[]) {
    new
        giveid,
        spieler[MAX_PLAYER_NAME],
        punkte,reason[500];
    if(Spieler[playerid][pAdmin] >= 2)
    {
        if( sscanf(params,"s[32]ds",spieler,punkte,reason)) {
            return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Offverwarnen [Spieler] [Punkte] [Grund]");
        }
        sscanf(spieler,"u",giveid);
        if(IsPlayerConnected(giveid)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade online.");
        }
        /*
        if(!mysql_CheckName(spieler)) {
            return SendClientMessage(playerid, COLOR_RED, "Der Spieler existiert nicht");
        }
        */
        new
            String[128+32];
        if(strlen(reason)!=0)
        {
            if( punkte > 0 ) {
                if( punkte > 5 ) {
                    return SendClientMessage(playerid, COLOR_RED, "Du kannst maximale 5 Punkte vergeben!");
                }
                format(String,sizeof(String),"Du hast %d Verwarnungen gegen den Spieler %s ausgesprochen.",punkte, spieler);
                SendClientMessage(playerid,COLOR_GREEN,String);
                format(String, sizeof(String), "[OFF-A-WARN]: %s %s hat %d Verwarnungen gegen den Spieler %s ausgesprochen, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), abs(punkte), spieler, reason);
                SendAdminMessage(COLOR_RED, String);
                // Spieler[giveid][pWarns] += punkte;
            }
            else if ( punkte < 0 ) {
                if( punkte < -5 ) {
                    return SendClientMessage(playerid, COLOR_RED, "Du kannst maximale 5 Punkte abziehen!");
                }
                format(String,sizeof(String),"Du hast %d Verwarnungen bei Spieler %s gelöscht",abs(punkte), spieler);
                SendClientMessage(playerid,COLOR_GREEN,String);
                format(String, sizeof(String), "[OFF-A-WARN]: %s %s hat %d Verwarnungen von Spieler %s entfernt, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), abs(punkte), spieler, reason);
                SendAdminMessage(COLOR_RED, String);
            }
            else {
                return SendClientMessage(playerid, COLOR_RED, "Diese Aktion ist sinnlos");
            }
        }
        else
        {
            SendClientMessage(playerid,COLOR_RED,"Du musst einen Grund angeben");
        }
        mysql_real_escape_string(spieler,spieler);
        format(String,sizeof(String),"UPDATE `accounts` SET `Warns` = `Warns` + %d WHERE `Name` = '%s'",punkte,spieler);
        mysql_pquery(String,THREAD_OFFVERWARNEN,playerid,gSQL,MySQLThreadOwner);
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte!");
        return 1;
    }
    new
        query[256];
    format(query,sizeof(query),"%s %s hat %d Adminverwarnung(en) gegen den Spieler %s ausgesprochen, Grund: %s", GetPlayerAdminRang(playerid), GetName(playerid), punkte, spieler, reason);
    SendUCPAktenEintrag( playerid, GetName(playerid) , spieler , query );

    return 1;
}

COMMAND:rangeban(playerid,params[]) {
    new
        giveid;
    if(Spieler[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Rangeban [Spieler/ID]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden");
    }
    if(Spieler[giveid][pAdmin] > 0)return SendClientMessage(playerid, COLOR_RED, "Du kannst keine Supporter bzw. Admins bannen.");
    new
        String[256],
        _ip[16],
        ip[16];
    GetPlayerIp(giveid,ip,sizeof(ip));
    _ip = IP2RootIP( ip , 2);
    if( IsIPBanned(ip)) {
        format(String,sizeof(String),"Die IP %s ist bereits gebannt",_ip);
        return SendClientMessage(playerid,COLOR_BLUE,String);
    }
    AddIPBan( ip );
    format(String,sizeof(String),"Die IP %s wurde erfolgreich gebannt.",_ip);
    SendClientMessage(playerid,COLOR_LIGHTRED2,String);

    format(String,sizeof(String),"%s %s",params,("Aufgrund eines Regelverstoßes wurdest du aus dem Projekt komplett ausgeschlossen!"));

    return cmd_ban(playerid,String);
}

COMMAND:addwhitelist(playerid,params[]) {
    new
        name[MAX_PLAYER_NAME];
    if(Spieler[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if( sscanf(params,"s[24]",name)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Addwhitelist [Name]");
    }
    /*
    if(!mysql_CheckName(name)) {
        return SendClientMessage(playerid, COLOR_GREY, "Der Spieler existiert nicht");
    }
    */
    IsWhitelist(name,playerid);
    // -> THREADED
    return 1;
}
COMMAND:beamteon(playerid,params[]) {
    if( !IsBeamter(playerid)) {
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du bist kein Beamter");
    }
    new
        frak[50],
        String[128],
        bool:bBeamteOnline = false;
    String[0] = '\0';
    for(new i ; i < MAX_PLAYERS ; i++) {
        if(IsPlayerConnected(i)) {
            //if( i != playerid ) {
                if( IsBeamter(i) ) {
                    if(!bBeamteOnline) {
                        bBeamteOnline = true;
                        SendClientMessage(playerid,COLOR_YELLOW,"========BEAMTEN-LISTE========");
                    }
                    ReturnPlayerFraktion( i, frak );
                    if( String[0] ) {
                        format(String,sizeof(String),"%s,[%d] %s - %s",String,i,GetName(i), frak );
                    }
                    else {
                        format(String,sizeof(String),"[%d] %s - %s",i,GetName(i), frak );
                    }
                    if( strlen(String) > 100 ) {
                        SendClientMessage(playerid,COLOR_GREEN,String);
                        String[0] = '\0';
                    }
                }
            //}
        }
    }
    if(!bBeamteOnline) {
        SendClientMessage(playerid,COLOR_LIGHTRED2,"Es sind keine Beamten Online!");
    }
    else {
        SendClientMessage(playerid,COLOR_GREY,String);
    }
    return 1;
}

stock IsBeamter(playerid) {
    switch( Spieler[playerid][pFraktion] ) {
        case 1,2,3,5,9,16,18: return 1;
        default: return 0;
    }
    return 0;
}

stock IsCop(playerid) {
    switch( Spieler[playerid][pFraktion] ) {
        case 1,2,16,18: return 1;
        default: return 0;
    }
    return 0;
}
forward WantedLabel();
public WantedLabel() {
    new
        string[128],
        j,
        visibleto[MAX_PLAYERS] = {INVALID_PLAYER_ID,...};
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( IsPlayerExecutive(i)) {
                visibleto[j] = i;
                j++;
            }
        }
    }
    /*
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( visibleto[i] != INVALID_PLAYER_ID ) {
            printf("visibleto[%d] = %d",i,visibleto[i]);
        }
    }*/
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            if( Spieler[i][pWanteds] > 0 ) {
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabelEx] , COLOR_RED , "Gesucht");
            }
            else {
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabelEx] , 0xFFFFFF00 , " ");
            }
            for(new a ; a < MAX_PLAYERS ; a++) {
                Streamer_RemoveArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , a );
            }
            if( Spieler[i][pWanteds] ) {
                format(string,sizeof(string),"Wantedanzahl: %d", Spieler[i][pWanteds] );
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabel],COLOR_YELLOW, string );
                for(new v = 0 ; v < MAX_PLAYERS ; v++) {
                    if( visibleto[v] != INVALID_PLAYER_ID ) {
                        Streamer_AppendArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , visibleto[v] );
                    }
                }
            }
            else {
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabel], COLOR_RED," ");
            }
            // Streamer_SetArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , {3,4} );
            /*
            for( new k ; k < MAX_PLAYERS  ; k++) {
                if( Streamer_IsInArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , k ) ) {
                    printf("Streamer_IsInArrayData(Text3D:%d , PLAYER_ID , %d",_:Spieler[i][pWantedLabel],k);
                }
            }
            */
        }
    }
    return 1;
}


stock GetPlayerHureSkillValue(playerid) {
    new
        val = g_HureSkill[0][HS_iHP];
    for(new i ; i < sizeof(g_HureSkill) ; i++) {
        if( g_HureSkill[i][HS_iPoint] <= Spieler[playerid][pHurePoints] ) {
            val = g_HureSkill[i][HS_iHP];
        }
    }
    return val;
}

stock GetPlayerHureLevel(playerid) {
    new
        val = 1;
    for(new i ; i < sizeof(g_HureSkill) ; i++) {
        if( g_HureSkill[i][HS_iPoint] <= Spieler[playerid][pHurePoints] ) {
            val = g_HureSkill[i][HS_iLevel];
        }
    }
    return val;
}

enum e_DetektivSkill {
    DS_iLevel,
    DS_iSec,
    DS_iPoints
}
new const g_DetektivSkill[][e_DetektivSkill] = {
    {1,80,0},
    {2,65,50},
    {3,40,150},
    {4,25,310},
    {5,10,540}
};


stock GetPlayerDetectivSkillValue(playerid) {
    new
        val = g_HureSkill[0][HS_iHP];
    for(new i ; i < sizeof(g_DetektivSkill) ; i++) {
        if( g_DetektivSkill[i][DS_iPoints] <= Spieler[playerid][pDetektivPoints] ) {
            val = g_DetektivSkill[i][DS_iSec];
        }
    }
    return val;
}
stock GetPlayerDetectivLevel(playerid) {
    new
        val = 1;
    for(new i ; i < sizeof(g_DetektivSkill) ; i++) {
        if( g_DetektivSkill[i][DS_iPoints] <= Spieler[playerid][pDetektivPoints] ) {
            val = g_DetektivSkill[i][DS_iLevel];
        }
    }
    return val;
}

COMMAND:skill(playerid, params[]) {
    new giveid = playerid;
    if (!isnull(params) && sscanf(params, "u", giveid)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Skill [Spieler/ID]");
    if (!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_LIGHTRED2, "Der Spieler konnte nicht gefunden werden.");

    if (giveid != playerid) {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        if (!IsPlayerInRangeOfPoint(giveid, 5.0, x, y, z)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    }

    new String[128];
    SendClientMessage(giveid, COLOR_GREEN, "============= {FFFFFF}[ SKILLS ] {009D00}=============");
    if (giveid != playerid) {
        format(String, sizeof(String), "Spieler: %s (%d)", GetName(playerid), playerid);
        SendClientMessage(giveid, COLOR_WHITE, String);
    }

    format(String, sizeof(String), "Detektiv-Skill: {FFFFFF}%d/%d (%d Sekunden)", GetPlayerDetectivLevel(playerid), sizeof(g_DetektivSkill), GetPlayerDetectivSkillValue(playerid));
    SendClientMessage(giveid, COLOR_YELLOW, String);
    format(String, sizeof(String), "Huren-Skill: {FFFFFF}%d/%d (%d HP)", GetPlayerHureLevel(playerid), sizeof(g_HureSkill), GetPlayerHureSkillValue(playerid));
    SendClientMessage(giveid, COLOR_YELLOW, String);
    format(String, sizeof(String), "Anwalt-Skill: {FFFFFF}%d/%d (Bis %d Knastzeit)", GetPlayerLawyerLevel(playerid), sizeof(g_LawyerSkills), GetPlayerLawyerSkillValue(playerid));
    SendClientMessage(giveid, COLOR_YELLOW, String);
    format(String, sizeof(String), "Gangfight-Skill: {FFFFFF}%d/%d (Kills: %d)", GetPlayerGangFightSkillLevel(playerid), sizeof(g_GangFightSkills), Spieler[playerid][pKillsGangFight]);
    SendClientMessage(giveid, COLOR_YELLOW, String);
    format(String, sizeof(String), "Drogen-Skill: {FFFFFF}%d/%d (Bis zu %d Päckchen)", GetPlayerDrogenSkillLevel(playerid), sizeof(g_DrogenSkills), GetPlayerDrogenSkillValue(playerid));
    SendClientMessage(giveid, COLOR_YELLOW, String);
    format(String, sizeof(String), "Waffenteile-Skill: {FFFFFF}%d/%d (Bis zu %d Päckchen)", GetPlayerWaffenteileSkillLevel(playerid), sizeof(g_WaffenteileSkills), GetPlayerWaffenteileSkillValue(playerid));
    SendClientMessage(giveid, COLOR_YELLOW, String);
    return 1;
}

COMMAND:wrz(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 17 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman");
    }
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Wrz [Spieler/ID]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_ORANGE,"Der Spieler wurde nicht gefunden");
    }

    new
        Float:x,
        Float:y,
        Float:z,
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug");
    }
    /*if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst der Fahrer dieses Fahrzeuges sein");
    }*/
    modelid = GetVehicleModel(vehicleid);
    if( GetVehicleSeats(modelid) <= 1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeuge besitzt keinen Beifahrer Sitz");
    }
    GetPlayerPos(playerid,x,y,z);
    new
        vehicleid_ex;
    vehicleid_ex = GetPlayerVehicleID(giveid);
    if( !IsPlayerInRangeOfPoint(giveid,19.0,x,y,z) ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht in deiner nähe");
    }
    if( !Spieler[giveid][bKidnapped] && Cuffed[giveid] == 0 ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wird gerade nicht entführt");
    }
    if( Spieler[playerid][iWheelmanID] != INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_RED,"Du versuchst gerade bereits einen Spieler zu befreien");
    }
    if( !vehicleid_ex) {
        return SendClientMessage(playerid,COLOR_RED,"Die Person sitzt in keine Fahrzeug");
    }
    if( GetPlayerState(giveid) != PLAYER_STATE_PASSENGER ) {
        return SendClientMessage(playerid,COLOR_RED,"Die Person ist bereits kein Beifahrer");
    }
    if( vehicleid == vehicleid_ex ) {
        return SendClientMessage(playerid,COLOR_RED,"Die Person ist bereits in deinem Fahrzeug");
    }
    if( GetFreeVehicleSeat(vehicleid) == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Dein Fahrzeug hat keinen Platz für die Person");
    }
    new
        entfuehrer,
        String[128];
    Spieler[playerid][tWheelman] = SetTimerEx("Pulse_Wheelman",1327,true,"ddd",playerid,giveid,gettime() + 11 );

    entfuehrer = VehicleDriverID( vehicleid_ex );
    //printf("entfuehrer %d GetPlayerEntfuehrer(%d)",entfuehrer,giveid);
    format(String,sizeof(String),"Du versuchst %s zu befreien! Bleibe 10 Sekunden am Fahrzeuge dran",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,String);

    format(String,sizeof(String),"Wheelman %s versucht dich von %s zu befreien",GetName(playerid),GetName(entfuehrer) );
    SendClientMessage(giveid,COLOR_YELLOW,String);

    format(String,sizeof(String),"Wheelman %s versucht %s aus dem Fahrzeug befreien",GetName(playerid),GetName(giveid));
    SendClientMessage(entfuehrer,COLOR_YELLOW,String);

    Spieler[playerid][iWheelmanID] = giveid;
    return 1;
}

forward Pulse_Wheelman(playerid,geisel,unix_fertig);
public Pulse_Wheelman(playerid,geisel,unix_fertig) {
    new
        String[128];
    if( Spieler[playerid][pFraktion] != 17 ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);
        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );
        SendClientMessage(playerid, COLOR_LIGHTRED2, "Du bist kein Wheelman mehr! Vorgang Gescheitert !");
        return 1;
    }
    new
        entfuehrer,
        Float:x,
        Float:y,
        Float:z,
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug mehr. Vorgang Gescheitert !");
        return 1;
    }
    GetVehiclePos(vehicleid,x,y,z);
    if( !IsPlayerInRangeOfPoint(geisel,18.0,x,y,z) ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);
        format(String,sizeof(String),"Die Geisel %s ist zu weit entfernt von dir. Vorgang Gescheitert !",GetName(geisel));
        SendClientMessage(playerid, COLOR_LIGHTRED2, String );

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );
        return 1;
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Du musst der Fahrer dieses Fahrzeuges sein. Vorgang Gescheitert !");
        return 1;
    }
    modelid = GetVehicleModel(vehicleid);
    if( GetVehicleSeats(modelid) <= 1 ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeuge besitzt keinen Beifahrer Sitz. Vorgang Gescheitert !");
        return 1;
    }
    new
        vehicleid_ex;
    vehicleid_ex = GetPlayerVehicleID(geisel);
    if( vehicleid == vehicleid_ex ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Die Geisel ist bereits in deinem Fahrzeug");
        return 1;
    }
    if( !vehicleid_ex) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Die Person ist nicht mehr in einem Fahrzeug");
        return 1;
    }
    if( GetPlayerState(geisel) != PLAYER_STATE_PASSENGER ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Die Person ist kein Beifahrer in dem Fahrzeug");
        return 1;
    }
    if( GetFreeVehicleSeat(vehicleid) == -1 ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Dein Fahrzeug ist voll. Vorgang Gescheitert !");
        return 1;
    }
    if( gettime() >= unix_fertig ) {
        // Zeit Um...Spieler befreit
        new
            seat;
        UnfreezePlayer(geisel);
        seat = GetFreeVehicleSeat(vehicleid);
        entfuehrer = VehicleDriverID( vehicleid_ex );
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Wheelman %s hat deine Gefangenen %s befreit!",GetName(playerid),GetName(geisel));
        SendClientMessage(entfuehrer,COLOR_LIGHTRED2,String);

        format(String,sizeof(String),"Der Wheelman %s hat dich vor %s befreit!",GetName(playerid),GetName(entfuehrer));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String);

        format(String,sizeof(String),"Du hast die Person %s vor %s befreit. Befreie sie mit /wmbefreien",GetName(geisel),GetName(entfuehrer));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        // RemovePlayerFromVehicle(geisel);
        // SetPlayerPos(geisel,x,y,z + 0.35);
        SetPlayerPos( geisel,x,y,z + 1.7 );
        SetTimerEx("PutPlayerInVehicleEx",131,false,"ddd",geisel,vehicleid,seat);

        Spieler[geisel][bKidnapped] = false;
        Spieler[entfuehrer][iKidnapID] = INVALID_PLAYER_ID;
        Cuffed[geisel] = 0;
    }
    return 1;
}
forward RemovePlayerFromVehicleEx(playerid);
public RemovePlayerFromVehicleEx(playerid) {
    RemovePlayerFromVehicle(playerid);
    return;
}
forward PutPlayerInVehicleEx(playerid,vehicleid,seat );
public PutPlayerInVehicleEx(playerid,vehicleid,seat ) {
    // printf("PutPlayerInVehicleEx(%d,%d,%d)",playerid,vehicleid,seat );
    PutPlayerInVehicle( playerid , vehicleid , seat );
    SetCameraBehindPlayer(playerid);
    FreezePlayer(playerid);
    return;
}

COMMAND:wmbefreien(playerid,params[]) {
    new giveid;
    if (sscanf(params, "u", giveid)) return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Wmbefreien [Spieler/ID]");
    if (Spieler[playerid][pFraktion] != 17) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Wheelman.");
    if (!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler wurde nicht gefunden.");

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    if (!IsPlayerInRangeOfPoint(giveid, 5.0, x, y, z)) return SendClientMessage(playerid, COLOR_RED, "Du bist zu weit vom Spieler entfernt");
    if (Spieler[giveid][bAugenbinde]) return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler hat noch eine Augenbinde! Entferne sie erst mit /Augenbinde");
    if (Spieler[giveid][bMundbinde]) return SendClientMessage(playerid, COLOR_ORANGE, "Der Spieler hat noch eine Mundbinde! Entferne sie erst mit /Mundbinde");

    if (Cuffed[giveid]) {
        new String[128];
        format(String, sizeof(String), "Du hast den Spieler %s erfolgreich befreit.", GetName(giveid));
        SendClientMessage(playerid, COLOR_YELLOW, String);
        format(String, sizeof(String), "Wheelman %s hat dich entgültig befreit. Du kannst dich nun wieder bewegen.", GetName(playerid));
        SendClientMessage(giveid, COLOR_YELLOW, String);
        UnfreezePlayer(giveid);
        SetPlayerSpecialAction(giveid, SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(giveid, ATTACHED_INDEX_HANDSCHELLE);
        Cuffed[giveid] = 0;
    } else
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keine Handschellen an.");

    return 1;
}

stock GetVehicleSeats(modelid) {
    new z;
    switch(modelid)
    {
        case 400:z=4; case 401:z=2; case 402:z=2; case 403:z=2; case 404:z=4; case 405:z=4;
        case 406:z=2; case 407:z=2; case 408:z=2; case 409:z=4; case 410:z=2; case 411:z=2;
        case 412:z=2; case 413:z=4; case 414:z=2; case 415:z=2; case 416:z=2; case 417:z=2;
        case 418:z=4; case 419:z=2; case 420:z=4; case 421:z=4; case 422:z=2; case 423:z=2;
        case 424:z=2; case 425:z=1; case 426:z=4; case 427:z=4; case 428:z=4; case 429:z=2;
        case 430:z=1; case 431:z=8; case 432:z=1; case 433:z=2; case 434:z=2; case 435:z=0;
        case 436:z=2; case 437:z=8; case 438:z=4; case 439:z=2; case 440:z=2; case 441:z=1;
        case 442:z=4; case 443:z=2; case 444:z=2; case 445:z=4; case 446:z=1; case 447:z=2;
        case 448:z=1; case 449:z=2; case 450:z=0; case 451:z=2; case 452:z=1; case 453:z=1;
        case 454:z=1; case 455:z=2; case 456:z=2; case 457:z=2; case 458:z=4; case 459:z=4;
        case 460:z=2; case 461:z=2; case 462:z=2; case 463:z=2; case 464:z=1; case 465:z=1;
        case 466:z=4; case 467:z=2; case 468:z=2; case 469:z=2; case 470:z=4; case 471:z=2;
        case 472:z=1; case 473:z=1; case 474:z=2; case 475:z=2; case 476:z=1; case 477:z=2;
        case 478:z=2; case 479:z=4; case 480:z=2; case 481:z=1; case 482:z=2; case 483:z=4;
        case 484:z=1; case 485:z=1; case 486:z=1; case 487:z=4; case 488:z=2; case 489:z=2;
        case 490:z=4; case 491:z=2; case 492:z=4; case 493:z=1; case 494:z=2; case 495:z=2;
        case 496:z=2; case 497:z=4; case 498:z=2; case 499:z=2; case 500:z=2; case 501:z=1;
        case 502:z=2; case 503:z=2; case 504:z=4; case 505:z=2; case 506:z=2; case 507:z=4;
        case 508:z=2; case 509:z=1; case 510:z=1; case 511:z=2; case 512:z=1; case 513:z=1;
        case 514:z=2; case 515:z=2; case 516:z=2; case 517:z=2; case 518:z=2; case 519:z=1;
        case 520:z=1; case 521:z=2; case 522:z=2; case 523:z=2; case 524:z=2; case 525:z=2;
        case 526:z=2; case 527:z=2; case 528:z=2; case 529:z=4; case 530:z=1; case 531:z=1;
        case 532:z=1; case 533:z=2; case 534:z=2; case 535:z=2; case 536:z=2; case 537:z=2;
        case 538:z=2; case 539:z=1; case 540:z=2; case 541:z=2; case 542:z=2; case 543:z=2;
        case 544:z=2; case 545:z=2; case 546:z=4; case 547:z=4; case 548:z=2; case 549:z=2;
        case 550:z=4; case 551:z=4; case 552:z=2; case 553:z=1; case 554:z=2; case 555:z=2;
        case 556:z=2; case 557:z=2; case 558:z=2; case 559:z=2; case 560:z=4; case 561:z=4;
        case 562:z=2; case 563:z=2; case 564:z=1; case 565:z=2; case 566:z=2; case 567:z=2;
        case 568:z=1; case 569:z=0; case 570:z=2; case 571:z=1; case 572:z=1; case 573:z=2;
        case 574:z=2; case 575:z=2; case 576:z=2; case 577:z=1; case 578:z=2; case 579:z=4;
        case 580:z=4; case 581:z=2; case 582:z=4; case 583:z=1; case 584:z=0; case 585:z=4;
        case 586:z=2; case 587:z=2; case 588:z=2; case 589:z=2; case 590:z=0; case 591:z=0;
        case 592:z=1; case 593:z=2; case 594:z=1; case 595:z=1; case 596:z=4; case 597:z=4;
        case 598:z=4; case 599:z=2; case 600:z=2; case 601:z=2; case 602:z=2; case 603:z=2;
        case 604:z=2; case 605:z=2; case 606:z=0; case 607:z=0; case 608:z=0; case 609:z=2;
        case 610:z=0; case 611:z=0;
    }
    return z;
}

stock GetPlayerEntfuehrer(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][iKidnapID] == playerid ) return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock GetFreeVehicleSeat(vehicleid)
{
    new bool:Seat[8] = {false,...};
    for(new i = 0; i < MAX_PLAYERS ; i++ )
    {
        if(IsPlayerInVehicle(i,vehicleid))
        {
            Seat[ GetPlayerVehicleSeat(i) ] = true;
        }
    }
    new seats = GetVehicleSeats( GetVehicleModel(vehicleid) );
    for(new i = 0 ; i < seats ; i++) {
        if( Seat[i] == false ) return i;
    }
    return -1;
}

/*
forward FlyHack();
public FlyHack() {
    new
        now = gettime(),
        String[128],
        speed,
        Float:vx,
        Float:vy,
        Float:vz;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(!IsPlayerNPC(i)) {
                if( !IsPlayerInAnyVehicle(i) && ( Spieler[i][punixFlyhack] < now ) && (( Spieler[i][unixUpdate] + 5 ) > now ) ) {
                    GetPlayerVelocity(i,vx,vy,vz);
                    speed = floatround( floatpower( vx * vx + vy * vy + vz * vz , 0.5 )  * 100.0 * 2.0);
                    if( speed >= 130 ) {
                        format(String,sizeof(String),"[ACHTUNG] Spieler %s FlyHack Warnung: %dKm/h",GetName(i),speed);
                        SendAdminMessage(COLOR_LIGHTRED2,String);
                        Spieler[i][punixFlyhack] = now + 8;
                    }
                    // printf("FlyHack Speed für %s %dkm/h ( speed2 %d )",GetName(i),speed,speed2);
                }
            }
        }
    }
    return 1;
}
*/



    new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
    };

iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    for(new I ; I < sizeof(wheelmodels) ; I++ ) {

        if (modelid == wheelmodels[I])
            return true;

    }

    return false;
}

IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    for(new I ; I < sizeof(illegalvehs) ; I++ ) {
        if (carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

stock islegalcarmod(vehicleide, componentid) {

    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
            modok = true;

    } else {

        // check if the specified model CAN use this particular mod.
        for(new I ; I < sizeof(legalmods) ; I++ ) {
            if (legalmods[I][0] == vehicleide) { // first is car IDE

                for(new J = 1; J < 22; J++) { // start with 1
                    if (legalmods[I][J] == componentid)
                        modok = true;
                }

            }

        }

    }

    return modok;
}

Hack_OnVehicleMod(playerid, vehicleid, componentid) {

    new vehicleide = GetVehicleModel(vehicleid);
    new modok = islegalcarmod(vehicleide, componentid);
    if (!modok) {
        if (Spieler[playerid][pAdmin] > 4) return Kick(playerid);

        new querystring[256], String[128];
        format(String,sizeof(String),"Tuning-Hack Ban. Spieler: %s",GetName(playerid));
        SendAdminMessage(COLOR_WHITE, String);

        format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(playerid),("Server-System"),("Tuning Hack per Script gefunden") );
        mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);
        Spieler[playerid][pBanned] = 1;
        Kick(playerid);
        return 1;
    }
    return 0;
}
/*COMMAND:ngb(playerid,params[]) {
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    new
        spike,
        vehicleid,
        Float:a,
        Float:x,
        Float:y,
        Float:z;
    vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid) {
        GetVehiclePos(vehicleid,x,y,z);
        GetVehicleZAngle(vehicleid,a);
    }
    else {
        GetPlayerPos(playerid,x,y,z);
        GetPlayerFacingAngle(playerid,a);
    }
    spike = GetClosestSpike( x ,y , z );
    if( spike != INVALID_SPIKE ) {
        DestroySpike( spike );
        SendClientMessage(playerid,COLOR_YELLOW,"Spikes gelöscht");
    }
    else {
        spike = CreateSpike(x,y,z,a, GetPlayerVirtualWorld(playerid) , GetPlayerInterior(playerid) );
        if( spike != INVALID_SPIKE ) {
            SendClientMessage(playerid,COLOR_YELLOW,"Spikes erstellt");
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Spike-Speicher voll");
        }
    }
    return 1;
}*/

#define UNUSED_WEAKS 54


stock CollectUnusedAccount() {
    mysql_oquery("SELECT `Name` FROM `accounts` WHERE ( UNIX_TIMESTAMP(`LastSeen`) + ( "#UNUSED_WEAKS"*7*24*60*60) )  < UNIX_TIMESTAMP( NOW() )",THREAD_COLLECTUNUSEDACCOUNT,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

stock RemoveAccountLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Unused/accounts.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

COMMAND:sichercode(playerid,params[]) {
    new
        giveid;
    if(Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sichercode [ID/Name]");
    }
    if( Spieler[giveid][pSecureCodeLevel] != -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wird bereits nach seinem Sicherheitscode abgefragt");
    }
    new
        String[128];
    format(String,sizeof(String),"[KONTROLLE] %s %s prüft den SicherheitsCode von Spieler %s", GetPlayerAdminRang(playerid), GetName(playerid),GetName(giveid));
    SendAdminMessage(COLOR_YELLOW, String);

    format(String,sizeof(String),"[KONTROLLE] %s %s möchte, dass du deinen SicherheitsCode zu identifizierung eingibst! Du hast 3 Versuche!", GetPlayerAdminRang(playerid), GetName(playerid), GetName(giveid));
    SendClientMessage(giveid,COLOR_RED, String);
    Spieler[giveid][pSecureCodeLevel] = 0;
    format(String,sizeof(String),"Ein %s möchte dich identifizieren.\n\nGib deinen SicherheitsCode ein ( %d/3 ):", GetPlayerAdminRang(playerid), Spieler[giveid][pSecureCodeLevel] + 1);
    ShowPlayerDialog(giveid, DIALOG_CHECK_SECURECODE , DIALOG_STYLE_INPUT , COLOR_HEX_LIGHTBLUE"Sicherheitscode:", String , "Absenden" , "");
    return 1;
}

COMMAND:staatmelden(playerid,params[]) {
    new
        giveid,
        staat[30];
    if(Spieler[playerid][pFraktion] != 9 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Regierungsbeamter!");
    }
    if(sscanf(params,"us[30]",giveid,staat)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Staatmelden [ID/Name] [Staat]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden");
    }
    new
        String[128];
    Spieler[giveid][pStaat] = '\0';
    format(Spieler[giveid][pStaat],30,"%s",staat);
    format(String,sizeof(String),"Staatsbeamter %s hat dir folgende Staatsangehörigkeit zugeordnet: %s",GetName(playerid),staat);
    SendClientMessage(giveid,COLOR_YELLOW,String);
    return 1;
}

COMMAND:pass(playerid,params[]) {
    new giveid, search[16];
    format(search, sizeof(search), "U(%d)", playerid);
    if (sscanf(params, search, giveid)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:" COLOR_HEX_GREENA " /Pass ([ID/Name])");
    if (!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler wurde nicht gefunden.");

    new job[50], message[128], Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (!IsPlayerInRangeOfPoint(giveid, 5.0, x, y, z)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");

    new playerName[MAX_PLAYER_NAME];
    playerName = GetName(playerid);
    if (giveid != playerid) {
        format(message, sizeof(message), "* %s zeigt dir seinen Personalausweis.", playerName);
        SendClientMessage(giveid, COLOR_PURPLE, message);
        format(message, sizeof(message), "Du hast %s deinen Personalausweis gezeigt.", GetName(giveid));
        SendClientMessage(playerid, COLOR_PURPLE, message);
    }
    SendClientMessage(giveid, COLOR_BLUE, "======PERSONALAUSWEIS======");
    format(message, sizeof(message), "Besitzer: %s", playerName);
    SendClientMessage(giveid, COLOR_YELLOW, message);
    ReturnPlayerJob(playerid, job);
    format(message, sizeof(message), "Beruf: %s", job);
    SendClientMessage(giveid, COLOR_YELLOW, message);
    format(message, sizeof(message), "Staatsbürger: %s", GetPlayerStaat(playerid));
    SendClientMessage(giveid, COLOR_YELLOW, message);
    SendClientMessage(giveid, COLOR_BLUE, "============================");
    return 1;
}

GetPlayerStaat(playerid) {
    new staat[30];
    if (isnull(Spieler[playerid][pStaat]))
        staat = "Zigeuner";
    else
        strcat(staat, Spieler[playerid][pStaat], sizeof(staat));

    return staat;
}

COMMAND:vertrag(playerid,params[]) {
    new
        giveid,
        text[128];
    if(sscanf(params,"us[128]",giveid,text)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Vertrag [ID/Name] [Text]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden");
    }
    if( Spieler[playerid][pVertragID] != INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast bereits eine Vertrag Anfrage verschickt");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,6.0,x,y,z) ) {
        return SendClientMessage(playerid,COLOR_RED,"Dein Vertragspartner ist zu weit entfernt von dir");
    }
    if( GetPlayerVertragsPartner(giveid) != INVALID_PLAYER_ID )  {
        return SendClientMessage(playerid,COLOR_RED,"Dein Vertragspartner ist bereits in einer Vertragsverhandlung");
    }
    new
        String[160];
    format(String,sizeof(String),"Spieler %s bietet dir ein Vertrag an.",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Bedingung: %s",text);
    SendClientMessage(giveid,COLOR_ORANGE,String);
    SendClientMessage(giveid,COLOR_RED,"Nehmen diesen Vertrag mit '/Accept Vertrag' an! => ACHTUNG! Dieser Vertag ist dann offiziell rechtsfähig und muss eingehalten werden!");

    format(String,sizeof(String),"Du hast Spieler %s ein Vertrag angeboten.",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Bedingung: %s",text);
    SendClientMessage(playerid,COLOR_ORANGE,String);

    Spieler[playerid][pVertragID] = giveid;
    format(Spieler[playerid][pVertragText],128,"%s",text);
    return 1;
}

GetPlayerVertragsPartner(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pVertragID] == playerid ) return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock VertragLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Vertrag/Vertrag.log");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock OamtLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Oamt/Oamt.log");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock KaufLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/KaufLog/KaufLog.log");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}


/*stock IsBlacklisted( name[] ) {
    new
        rows,
        query[128];
    format(query,sizeof(query),"SELECT * FROM `blacklist` WHERE `Name` = '%s'",name);
    mysql_oquery(query,THREAD_ISBLACKLISTED,INVALID_PLAYER_ID,gSQL);
    mysql_store_result();
    rows = mysql_num_rows();
    mysql_free_result();
    return rows;
}*/

stock AddBlacklistName( name[MAX_PLAYER_NAME] ) {
    new
        query[128];
    mysql_real_escape_string(name,name,gSQL,MAX_PLAYER_NAME);
    format(query,sizeof(query),"INSERT INTO `blacklist` VALUES (NULL, '%s')",name);
    mysql_oquery(query,THREAD_ADDBLACKLISTNAME,INVALID_PLAYER_ID,gSQL);
    return 1;
}

COMMAND:nameblacklist(playerid,params[]) {
    new
        name[MAX_PLAYER_NAME];
    if(Spieler[playerid][pAdmin] < 2 )return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params,"s[24]",name)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Nameblacklist [Name]");
    }
    /*
    if( IsBlacklisted(name)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Name ist bereits auf der Blacklist");
    }
    */
    new
        String[128];
    format(String,sizeof(String),"[BLACKLIST] Der Name %s wurde auf die Blacklist gesetzt!",name);
    SendAdminMessage(COLOR_YELLOW, String);
    AddBlacklistName(name);
    return 1;
}
COMMAND:suche(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Suche [ID/Name]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden");
    }
    new
        String[128];
    format(String,sizeof(String),"Spielername: %s, ID: %d",GetName(giveid),giveid);
    SendClientMessage(playerid,COLOR_BLUE,String);
    return 1;
}
COMMAND:w(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid)) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
    }
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /W [ID/Name]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden");
    }
    if( 1 <= Spieler[giveid][pJailed] <= 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst keinem inhaftierten Wanteds geben!");
    }
    if(Spieler[giveid][pFraktion] == 1 || Spieler[giveid][pFraktion] == 2 || Spieler[giveid][pFraktion] == 16 || Spieler[giveid][pFraktion] == 18 || Spieler[giveid][pFraktion] == 22 )return SendClientMessage(playerid, COLOR_RED, "Du kannst Polizeibeamten keine Wanteds geben!");
    SelectedPlayer[playerid] = giveid;
    new string1[256];
    new string2[256];
    new string3[256];
    new string4[256];
    new string5[1024];
    format(string1, sizeof(string1), "Beschuss auf Beamte\nBeschuss auf Zivilisten\nAngriff auf Beamte\nAngriff auf Zivilisten\nWiderstand gegen Beamte\nErweit.Widerstand gegen Beamte\nBeihilfe zur Flucht\n");
    format(string2, sizeof(string2), "Behinderung der Justiz\nStVO Verstoß\nÜberfall/Raub\nEntführung\nEinsperren ins GJ\nSachbeschädigung\nBeleidigung/Bedrohung\nVerkehrsunfallflucht\n");
    format(string3, sizeof(string3), "Illeg. Eindringen ins Polizeisystem\nIlleg. Waffen/Drogen/Waffenteile/Codes\nFahrzeugdiebstahl\nDiebstahl eines Dienstfahrzeuges\nSach-Diebstahl\nBeamten-/Zivilisten Mord\n");
    format(string4, sizeof(string5), "Illeg. Straßenrennen\nNotruf-Missbrauch\nEinbruch in fremde Grundstücke\nAnschlag\nBestechungsversuch\nIlleg. züchten von Spicepflanzen\nBrandstiftung\nGefangenenbefreiung\nGefängnisausbruch");
    format(string5, sizeof(string5), "%s%s%s%s", string1, string2, string3, string4);
    ShowPlayerDialog(playerid, DIALOG_TABMENU_VK, DIALOG_STYLE_LIST, "Verbrecherkatalog", string5, "Auswählen", "Abbrechen");
    return 1;
}

COMMAND:leader(playerid,params[]) {
    mysql_pquery("SELECT `Name`,`Fraktion` FROM `accounts` WHERE `Rank` >= 6 AND `Fraktion` <> 0 ORDER BY `Fraktion`",THREAD_LEADER,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

forward KickEx(playerid);
public KickEx(playerid) {
    return Kick(playerid);
}
stock KickDelay(playerid,time = 71) {
    SetTimerEx("KickEx",time,false,"d",playerid);
}

forward _BanEx(playerid);
public _BanEx(playerid) {
    return Ban(playerid);
}
stock BanDelay(playerid,time = 71) {
    SetTimerEx("_BanEx",time,false,"d",playerid);
}

LoadTankKraftstoff(playerid,tanke) {
    new message[145];
    for (new i; i < sizeof(g_asKraftstoff); i++) format(message, sizeof(message), "%s%s $%d\n", message, g_asKraftstoff[i], Tanke[tanke][taiFillCost][i]);
    ShowPlayerDialog(playerid, DIALOG_TANKE, DIALOG_STYLE_LIST, "Kraftstoff Auswahl", message, "Auftanken", "Abbruch");
    return 1;
}

forward CoolDownKekse(playerid,value);
public CoolDownKekse(playerid,value) {
    Spieler[playerid][pKekseValue] -= value;
    return 1;
}
stock PreloadAnimLib(playerid, animlib[]) {
    ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
    return 1;
}

COMMAND:fahrpruefung(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,5.0,1234.3380,-1823.9462,13.5909)) {
        return SendClientMessage(playerid,COLOR_RED,"Nicht an der Fahrschule");
    }
    new counter,i;
    for(;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pFraktion]==8)
            {
                counter++;
            }
        }
    }
    if(counter<3)
    {
        ShowPlayerDialog(playerid,DIALOG_FAHRSCHULE_SOLO,DIALOG_STYLE_LIST,"Fahrschule","Autoschein - $10.000\nMotorradschein - $15.000\n","Starten","Abbruch");
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Es sind genügend Fahrlehrer online, weshalb keine automatische Fahrprüfung möglich ist.");
    }
    return 1;
}


forward Pulse_Fahrschule(playerid);
public Pulse_Fahrschule(playerid) {
    new
        //Float:speed,
        //SpeedT,
        vehicleid,
        SpeedF,
        now;
    now = gettime();
    vehicleid = GetPlayerVehicleID(playerid);
    if( vehicleid != pFahrschulCar[playerid] ) {
        if( Spieler[playerid][unixFahrschuleFahrzeug] <= now ) {
            //GameTextForPlayer(playerid,"~r~Abbruch. Fahrzeug verlassen",2500,3);
            FahrschuleAbbruch(playerid);
            SetPlayerPos(playerid,1234.3380,-1823.9462,13.5909);
            SetPlayerFacingAngle(playerid,270.8931);
            return 1;
        }
    }
    if( Spieler[playerid][unixFahrschuleZeit] < now ) {
        if( ( Spieler[playerid][unixFahrschuleZeit] + 7 ) < now ) {
            // 5 Sekunden um
            GameTextForPlayer(playerid,"~r~Abbruch. Du bist zu langsam!",2500,3);
            FahrschuleAbbruch(playerid);
            SetPlayerPos(playerid,1234.3380,-1823.9462,13.5909);
            SetPlayerFacingAngle(playerid,270.8931);
            return 1;
        }
        else {
            GameTextForPlayer(playerid,"~r~~h~Du bist zu langsam!!",1250,3);
        }
    }
    SpeedF = GetPlayerVehicleSpeed(playerid);
    //SpeedT = floatround(speed)/2;
    //SpeedF = (SpeedT*1000)/700;
    if( SpeedF > 90 ) {
        Spieler[playerid][pFahrschuleSpeedWarnung]++;
        if( Spieler[playerid][pFahrschuleSpeedWarnung] >= 4 ) {
            GameTextForPlayer(playerid,"~r~Abbruch. Du bist zu schnell gefahren!",2500,3);
            FahrschuleAbbruch(playerid);
            SetPlayerPos(playerid,1234.3380,-1823.9462,13.5909);
            SetPlayerFacingAngle(playerid,270.8931);
            return 1;
        }
        else {
            GameTextForPlayer(playerid,"~r~~h~Du bist zu schnell unterwegs!",1200,3);
        }
    }
    else {
        Spieler[playerid][pFahrschuleSpeedWarnung] = 0;
    }
    return 1;
}

stock FahrschuleAbbruch(playerid) {
    DisablePlayerCheckpoint(playerid);
    RemovePlayerFromVehicle(playerid);
    DestroyVehicle( pFahrschulCar[playerid] );
    if( pFahrschulCar[playerid] != INVALID_VEHICLE_ID ) {
        aiVehicles[ pFahrschulCar[playerid] ] = VEH_INVALID;
    }
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    KillTimer( Spieler[playerid][tFahrschule] );
    pCheckpoint[playerid] = CP_NONE;
    return 1;
}

COMMAND:gebecheck(playerid,params[]) {
    new
        giveid,
        betrag;
    if(sscanf(params,"ud",giveid,betrag)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gebecheck [ID/Name] [Betrag]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden");
    }
    if( !( 3000 <= betrag <= 1000000 ) ) {
        return SendClientMessage(playerid,COLOR_ORANGE,"Betrag darf maximal von 3.000$ bis 1.000.000$ liegen");
    }
    if( GetPlayerMoney(playerid) < betrag ) {
        return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht diesen Geldbetrag");
    }
    if( Spieler[playerid][pLevel] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Dein Level ist noch zu niedrig für diese Funktion.");
    }
    if( Spieler[giveid][pLevel] < 3 ) {
        return SendClientMessage(giveid, COLOR_RED, "Der Spieler muss mindestens Level 3 sein!");
    }
    if( Spieler[playerid][pGeldcheckID] != INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast noch einen aktiven Geldcheck im Umlauf");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst dir selber keinen Check ausstellen");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z) ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt von dir");
    }
    new
        String[128];
    format(String,sizeof(String),"Du hast %s einen Geldcheck ausgestellt. Betrag: $%s",GetName(giveid), AddDelimiters(betrag));
    SendClientMessage(playerid,COLOR_YELLOW,String);

    format(String,sizeof(String),"Dir wurde von %s ein Geldcheck in Höhe von $%s ausgestellt! Gehe zur Zentralbank und löse den Geldcheck ein.",GetName(playerid), AddDelimiters(betrag));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"ACHTUNG! Solltest du sterben oder dich ausloggen, geht dein Geldcheck unwiderruflich verloren!");
    SendClientMessage(giveid,COLOR_RED,String);
    Spieler[playerid][pGeldcheckID] = giveid;
    Spieler[playerid][pGeldcheckBetrag] = betrag;
    GivePlayerCash( playerid , -betrag );
    format(String,sizeof(String),"%s hat %s einen Geldcheck in Höhe von $%s ausgestellt",GetName(playerid),GetName(giveid), AddDelimiters(betrag));
    GebeCheckLog(String);

    if( betrag >= 20000 ) {
        format(String,sizeof(String),"[ACHTUNG] %s hat %s einen Geldcheck in Höhe von $%s ausgestellt",GetName(playerid),GetName(giveid), AddDelimiters(betrag));
        SendAdminMessage(COLOR_YELLOW, String);
    }
    return 1;
}

HasPlayerChecks(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pGeldcheckID] == playerid ) return 1;
        }
    }
    return 0;
}

ResetPlayerCheck(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pGeldcheckID] == playerid ) {
                Spieler[i][pGeldcheckID] = INVALID_PLAYER_ID;
                Spieler[i][pGeldcheckBetrag] = 0;
            }
        }
    }
    return 0;
}
COMMAND:transporterausrauben(playerid,params[]){
    if(Spieler[playerid][pJob] == 12) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist selbst ein Geld-Transportfahrer.");
    }

    if( GetOnlineExekutive(playerid) <  6) {
        SendClientMessage(playerid, COLOR_RED, "Es sind nicht genug Polizisten online!");
        return 1;
    }

    new
        vID,
        fahrer = INVALID_PLAYER_ID;
    vID = GetPlayerVehicleID(playerid);
    for(new i=0;i<sizeof(geldt);i++)
    {
        if(vID == geldt[i])
        {
            for(new pID=0; pID < MAX_PLAYERS ; pID++)
            {
                if(JobVehicle[pID] == vID && JobVehicle[playerid] != vID)
                {
                    // Es wird gerade genutzt, möglich Raub!
                    if( Spieler[pID][pTransportActive] ) {
                        SendClientMessage(playerid, COLOR_GREEN, "Der Raub wurde gestartet!");
                        fahrer = pID;
                        JobVehicle[pID] = INVALID_VEHICLE_ID;
                        Spieler[pID][pTransportActive] = false;
                        JobVehicle[playerid] = vID;
                        break;
                    }
                }
            }
        }
    }
    if( !IsPlayerConnected(fahrer) ) {
        return SendClientMessage(playerid,COLOR_RED,"Zu spät");
    }
    new
        String[128];
    DisablePlayerCheckpointEx(fahrer);
    DisablePlayerCheckpointEx(playerid);

    format(String,sizeof(String),"Spieler %s stiehlt deinen Geldtransporter. Job fehlgeschlagen!",GetName(playerid));
    SendClientMessage(fahrer,COLOR_RED,String);
    SendClientMessage(playerid,COLOR_RED,"Du stiehlst den Geldtransporter. Die Polizei wurde alarmiert!");
    SendClientMessage(playerid,COLOR_YELLOW,"Bring den Geld Transporter so schnell wie möglich zum Checkpoint!");
    format(String,sizeof(String),"[NOTRUFZENTRALE] %s hat den Geldtransporter von %s gestohlen",GetName(playerid),GetName(fahrer));
    SendFraktionMessage(1, COLOR_RED, String);
    SendFraktionMessage(2, COLOR_RED, String);
    SendFraktionMessage(16, COLOR_RED, String);
    SendFraktionMessage(18, COLOR_RED, String);
    SetPlayerCheckpointEx(playerid,158.7957,-22.0976,1.5781,5.0,CP_DIEBSTAHL_GT);
    return 1;
}

#if defined WEIHNACHTS_EVENT
COMMAND:halloween(playerid,params[]) {
	if( Spieler[playerid][pLevel] < 3 ) {
	    return SendClientMessage(playerid, COLOR_RED, "Du musst Level 3 erreicht haben, um ein Geschenk öffnen zu können.");
	}
	for(new i ; i < sizeof(g_Geschenk); i++) {
	    if( g_Geschenk[i][G_bFound] == false ) {
	        if( IsPlayerInRangeOfPoint(playerid,3.0,g_Geschenk[i][G_fX],g_Geschenk[i][G_fY],g_Geschenk[i][G_fZ]) ) {
				new
				    String[128];
	            g_iGeschenk++;
	            format(String,sizeof(String),"[HALLOWEEN] %s hat ein Kürbis gefunden! Kürbisse: %d/%d",GetName(playerid),g_iGeschenk,sizeof(g_Geschenk));
	            SendClientMessageToAll(COLOR_YELLOW,String);
	            DestroyDynamic3DTextLabel( g_Geschenk[i][G_t3dLabel] );
	            DestroyDynamicObject( g_Geschenk[i][G_iObjectID] );
	            g_Geschenk[i][G_bFound] = true;
				GivePlayerCash(playerid,50000);
				Spieler[playerid][pLevel] += 1;
	            if( g_iGeschenk == sizeof(g_Geschenk) ) {
	                // Alle wurden gefunden
	                SendClientMessageToAll(COLOR_YELLOW,"Alle Kürbisse wurden gefunden! LyD wünscht euch gruselige Halloween!");
	            }
	            return 1;
	        }
	    }
	}
	SendClientMessage(playerid,COLOR_WHITE,"Kein Paket in deiner nähe!");
	return 1;
}
#endif
#if defined SILVESTER_EVENT
/*COMMAND:silvester(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,4.0,627.7925,-1856.2080,5.7250)) {
        SendClientMessage(playerid,COLOR_YELLOW,"Hier kannst du keine Feuerwerkskörper kaufen!");
        return 1;
    }
    ShowPlayerDialog(playerid,DIALOG_SILVESTER,DIALOG_STYLE_LIST,"Feuerwerkskörper","Böller (St.5) - 5000$\nLeuchtknaller (St.5) - 3000$","Kaufen","Abbruch");
    return 1;
}*/
//Silvesterbefehle

// TODO: Peek delete?
COMMAND:werfboellersilv2013(playerid,params[]) {
    /*if( Spieler[playerid][pBoeller] < 1 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Böller");
        return 1;
    }*/
    if( gettime() < Spieler[playerid][unixFeuerwerk] ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst nur alle 20 Sekunden Feuerwerkskörper zünden");
        return 1;
    }
    new
        obj,
        obj1,
        obj2,
        Float:face,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerFacingAngle(playerid,face);
    GetPlayerPos(playerid,x,y,z);
    x += frandom(1.0,-1.0);
    y += frandom(1.0,-1.0);
    z -= 0.7;
    GetXYInFrontOfPosition(x, y, face, 8.0 + random(8) );
    Spieler[playerid][pBoeller]--;
    SendClientMessage(playerid,COLOR_YELLOW,"Du hast einen Böller geworfen!");
    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1 );
    obj1 = CreateDynamicObject(18717, x , y, z - 1.7 , 0.0 , 0.0 , 0.0 );
    obj = CreateDynamicObject(1672, x , y, z - 0.1 , 0.0 , 90.0 , random(360) );
    obj2 = CreateDynamicObject(18686, x , y, z - 1.2 , 0.0 , 0.0 , 0.0 );
    SetTimerEx("Boeller", 1009 , false , "ddfffdd" , obj , 8 , x , y , z , obj1 , x , y , z , obj2, INVALID_OBJECT_ID);
    Spieler[playerid][unixFeuerwerk] = gettime() + 20;
    return 1;
}

forward Boeller(objectid,count,Float:x,Float:y,Float:z,objectid2);
public Boeller(objectid,count,Float:x,Float:y,Float:z,objectid2) {
    count--;
    //CreateExplosion(x + frandom(0.0,-0.0) ,y + frandom(0.0,-0.0) , z - 0.0 , 12, 0.0000 );
    if( count ) {
        SetTimerEx("Boeller", 150 + random(450) , false , "ddfffd" , objectid , count , x , y , z , objectid2 );
    }
    else {
		DestroyDynamicObject(objectid2);
		DestroyDynamicObject(objectid);
    }
    return 1;
}

// TODO: Peek delete?
COMMAND:rauchknallersilv2013(playerid,params[]) {
    /*if( Spieler[playerid][pBoeller] < 1 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Böller");
        return 1;
    }*/
    if( gettime() < Spieler[playerid][unixFeuerwerk] ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst nur alle 20 Sekunden Feuerwerkskörper zünden");
        return 1;
    }
    new
        obj,
        obj2,
        Float:face,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerFacingAngle(playerid,face);
    GetPlayerPos(playerid,x,y,z);
    x += frandom(1.0,-1.0);
    y += frandom(1.0,-1.0);
    z -= 0.7;
    GetXYInFrontOfPosition(x, y, face, 8.0 + random(8) );
    Spieler[playerid][pBoeller]--;
    SendClientMessage(playerid,COLOR_YELLOW,"Du hast einen Böller geworfen!");
    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1 );
    obj2 = CreateDynamicObject(18715, x , y, z - 1.7 , 0.0 , 0.0 , 0.0 );
    obj = CreateDynamicObject(1672, x , y, z - 0.1 , 0.0 , 90.0 , random(360) );
    SetTimerEx("RauchBoeller", 1009 , false , "ddfffdd" , obj , 8 , x , y , z , obj2, INVALID_OBJECT_ID);
    Spieler[playerid][unixFeuerwerk] = gettime() + 20;
    return 1;
}

forward RauchBoeller(objectid,count,Float:x,Float:y,Float:z,objectid2);
public RauchBoeller(objectid,count,Float:x,Float:y,Float:z,objectid2) {
    count--;
    //CreateExplosion(x + frandom(0.0,-0.0) ,y + frandom(0.0,-0.0) , z - 0.0 , 12, 0.0000 );
    if( count ) {
        SetTimerEx("RauchBoeller", 150 + random(450) , false , "ddfffd" , objectid , count , x , y , z , objectid2 );
    }
    else {
		DestroyDynamicObject(objectid2);
		DestroyDynamicObject(objectid);
    }
    return 1;
}

// TODO: Peek delete?
COMMAND:blendknallersilv2013(playerid,params[]) {
    /*if( Spieler[playerid][pBoeller] < 1 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Böller");
        return 1;
    }*/
    if( gettime() < Spieler[playerid][unixFeuerwerk] ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst nur alle 20 Sekunden Feuerwerkskörper zünden");
        return 1;
    }
    new
        obj,
        obj2,
        Float:face,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerFacingAngle(playerid,face);
    GetPlayerPos(playerid,x,y,z);
    x += frandom(1.0,-1.0);
    y += frandom(1.0,-1.0);
    z -= 0.7;
    GetXYInFrontOfPosition(x, y, face, 8.0 + random(8) );
    Spieler[playerid][pBoeller]--;
    SendClientMessage(playerid,COLOR_YELLOW,"Du hast einen Böller geworfen!");
    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1 );
    obj2 = CreateDynamicObject(18717, x , y, z - 1.7 , 0.0 , 0.0 , 0.0 );
    obj = CreateDynamicObject(345, x , y, z - 0.1 , 0.0 , 90.0 , random(360) );
    SetTimerEx("blendknaller", 1009 , false , "ddfffdd" , obj , 8 , x , y , z , obj2 , INVALID_OBJECT_ID);
    Spieler[playerid][unixFeuerwerk] = gettime() + 20;
    return 1;
}

forward blendknaller(objectid,count,Float:x,Float:y,Float:z,objectid2);
public blendknaller(objectid,count,Float:x,Float:y,Float:z,objectid2) {
    count--;
    //CreateExplosion(x + frandom(2.5,-2.5) ,y + frandom(2.5,-2.5) , z - 0.5 , 11, 0.001 );
    if( count ) {
        SetTimerEx("blendknaller", 1009 , false , "ddfffdd" , objectid , count , x , y , z , objectid2 );
    }
    else {
		DestroyDynamicObject(objectid2);
		DestroyDynamicObject(objectid);
    }
    return 1;
}

// TODO: Peek delete?
COMMAND:leuchtknallersilv2013(playerid,params[]) {
    /*if( Spieler[playerid][pRaketen] < 1 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Leuchtknaller/Böller");
        return 1;
    }*/
    if( gettime() < Spieler[playerid][unixFeuerwerkleucht] ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst nur alle 10 Sekunden Feuerwerkskörper zünden");
        return 1;
    }
    new
        obj,
        obj2,
        Float:face,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerFacingAngle(playerid,face);
    GetPlayerPos(playerid,x,y,z);
    x += frandom(1.0,-1.0);
    y += frandom(1.0,-1.0);
    z -= 0.7;
    GetXYInFrontOfPosition(x, y, face, 8.0 + random(8) );
    Spieler[playerid][pBoeller]--;
    SendClientMessage(playerid,COLOR_YELLOW,"Du hast einen Leuchtknaller geworfen!");
    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1 );
    obj2 = CreateDynamicObject(18717, x , y, z - 1.7 , 0.0 , 0.0 , 0.0 );
    obj = CreateDynamicObject(1672, x , y, z - 0.1 , 0.0 , 90.0 , random(360) );
    SetTimerEx("Leuchtknaller", 1009 , false , "ddfffdd" , obj , 8 , x , y , z , obj2 , INVALID_OBJECT_ID);
    Spieler[playerid][unixFeuerwerkleucht] = gettime() + 10;
    return 1;
}

// TODO: Peek delete?
forward Leuchtknaller(objectid,count,Float:x,Float:y,Float:z,objectid2,objectid3);
public Leuchtknaller(objectid,count,Float:x,Float:y,Float:z,objectid2,objectid3) {
    count--;
    //CreateExplosion(x + frandom(2.5,-2.5) ,y + frandom(2.5,-2.5) , z - 0.5 , 11, 0.001 );
	DestroyDynamicObject(objectid3);
    if( count ) {
        objectid3 = CreateDynamicObject( lighteffects[random(sizeof(lighteffects))] , x , y, z + 0.6 , 0.0 , 0.0 , 0.0 );
        SetTimerEx("Leuchtknaller", 1009 , false , "ddfffdd" , objectid , count , x , y , z , objectid2,objectid3 );
    }
    else {
		DestroyDynamicObject(objectid2);
		DestroyDynamicObject(objectid);
    }
    return 1;
}
/*COMMAND:feuerraketen(playerid,params[]) {
    if( Spieler[playerid][pRaketen] < 1 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Raketen");
        return 1;
    }
    if( gettime() < Spieler[playerid][unixFeuerwerk] ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst nur alle 30 Sekunden Feuerwerkskörper zünden");
        return 1;
    }
    new
        obj,
        Float:face,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerFacingAngle(playerid,face);
    GetPlayerPos(playerid,x,y,z);
    GetXYInFrontOfPosition(x, y, face, 9.0);
    Spieler[playerid][pRaketen]--;
    obj = CreateDynamicObject(18718, x , y, z - 2.25 , 0.0 , 0.0 , 0.0 );
    SetTimerEx("CreateFireworkEx",650 + random(350) ,false,"ffffd",x,y,z,face,obj);
    SendClientMessage(playerid,COLOR_YELLOW,"Du hast eine Rakete gezündet!");
    Spieler[playerid][unixFeuerwerk] = gettime() + 30;
    return 1;
}
forward CreateFireworkEx(Float:x,Float:y,Float:z,Float:face,obj);
public CreateFireworkEx(Float:x,Float:y,Float:z,Float:face,obj) {
	//print("CreateFireworkEx");
	CreateFirework(
		x,y,z + 0.35 ,
		35.0 + float(random(25)) ,
		face,
		10.0 + random(5),
		25.0 + random(8),
		1,
		frandom(15.0,7.0,2)
	);
	DestroyDynamicObject(obj);
	return 1;
}*/

#endif
// TODO: Peek make dynamic 3DTexts and Pickups for Staterepair
new const Float:g_StaatRepair[][] = {
	{LSPD_STATEREPAIR_COORDS}, 	// PD
	{SAMD_STATEREPAIR_COORDS}, 	// Medic
	{POO_STATEREPAIR_COORDS}, 	// Oamt
	{FBI_STATEREPAIR_COORDS}, 	// FBI{ GOVERNMENT_STATEREPAIR_COORDS }, // Regierung
	{2288.5466, 2444.9841, 	3.2734}, 	// LVPD
	{1248.3843, -1833.8750, 13.3930}, 	// Fahrschule
	{1138.9730, -1820.9103, 33.6354} 	// Fahrschule Dach
};

COMMAND:staatrepair(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2 && Spieler[playerid][pFraktion] != 3 && Spieler[playerid][pFraktion] != 5 && Spieler[playerid][pFraktion] != 9 && Spieler[playerid][pFraktion] != 16 && Spieler[playerid][pFraktion] != 18 && Spieler[playerid][pFraktion] != 22 && Spieler[playerid][pFraktion] != 8) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst diese Funktion nicht nutzen.");
        return 1;
    }
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug.");
        return 1;
    }
    for(new i ; i < sizeof(g_StaatRepair); i++) {
        if( IsPlayerInRangeOfPoint(playerid,5.0, g_StaatRepair[i][0], g_StaatRepair[i][1], g_StaatRepair[i][2])) {
            RepairVehicle(vehicleid);
            gGas[vehicleid] = GetMaxTank(vehicleid);
            SendClientMessage(playerid,COLOR_YELLOW,"Dein Fahrzeug wurde repariert und aufgetankt!");
            return 1;
        }
    }
    SendClientMessage(playerid,COLOR_RED,"Du bist nicht in der Nähe eines Staatrepair-Spots.");
    return 1;
}

COMMAND:krankenversicherung(playerid,params[]) {
    if (!IsPlayerInRangeOfPoint(playerid, 5.0, SAMD_INTERIOR_HEALTH_INSURANCE_COORDS)) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst hier keine Krankenversicherung kaufen.");
        return 1;
    }
    if( GetPlayerMoney(playerid) < 7000 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld um eine Krankenversicherung zu kaufen");
        return 1;
    }
    if( HasKrankenversicherung(playerid) ) {
        SendClientMessage(playerid,COLOR_RED,"Du besitzt bereits eine Krankenversicherung!");
        return 1;
    }
    new
        String[128];

    format(String,sizeof(String),"Du hast dir eine Krankenversicherung gekauft für 7000$. Diese ist für 7 Tage gültig!");
    SendClientMessage(playerid,COLOR_YELLOW,String);
    GivePlayerCash(playerid,-7000);
    Kasse[Samd] += 7000;
    Spieler[playerid][unixKrankenversicherung] = gettime() + 60*24*7;
    return 1;
}

stock HasKrankenversicherung(playerid) {
    if( gettime() > Spieler[playerid][unixKrankenversicherung] ) return 0;
    return 1;
}

forward OnQueryFinish(query[], resultid, extraid, connectionHandle , threadowner );
public OnQueryFinish(query[], resultid, extraid, connectionHandle , threadowner )
{
    /*
    if( cache_affected_rows(connectionHandle) > 0 ) {
        printf("OnQueryFinish(%s,%d,%d) affected: %d",query,resultid,extraid, cache_affected_rows(connectionHandle) );
    }
    */
    if( (0 <= extraid <= MAX_PLAYERS) && ( threadowner != INVALID_THREAD_OWNER ) ) {
        // Ein Player bezogener Thread
        if( threadowner != MySQLThreadOwner[extraid] ) {
            new
                syncString[512];
            format(syncString,sizeof(syncString),"OnQueryFinish('%.480s',%d,%d,%d,%d)",query,resultid,extraid,connectionHandle,threadowner);
            MySQLThreadOwnerLog("Spielerbezogener Thread nicht Synchron! Drop");
            MySQLThreadOwnerLog(syncString);
            return 0;
        }
    }
    if(resultid==THREAD_POSTCHANGE)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Spieler existiert nicht");
        }
        else
        {
            new i,pfad[64];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",postpsenden[extraid],i);
                if(fexist(pfad))
                {
                }
                else if(strcmp(pfad,postpsenden[extraid],true)!=0)
                {
                    i=100;
                    break;
                }
                else
                {
                    SendClientMessage(extraid,COLOR_RED,"Bitte beachte die Groß&Kleinschreibung");
                }
            }
            if(i==100)
            {
                ShowPlayerDialog(extraid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)","Weiter","Zurück");
            }
            else
            {
                SendClientMessage(extraid,COLOR_RED,"Du kannst diesen Brief nicht abschicken da das Postfach des Empfängers voll ist");
            }
        }
    }
    else if(resultid==THREAD_BANKCHANGE)
    {
        if(cache_get_row_count(connectionHandle)!=0)
        {
            bankchange[extraid]=cache_get_field_content_int(0,"Bank",connectionHandle);
        }
    }
    else if(resultid==THREAD_PWCHANGE)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else
        {
            return 101;
        }
    }
    else if(resultid==THREAD_FRAKBLACKLISTCHECK)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else
        {
            new extra[24],String[128];
            ReadPlayerSQLExtra(extraid,extra);
            format(String,sizeof(String),"Der Spieler %s wurde auf eure Fraktionsblacklist gesetzt",extra);
            SendClientMessage(extraid,COLOR_WHITE,String);
            format(String,sizeof(String),"INSERT INTO `frakblacklist` (`name`, `fraktion`) VALUES ('%s', %d);",extra,Spieler[extraid][pFraktion]);
            mysql_pquery(String,THREAD_ADDFRAKBLACKLIST,extraid,gSQL,MySQLThreadOwner);
        }
    }
    else if(resultid==THREAD_DEAKTACC)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else
        {
            return cache_get_row_int(0,2,connectionHandle);
        }
    }
    else if(resultid==THREAD_AKTACC)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else if(cache_get_row_int(0,138,connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Dieser Account ist nicht deaktiviert");
        }
        else
        {
            return 100;
        }
    }
    else if( resultid == THREAD_CONNECTION_CHECK1 ) {
        print("<-| [MYSQL] Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        gWebSQL = mysql_connect(WEBSQL_HOST, WEBSQL_USER, WEBSQL_DATA, WEBSQL_PASS);
        mysql_oquery("SELECT 1", THREAD_CONNECTION_CHECK2 ,extraid ,gWebSQL);
        MySQLConnected++;
    }
    /*else if( resultid == THREAD_NAMECHANGEFINISH) {
        SendClientMessage(extraid,COLOR_YELLOW,"Namensänderung an der Datenbank durchgeführt");
    }
    else if( resultid == THREAD_NAMECHANGE) {
        mysql_store_result();
        new rows = mysql_num_rows();
        mysql_free_result();
        if( rows ) {
            return SendClientMessage(extraid,COLOR_RED,"Der Benutzername ist schon in Nutzung!");
        }
        else {
            new
                String[128],
                giveid,
                name[MAX_PLAYER_NAME];
            ReadPlayerSQLExtra(extraid,String);
            sscanf(String,"us[24]",giveid,name);
            format(String,sizeof(String),"Der Benutzername von %s(%d) wird nun geändert in %s",GetName(giveid),giveid,name);
            SendClientMessage(extraid,COLOR_GREEN,String);
            ChangePlayerName(extraid,giveid,GetName(giveid),name);
        }
    }
    */
    else if( resultid == THREAD_CREATEGUTSCHEIN_CHECK) {
        new
            String[128],
            code[32],
            gutschein;
        ReadPlayerSQLExtra(extraid,String);
        sscanf(String,"s[32]d",code,gutschein);
        if( cache_get_row_count(connectionHandle) ) {
            format(String,sizeof(String),"Ein Gutschein mit dem Code '%s' existiert bereits",code);
            SendClientMessage(extraid,COLOR_ORANGE,String);
        }
        else {
            new
                Query[128];
            mysql_real_escape_string(code,code);
            format(Query,sizeof(Query),"INSERT INTO `gutschein` (`code`, `gutschein`,`expired`) VALUES ('%s', %d,0)", code,gutschein);
            mysql_pquery( Query , THREAD_CREATEGUTSCHEIN , extraid, gSQL,MySQLThreadOwner);
        }
    }
    else if( resultid == THREAD_CREATEGUTSCHEIN) {
        new
            String[128],
            code[32],
            gutschein;
        ReadPlayerSQLExtra(extraid,String);
        sscanf(String,"s[32]d",code,gutschein);
        format(String,sizeof(String),"Ein Gutschein für \"%s\" (%d) wurde mit dem Code '%s' erstellt",g_Gutschein[gutschein],gutschein,code);
        SendClientMessage(extraid,COLOR_GREEN,String);
    }
    else if( resultid == THREAD_GUTSCHEINCODE_CHECK) {
        new
            String[128],
            inputtext[64];
        ReadPlayerSQLExtra(extraid,inputtext);
        if( cache_get_row_count(connectionHandle) ) {
            new
                expired;
            expired = cache_get_row_int(0,3,connectionHandle);
            if(expired) {
                format(String,sizeof(String),"Der Gutscheincode (%s) ist bereits eingelöst worden!",inputtext);
                SendClientMessage(extraid,COLOR_RED,String);
            }
            else {
                new
                    id = cache_get_row_int(0,0,connectionHandle),
                    gutschein = cache_get_row_int(0,2,connectionHandle);
                expired = cache_get_row_int(0,3,connectionHandle);
                format(String,sizeof(String),"Der Gutschein mit dem Code '%s' wird eingelöst!",inputtext);
                SendClientMessage(extraid,COLOR_GREEN,String);
                format(String,sizeof(String),"Du erhältst: \"%s\"",g_Gutschein[gutschein]);
                SendClientMessage(extraid,COLOR_GREEN,String);

                format(String,sizeof(String),"UPDATE `gutschein` SET `expired` = 1 WHERE `id` = %d",id);
                mysql_pquery( String , THREAD_GUTSCHEINCODE , extraid, gSQL,MySQLThreadOwner);
                switch(gutschein) {
                    case 1: {
                        Spieler[extraid][pCash] += 30000;
                    }
                    case 2: {
                        Spieler[extraid][pCash] += 80000;
                    }
                    case 3: {
                        Spieler[extraid][pLevel] += 1;
                    }
                    case 4: {
                        Spieler[extraid][pLevel] += 2;
                    }
                    case 5: {
                        Spieler[extraid][pExp] += 3;
                    }
                    case 6: {
                        Spieler[extraid][pExp] += 6;
                    }
                    case 7: {
                        new Query[120];
                        format(Query,sizeof(Query),"UPDATE `accounts` SET `userPremium` = `userPremium` + 100 WHERE `Name` = '%s'",GetName(extraid));
                        mysql_pquery( Query , THREAD_DUMMY , extraid, gSQL,MySQLThreadOwner);
                    }
                    case 8: {
                        new Query[120];
                        format(Query,sizeof(Query),"UPDATE `accounts` SET `userPremium` = `userPremium` + 300 WHERE `Name` = '%s'",GetName(extraid));
                        mysql_pquery( Query , THREAD_DUMMY , extraid, gSQL,MySQLThreadOwner);
                    }
                    case 9: {
                        new Query[120];
                        format(Query,sizeof(Query),"UPDATE `accounts` SET `userPremium` = `userPremium` + 500 WHERE `Name` = '%s'",GetName(extraid));
                        mysql_pquery( Query , THREAD_DUMMY , extraid, gSQL,MySQLThreadOwner);
                    }
                    case 10: {
                        Spieler[extraid][pPremiumNeon] = 1;
                    }
                    case 11: {
                        Spieler[extraid][pPremiumCarSlot] = 1;
                    }
                    default: {
                        printf("Fehler bei THREAD_GUTSCHEINCODE_CHECK mit gutschein %d",gutschein);
                    }
                }
            }
        }
        else {
            format(String,sizeof(String),"Der Gutschein mit dem Code \"%s\" ist uns nicht bekannt.",inputtext);
            SendClientMessage(extraid,COLOR_RED,String);
        }
    }
    else if( resultid == THREAD_CREATEHAUSMOEBEL) { // TODO
        new
            lastid = cache_insert_id(),
            house,
            slot;
        Hausmoebel_Uncompress( extraid, house,slot);
        g_HausMoebelObjekt[house][slot][HMO_iID] = lastid;
    }
    else if( resultid == THREAD_GEBECLUB ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                String[140],
                option,
                name[MAX_PLAYER_NAME];
            ReadPlayerSQLExtra(extraid,String);
            sscanf(String,"s[24]d",name,option);
            format(String,sizeof(String),"Clubmitgliedschaft an %s erfolgreich vergeben! Option: %d",name,option);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            format(String,sizeof(String),"UPDATE `accounts` SET `DonateRank` = 1,`Level` = `Level` + 1, `Exp` = `Exp` + 1, `Cash` = `Cash` + 20000 WHERE `Name` = '%s'",name);
            mysql_oquery(String,THREAD_DUMMY,0,gSQL);

            new sOption[16] = "Fehler";
            switch(option) {
                case 1: sOption = "1 Monat";
                case 2: sOption = "3 Monate";
                case 3: sOption = "6 Monate";
                case 4: sOption = "für immer";
            }

            format(String,sizeof(String),"(Offline Aktion) Spieler %s erhielt von %s %s eine Clubmitgliedschaft, Laufzeit: %s", name, GetPlayerAdminRang(extraid), GetName(extraid), sOption);
            ClubLog(String);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    else if( resultid == THREAD_WAFFENSPERRE ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                name[MAX_PLAYER_NAME],
                querystr[128],
                resultline[100];
            format(resultline,sizeof(resultline),"UPDATE `accounts` SET `WaffenSperre` = %d WHERE `Name` = '%s'", gettime() + (2*24*60*60) , name);
            mysql_oquery( resultline ,  THREAD_DUMMY , 0 ,gSQL);
            format(resultline,sizeof(resultline),"Die Waffensperre wird Offline an den Spieler %s vergeben",name);
            SendClientMessage(extraid,COLOR_YELLOW,resultline);


            format(querystr,sizeof(querystr),"%s erhielt von %s %s eine Waffensperre, Dauer: 2 Tage", name, GetPlayerAdminRang(extraid), GetName(extraid));
            SendUCPAktenEintrag( extraid ,GetName(extraid) , name , querystr );

        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    else if( resultid == THREAD_GEBANNT ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                banned,
                //timeban,
                unixtimeban[28],
                name[MAX_PLAYER_NAME],
                gebanntvon[MAX_PLAYER_NAME],
                bangrund[128];
            cache_get_row(0,0,name,connectionHandle);
            banned = cache_get_row_int(0,1,connectionHandle);
            //timeban = cache_get_row_int(0,2,connectionHandle);
            cache_get_row(0,3,unixtimeban,connectionHandle);
            cache_get_row(0,4,gebanntvon,connectionHandle);
            cache_get_row(0,5,bangrund,connectionHandle);
            if( isnull(gebanntvon)) {
                gebanntvon = "Unbekannt";
            }
            if( isnull(bangrund)) {
                bangrund = "Unbekannt";
            }
            if( banned == 1 ) {
                unixtimeban = "Immer";
            }
            if( banned == 1 ) {
                new
                    String[128];
                format(String,sizeof(String),"%s wurde von Teammitglied %s dauerhaft gesperrt, Grund: %s", name, gebanntvon, bangrund);
                SendClientMessage(extraid,COLOR_RED,String);
                format(String,sizeof(String),"Gebannt am: %s",unixtimeban);
                SendClientMessage(extraid,COLOR_RED,String);
            }
            else {
                SendClientMessage(extraid,COLOR_RED,"Der Spieler ist nicht gesperrt!");
            }
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    else if( resultid == THREAD_SPIELERINFO ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                String[128],
                name[MAX_PLAYER_NAME],
                lastseen[22],
                banned;
            cache_get_row(0,0,name,connectionHandle);
            cache_get_row(0,1,lastseen,connectionHandle);
            banned = cache_get_row_int(0,2,connectionHandle);

            format(String,sizeof(String),"%s war zuletzt online am: %s",name,lastseen);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            if( banned == 1 ) {
                format(String,sizeof(String),"Gebannt: {FF0000}Ja");
            }
            else {
                format(String,sizeof(String),"Gebannt: {00FF00}Nein");
            }
            SendClientMessage(extraid,COLOR_GREEN,String);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    else if( resultid == THREAD_UPDATE_PLAYER_PASSWORD ) {
        SendClientMessage(extraid,COLOR_GREEN,"Dein Passwort wurde aktualisiert!");
    }
    else if( resultid == THREAD_BANKSYSTEM ) {
        new
            rows = cache_get_row_count(connectionHandle);
        if( rows ) {
            new
                row,
                string[128],
                //id,
                userid_von,
                userid_an,
                pushonlinean,
                pushonlinevon,
                von[MAX_PLAYER_NAME],
                an[MAX_PLAYER_NAME],
                betrag,
                grund[128];
            while( row < rows ) {
                //id = cache_get_row_int(row,0,connectionHandle);
                cache_get_row(row,1,an,connectionHandle);
                cache_get_row(row,2,von,connectionHandle);
                //3
                betrag = cache_get_row_int(row,4,connectionHandle);
                cache_get_row(row,5,grund,connectionHandle);
                pushonlinevon = cache_get_row_int(row,6,connectionHandle);
                pushonlinean = cache_get_row_int(row,7,connectionHandle);

                if( pushonlinean ) {
                    sscanf( an , "u" , userid_an );
                    //printf("an '%s' userid_an %d",an,userid_an);
                    if( IsPlayerConnected(userid_an) ) {
                        format(string,sizeof(string),"OnlineBanking - Sie haben von %s eine Überweisung per Online-Banking erhalten! Betrag: %d$",von,betrag);
                        SendClientMessage(userid_an,COLOR_ORANGE,string);
                        format(string,sizeof(string),"Überweisungsgrund: %s",grund);
                        SendClientMessage(userid_an,COLOR_ORANGE,string);
                        Spieler[userid_an][pBank] += betrag;
                    }
                    else {
                        // Spieler schon wieder offline
                        format(string,sizeof(string),"UPDATE `accounts` SET `Bank` = `Bank` + %d WHERE `Name` = '%s'",betrag,an);
                        mysql_oquery( string ,  THREAD_DUMMY , 0 ,gSQL);
                        //printf("Spieler schon wieder offline");
                    }
                }
                if( pushonlinevon ) {
                    sscanf( von , "u" , userid_von );
                    //printf("von '%s' userid_von %d",von,userid_von);
                    if( IsPlayerConnected(userid_von) ) {
                        format(string,sizeof(string),"OnlineBanking - Ihre Online-Überweisung in Höhe von %d$ an %s wird abgerechnet",betrag,an);
                        SendClientMessage(userid_von,COLOR_ORANGE,string);
                        Spieler[userid_von][pBank] -= betrag;
                    }
                    else {
                        // Spieler schon wieder offline
                        format(string,sizeof(string),"UPDATE `accounts` SET `Bank` = `Bank` - %d WHERE `Name` = '%s'",betrag,von);
                        mysql_oquery( string ,  THREAD_DUMMY , 0 ,gSQL);
                        //printf("Spieler schon wieder offline");
                    }
                }
                row++;
            }
            mysql_oquery( "UPDATE `bank` SET `PushOnlineVon` = 0,`PushOnlineAn` = 0" ,  THREAD_DUMMY , 0 ,gSQL);
        }
    }
    else if( resultid == THREAD_CONNECTION_CHECK2 ) {
        // Beide MySQL Serververbindungen hergestellt...Los gehts
        print("<-| [MYSQL] WebSQL Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        MySQLConnected++;
        KillTimer( tMySQL );
        // Gamemodedaten laden. MySQL Daten konnten vorher nicht geladen werde, der Rest machte sowieso keinen Sinn
        //OnGameModeInit2();
    }
    else if( resultid == THREAD_DELCLUB ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                name[MAX_PLAYER_NAME],
                donaterank,
                String[128];

            cache_get_row(0,0,name,connectionHandle);
            donaterank = cache_get_row_int(0,1,connectionHandle);

            if( donaterank == 0 ) {
                format(String,sizeof(String),"Der Spieler %s besitzt keinen Donator Rank",name);
                SendClientMessage(extraid,COLOR_RED,String);
                format(String,sizeof(String),"UPDATE `accounts` SET `DonateRank` = 0 WHERE `Name` = '%s'",name);
                mysql_pquery(String,THREAD_DUMMY,extraid,gSQL,MySQLThreadOwner);
            }
            else {
                format(String,sizeof(String),"Der Donator Rank wird dem Spieler %s entzogen",name);
                SendClientMessage(extraid,COLOR_YELLOW,String);
            }
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Kein Spieler mit diesem Namen gefunden");
        }
    }
    else if( resultid == THREAD_HAUSMIETER ) {
        new
            rows = cache_get_row_count(connectionHandle);
        if( rows ) {
            new
                row,
                String[512] = "{FFFFFF}",
                player,
                resultline[128],
                i = 1;
            while( row < rows ) {
                // resultline = name
                cache_get_row(row,0,resultline,connectionHandle);

                sscanf(resultline,"u",player);
                format(String,sizeof(String),"%s%d. %s ( %s )\n",String,i, resultline , ( IsPlayerConnected(player) ? ("{00FF00}Online{FFFFFF}") : ("{FF0000}Offline{FFFFFF}")) );
                i++;
                row++;
            }
            ShowPlayerDialog(extraid,DIALOG_HAUSMIETER,DIALOG_STYLE_MSGBOX,"Hausmieter",String,"Schliessen","");
        }
        else {
            ShowPlayerDialog(extraid,DIALOG_HAUSMIETER,DIALOG_STYLE_MSGBOX,"Hausmieter","{FF0000}Keine Mieter vorhanden","Schliessen","");
        }
    }
    else if( resultid == THREAD_OFFHAUSRAUS ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                String[128],
                name[MAX_PLAYER_NAME],
                key;

            cache_get_row(0,0,name,connectionHandle);
            key = cache_get_row_int(0,1,connectionHandle);

            if( Haus[ Spieler[extraid][pPlayerHouse] ][hID] == key ) {
                format(String,sizeof(String),"Der Spieler %s wird als Mieter aus deinem Haus entfernt",name);
                SendClientMessage(extraid,COLOR_GREEN,String);
                format(String,sizeof(String),"UPDATE `accounts` SET `HouseMieteKey` = 999 WHERE `Name` = '%s'",name);
                mysql_pquery(String,THREAD_DUMMY,extraid,gSQL,MySQLThreadOwner);
                Haus[ Spieler[extraid][pPlayerHouse] ][hMieterAnzahl]--;
            }
            else {
                format(String,sizeof(String),"Der Spieler %s ist nicht eingemietet in deinem Haus",name);
                SendClientMessage(extraid,COLOR_RED,String);
            }
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Kein Benutzer mit diesem Namen gefunden");
        }
    }
    else if( resultid == THREAD_FREEPHONENUMBER ) {
        if( cache_get_row_count(connectionHandle) ) { // Belegt
            if( Spieler[extraid][pHandyNr_Counter] >= 10 ) {
                SendClientMessage(extraid,COLOR_RED,"Es sind kaum noch Handy-Nummern frei! Bitte bei einem Admin melden");
            }
            else {
                GetFreePhoneNumber(extraid);
            }
        }
        else {
            new
                String[128];
            Spieler[extraid][pHandyNr] = Spieler[extraid][pHandyNr_Temp];
            Spieler[extraid][pHandyNr_Temp] = 0;
            format(String,sizeof(String),"Deine Handy-Nummer lauet: %d",Spieler[extraid][pHandyNr]);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            Spieler[extraid][pHandyNr_Counter] = 0;
            format(String,sizeof(String),"UPDATE `accounts` SET `HandyNr` = %d WHERE `Name` = '%s'",Spieler[extraid][pHandyNr],GetName(extraid));
            mysql_oquery(String,THREAD_SAVEPHONENUMBER,extraid,gSQL);
        }
    }
    else if( resultid == THREAD_ISIPBAN ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                String[128],
                name[MAX_PLAYER_NAME];
            GetPlayerName(extraid,name,sizeof(name));
            mysql_real_escape_string(name,name,gSQL,MAX_PLAYER_NAME);
            format(String,sizeof(String),"SELECT * FROM `whitelist` WHERE `Name` = '%s'",name);
            mysql_pquery( String , THREAD_ISWHITELIST_CONNECT , extraid , gSQL , MySQLThreadOwner);
        }
        else {
            mysql_CheckAccount(extraid);
        }
    }
    else if( resultid == THREAD_SAVEHOUSEUPGRADE ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Upgradeposition gespeichert!");
    }
    else if( resultid == THREAD_COMMIT ) {
        //printf("Zeit für SaveAll %dms", GetTickCount() - extraid );
    }
    else if( resultid == THREAD_ISWHITELIST_CONNECT ) {
        if( cache_get_row_count(connectionHandle) ) {
            // Auf Whitelist, weiter normal mit Login
            mysql_CheckAccount(extraid);
        }
        else {
            SendClientMessage(extraid,COLOR_LIGHTRED2,"Der Zutritt auf diesen Server ist Ihnen aufgrund eines Regelverstoßes verwehrt!");
            SetTimerEx("KickEx",1873,false,"d",extraid);
        }
    }
    else if( resultid == THREAD_ISWHITELIST ) {
        new
            parameter[MAX_PLAYER_NAME],
            String[128];
        ReadPlayerSQLExtra(extraid,parameter);
        if( cache_get_row_count(connectionHandle) ) {
            format(String,sizeof(String),"Der Spieler %s ist bereits auf der Whitelist",parameter);
            SendClientMessage(extraid, COLOR_GREY, String );
        }
        else {
            AddWhitelist(parameter);
            format(String,sizeof(String),"Der Name %s wurde der Whitelist hinzugefügt",parameter);
            SendClientMessage(extraid,COLOR_LIGHTRED2,String);
        }
    }
    else if( resultid == THREAD_ADDIPBAN ) {
        //
    }
    else if( resultid == THREAD_ISIPBANNED ) {
        //
    }
    else if( resultid == THREAD_TBAN ) {
        ShowPlayerBan(extraid);
    }
    else if( resultid == THREAD_ISVALIDSECURECUDE ) {
        new
            securecode;
        securecode = cache_get_row_count(connectionHandle);
        if( securecode > 0 ){
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen einen SecureCode!");
            ShowPlayerDialog(extraid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen SecureCode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben,\ndarf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
        }
        else {
            IsValidGeburtstag(extraid);
        }
    }
    else if( resultid == THREAD_SELLHOUSE ) {

    }
    else if( resultid == THREAD_HAUSRAUSALLE ) {

    }
    else if( resultid == THREAD_CREATETANKE ) {
        if( TankeLoadID( cache_insert_id () ) ) {
            SendClientMessage(extraid, COLOR_GREEN, "Tankstelle wurde gebaut!");
        }
        else {
            SendClientMessage(extraid, COLOR_GREEN,"Tankstelle wurde nicht erstellt da es keinen Freien IDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEHOUSE ) {
        if( HouseLoadID( cache_insert_id () )) {
            SendClientMessage(extraid, COLOR_GREEN, "Haus wurde gebaut");
        }
        else {
            SendClientMessage(extraid, COLOR_RED,"Haus wurde nicht erstellt da es keinen Freien IDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEHOTEL ) {
        if( HotelLoadID( cache_insert_id () )) {
            SendClientMessage(extraid, COLOR_GREEN, "Hotel wurde gebaut");
        }
        else {
            SendClientMessage(extraid, COLOR_RED,"Hotel wurde nicht erstellt da es keinen Freien IDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEAPLATZ ) {
        if( AngelLoadID( cache_insert_id () )) {
        }
        else {
            SendClientMessage(extraid, COLOR_RED,"Angelplatz wurde nicht erstellt da es keinen FreienIDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEPLAYERCAR ) {
        if( 0 <= extraid < MAX_PLAYERS ) {
            PlayerCar[extraid][PlayerKey[extraid]][Id] = cache_insert_id ();
            SavePlayerCar(extraid,PlayerKey[extraid]);
        }
    }
    else if( resultid == THREAD_SAVEPLAYERCAR ) {

    }
    else if( resultid == THREAD_CARSELL ) {

    }
    else if( resultid == THREAD_SBAN ) {
        Spieler[extraid][pBanned] = 1;
        ShowPlayerBan(extraid);
        Ban(extraid);
    }
    else if( resultid == THREAD_BAN ) {
        Spieler[extraid][pBanned] = 1;
        ShowPlayerBan(extraid);
    }
    else if( resultid == THREAD_IPBAN ) {
        Spieler[extraid][pBanned] = 1;
        ShowPlayerBan(extraid);
        Ban(extraid);
    }
    else if( resultid == THREAD_MITGLIEDER ) {
        new pName[24], lv, str2[2500], string[128], count, rk,fID, rank[35], salary;
        str2 = "Status\tName\tLevel\tRank\n";
        // new queryex[128];
        //print(query);
        new i, giveid, rows = cache_get_row_count(connectionHandle);
        while( i < rows ) {
            //sscanf(queryex,"p<|>s[24]ddd",pName,lv,rk,fID);

            cache_get_field_content(i,"Name",pName, connectionHandle);
            lv = cache_get_field_content_int(i,"Level", connectionHandle);
            rk = cache_get_field_content_int(i,"Rank", connectionHandle);
            fID = cache_get_field_content_int(i,"Fraktion", connectionHandle);
            salary = cache_get_field_content_int(i,"FrakLohn", connectionHandle);

            if(fID == 1)//LSPD
            {
                if(rk == 0){rank="LSPD Anwärter";}
                else if(rk == 1){rank="LSPD Polizeimeister";}
                else if(rk == 2){rank="LSPD Polizeiobermeister";}
                else if(rk == 3){rank="LSPD Polizeikommissar";}
                else if(rk == 4){rank="LSPD Polizeioberkommissar";}
                else if(rk == 5){rank="LSPD Stellv. Direktor";}
                else if(rk == 6){rank="LSPD Direktor";}
            }
            else if(fID == 2)//FBI
            {
                if(rk == 0){rank ="FBI Anwärter";}
                else if(rk == 1){rank ="FBI Agent";}
                else if(rk == 2){rank ="FBI Spezialagent";}
                else if(rk == 3){rank ="FBI Sturmtupp";}
                else if(rk == 4){rank ="FBI Einsatzleitung";}
                else if(rk == 5){rank ="FBI Stellv. Direktor";}
                else if(rk == 6){rank ="FBI Direktor";}
            }
            else if(fID == 3)//SAMD
            {
                if(rk == 0){rank="Praktikant";}
                else if(rk == 1){rank="Arzthelfer";}
                else if(rk == 2){rank="Arzt";}
                else if(rk == 3){rank="Oberarzt";}
                else if(rk == 4){rank="Hauptarzt";}
                else if(rk == 5){rank="Einsatzleitung";}
                else if(rk == 6){rank="Direktor";}
            }
            else if(fID == 4)//SA-NA
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank="Zeitungsjunge";}
                else if(rk == 2){rank ="Lokalreporter";}
                else if(rk == 3){rank ="Lokalredakteur";}
                else if(rk == 4){rank ="Netzwerk-Kontrolleur";}
                else if(rk == 5){rank ="Netzwerk-Redakteur";}
                else if(rk == 6){rank ="News Agentur Chef";}
            }
            else if(fID == 5)//O-Amt
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank ="Abschlepper";}
                else if(rk ==2){rank ="Kontrolleur";}
                else if(rk == 3){rank ="Ordnungshüter";}
                else if(rk == 4){rank ="Abteilungsleiter";}
                else if(rk == 5){rank ="Stellv. Leiter";}
                else if(rk == 6){rank ="Leiter";}
            }
            else if(fID == 6)//Grove Street
            {
                if(rk == 0){rank ="Bengel";}
                else if(rk == 1){rank ="Knecht";}
                else if(rk == 2){rank ="Associate";}
                else if(rk == 3){rank ="Solidier";}
                else if(rk == 4){rank ="Capo";}
                else if(rk == 5){rank ="Underboss";}
                else if(rk == 6){rank ="BigBoss";}
            }
            else if(fID == 7)//Ballas
            {
                if(rk == 0){rank ="Anfänger";}
                else if(rk == 1){rank ="Drogenjunkie";}
                else if(rk == 2){rank ="Homie";}
                else if(rk == 3){rank ="Gangster";}
                else if(rk == 4){rank ="Elite";}
                else if(rk == 5){rank ="Zweite Hand";}
                else if(rk == 6){rank ="Leiter";}
            }
            else if(fID == 8)
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank ="Fahrlehrer R1";}
                else if(rk == 2){rank ="Fahrlehrer R2";}
                else if(rk == 3){rank ="Fahrlehrer R3";}
                else if(rk == 4){rank ="Fahrlehrer R4";}
                else if(rk == 5){rank ="Fahrlehrer R5";}
                else if(rk == 6){rank ="Fahrlehrer Chef";}
            }
            else if(fID == 9)
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank ="Bodyguard";}
                else if(rk == 2){rank ="Secret Service";}
                else if(rk == 3){rank ="Secret Service Chief";}
                else if(rk == 4){rank ="Bürgermeister";}
                else if(rk == 5){rank ="Minister";}
                else if(rk == 6){rank ="Präsident";}
            }
            else if(fID == 10)
            {
                if(rk == 0){rank ="Yurui";}
                else if(rk == 1){rank ="Arjukiou";}
                else if(rk == 2){rank ="Shatei";}
                else if(rk == 3){rank ="Kyodai";}
                else if(rk == 4){rank ="Shotoiumi";}
                else if(rk == 5){rank = "Saiko-Koman";}
                else if(rk == 6){rank = "Oyabun";}
            }
            else if(fID == 11)
            {
                if(rk == 0){rank ="Novel";}
                else if(rk == 1){rank ="Nuevo Amigo";}
                else if(rk == 2){rank ="Compareno";}
                else if(rk == 3){rank ="Soldato";}
                else if(rk == 4){rank ="El Consejero";}
                else if(rk == 5){rank = "La Vice Jefe";}
                else if(rk == 6){rank = "El Jefe";}
            }
            else if(fID == 12)
            {
                if(rk == 0){rank ="Schuhputzer";}
                else if(rk == 1){rank ="Soldato";}
                else if(rk == 2){rank ="Picciotti";}
                else if(rk == 3){rank ="Membro della Famiglia";}
                else if(rk == 4){rank ="Addestratore";}
                else if(rk == 5){rank = "Consigliere";}
                else if(rk == 6){rank = "Don";}
            }
            else if(fID == 13)
            {
                if(rk == 0){rank ="Lacayo";}
                else if(rk == 1){rank ="Miembro";}
                else if(rk == 2){rank ="Hermano";}
                else if(rk == 3){rank ="Compañero";}
                else if(rk == 4){rank ="El Consejero";}
                else if(rk == 5){rank = "El Vice Jefe";}
                else if(rk == 6){rank = "El Jefe";}
            }
            else if(fID == 14)
            {
                if(rk == 0){rank ="Vollstrecker";}
                else if(rk == 1){rank ="Mörder";}
                else if(rk == 2){rank ="Serienmörder";}
                else if(rk == 3){rank ="Attentäter";}
                else if(rk == 4){rank ="Spezialagent";}
                else if(rk == 5){rank = "Vorstandsmitglied";}
                else if(rk == 6){rank = "Direktor";}
            }
            else if(fID == 15)
            {
                if(rk == 0){rank ="Prospect";}
                else if(rk == 1){rank ="Patched Member";}
                else if(rk == 2){rank ="Biker";}
                else if(rk == 3){rank ="The Enforcer";}
                else if(rk == 4){rank ="Captain";}
                else if(rk == 5){rank = "Vice-President";}
                else if(rk == 6){rank = "President";}
            }
            else if(fID == 16)
            {
                if(rk == 0){rank="LVPD Anwärter";}
                else if(rk == 1){rank="LVPD Polizeimeister";}
                else if(rk == 2){rank="LVPD Polizeiobermeister";}
                else if(rk == 3){rank="LVPD Polizeikommisar";}
                else if(rk == 4){rank="LVPD Polizeioberkommisar";}
                else if(rk == 5){rank="LVPD Stellv. Direktor";}
                else if(rk == 6){rank="LVPD Direktor";}
            }
            else if(fID == 17)
            {
                if(rk == 0){rank =" Wheelman R0";}
                else if(rk == 1){rank ="Wheelman R1";}
                else if(rk == 2){rank ="Wheelman R2";}
                else if(rk == 3){rank ="Wheelman R3";}
                else if(rk == 4){rank ="Wheelman R4";}
                else if(rk == 5){rank = "Wheelman Co.Leader";}
                else if(rk == 6){rank = "Wheelman Leader";}
            }
            else if(fID == 18)
            {
                if(rk == 0){rank ="Army Praktikant";}
                else if(rk == 1){rank ="Rekrut";}
                else if(rk == 2){rank ="Azubi-SC";}
                else if(rk == 3){rank ="Privat-AF";}
                else if(rk == 4){rank ="Privat-BT";}
                else if(rk == 5){rank = "General-SC";}
                else if(rk == 6){rank = "General";}
            }
            else if(fID == 19)
            {
                if(rk == 0){rank ="Terrorist";}
                else if(rk == 1){rank ="Terrorist";}
                else if(rk == 2){rank ="Terrorist";}
                else if(rk == 3){rank ="Terrorist";}
                else if(rk == 4){rank ="Terrorist";}
                else if(rk == 5){rank = "Terrorist Co. Leader";}
                else if(rk == 6){rank = "Terrorist Leader";}
            }
            else if(fID == 20)
            {
                if(rk == 0){rank ="Novo";}
                else if(rk == 1){rank ="Reclutador";}
                else if(rk == 2){rank ="Principiante";}
                else if(rk == 3){rank ="Avasando";}
                else if(rk == 4){rank ="Familiar";}
                else if(rk == 5){rank = "Hermano";}
                else if(rk == 6){rank = "Dirigente";}
            }
            else if(fID == 21)
            {
                if(rk == 0){rank ="Shangwang";}
                else if(rk == 1){rank ="Tugong";}
                else if(rk == 2){rank ="Shusheng";}
                else if(rk == 3){rank ="Chengyuan";}
                else if(rk == 4){rank ="Shengyu Jiashu";}
                else if(rk == 5){rank = "Youshou De Jiazu";}
                else if(rk == 6){rank = "Shangsi";}
            }
            else if(fID == 22)
            {
                if(rk == 0){rank ="Zollanwärter";}
                else if(rk == 1){rank ="Zollbeamter";}
                else if(rk == 2){rank ="Zolloberwachtmeister";}
                else if(rk == 3){rank ="Zollhauptwachtmeister";}
                else if(rk == 4){rank ="Zollamt Ausbilder";}
                else if(rk == 5){rank = "Zollamt Co. Leader";}
                else if(rk == 6){rank = "Zollamt Leader";}
            }

            sscanf(pName, "k<playername>", giveid);
            if (giveid != INVALID_PLAYER_ID) format(string, sizeof(string), "{228B22}Online (ID: %i)\t%s\t%d\t%d - %s ($%s)\n", giveid, pName, lv, rk, rank, AddDelimiters(salary));
            else format(string, sizeof(string), "{FF0000}Offline\t%s\t%d\t%d - %s ($%s)\n", pName, lv, rk, rank, AddDelimiters(salary));

            strcat(str2, string);
            count++;
            i++;
        }

        new titel[40];
        new frakname[50];
        ReturnPlayerFraktion(extraid, frakname);
        format(titel, sizeof(titel), "%s - Mitgliederliste", frakname);
        ShowPlayerDialog(extraid, DIALOG_NO_RESPONSE, DIALOG_STYLE_TABLIST_HEADERS, titel, str2, "Schließen", "");
    }
    else if( resultid == THREAD_ACCEPTMARRIAGE ) {

    }
    else if( resultid == THREAD_PIN_VERGESSEN ) {
        new
            String[128];
        if( cache_get_row_count(connectionHandle) ) {
            // richtig
            cache_get_field_content(0,"BankPin",String, connectionHandle);

            SendClientMessage(extraid,COLOR_GREEN,"Sie konnten sich als Kontoinhaber erfolgreich identifizieren!");
            format(String,sizeof(String),"Ihre aktuelle Bankpin lautet: %s",String);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            SendClientMessage(extraid,COLOR_GREEN,"Bitte merken Sie sich Ihre Bankpin in Zukunft!");
        }
        else {
            // falsch
            Spieler[extraid][pPinVergessen]++;
            if( Spieler[extraid][pPinVergessen] >= 5 ) {
                SendClientMessage(extraid,COLOR_GREEN,"Du konntest dich nicht über den Sicherheits identifizieren lassen");
            }
            else {
                format(String,sizeof(String),"Der Sicherheitscode war falsch.\n\nIdentifiziere dich mit deinem Sicherheitscode ( %d/3 )",Spieler[extraid][pPinVergessen] );
                ShowPlayerDialog(extraid, DIALOG_PIN_VERGESSEN , DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"BankPin Vergessen", String , "Weiter" , "");
            }
        }
    }
    else if( resultid == THREAD_CHECK_SECURECODE ) {
        new
            String[128];
        if( cache_get_row_count(connectionHandle) ) {
            // richtig
            format(String,sizeof(String),"[KONTROLLE] Spieler %s hat sich erfolgreich über den SecureCode identifiziert!",GetName(extraid));
            SendAdminMessage(COLOR_GREEN, String);
        }
        else {
            // falsch
            Spieler[extraid][pSecureCodeLevel]++;
            if( Spieler[extraid][pSecureCodeLevel] >= 3 ) {
                format(String,sizeof(String),"[KONTROLLE] Spieler %s konnte sich nicht über sein Sicherheitscode identifizieren!",GetName(extraid));
                SendAdminMessage(COLOR_RED, String);
            }
            else {
                format(String,sizeof(String),"Der Sicherheitscode war falsch.\n\nGib deinen Sicherheitscode zur identifizierung korrekt ein! ( %d/3 ):",Spieler[extraid][pSecureCodeLevel] + 1 );
                ShowPlayerDialog(extraid, DIALOG_CHECK_SECURECODE , DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"Sicherheitsabfrage:", String , "Absenden" , "");
            }
        }
    }
    else if( resultid == THREAD_SET_SECURECODE ) {

    }
    else if( resultid == THREAD_STARTBONUS ) {

    }
    else if( resultid == THREAD_DIALOGMEMBERS ) {

    }
    else if( resultid == THREAD_CONFIGBIZ_RAUSWERFEN ) {

    }
    else if( resultid == THREAD_CONFIGTANKE_RAUSWERFEN ) {

    }
    else if( resultid == THREAD_CONFIGHOUSE_RAUSWERFEN ) {

    }
    else if( resultid == THREAD_SAVEACCOUNT ) {
        //print("THREAD_SAVEACCOUNT");
        //print(query);
    }
    else if( resultid == THREAD_LOADPLAYER ) {
        // MEGA SSCANF
        new
            inputtext[64],
            rows = cache_get_row_count(connectionHandle),
            String[256],
            playerid = extraid,
            resultline[128],
            ip[16];
        if (rows && gPlayerLogged[playerid] == 0) {
            gPlayerLogged[playerid] = 1;
            Spieler[playerid][pLoginTimestamp] = gettime();
            KillTimer(Spieler[playerid][tLoginTimeout]);
            Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
            StopAudioStreamForPlayer(playerid);

            Spieler[playerid][ID] = cache_get_row_int(0,0,connectionHandle);
            Spieler[playerid][pLevel] = cache_get_row_int(0,1,connectionHandle);
            Spieler[playerid][pAdmin] = cache_get_row_int(0,2,connectionHandle);
            Spieler[playerid][pDonateRank] = cache_get_row_int(0,3,connectionHandle);
            Spieler[playerid][pHours] = cache_get_row_int(0,4,connectionHandle);
            Spieler[playerid][pSex] = cache_get_row_int(0,5,connectionHandle);
            Spieler[playerid][pMuted] = cache_get_row_int(0,6,connectionHandle);
            Spieler[playerid][pExp] = cache_get_row_int(0,7,connectionHandle);
            Spieler[playerid][pCash] = cache_get_row_int(0,8,connectionHandle);
            Spieler[playerid][pCrimes] = cache_get_row_int(0,9,connectionHandle);
            Spieler[playerid][pKills] = cache_get_row_int(0,10,connectionHandle);
            Spieler[playerid][pDeaths] = cache_get_row_int(0,11,connectionHandle);
            Spieler[playerid][pArrested] = cache_get_row_int(0,12,connectionHandle);
            Spieler[playerid][pWantedDeaths] = cache_get_row_int(0,13,connectionHandle);
            Spieler[playerid][pPhoneBook] =cache_get_row_int(0,14,connectionHandle);
            Spieler[playerid][pLottoNr] = cache_get_row_int(0,15,connectionHandle);
            Spieler[playerid][pJob] = cache_get_row_int(0,16,connectionHandle);
            Spieler[playerid][pPayCheck] = cache_get_row_int(0,17,connectionHandle);
            Spieler[playerid][pJailed] = cache_get_row_int(0,18,connectionHandle);
            Spieler[playerid][pJailTime] = cache_get_row_int(0,19,connectionHandle);
            Spieler[playerid][pDrugs] = cache_get_row_int(0,20,connectionHandle);
            Spieler[playerid][pFraktion] = cache_get_row_int(0,21,connectionHandle);
            Spieler[playerid][pRank] = cache_get_row_int(0,22,connectionHandle);
            Spieler[playerid][pSkin] = cache_get_row_int(0,23,connectionHandle);
            Spieler[playerid][pCarLic] = cache_get_row_int(0,24,connectionHandle);
            Spieler[playerid][pFlyLic] = cache_get_row_int(0,25,connectionHandle);
            Spieler[playerid][pBoatLic] = cache_get_row_int(0,26,connectionHandle);
            Spieler[playerid][pGunLic] = cache_get_row_int(0,27,connectionHandle);
            Spieler[playerid][pLKWLic] = cache_get_row_int(0,28,connectionHandle);
            Spieler[playerid][pMotoLic] = cache_get_row_int(0,29,connectionHandle);
            Spieler[playerid][pPayDay] = cache_get_row_int(0,30,connectionHandle);
            Spieler[playerid][pTut] = cache_get_row_int(0,31,connectionHandle);
            Spieler[playerid][pWarns] = cache_get_row_int(0,32,connectionHandle);
            Spieler[playerid][pPerso] = cache_get_row_int(0,33,connectionHandle);
            Spieler[playerid][pHandyNr] = cache_get_row_int(0,34,connectionHandle);
            Spieler[playerid][pHandyGeld] = cache_get_row_int(0,35,connectionHandle);
            Spieler[playerid][pTot] = cache_get_row_int(0,36,connectionHandle);
            Spieler[playerid][pBanned] = cache_get_row_int(0,37,connectionHandle);
            Spieler[playerid][pWanteds] = cache_get_row_int(0,38,connectionHandle);
            Spieler[playerid][pBank] = cache_get_row_int(0,39,connectionHandle);
            Spieler[playerid][pJailType] = cache_get_row_int(0,40,connectionHandle);
            Spieler[playerid][pTotTime] = cache_get_row_int(0,41,connectionHandle);
            Spieler[playerid][pTotX] = cache_get_row_float(0,42,connectionHandle);
            Spieler[playerid][pTotY] = cache_get_row_float(0,43,connectionHandle);
            Spieler[playerid][pTotZ] = cache_get_row_float(0,44,connectionHandle);
            Spieler[playerid][pKanister] = cache_get_row_int(0,45,connectionHandle);
            Spieler[playerid][pWaffenteile] = cache_get_row_int(0,46,connectionHandle);
            Spieler[playerid][pSafeTeile] = cache_get_row_int(0,47,connectionHandle);
            Spieler[playerid][pSafeDrogen] = cache_get_row_int(0,48,connectionHandle);
            Spieler[playerid][pSpawnChange] = cache_get_row_int(0,49,connectionHandle);
            Spieler[playerid][pKekse] = cache_get_row_int(0,50,connectionHandle);
            Spieler[playerid][pZigaretten] = cache_get_row_int(0,51,connectionHandle);
            Spieler[playerid][pFrakLohn] = cache_get_row_int(0,52,connectionHandle);
            Spieler[playerid][pTimeBan] = cache_get_row_int(0,53,connectionHandle);
            Spieler[playerid][pMuteTime] = cache_get_row_int(0,54,connectionHandle);
            Spieler[playerid][pAngel] = cache_get_row_int(0,55,connectionHandle);
            Spieler[playerid][pFische] =cache_get_row_int(0,56,connectionHandle);
            Spieler[playerid][pKoeder] = cache_get_row_int(0,57,connectionHandle);
            Spieler[playerid][pMaxFishes] = cache_get_row_int(0,58,connectionHandle);
            Spieler[playerid][pMaxVerloren] = cache_get_row_int(0,59,connectionHandle);
            Spieler[playerid][pFishLic] = cache_get_row_int(0,60,connectionHandle);
            Spieler[playerid][pFPunkte] = cache_get_row_int(0,61,connectionHandle);
            Spieler[playerid][pFBPunkte] = cache_get_row_int(0,62,connectionHandle);
            Spieler[playerid][pFlPunkte] = cache_get_row_int(0,63,connectionHandle);
            Spieler[playerid][pGunPunkte] = cache_get_row_int(0,64,connectionHandle);
            Spieler[playerid][pLKWPunkte] = cache_get_row_int(0,65,connectionHandle);
            Spieler[playerid][pMotoPunkte] = cache_get_row_int(0,66,connectionHandle);
            Spieler[playerid][pMarriage] = cache_get_row_int(0,67,connectionHandle);
            Spieler[playerid][pFrakSperre] = cache_get_row_int(0,68,connectionHandle);
            Spieler[playerid][pHartz4] = cache_get_row_int(0,69,connectionHandle);
            Spieler[playerid][pKFZSteuer] = cache_get_row_int(0,70,connectionHandle);
            Spieler[playerid][pWantedCodes] = cache_get_row_int(0,71,connectionHandle);
            Spieler[playerid][pSafeWantedCodes] = cache_get_row_int(0,72,connectionHandle);
            Spieler[playerid][pStartbonus] = cache_get_row_int(0,73,connectionHandle);
            Spieler[playerid][pHurePoints] = cache_get_row_int(0,74,connectionHandle);
            Spieler[playerid][pDetektivPoints] = cache_get_row_int(0,75,connectionHandle);
            cache_get_row(0,76,Spieler[playerid][pStaat],connectionHandle,30);
            Spieler[playerid][pBankKonto] = cache_get_row_int(0,77,connectionHandle);
            Spieler[playerid][pBankKontoPin] = cache_get_row_int(0,78,connectionHandle);
            Spieler[playerid][pBoeller] = cache_get_row_int(0,79,connectionHandle);
            Spieler[playerid][pRaketen] = cache_get_row_int(0,80,connectionHandle);
            Spieler[playerid][pJobWechsel] = cache_get_row_int(0,81,connectionHandle);
            Spieler[playerid][unixKrankenversicherung] = cache_get_row_int(0,82,connectionHandle);
            Spieler[playerid][pDrogenSamen] = cache_get_row_int(0,83,connectionHandle);
            cache_get_row(0,84,Spieler[playerid][pGeburtstag],connectionHandle,20);
            Spieler[playerid][pSpice] = cache_get_row_int(0,85,connectionHandle);
            Spieler[playerid][pSafeSpice] = cache_get_row_int(0,86,connectionHandle);
            Spieler[playerid][pHandy] = cache_get_row_int(0,87,connectionHandle);
            Spieler[playerid][pFightstyle] = cache_get_row_int(0,88,connectionHandle);
            Spieler[playerid][pBrecheisen] = cache_get_row_int(0,89,connectionHandle);
            Spieler[playerid][punixFSperre] = cache_get_row_int(0,90,connectionHandle);
            Spieler[playerid][punixFBSperre] = cache_get_row_int(0,91,connectionHandle);
            Spieler[playerid][punixFlSperre] = cache_get_row_int(0,92,connectionHandle);
            Spieler[playerid][punixGunSperre] = cache_get_row_int(0,93,connectionHandle);
            Spieler[playerid][punixLKWSperre] = cache_get_row_int(0,94,connectionHandle);
            Spieler[playerid][punixMotoSperre] = cache_get_row_int(0,95,connectionHandle);
            Spieler[playerid][pSSteuer] = cache_get_row_int(0,96,connectionHandle);
            Spieler[playerid][pHelm] = cache_get_row_int(0,97,connectionHandle);
            Spieler[playerid][pExperte] = cache_get_row_int(0,98,connectionHandle);
            Spieler[playerid][pLobe] = cache_get_row_int(0,99,connectionHandle);
            Spieler[playerid][pBMOD] = cache_get_row_int(0,100,connectionHandle);
            Spieler[playerid][pKreditwert] = cache_get_row_int(0,101,connectionHandle);
            Spieler[playerid][pKreditGezahlt] = cache_get_row_int(0,1020,connectionHandle);
            Spieler[playerid][pMP3Player] = cache_get_row_int(0,103,connectionHandle);
            Spieler[playerid][pPremiumCarSlot] = cache_get_row_int(0,104,connectionHandle);
            Spieler[playerid][pSpawnX] = cache_get_row_float(0,105,connectionHandle);
            Spieler[playerid][pSpawnY] = cache_get_row_float(0,106,connectionHandle);
            Spieler[playerid][pSpawnZ] = cache_get_row_float(0,107,connectionHandle);
            Spieler[playerid][pSpawnFace] = cache_get_row_float(0,108,connectionHandle);
            Spieler[playerid][pSpawnInt] = cache_get_row_int(0,109,connectionHandle);
            Spieler[playerid][pSpawnVirtual] = cache_get_row_int(0,110,connectionHandle);
            Spieler[playerid][pKoffer] = !!cache_get_row_int(0,111,connectionHandle);
            Spieler[playerid][pUpgradeWaffenlager] = cache_get_row_int(0,112,connectionHandle);
            Spieler[playerid][pUpgradeSafebox] = cache_get_row_int(0,113,connectionHandle);
            Spieler[playerid][pHausWaffenlager] = cache_get_row_int(0,114,connectionHandle);
            Spieler[playerid][pHausSafeboxSpice] = cache_get_row_int(0,115,connectionHandle);
            Spieler[playerid][pHausSafeboxDrogen] = cache_get_row_int(0,116,connectionHandle);
            Spieler[playerid][pHaustier] = cache_get_row_int(0,117,connectionHandle);
            Spieler[playerid][pHaustierCooldown] = cache_get_row_int(0,118,connectionHandle);
            Spieler[playerid][pHaustierFutter] = cache_get_row_int(0,119,connectionHandle);
            Spieler[playerid][pGunLicB] = cache_get_row_int(0,120,connectionHandle);
            Spieler[playerid][pRadarfallenWarnung] = cache_get_row_int(0,121,connectionHandle);
            Spieler[playerid][pPremiumBizSlot] = cache_get_row_int(0,122,connectionHandle);
            Spieler[playerid][pHouseMieteKey] = cache_get_row_int(0,123,connectionHandle);
            Spieler[playerid][pPrisonRunCount] = cache_get_row_int(0,124,connectionHandle);
            Spieler[playerid][pPrisonRun] = cache_get_row_int(0,125,connectionHandle);
            Spieler[playerid][pZollValid] = cache_get_row_int(0,126,connectionHandle);
            Spieler[playerid][pLawyerPoints] = cache_get_row_int(0,127,connectionHandle);
            Spieler[playerid][pWaffenSperre] = cache_get_row_int(0,128,connectionHandle);
            Spieler[playerid][pKFZVersicherung] = cache_get_row_int(0,129,connectionHandle);
            Spieler[playerid][pTrakLic] = cache_get_row_int(0,130,connectionHandle);
            Spieler[playerid][pCarmALic] = cache_get_row_int(0,131,connectionHandle);
            Spieler[playerid][pKillsGangFight] = cache_get_row_int(0,132,connectionHandle);
            Spieler[playerid][pPremiumNeon] = cache_get_row_int(0,133,connectionHandle);
            Spieler[playerid][pAutomatik] = cache_get_row_int(0,134,connectionHandle);
            Spieler[playerid][pDrogenPoints] = cache_get_row_int(0,135,connectionHandle);
            Spieler[playerid][pWaffenteilePoints] = cache_get_row_int(0,136,connectionHandle);
            cache_get_row(0, 137, Spieler[playerid][pMarriageName], connectionHandle);
            Spieler[playerid][pfrakwarn] = cache_get_row_int(0,138,connectionHandle);
            // Spieler[playerid][pfrakwarn] = cache_get_row_int(0,137,connectionHandle);
            // Spieler[playerid][pdeacc] = cache_get_row_int(0,138,connectionHandle);
            // Spieler[playerid][pschulden] = cache_get_row_int(0,139,connectionHandle);
            // Spieler[playerid][pWeihnachtsday] = cache_get_row_int(0,140,connectionHandle);
            // fahrlehrerboni[playerid] = cache_get_row_int(0,141,connectionHandle);
//          Spieler[playerid][ID] = cache_get_row_int(0,141,connectionHandle);
            //SetTimerEx("schuldenset",500,false,"id",playerid,Spieler[playerid][pschulden]);
            //cache_get_row(0,142,Spieler[playerid][pMarriageName],connectionHandle,32);
            //cache_get_row(0,143,pdeaccadmin[playerid],connectionHandle,32);

            ReadPlayerSQLExtra(playerid,inputtext);
            PlayerSQLExtra(playerid,"");
            //ResetPlayerMoney(playerid);
            SetPlayerFightingStyle(playerid, Spieler[playerid][pFightstyle] );
            SetPlayerScore(playerid, Spieler[playerid][pLevel]);

            //Spieler[playerid][bSpawnAllowed] = true;
            CheckPlayerBiz(playerid);
            CheckPlayerHotel(playerid);
            CheckPlayerTanke(playerid);
            CheckPlayerHouse(playerid);
            CheckPlayerFirma(playerid);

            if(GetPlayerHouse(playerid) == 999 ) {
                // Mögliche Fehler automatisch beheben
                Spieler[playerid][pUpgradeWaffenlager] = 0;
                Spieler[playerid][pUpgradeSafebox] = 0;
                Spieler[playerid][pHausWaffenlager] = 0;
                Spieler[playerid][pHausSafeboxSpice] = 0;
                Spieler[playerid][pHausSafeboxDrogen] = 0;
            }
            if(Spieler[playerid][pBanned] > 0 || Spieler[playerid][pTimeBan] > gettime() )
            {
                // Hat Dauerhaften Ban
                //printf("ShowPlayerBan(%d) via pBanned",playerid);
                ShowPlayerBan(playerid);
                //Kick(playerid);
                return 1;
            }
            if(Spieler[playerid][pWarns] >= 3)
            {
                SendClientMessage(playerid, COLOR_DARKRED, "Du hast 3 oder mehr als 3 Verwarnungen und wurdest automatisch gesperrt!");
                SendClientMessage(playerid, COLOR_DARKRED, "Erstelle ein Thema im Forum wenn einige dieser Verwarnungen zu Unrecht waren.");
                Kick(playerid);
                return 1;
            }
            if(Spieler[playerid][pdeacc]==1)
            {
                new string[200];
                format(string,200,"Dein Account wurde deaktiviert!\nDein Spielaccount %s wurde durch Teammitglied %s deaktiviert. Bitte beantrage im Forum die erneute Aktivierung deines Spieleraccounts.",
                GetName(playerid),pdeaccadmin[playerid]);
                ShowPlayerDialog(playerid,DIALOG_DEAKTACC,DIALOG_STYLE_MSGBOX,"Account deaktiviert",string,"OK","");
            }
            if(Spieler[playerid][pBank] < 0)
            {
                format(String,sizeof(String),"Dein Bankkonto liegt $%s im Rückstand! Du bist verschuldet!", AddDelimiters(Spieler[playerid][pBank]));
                SendClientMessage(playerid, COLOR_DARKRED, String );
            }
            if(Spieler[playerid][pDonateRank] > 0)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Du bist Clubmitglied! Befehle: /Clubhelp");
                SetTimerEx("LoadPremiumWeaponData", 353 ,false,"d",playerid);
            }
            /*
            if(Spieler[playerid][pLevel] < 99)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Am 24. November 2017 ist BLACK FRIDAY SALE");
                SendClientMessage(playerid, COLOR_GREEN, "SERVER: Es sind ALLE Autos, Motorräder, Boote und Flugzeuge um 30 PROZENT reduziert!");
                SendClientMessage(playerid, COLOR_GREEN, "SERVER: und... 20 PROZENT auf ALLE Produkte im LyD-Shop: www.Shop.LyD-Roleplay.de");
            }
            if(Spieler[playerid][pLevel] < 99)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Wir wünschen euch ein frohes neues Jahr 2017!");
                SendClientMessage(playerid, COLOR_GREEN, "SERVER: Vom 03. Januar bis zum 08. Januar 2017 könnt ihr es so richtig krachen lassen.");
                SendClientMessage(playerid, COLOR_GREEN, "Befehl: /Werfboeller, /Leuchtknaller, /Rauchknaller, /Blendknaller");
            }
            if(Spieler[playerid][pLevel] < 99)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Wir wünschen dir eine schöne Weihnachtszeit! Befehl: /Weihnachtsmuetze");
                SendClientMessage(playerid, COLOR_GREEN, "INFO: Sei täglich durchgehend 80 Minuten online und verpasse nicht das heutige Weihnachtsgeschenk.");
                SendClientMessage(playerid, COLOR_GREEN, "Befehl: /Adventsgeschenk");
            }
            if(Spieler[playerid][pLevel] < 99)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "HAPPY HALLOWEEN! - Kleide dich festlich. Befehl: /Hexenhut, /Messerkopf und /Kurbiskopf");
            }
            if(Spieler[playerid][pLevel] < 99)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "| VERKEHRSINFO: Absofort gilt >NUR< in Los Santos die AMPELPFLICHT !!! |");
                SendClientMessage(playerid, COLOR_YELLOW, "| Sprich: Bei ROT muss man anhalten! Fahren über Rot wird mit 7 Strafpunkten geahndet! |");
            }
            if(Spieler[playerid][pLevel] < 99)
            {
                ShowPlayerDialog(playerid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "Live your Dream - Roleplay", "NEUIGKEITEN:\n\nAbsofort gilt im Falle 'sinnlosem Deathmatch'(SDM) eine neue Regelung:\nWer innerhalb 30 Tagen wegen 3 SDM-Fällen
                durch ein Teammitglied bestraft wurde, wird\nwegen '3/3 SDM-Fällen' dauerhaft gesperrt!\nEntbannanträge dürfen anschließend gestellt werden.
                \nGenauere Informationen stehen im Forum!\n\nProjektdaten:\nServer IP: Server.LyD-Roleplay.de\nTeamspeak IP:
                Teamspeak.LyD-Roleplay.de\nForum Adresse: www.LyD-Roleplay.de\n\nSchau täglich in unserem Forum vorbei, um über Neuigkeiten informiert zu sein!", "OK", "");
            }
            if(Spieler[playerid][pLevel] < 99)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Vom 18.07.2017 bis zum 01.08.2017 veranstalten wir ein Entbann- und StatsBack Event.");
                SendClientMessage(playerid, COLOR_GREEN, "Wir möchten unsere Community mit einem StatsBack-Event erweitern und neue Spieler damit anwerben.");
                SendClientMessage(playerid, COLOR_GREEN, "Ebenso haben wir uns überlegt, auch den gebannten Spielern, eine neue Chance zu geben.");
                SendClientMessage(playerid, COLOR_GREEN, "Weitere Informationen stehen im Forum: www.LyD-Roleplay.de");
            }*/
            if(Spieler[playerid][pLevel] == 1)
            {
                SendClientMessage(playerid, COLOR_RED, "SERVER: Mit Level 1 gilst du als NEULING und darfst KEINEN anderen Spieler töten.");
                SendClientMessage(playerid, COLOR_RED, "SERVER: Solltest du einen anderen Spieler als Neuling(Lvl.1) töten, wirst du vom Server-System dauerhaft wegen NEULING-DM gebannt!");
                // SetTimerEx("LoadPremiumWeaponData", 353 ,false,"d",playerid); <- Er kann keine Premium Waffen haben
            }
            if(Spieler[playerid][pJailed] == 3)
            {
                SendClientMessage(playerid, COLOR_RED, "SERVER: Du hast gegen die Server Regeln verstoßen und wurdest deshalb ins Admin-Prison gesperrt!");
                SendClientMessage(playerid, COLOR_RED, "SERVER: Sollte dir der Grund dafür nicht bekannt sein, schaue im User Panel unter www.UCP.LyD-Roleplay.de.");
                SendClientMessage(playerid, COLOR_RED, "SERVER: Eventuell wurde gegen dich eine Beschwerde gestellt. Mit /Jailtime siehst du wann die Strafe abläuft.");
                // SetTimerEx("LoadPremiumWeaponData", 353 ,false,"d",playerid); <- Er kann keine Premium Waffen haben
            }
            if(Spieler[playerid][pAdmin] > 0 && Spieler[playerid][pAdmin] < 7)
            {
                new string[128];
                format(string, sizeof(string), "%s %s hat den Server betreten.", GetPlayerAdminRang(playerid), GetName(playerid));
                SendAdminMessage(COLOR_GREEN, string);
            }

            SetSpawnInfo(playerid, 0,0,0,0,0,0,0,0,0,0,0,0);

            //SetTimerEx("OnPlayerMoneyCheck", 1000, 1, "i", playerid);
            pJC[playerid] = 1;
            pFC[playerid] = 1;
            pBC[playerid] = 1;
            pGC[playerid] = 1;
            pCC[playerid] = 1;

            if( Spieler[playerid][pWarns] ) {
                format(String,sizeof(String),"Du hast %d/3 Admin Verwarnungen! Ab 3 Admin Verwarnungen wirst du dauerhaft gesperrt!",Spieler[playerid][pWarns]);
                SendClientMessage(playerid,COLOR_RED,String);
            }
            GetPlayerIp(playerid,ip,sizeof(ip));
            format(resultline,sizeof(resultline),"%s - %s LOGGED IN",GetName(playerid),ip);
            LoginLog(resultline);

            IsValidSecureCode(playerid);
            // -> THREADED
            LoadPlayerCars(playerid);
            LoadPlayerFriendList(playerid);

            // Beschwerden
            format(String,sizeof(String),"SELECT * FROM `beschwerde` WHERE `player` = '%s' AND `status` != 3",GetName(playerid));
            mysql_pquery(String,THREAD_BESCHWERDEOFFEN,playerid,gWebSQL,MySQLThreadOwner);

            format(String,sizeof(String),"SELECT * FROM `beschwerde` WHERE `defendant` = '%s' AND `status` != 3",GetName(playerid));
            mysql_pquery(String,THREAD_BESCHWERDEGGNMICH,playerid,gWebSQL,MySQLThreadOwner);

            // Offene Erpressungen anzeigen
            new
                bool:bSchutzgeldbezahlen = false;
            if( Spieler[playerid][pPlayerBiz] != 999 ) {
                new
                    frakname[50],
                    bizindex = Spieler[playerid][pPlayerBiz];
                if( Biz[bizindex][bErpresserFraktion] != 0 ) {
                    if( Biz[bizindex][bErpresserState] == 0 ) {
                        ReturnFraktionByID( Biz[bizindex][bErpresserFraktion] , frakname );
                        format(String,sizeof(String),"Dein Biz wird von der %s erpresst! Sie fordern von die Schutzgeld in Höhe von $%s.",frakname, AddDelimiters(Biz[bizindex][bErpresserForderung]));
                        SendClientMessage(playerid,COLOR_RED,String);
                        bSchutzgeldbezahlen = true;
                    }
                }
            }
            if( Spieler[playerid][pPlayerTank] != 999 ) {
                new
                    frakname[50],
                    tankindex = Spieler[playerid][pPlayerTank];
                if( Tanke[tankindex][tErpresserFraktion] != 0 ) {
                    if( Tanke[tankindex][tErpresserState] == 0 ) {
                        ReturnFraktionByID( Tanke[tankindex][tErpresserFraktion] , frakname );
                        format(String,sizeof(String),"Deine Tankstelle wird von der %s erpresst! Sie fordern von die Schutzgeld in Höhe von $%s.",frakname, AddDelimiters(Tanke[tankindex][tErpresserForderung]));
                        SendClientMessage(playerid,COLOR_RED,String);
                        bSchutzgeldbezahlen = true;
                    }
                }
            }
            if( bSchutzgeldbezahlen ) {
                SendClientMessage(playerid,COLOR_ORANGE,"Mit /Schutzgeldbezahlen kannst du die geforderte Summe bezahlen, ansonsten wird dir etwas passieren!");
            }
            if( !IsSecurePassword(inputtext) ) {
                ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
            }
        }
        else
        {
            Spieler[playerid][pLoginVersuch]++;
            format(String,sizeof(String),"Fehllogin: %s - %s ( %d/3 )",GetName(playerid),ip,Spieler[playerid][pLoginVersuch]);
            LoginLog(String);
            if( Spieler[playerid][pLoginVersuch] >= 3 ) {
                SendClientMessage(playerid,COLOR_RED,"Du wurdest aus dem Server gekickt, weil du 3/3 das Passwort falsch eingeben hast! Der Versuch wurde gespeichert!");
                Kick(playerid);
            }
            else {
                format(String,sizeof(String),COLOR_HEX_RED"Das Passwort war nicht korrekt! Versuche: %d/3\n\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nSollte es dein Account sein, dann Logge dich bitte nun ein.\n\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", Spieler[playerid][pLoginVersuch] );
                ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", String , "OK", "Abbrechen");
            }
        }
    }
    else if(resultid == THREAD_BESCHWERDEOFFEN ) {
        if( cache_get_row_count(connectionHandle)  > 0) {
            SendClientMessage(extraid,COLOR_YELLOW,"Du hast vor kurzem eine Beschwerde gestellt. Achte täglich auf den aktuellen Stand deiner Beschwerde!");
        }
    }
    else if(resultid == THREAD_BESCHWERDEGGNMICH ) {
        if( cache_get_row_count(connectionHandle) > 0) {
            SendClientMessage(extraid,COLOR_RED,"Gegen dich liegt eine Beschwerde vor! Unter www.UCP.LyD-Roleplay.de kannst du die Beschwerde gegen dich sehen.");
            ShowPlayerDialog(extraid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "LYD - ROLEPLAY", "Gegen dich wurde eine Beschwerde eingereicht!\nDu wirst beschuldigt, gegen die Server Regeln verstoßen zu haben.\nDu musst zu dieser Beschwerde Stellung nehmen und den weiteren Ablauf täglich beobachten,\nansonsten kann sich das Urteil durch ein Moderatoren negativ gegen dich auswirken!\n\nDie Beschwerdestelle ist unter folgendem Link zu erreichen:\nwww.UCP.LyD-Roleplay.de", "OK", "");
        }
    }
    else if(resultid == THREAD_TECHNIKABTEILUNG ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Notiz wurde im UCP eingetragen");
    }
    else if(resultid == THREAD_AKTENEINTRAG_EXISTS ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                Spielername[MAX_PLAYER_NAME],
                String[128],
                querystring[300];
            GetPVarString(extraid,"Akteneintrag",querystring,sizeof(querystring));
            if(sscanf(querystring,"s[24]s[128]",Spielername,String)) {
                return SendClientMessage(extraid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Akteneintrag [Name] [Nachricht]");
            }
            query[0] = '\0';

            mysql_real_escape_string(Spielername,Spielername,gWebSQL,MAX_PLAYER_NAME);
            mysql_real_escape_string(String,String,gWebSQL,sizeof(String));
            format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",Spielername,GetName(extraid),String);
            mysql_pquery(querystring,THREAD_AKTENEINTRAG,extraid,gWebSQL,MySQLThreadOwner);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Der Spieler existiert nicht");
        }
    }
    else if(resultid == THREAD_AKTENEINTRAG ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Ein Akteneintrag wurde im UCP eingetragen");
    }
    else if(resultid == THREAD_FRAKSPERRE ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Ein Akteneintrag wurde im UCP eingetragen");
    }
    else if(resultid == THREAD_OFFPRISON_EXISTS ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                Spielername[MAX_PLAYER_NAME],
                String[144],
                Grund[128],
                time,
                querystring[300];
            GetPVarString(extraid,"OffPrison",querystring,sizeof(querystring));
            sscanf(querystring,"s[24]is[128]",Spielername,time,Grund);
            format(String,sizeof(String),"[PRISON] %s %s hat Spieler %s für %d Minuten[OFFLINE] ins Prison gesteckt, Grund: %s", GetPlayerAdminRang(extraid), GetName(extraid), Spielername, time, Grund);
            SendAdminMessage(COLOR_YELLOW,String);

            format(querystring,sizeof(querystring),"UPDATE `accounts` SET `Jailed` = 2 , `JailTime` = %d WHERE `Name` = '%s'",time * 60 ,Spielername);
            mysql_pquery(querystring,THREAD_OFFPRISON,extraid,gSQL,MySQLThreadOwner);

            format(String,sizeof(String),"%s wurde von %s %s für %d Minuten ins Admin-Prison gesteckt, Grund: %s", Spielername, GetPlayerAdminRang(extraid), GetName(extraid), time, Grund);
            format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",Spielername,GetName(extraid),String);
            mysql_pquery(querystring,THREAD_AKTENEINTRAG,extraid,gWebSQL,MySQLThreadOwner);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Der Spieler existiert nicht");
        }
    }
    else if( resultid == THREAD_OFFPRISON ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Der Spieler wurde OFFLINE ins Prison gesteckt");
    }
    else if( resultid == THREAD_LOADPLAYERCARS ) {
        new
            playerid = extraid,
            x,
            rows = cache_get_row_count(connectionHandle);
        if( rows ) {
            while( x < rows ) {
                PlayerCar[playerid][x][Id] = cache_get_row_int(x,0,connectionHandle);
                cache_get_row(x,1,PlayerCar[playerid][x][CarOwner],connectionHandle,MAX_PLAYER_NAME);
                PlayerCar[playerid][x][CarModel] = cache_get_row_int(x,2,connectionHandle);
                PlayerCar[playerid][x][CarPos_x] = cache_get_row_float(x,3,connectionHandle);
                PlayerCar[playerid][x][CarPos_y] = cache_get_row_float(x,4,connectionHandle);
                PlayerCar[playerid][x][CarPos_z] = cache_get_row_float(x,5,connectionHandle);
                PlayerCar[playerid][x][CarRotate] = cache_get_row_float(x,6,connectionHandle);
                PlayerCar[playerid][x][CarNitro] = cache_get_row_int(x,7,connectionHandle);
                PlayerCar[playerid][x][CarHyd] = cache_get_row_int(x,8,connectionHandle);
                PlayerCar[playerid][x][CarWheel] = cache_get_row_int(x,9,connectionHandle);
                PlayerCar[playerid][x][CarAusp] = cache_get_row_int(x,10,connectionHandle);
                PlayerCar[playerid][x][CarSideL] = cache_get_row_int(x,11,connectionHandle);
                PlayerCar[playerid][x][CarSideR] = cache_get_row_int(x,12,connectionHandle);
                PlayerCar[playerid][x][CarFB] = cache_get_row_int(x,13,connectionHandle);
                PlayerCar[playerid][x][CarRB] = cache_get_row_int(x,14,connectionHandle);
                PlayerCar[playerid][x][CarSpoiler] = cache_get_row_int(x,15,connectionHandle);
                PlayerCar[playerid][x][CarRoof] = cache_get_row_int(x,16,connectionHandle);
                PlayerCar[playerid][x][CarHood] = cache_get_row_int(x,17,connectionHandle);
                PlayerCar[playerid][x][CarVents] = cache_get_row_int(x,18,connectionHandle);
                PlayerCar[playerid][x][CarLamps] = cache_get_row_int(x,19,connectionHandle);
                PlayerCar[playerid][x][CarPJ] = cache_get_row_int(x,20,connectionHandle);
                PlayerCar[playerid][x][CarC1] = cache_get_row_int(x,21,connectionHandle);
                PlayerCar[playerid][x][CarC2] = cache_get_row_int(x,22,connectionHandle);
                PlayerCar[playerid][x][CarPreis] = cache_get_row_int(x,23,connectionHandle);
                PlayerCar[playerid][x][CarTank] = cache_get_row_int(x,24,connectionHandle);
                PlayerCar[playerid][x][CarState] = cache_get_row_int(x,25,connectionHandle);
                PlayerCar[playerid][x][CarNeon1] = cache_get_row_int(x,26,connectionHandle);
                PlayerCar[playerid][x][CarNeon2] = cache_get_row_int(x,27,connectionHandle);
                PlayerCar[playerid][x][isSpecialTuned] = cache_get_row_int(x,28,connectionHandle);
                cache_get_row(x,29,PlayerCar[playerid][x][CarNumberplate],connectionHandle,32);
                if( isnull(PlayerCar[playerid][x][CarNumberplate]))  {
                    format(PlayerCar[playerid][x][CarNumberplate] ,32, KEIN_KENNZEICHEN );
                }
                PlayerCar[playerid][x][CarPeilsender]  = cache_get_row_int(x,30,connectionHandle);
                PlayerCar[playerid][x][CarDistance] = cache_get_row_int(x,31,connectionHandle);
                PlayerCar[playerid][x][TUV]  = cache_get_row_int(x,32,connectionHandle);
                PlayerCarSpawn(playerid,x);
                // printf("distance %d meter",distance);
                x++;
            }
        }
    }
    else if (resultid == THREAD_NAMECHANGE) {
        new oldName[MAX_PLAYER_NAME], newName[MAX_PLAYER_NAME];
        GetPVarString(extraid, "NAMECHANGE.OLDNAME", oldName, sizeof(oldName));
        GetPVarString(extraid, "NAMECHANGE.NEWNAME", newName, sizeof(newName));

        for (new i; i < sizeof(g_Firma); i++) {
            if (!strcmp(g_Firma[i][F_sBesitzer], oldName, true)) {
                format(g_Firma[i][F_sBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Firma umgeschrieben.");
            }
        }

        for (new i; i < sizeof(Biz); i++) {
            if (!strcmp(Biz[i][bBesitzer], oldName, true)) {
                format(Biz[i][bBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}BIZ umgeschrieben.");
            }
        }

        for (new i; i < sizeof(Tanke); i++) {
            if (!strcmp(Tanke[i][tBesitzer], oldName, true)) {
                format(Tanke[i][tBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Tankstelle umgeschrieben.");
                break;
            }
        }

        for (new i; i < sizeof(Haus); i++) {
            if (!strcmp(Haus[i][hBesitzer], oldName, true)) {
                format(Haus[i][hBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Haus umgeschrieben.");
                break;
            }
        }

        for (new i; i < sizeof(Hotel); i++) {
            if (!strcmp(Hotel[i][hBesitzer], oldName, true)) {
                format(Hotel[i][hBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Hotel umgeschrieben.");
                break;
            }
        }

        for (new i; i < g_iWerbebanner; i++) {
            if (!strcmp(g_Werbebanner[i][W_sOwner], oldName, true)) {
                format(g_Werbebanner[i][W_sOwner], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Werbetafel umgeschrieben.");
                new String[128];
                format(String, sizeof(String), "Besitzer der Werbetafel:\n{FFFFFF}%s", g_Werbebanner[i][W_sOwner]);
                UpdateDynamic3DTextLabelText(g_Werbebanner[i][W_t3dLabel], 0x28C0D6FF, String);
                SaveWerbebannerEx(i);
                break;
            }
        }

        for (new j; j <= GetPlayerPoolSize(); j++) {
            for (new i; i < MAX_FRIEND_LIST; i++) {
                if (isnull(g_FriendList[j][i][FL_sSpieler])) continue;
                if (!strcmp(g_FriendList[j][i][FL_sSpieler], oldName, true)) {
                    format(g_FriendList[j][i][FL_sSpieler], MAX_PLAYER_NAME, newName);
                    break;
                }
            }
        }

        new pID;
        sscanf(oldName, "k<playername>", pID);
        if (pID != INVALID_PLAYER_ID) SetPlayerName(pID, newName);

        DeletePVar(extraid, "NAMECHANGE.OLDNAME");
        DeletePVar(extraid, "NAMECHANGE.NEWNAME");

        SendClientMessage(extraid, COLOR_GREEN, "[NAMECHANGE] {FFFFFF}Der Spielername wurde erfolgreich geändert.");
        new message[128];
        format(message, sizeof(message), "[NAMECHANGE] {FFFFFF}%s heißt nun %s!", oldName, newName);
        return SendClientMessageToAll(COLOR_GREEN, message);
    }
    else if (resultid == THREAD_CHECKNAMECHANGE_NEWNAME) {
        if (!cache_get_row_count(connectionHandle)) {
            new string[128], oldName[MAX_PLAYER_NAME], newName[MAX_PLAYER_NAME];
            GetPVarString(extraid, "NAMECHANGE.OLDNAME", oldName, sizeof(oldName));
            GetPVarString(extraid, "NAMECHANGE.NEWNAME", newName, sizeof(newName));
            if (isnull(newName)) return 1;
            format(string, sizeof(string), "UPDATE `accounts` SET `Name` = '%s' WHERE `Name` = '%s'", newName, oldName, newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `playercar` SET `owner` = '%s' WHERE `owner` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `friendlist` SET `Spieler` = '%s' WHERE `Spieler` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `friendlist` SET `SpielerEx` = '%s' WHERE `SpielerEx` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `firma` SET `besitzer` = '%s' WHERE `besitzer` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `houses` SET `Besitzer` = '%s' WHERE `Besitzer` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `tanken` SET `Besitzer` = '%s' WHERE `Besitzer` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `teamspeak` SET `Name` = '%s' WHERE `Name` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `frakblacklist` SET `name` = '%s' WHERE `name` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `bizes` SET `Besitzer` = '%s' WHERE `Besitzer` = '%s'", newName, oldName);
            mysql_pquery(string, THREAD_NAMECHANGE, extraid, gSQL, MySQLThreadOwner);
            // format(string,sizeof(string),"UPDATE `akte` SET `spieler` = '%s' WHERE `spieler` = '%s'", newName, oldName);
            // mysql_tquery(gWebSQL,string);
            // format(string,sizeof(string),"UPDATE `beschwerde` SET `player` = '%s' WHERE `player` = '%s'", newName, oldName);
            // mysql_tquery(gWebSQL,string);
            // format(string,sizeof(string),"UPDATE `beschwerdeantwort` SET `author` = '%s' WHERE `author` = '%s'", newName, oldName);
            // mysql_tquery(gWebSQL,string);
            // format(string,sizeof(string),"UPDATE `ticket` SET `player` = '%s' WHERE `player` = '%s'", newName, oldName);
            // mysql_tquery(gWebSQL,string);
            // format(string,sizeof(string),"UPDATE `ticketantwort` SET `author` = '%s' WHERE `author` = '%s'", newName, oldName);
            // mysql_tquery(gWebSQL,string);
        }
        else {
            DeletePVar(extraid, "NAMECHANGE.OLDNAME");
            DeletePVar(extraid, "NAMECHANGE.NEWNAME");
            return SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der neue Spielername existiert bereits.");
        }
    }
    else if (resultid == THREAD_CHECKNAMECHANGE_OLDNAME) {
        if (cache_get_row_count(connectionHandle)) {
            new string[128], newName[MAX_PLAYER_NAME];
            GetPVarString(extraid, "NAMECHANGE.NEWNAME", newName, sizeof(newName));
            if (isnull(newName)) return 1;
            format(string, sizeof(string), "SELECT * FROM `accounts` WHERE `Name` = '%s'", newName);
            mysql_pquery(string, THREAD_CHECKNAMECHANGE_NEWNAME, extraid, gSQL, MySQLThreadOwner);
        }
        else {
            DeletePVar(extraid, "NAMECHANGE.OLDNAME");
            DeletePVar(extraid, "NAMECHANGE.NEWNAME");
            return SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der alte Spielername existiert nicht.");
        }
    }
    else if( resultid == THREAD_CHECKACCOUNT ) {
        new
            playerid = extraid;
        if( cache_get_row_count(connectionHandle) ) {
            ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"Live your Dream - Roleplay\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nSollte es dein Account sein, dann Logge dich bitte nun ein.\n \n"COLOR_HEX_GREEN"Bitte halte dein Passwort immer für dich!\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", "OK", "Abbrechen");
            Spieler[playerid][bAccountExists] = true;

            Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerLoginTimeout",30011,false,"d",playerid);
            Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",5003,false,"dd",playerid,1); // Muss,sonst klappt Spectate nicht
        }
        else {
            if(g_bRegSperre) {
                static String[] = "\
                                Wir begrüßen dich ganz Herzlich auf Live your Dream!\n\
                                Aus aktuellem Anlass ist eine Registrierung gerade nicht möglich.\n\
                                Schau doch einfach später nochmal vorbei!\n\n\
                                Wir bitten vielmals um Verständnis!\n\n\
                                Forum Adresse: www.LyD-Roleplay.de\n\
                                Teamspeak: Teamspeak.LyD-Roleplay.de\n\
                                User Panel: www.UCP.LyD-Roleplay.de\n\
                                E-Mail: Admin@LyD-Roleplay.de";
                ShowPlayerDialog(playerid, DIALOG_REGSPERRE, DIALOG_STYLE_MSGBOX, "{FF0000}Registrationssperre" , String, "Disconnect","");
                Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerRegsperreKick",10011,false,"d",playerid);
            }
            else {
                new
                    String[512],
                    header[128];
                strcat(String,COLOR_HEX_WHITE"Wir begrüßen dich ganz Herzlich auf Live your Dream!\n\n",sizeof(String));
                strcat(String,"Um dein virtuelles Traumleben näher zu kommen, musst du als erstes ein Spieleraccount anlegen.\n",sizeof(String));
                strcat(String,"Bei deiner Registration wirst du Dir auch eine kurze Einführung von unserem Server anschauen\n",sizeof(String));
                strcat(String,"dass nur ca. 2 Minuten dauern wird.\n",sizeof(String));
                strcat(String,"Wir bitten dich kurz die Zeit zu nehmen, damit du dich gut zurecht finden kannst bei uns!\n\n",sizeof(String));
                strcat(String,"Um ein Spieleraccount anzulegen, drücke bitte auf 'Erstellen' ",sizeof(String));
                format(header,sizeof(header),COLOR_HEX_LIGHTBLUE "Der Spielername %s ist noch frei!",GetName(playerid));
                ShowPlayerDialog(playerid, DIALOG_REG_STEP_1, DIALOG_STYLE_MSGBOX, header , String, "Erstellen", "Ablehnen");
                Spieler[playerid][bAccountExists] = false;
            }
        }
    }
    else if( resultid == THREAD_CHECKNAME ) {

    }
    else if( resultid == THREAD_CREATEACCOUNT ) {

    }

    else if( resultid == THREAD_TANKESAVE ) {

    }
    else if( resultid == THREAD_HOUSESAVE ) {

    }
    else if( resultid == THREAD_ANGELSAVE ) {
    }
    else if( resultid == THREAD_BIZSAVE ) {

    }
    else if( resultid == THREAD_TANKELOADID ) {
        new
            tStr[512];
        if( cache_get_row_count(connectionHandle) ) {
            Tanke[iTanke][tID] = cache_get_row_int(0,0,connectionHandle);
            Tanke[iTanke][EnterX] = cache_get_row_float(0,1,connectionHandle);
            Tanke[iTanke][EnterY] = cache_get_row_float(0,2,connectionHandle);
            Tanke[iTanke][EnterZ] = cache_get_row_float(0,3,connectionHandle);
            cache_get_row(0,4,Tanke[iTanke][tBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(0,5,Tanke[iTanke][tName],connectionHandle,32);
            Tanke[iTanke][tFillCost] = cache_get_row_int(0,6,connectionHandle);
            Tanke[iTanke][tKasse] = cache_get_row_int(0,7,connectionHandle);
            Tanke[iTanke][tBenzin] = cache_get_row_int(0,8,connectionHandle);
            Tanke[iTanke][tMaxBenzin] = cache_get_row_int(0,9,connectionHandle);
            Tanke[iTanke][tPreis] = cache_get_row_int(0,10,connectionHandle);
            Tanke[iTanke][taiFillCost][0] = cache_get_row_int(0,11,connectionHandle);
            Tanke[iTanke][taiFillCost][1] = cache_get_row_int(0,12,connectionHandle);
            Tanke[iTanke][taiFillCost][2] = cache_get_row_int(0,13,connectionHandle);

            Tanke[iTanke][tVideoueberwachung] = !!cache_get_row_int(0,14,connectionHandle);
            Tanke[iTanke][tAutomatischerNotruf] = !!cache_get_row_int(0,15,connectionHandle);
            Tanke[iTanke][tErpresserFraktion] = cache_get_row_int(0,16,connectionHandle);
            Tanke[iTanke][tErpresserForderung] = cache_get_row_int(0,17,connectionHandle);
            Tanke[iTanke][tErpresserState] = cache_get_row_int(0,18,connectionHandle);

            if(strcmp(Tanke[iTanke][tBesitzer], "Niemand", true) == 0)
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Diese Tankstelle ist zu verkaufen\n{6DC0F4}Preis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Tankekaufen ein", Tanke[iTanke][tName], AddDelimiters(Tanke[iTanke][tPreis]));
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1272, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            else
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Besitzer: {FFFFFF}%s\n{6DC0F4}Benzin: {FFFFFF}$%d, {6DC0F4}Super: {FFFFFF}$%d, {6DC0F4}Diesel: {FFFFFF}$%d\n{6DC0F4}Kraftstoffmenge: {FFFFFF}%d/%d\n\n{E0E5E7}Betanken mit: /Tanken\nBesuche den Tankshop mit /Tankshop", Tanke[iTanke][tName], Tanke[iTanke][tBesitzer], Tanke[iTanke][taiFillCost][0], Tanke[iTanke][taiFillCost][1], Tanke[iTanke][taiFillCost][2], Tanke[iTanke][tBenzin], Tanke[iTanke][tMaxBenzin]);
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1650, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            Tanke[iTanke][tRobberID] = INVALID_PLAYER_ID;
            iTanke++;
        }
    }
    else if( resultid == THREAD_TANKELOAD ) {
        new
            tStr[512],
            row,
            rows = cache_get_row_count(connectionHandle);
        while( row < rows ) {
            if( iTanke >= MAX_TANKEN ) {
                break;
            }

            Tanke[iTanke][tID] = cache_get_row_int(row,0,connectionHandle);
            Tanke[iTanke][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Tanke[iTanke][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Tanke[iTanke][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            cache_get_row(row,4,Tanke[iTanke][tBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,5,Tanke[iTanke][tName],connectionHandle,32);
            Tanke[iTanke][tFillCost] = cache_get_row_int(row,6,connectionHandle);
            Tanke[iTanke][tKasse] = cache_get_row_int(row,7,connectionHandle);
            Tanke[iTanke][tBenzin] = cache_get_row_int(row,8,connectionHandle);
            Tanke[iTanke][tMaxBenzin] = cache_get_row_int(row,9,connectionHandle);
            Tanke[iTanke][tPreis] = cache_get_row_int(row,10,connectionHandle);
            Tanke[iTanke][taiFillCost][0] = cache_get_row_int(row,11,connectionHandle);
            Tanke[iTanke][taiFillCost][1] = cache_get_row_int(row,12,connectionHandle);
            Tanke[iTanke][taiFillCost][2] = cache_get_row_int(row,13,connectionHandle);

            Tanke[iTanke][tVideoueberwachung] = !!cache_get_row_int(row,14,connectionHandle);
            Tanke[iTanke][tAutomatischerNotruf] = !!cache_get_row_int(row,15,connectionHandle);
            Tanke[iTanke][tErpresserFraktion] = cache_get_row_int(row,16,connectionHandle);
            Tanke[iTanke][tErpresserForderung] = cache_get_row_int(row,17,connectionHandle);
            Tanke[iTanke][tErpresserState] = cache_get_row_int(row,18,connectionHandle);

            if(strcmp(Tanke[iTanke][tBesitzer], "Niemand", true) == 0)
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Diese Tankstelle ist zu verkaufen\n{6DC0F4}Preis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Tankekaufen ein", Tanke[iTanke][tName], AddDelimiters(Tanke[iTanke][tPreis]));
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1272, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            else
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Besitzer: {FFFFFF}%s\n{6DC0F4}Benzin: {FFFFFF}$%d, {6DC0F4}Super: {FFFFFF}$%d, {6DC0F4}Diesel: {FFFFFF}$%d\n{6DC0F4}Kraftstoffmenge: {FFFFFF}%d/%d\n\n{E0E5E7}Betanken mit: /Tanken\nBesuche den Tankshop mit /Tankshop", Tanke[iTanke][tName], Tanke[iTanke][tBesitzer], Tanke[iTanke][taiFillCost][0], Tanke[iTanke][taiFillCost][1], Tanke[iTanke][taiFillCost][2], Tanke[iTanke][tBenzin], Tanke[iTanke][tMaxBenzin]);
                // format(tStr, sizeof(tStr), "%s\n\nBesitzer: %s\nBenzin-Preis: %d$\nBenzin: %d/%d", Tanke[iTanke][tName], Tanke[iTanke][tBesitzer], Tanke[iTanke][tFillCost], Tanke[iTanke][tBenzin], Tanke[iTanke][tMaxBenzin]);
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1650, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            Tanke[iTanke][tRobberID] = INVALID_PLAYER_ID;
            iTanke++;
            row++;
        }
    }
    else if( resultid == THREAD_ANGELLOADID ) {
        new
            aStr[256];
        if( cache_get_row_count(connectionHandle) ) {
            Angel[iAngel][aID] = cache_get_row_int(0,0,connectionHandle);
            Angel[iAngel][PosX] = cache_get_row_float(0,1,connectionHandle);
            Angel[iAngel][PosY] = cache_get_row_float(0,2,connectionHandle);
            Angel[iAngel][PosZ] = cache_get_row_float(0,3,connectionHandle);
            Angel[iAngel][Fische] = cache_get_row_int(0,4,connectionHandle);
            Angel[iAngel][FacingAngle] = cache_get_row_int(0,5,connectionHandle);

            format(aStr, sizeof(aStr), COLOR_HEX_BLUE"--> Angelplatz <--\n"COLOR_HEX_WHITE"Fische: %d/%d\nTippe "COLOR_HEX_BLUE"/Angeln "COLOR_HEX_WHITE"zum angeln", Angel[iAngel][Fische], MAX_FISCHE_PRO_PLATZ);
            Angel[iAngel][aPickup] = CreateDynamicPickup(1239, 1, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 0);
            Angel[iAngel][aText] = CreateDynamic3DTextLabel(aStr, COLOR_PROP, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 3, .worldid = 0);
            iAngel++;
        }
    }
    else if( resultid == THREAD_ANGELLOAD ) {
        new
            aStr[256],
            row,
            rows = cache_get_row_count(connectionHandle);
        while( row < rows  ) {
            if( iAngel >= MAX_APLATZ ) {
                break;
            }

            Angel[iAngel][aID] = cache_get_row_int(row,0,connectionHandle);
            Angel[iAngel][PosX] = cache_get_row_float(row,1,connectionHandle);
            Angel[iAngel][PosY] = cache_get_row_float(row,2,connectionHandle);
            Angel[iAngel][PosZ] = cache_get_row_float(row,3,connectionHandle);
            Angel[iAngel][Fische] = cache_get_row_int(row,4,connectionHandle);
            Angel[iAngel][FacingAngle] = cache_get_row_int(row,5,connectionHandle);

            format(aStr, sizeof(aStr), COLOR_HEX_BLUE"--> Angelplatz <--\n"COLOR_HEX_WHITE"Fische: %d/%d\nTippe "COLOR_HEX_BLUE"/Angeln "COLOR_HEX_WHITE"zum angeln", Angel[iAngel][Fische], MAX_FISCHE_PRO_PLATZ);
            Angel[iAngel][aPickup] = CreateDynamicPickup(1239, 1, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 0);
            Angel[iAngel][aText] = CreateDynamic3DTextLabel(aStr, COLOR_PROP, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 3,.worldid = 0);
            iAngel++;
            row++;
        }
    }
    else if(resultid == THREAD_HOUSEINTERIORLOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle);
        while( row < rows ) {
            g_HouseInterior[g_iHouseInteriors][HI_iID] = cache_get_row_int(row,0,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fExitX] = cache_get_row_float(row,1,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fExitY] = cache_get_row_float(row,2,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fExitZ] = cache_get_row_float(row,3,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_iInterior] = cache_get_row_int(row,4,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fPickupX] = cache_get_row_float(row,5,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fPickupY] = cache_get_row_float(row,6,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fPickupZ] = cache_get_row_float(row,7,connectionHandle);

            g_HouseInterior[g_iHouseInteriors][HI_iUpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[g_iHouseInteriors][HI_fPickupX] , g_HouseInterior[g_iHouseInteriors][HI_fPickupY] , g_HouseInterior[g_iHouseInteriors][HI_fPickupZ] ,.interiorid = g_HouseInterior[g_iHouseInteriors][HI_iInterior] );
            CreateDynamic3DTextLabel(COLOR_HEX_BLUE "[Hausupgrade]\n" COLOR_HEX_WHITE "Tippe /Hausupgrade", COLOR_WHITE, g_HouseInterior[g_iHouseInteriors][HI_fPickupX], g_HouseInterior[g_iHouseInteriors][HI_fPickupY], g_HouseInterior[g_iHouseInteriors][HI_fPickupZ], .drawdistance = 15.0, .testlos = 1, .interiorid = g_HouseInterior[g_iHouseInteriors][HI_iInterior]);
            g_iHouseInteriors++;
            row++;
        }
        // Jetzt sind Häuser bereit! Also los gehts
        HouseLoad();
        Hausmoebel_Init();
    }
    else if( resultid == THREAD_HOUSELOADID ) {
        new
            //index,
            hStr[512];
        if( cache_get_row_count(connectionHandle) ) {

            Haus[iHaus][hID] = cache_get_row_int(0,0,connectionHandle);
            Haus[iHaus][EnterX] = cache_get_row_float(0,1,connectionHandle);
            Haus[iHaus][EnterY] = cache_get_row_float(0,2,connectionHandle);
            Haus[iHaus][EnterZ] = cache_get_row_float(0,3,connectionHandle);
            cache_get_row(0,4,Haus[iHaus][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(0,5,Haus[iHaus][hName],connectionHandle,32);
            Haus[iHaus][hPreis] = cache_get_row_int(0,6,connectionHandle);
            Haus[iHaus][hMieten] = cache_get_row_int(0,7,connectionHandle);
            Haus[iHaus][hLock] = cache_get_row_int(0,8,connectionHandle);
            Haus[iHaus][hMietPreis] = cache_get_row_int(0,9,connectionHandle);
            Haus[iHaus][hKasse] = cache_get_row_int(0,10,connectionHandle);
            Haus[iHaus][SellX] = cache_get_row_float(0,11,connectionHandle);
            Haus[iHaus][SellY] = cache_get_row_float(0,12,connectionHandle);
            Haus[iHaus][SellZ] = cache_get_row_float(0,13,connectionHandle);
            Haus[iHaus][SellRot] = cache_get_row_float(0,14,connectionHandle);
            Haus[iHaus][HouseInteriorID] = cache_get_row_int(0,15,connectionHandle);
            Haus[iHaus][hMieterMax] = cache_get_row_int(0,16,connectionHandle);

            /*
            if(  Haus[iHaus][SellX] == 0.0 &&
                Haus[iHaus][SellY] == 0.0 &&
                Haus[iHaus][SellZ] == 0.0 &&
                Haus[iHaus][SellRot] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Schildposition definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            if(  Haus[iHaus][PickupX] == 0.0 &&
                Haus[iHaus][PickupY] == 0.0 &&
                Haus[iHaus][PickupZ] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Hausupgrade Position definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            */
            if(strcmp(Haus[iHaus][hBesitzer], "Niemand", true) == 0)
            {
                format(hStr, sizeof(hStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{62E36D}Hausnummer: {FFFFFF}%d\n{62E36D}Dieses Haus ist zu verkaufen\n{62E36D}Preis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Hauskaufen ein", Haus[iHaus][hName], Haus[iHaus][hID], AddDelimiters(Haus[iHaus][hPreis]));
                Haus[iHaus][hPickup] = CreateDynamicPickup(1273, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8,.worldid = 0);
                CreateHouseSellObject(iHaus);
            }
            else
            {
                Haus[iHaus][SellObjectID] = INVALID_OBJECT_ID;
                if(Haus[iHaus][hMieten] == 0)
                {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FF4137}%s {FFFFFF}]\n{FF4137}Hausnummer: {FFFFFF}%d\n{FF4137}Besitzer: {FFFFFF}%s", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19522, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8,.worldid = 0);
                }
                else if(Haus[iHaus][hMieten] == 1)
                {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FFCB2B}%s {FFFFFF}]\n{FFCB2B}Hausnummer: {FFFFFF}%d\n{FFCB2B}Dieses Haus ist zu vermieten\nBesitzer: {FFFFFF}%s\n{FFCB2B}Miet-Preis: {FFFFFF}$%s\n{FFCB2B}Mieter: {FFFFFF}(%d/%d)\n\n{E0E5E7}Zum Mieten tippe /Hausmieten ein", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer], AddDelimiters(Haus[iHaus][hMietPreis]), Haus[iHaus][hMieterAnzahl], Haus[iHaus][hMieterMax]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19523, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8,.worldid = 0);
                }
            }
            //index = GetHouseInteriorIndexByID( Haus[iHaus][HouseInteriorID] );
            //Haus[iHaus][UpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[index][HI_fPickupX] , g_HouseInterior[index][HI_fPickupY] , g_HouseInterior[index][HI_fPickupZ] , iHaus , g_HouseInterior[index][HI_iInterior]);
            //printf("Haus[iHaus][UpgradePickup] = %d",Haus[iHaus][UpgradePickup]);
            g_HouseInterior[g_iHouseInteriors][HI_iUpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[g_iHouseInteriors][HI_fPickupX] , g_HouseInterior[g_iHouseInteriors][HI_fPickupY] , g_HouseInterior[g_iHouseInteriors][HI_fPickupZ] ,.interiorid = g_HouseInterior[g_iHouseInteriors][HI_iInterior] );
            if( Haus[iHaus][HouseInteriorID] == 0 ) {
                printf("HausID %d mit ungültigem HouseInterior %d",Haus[iHaus][hID],Haus[iHaus][HouseInteriorID]);
            }
            iHaus++;
        }
    }
    else if( resultid == THREAD_HOUSELOADMIETER ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            index,
            houseid,
            anzahl;
        while( row < rows ) {
            houseid = cache_get_row_int(row,0,connectionHandle);
            anzahl = cache_get_row_int(row,1,connectionHandle);

            index = GetHouseIndexByID(houseid);
            if( index != 999 ) {
                Haus[index][hMieterAnzahl] = anzahl;
            }
            row++;
        }
    }
    else if( resultid == THREAD_HOUSELOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            //index,
            hStr[256];
        while( row < rows ) {
            if( iHaus >= MAX_HOUSES ) {
                break;
            }

            Haus[iHaus][hID] = cache_get_row_int(row,0,connectionHandle);
            Haus[iHaus][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Haus[iHaus][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Haus[iHaus][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            cache_get_row(row,4,Haus[iHaus][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,5,Haus[iHaus][hName],connectionHandle,32);
            Haus[iHaus][hPreis] = cache_get_row_int(row,6,connectionHandle);
            Haus[iHaus][hMieten] = cache_get_row_int(row,7,connectionHandle);
            Haus[iHaus][hLock] = cache_get_row_int(row,8,connectionHandle);
            Haus[iHaus][hMietPreis] = cache_get_row_int(row,9,connectionHandle);
            Haus[iHaus][hKasse] = cache_get_row_int(row,10,connectionHandle);
            Haus[iHaus][SellX] = cache_get_row_float(row,11,connectionHandle);
            Haus[iHaus][SellY] = cache_get_row_float(row,12,connectionHandle);
            Haus[iHaus][SellZ] = cache_get_row_float(row,13,connectionHandle);
            Haus[iHaus][SellRot] = cache_get_row_float(row,14,connectionHandle);
            Haus[iHaus][HouseInteriorID] = cache_get_row_int(row,15,connectionHandle);
            Haus[iHaus][hMieterMax] = cache_get_row_int(row,16,connectionHandle);

            /*
            if(  Haus[iHaus][SellX] == 0.0 &&
                Haus[iHaus][SellY] == 0.0 &&
                Haus[iHaus][SellZ] == 0.0 &&
                Haus[iHaus][SellRot] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Schildposition definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            if(  Haus[iHaus][PickupX] == 0.0 &&
                Haus[iHaus][PickupY] == 0.0 &&
                Haus[iHaus][PickupZ] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Hausupgrade Position definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            */
            if(strcmp(Haus[iHaus][hBesitzer], "Niemand", true) == 0)
            {
                format(hStr, sizeof(hStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{62E36D}Hausnummer: {FFFFFF}%d\n{62E36D}Dieses Haus ist zu verkaufen\n{62E36D}Preis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Hauskaufen ein", Haus[iHaus][hName], Haus[iHaus][hID], AddDelimiters(Haus[iHaus][hPreis]));
                Haus[iHaus][hPickup] = CreateDynamicPickup(1273, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8, .worldid = 0);
                CreateHouseSellObject(iHaus);
            }
            else
            {
                Haus[iHaus][SellObjectID] = INVALID_OBJECT_ID;
                if(Haus[iHaus][hMieten] == 0)
                {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FF4137}%s {FFFFFF}]\n{FF4137}Hausnummer: {FFFFFF}%d\n{FF4137}Besitzer: {FFFFFF}%s", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19522, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8, .worldid = 0);
                }
                else if(Haus[iHaus][hMieten] == 1)
                {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FFCB2B}%s {FFFFFF}]\n{FFCB2B}Hausnummer: {FFFFFF}%d\n{FFCB2B}Dieses Haus ist zu vermieten\nBesitzer: {FFFFFF}%s\n{FFCB2B}Miet-Preis: {FFFFFF}$%s\n{FFCB2B}Mieter: {FFFFFF}(%d/%d)\n\n{E0E5E7}Zum Mieten tippe /Hausmieten ein", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer], AddDelimiters(Haus[iHaus][hMietPreis]), Haus[iHaus][hMieterAnzahl], Haus[iHaus][hMieterMax]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19523, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8, .worldid = 0);
                }
            }
            //index = GetHouseInteriorIndexByID( Haus[iHaus][HouseInteriorID] );
            //Haus[iHaus][UpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[index][HI_fPickupX] , g_HouseInterior[index][HI_fPickupY] , g_HouseInterior[index][HI_fPickupZ] , iHaus , g_HouseInterior[index][HI_iInterior]);
            //printf("Haus[iHaus][UpgradePickup] = %d",Haus[iHaus][UpgradePickup]);
            //printf("SellObjectID %d",Haus[iHaus][SellObjectID]);
            if( Haus[iHaus][HouseInteriorID] == 0 ) {
                printf("HausID %d mit ungültigem HouseInterior %d",Haus[iHaus][hID],Haus[iHaus][HouseInteriorID]);
            }
            row++;
            iHaus++;
        }
        mysql_oquery("SELECT `HouseMieteKey`, COUNT(*) FROM `accounts` WHERE `HouseMieteKey` != 0 GROUP BY `HouseMieteKey`",THREAD_HOUSELOADMIETER,INVALID_PLAYER_ID,gSQL);
    }
    else if( resultid == THREAD_CONVERTUNIX ) {
        new
            datum[64],
            string[256],
            parameter[128];

        cache_get_row(0,0,datum,connectionHandle);

        ReadPlayerSQLExtra(extraid,parameter);
        new pID, grund[64], time, string1[128];
        sscanf(parameter, "uis[64]", pID, time, grund);
        new tBanTime = time * 60;
        tBanTime = tBanTime + gettime();
        Spieler[pID][pTimeBan] = tBanTime;
        mysql_real_escape_string(grund,grund);

        printf("User %s time banned - %s", GetName(pID), datum );
        format(string, sizeof(string), "[BANNED]: Spieler %s wurde von %s %s für %d Minuten gebannt, Grund: %s", GetName(pID), GetPlayerAdminRang(extraid), GetName(extraid), time, grund);
        SendAdminMessage(COLOR_RED, string);
        format(string, sizeof(string), "[BANNED]: Sie wurden von %s %s für %d Minuten gebannt, Grund: %s", GetPlayerAdminRang(extraid), GetName(extraid), time, grund);
        SendClientMessage(pID, COLOR_RED, string);
        format(string1, sizeof(string1), "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf www.LyD-Roleplay.de ein Entbannantrag!");
        SendClientMessage(pID, COLOR_RED, string1);

        format(string,sizeof(string),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' ,`TimeBan` = %d WHERE `Name` = '%s'",
            GetName(extraid),grund,tBanTime,GetName(pID));
        mysql_pquery(string,THREAD_TBAN,pID,gSQL,MySQLThreadOwner);

        format(string,sizeof(string),"Gebannt: %s von: %s, Grund: %s, Dauer: %s",GetName(pID),GetName(extraid),grund, datum );
        BanLog( string );

        format(string,sizeof(string),"%s wurde von %s %s für %d Minuten vom Server gebannt, Grund: %s", GetName(pID), GetPlayerAdminRang(extraid), GetName(extraid), time, grund);
        SendUCPAktenEintrag( extraid, GetName(extraid) , GetName(pID) , string );

        //Kick(pID);
    }
    else if( resultid == THREAD_SCHEIDEN ) {

    }
    else if( resultid == THREAD_CHECKSCHEIDEN ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            String[128],
            name[MAX_PLAYER_NAME],
            playerid = extraid,
            giveid = INVALID_PLAYER_ID;
        while( row < rows ) {
            cache_get_row(row,0,name,connectionHandle);
            giveid = cache_get_row_int(row,1,connectionHandle);

            row++;
            format(String,sizeof(String),"UPDATE `accounts` SET `Marriage` = %d WHERE `ID` IN(%d,%d)", INVALID_MARRIAGE , giveid ,Spieler[playerid][ID]);
        }
        format(String,sizeof(String),"Du hast dich von deinem (Ex)-Partner %s Scheiden lassen. (Kosten: $%s)", name , AddDelimiters(PREIS_SCHEIDUNG));
        SendClientMessage(playerid, COLOR_WHITE, String );

        Spieler[playerid][pMarriage] = INVALID_MARRIAGE;
        format(Spieler[playerid][pMarriageName],MAX_PLAYER_NAME,"Niemand");
        GivePlayerCash(playerid,-PREIS_SCHEIDUNG);

        format(String,sizeof(String),"[HOCHZEITSMELDUNG] "#COLOR_HEX_RED"%s und %s sind nicht mehr Verheiratet. %s hat die Scheidung eingereicht!",GetName(playerid), name ,GetName(playerid));
        SendClientMessageToAll(COLOR_BLUE,String);

    }
    else if( resultid == THREAD_ENTBANNEN ) {

    }
    else if( resultid == THREAD_ENTBANNEN_IP ) {
        new
            String[128],
            ip[16];
        cache_get_field_content(0,"ipadresse",ip,connectionHandle);
        if( strcmp(ip,"0.0.0.0") != 0 || strcmp(ip,"NULL") != 0 ) {
            format(String,sizeof(String),"IP Adresse %s entsperrt",ip);
            SendClientMessage(extraid,COLOR_GREEN,String);
            format(String,sizeof(String),"unbanip %s",ip);
            SendRconCommand(String);
            SendRconCommand("reloadbans");
        }
    }
    else if( resultid == THREAD_LOADFRAKTIONSSAFEBOX ) {
        new
            rows,
            row,
            i,
            id,
            spice,
            drugs,
            waffenteile;
        rows = cache_get_row_count(connectionHandle);
        while( row < rows ) {
            id = cache_get_field_content_int(row,"fraktionsid",connectionHandle);
            drugs = cache_get_field_content_int(row, "drogen",connectionHandle);
            waffenteile = cache_get_field_content_int(row, "waffenteile",connectionHandle);
            spice = cache_get_field_content_int(row, "spice",connectionHandle);
            row++;
            /*
            if(sscanf(resultline,"p<|>dddd",id,drugs,waffenteile,spice)) {
                printf("Fehler bei SSCANF @ LoadFraktionsSafeBox");
            }
            */
            if( ( id >= sizeof(g_FraktionsSafeBox) ) || ( id < 0 ) ) {
                continue;
            }
            g_FraktionsSafeBox[id][FSB_iDrogen] = drugs;
            g_FraktionsSafeBox[id][FSB_iWaffenteile] = waffenteile;
            g_FraktionsSafeBox[id][FSB_iSpice] = spice;
            i++;
        }
        return 1;
    }
    else if( resultid == THREAD_ISNUMBERPLATEFREE ) {
        if(cache_get_row_count(connectionHandle)) {
            SendClientMessage(extraid, COLOR_GREY, "Dieses Kennzeichen ist bereits belegt");
        }
        else {
            new
                giveid,
                slot,
                kennzeichen[32],
                parameter[128],
                String[128];
            ReadPlayerSQLExtra(extraid,parameter);
            sscanf(parameter,"uds[32]",giveid,slot,kennzeichen);

            format( g_KFZZulassung[giveid][slot] , 32 , "%s",kennzeichen);

            format(String,sizeof(String),"Stadtamt Mitarbeiter %s stellt Ihnen eine KFZ-Zulassung aus! Amtlicheskennzeichen: %s ( Fahrzeug: %d )",GetName(extraid),kennzeichen,slot);
            SendClientMessage(giveid,COLOR_YELLOW,String);
            SendClientMessage(giveid,COLOR_BLUE,"Dein Kennzeichen ist an Ihrem Fahrzeug angebracht!");

            format(String,sizeof(String),"Du bietest %s folgendes Kennzeichen an: %s ( Fahrzeug: %d )",GetName(giveid),kennzeichen,slot);
            SendClientMessage(extraid,COLOR_WHITE,String);
        }
        return 1;
    }
    else if( resultid == THREAD_SHOWPLAYERBAN ) {
        new
            banned,
            //timeban,
            unixtimeban[28],
            gebanntvon[MAX_PLAYER_NAME],
            bangrund[128];
        if( cache_get_row_count(connectionHandle) ) {

            banned = cache_get_row_int(0,0,connectionHandle);
            //timeban = cache_get_row_int(0,1,connectionHandle);
            cache_get_row(0,2,unixtimeban,connectionHandle);
            cache_get_row(0,3,gebanntvon,connectionHandle);
            cache_get_row(0,4,bangrund,connectionHandle);

            if( banned == 1 ) {
                unixtimeban = "Immer";
            }
            if( isnull(gebanntvon) ) {
                gebanntvon = "Unbekannt";
            }
            if( isnull(bangrund) ) {
                bangrund = "Unbekannt";
            }
            new
                String[500];
            format(String,sizeof(String),"Ihr Spieler-Account wurde gesperrt!\n\nAufgrund eines Regelverstoßes wurde Ihr Spieleraccount gesperrt!\nSollte dies ein Fehlban sein, schreiben Sie ein Entbannantrag im Forum www.LyD-Roleplay.de\nDie Daten des Banns:\nDauer: %s\nGrund: %s\nVon: %s",
                unixtimeban,bangrund,gebanntvon);
            ShowPlayerDialog(extraid,0,DIALOG_STYLE_MSGBOX,"Sie wurden Gesperrt",String,"Exit","");
        }
        KickDelay(extraid);
    }
    else if( resultid == THREAD_OFFBANNEN ) {

    }
    else if( resultid == THREAD_OAFKICK ) {

    }
    else if( resultid == THREAD_OFFVERWARNEN ) {

    }
    else if( resultid == THREAD_HASHPASSWORDS_FINISHED ) {
        printf("Alle %d Passwörter verschlüsselt",extraid);
    }
    else if( resultid == THREAD_HASHPASSWORDS ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            rndstring[33],
            sql[256],
            resultline[32];
        if( rows ) {
            printf("%d Passwörter zum Hashen gefunden",  cache_get_row_count(connectionHandle) );
            while( row < rows  ) {
                cache_get_row(row,0,resultline,connectionHandle);

                randomString( rndstring );
                format(sql,sizeof(sql),"UPDATE `accounts` SET `Passwort` = SHA2( CONCAT(`Passwort`,'%s'),256 ) ,`SaltKey` = '%s' WHERE `Name` = '%s'",rndstring,rndstring,resultline);
                mysql_oquery(sql,THREAD_HASHPASSWORDS_VOID,INVALID_PLAYER_ID,gSQL);
                row++;
            }
            mysql_oquery("SELECT NOW()",THREAD_HASHPASSWORDS_FINISHED,cache_get_row_count(connectionHandle),gSQL);
        }
        else {
            printf("Keine Passwörter zum Hashen gefunden");
        }
    }
    else if( resultid == THREAD_COLLECTUNUSEDACCOUNT ) {
        new
            rows = cache_get_row_count(connectionHandle),
            string[180],
            result[64];
        if( rows ) {
            new
                row;
            format(string,sizeof(string),"Führe die Löschung von %d Accounts durch",cache_get_row_count(connectionHandle));
            print(string);
            RemoveAccountLog(string);
            while( row < rows ) {
                cache_get_field_content(row,"Name",result,connectionHandle);
                // Spieler die UNUSED_WEAKS nicht Online waren,werden von allen Immobilien entfernt

                // accounts ( wirklich Account löschen ? )
                format(string,sizeof(string),"DELETE FROM `accounts` WHERE `Name` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEACCOUNT,INVALID_PLAYER_ID,gSQL);
                new b,pfad[64];
                for(;b<50;b++)
                {
                    format(pfad,64,"./scriptfiles/Briefe/%s/Abgesendete Briefe/Brief%i.txt",result,b);
                    if(fexist(pfad))
                    {
                        fremove(pfad);
                    }
                }
                format(pfad,64,"./scriptfiles/Briefe/%s/Abgesendete Briefe",result);
                if(dir_exists(pfad))
                {
                    dir_delete(pfad);
                }
                for(b=0;b<50;b++)
                {
                    format(pfad,64,"./scriptfiles/Briefe/%s/Empfangene Briefe/Brief%i.txt",result,b);
                    if(fexist(pfad))
                    {
                        fremove(pfad);
                    }
                }
                format(pfad,64,"./scriptfiles/Briefe/%s/Empfangene Briefe",result);
                if(dir_exists(pfad))
                {
                    dir_delete(pfad);
                }
                // bizes
                format(string,sizeof(string),"UPDATE `bizes` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEBIZOWNER,INVALID_PLAYER_ID,gSQL);
                // houses
                format(string,sizeof(string),"UPDATE `houses` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEHOUSEOWNER,INVALID_PLAYER_ID,gSQL);
                // hotel
                format(string,sizeof(string),"UPDATE `hotel` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEHOTELOWNER,INVALID_PLAYER_ID,gSQL);
                // playercar ( wirklich Account-Fahrzeuge löschen ? )
                format(string,sizeof(string),"DELETE FROM `playercar` WHERE `owner` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEPLAYERCAR,INVALID_PLAYER_ID,gSQL);
                // tanken
                format(string,sizeof(string),"UPDATE `tanken` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETETANKEOWNER,INVALID_PLAYER_ID,gSQL);

                format(string,sizeof(string),"Spieler %s ist seit %d Wochen nicht auf dem Server gewesen ( Daten gelöscht / entfernt )", result , UNUSED_WEAKS );
                //print(string);
                RemoveAccountLog(string);
                row++;
            }
            mysql_oquery("OPTIMIZE TABLE `accounts`",THREAD_DUMMY,INVALID_PLAYER_ID,gSQL);
            mysql_oquery("SELECT NOW()",THREAD_FINISHEDCOLLECTING,cache_get_row_count(connectionHandle),gSQL);
        }
        else {
            print("Keine Benutzer müssen gelöscht werden");
        }
    }
    else if( resultid == THREAD_DELETEACCOUNT ) {
    }
    else if( resultid == THREAD_DELETEBIZOWNER ) {
    }
    else if( resultid == THREAD_DELETEHOUSEOWNER ) {
    }
    else if( resultid == THREAD_DELETEHOTELOWNER ) {
    }
    else if( resultid == THREAD_DELETEPLAYERCAR ) {
    }
    else if( resultid == THREAD_DELETETANKEOWNER ) {
    }
    else if( resultid == THREAD_ISBLACKLISTED ) {

    }
    else if( resultid == THREAD_HWBAN ) {
        if( cache_get_row_count(connectionHandle) > 0 ) {
            ShowPlayerDialog(extraid,DIALOG_DUMMY,DIALOG_STYLE_MSGBOX,COLOR_HEX_LIGHTBLUE "Ban","Du wirst auf dem Server nicht toleriert!\n\
                Du wurdest aufgrund eines Regelverstoßes aus dem Live your Dream - Roleplay Projekt\n\
                dauerhaft gesperrt! Wegen deinem Regelverstoß wirst du auf dem Server nicht mehr tolertiert.\n\n\
                Sollte die dauerhafte Sperrung deiner Meinung nach nicht gerechtfertig sein,\n\
                schreibe einen Entbannantrag im Forum unter www.LyD-Roleplay.de","Exit","");
            KickDelay(extraid);
        }
    }
    else if( resultid == THREAD_HWBAN_CONNECT ) {
        if( cache_get_row_count(connectionHandle) == 0 ) {
            new
                String[128];
            format(String,sizeof(String),"SELECT * FROM `blacklist` WHERE `Name` = '%s'", GetName(extraid) );
            mysql_pquery(String,THREAD_ISBLACKLISTED_CONNECT,extraid,gSQL,MySQLThreadOwner);
        }
        else {
            ShowPlayerDialog(extraid,DIALOG_DUMMY,DIALOG_STYLE_MSGBOX,COLOR_HEX_LIGHTBLUE "Ban","Du wirst auf dem Server nicht toleriert!\n\
                Du wurdest aufgrund eines Regelverstoßes aus dem Live your Dream - Roleplay Projekt\n\
                dauerhaft gesperrt! Wegen deinem Regelverstoß wirst du auf dem Server nicht mehr tolertiert.\n\n\
                Sollte die dauerhafte Sperrung deiner Meinung nach nicht gerechtfertig sein,\n\
                schreibe einen Entbannantrag im Forum unter www.LyD-Roleplay.de","Exit","");
            KickDelay(extraid);
        }
    }
    else if( resultid == THREAD_ANGEWORBEN ) {
        new
            parameter[128],
            String[128];
        ReadPlayerSQLExtra(extraid,parameter);
        if( cache_get_row_count(connectionHandle) ) {
            format(String,sizeof(String),"Spieler %s hat angegeben,dass er/sie von %s angeworben wurde",GetName(extraid),parameter);
            GeworbenLog(String);
            ShowPlayerDialog(extraid,DIALOG_SECURECODE_REGISTER,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            format(String,sizeof(String),"Du hast angegeben, dass du vom Benutzer %s angeworben wurdest",parameter);
            SendClientMessage(extraid,COLOR_GREEN,String);
        }
        else {
            format(String,sizeof(String),"Der eingegebene Benutzer '%s' existiert nicht",parameter);
            SendClientMessage(extraid,COLOR_RED,String);
            ShowPlayerDialog(extraid,DIALOG_REG_STEP_7,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Geworben von:", COLOR_HEX_WHITE"Falls du von einem Spieler angeworben wurdest,\nkannst du diesen unten Eintragen.\n\nSolltest du nicht angeworben worden sein,kannst du die Eingabe Überspringen","Bestätigen","Überspringen");
        }
    }
    else if( resultid == THREAD_HWBAN_INSERT ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Der Ban wurde eingetragen!");
    }
    else if( resultid == THREAD_FINISHEDCOLLECTING ) {
        new
            String[80];
        format(String,sizeof(String),"%d Benutzer vollständig entfernt",extraid);
        RemoveAccountLog(String);
    }
    else if( resultid == THREAD_ISBLACKLISTED_CONNECT ) {
        if( cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_RED,"Dieser Spielername wird auf diesem Server nicht toleriert! Nenne dich um!");
            SetTimerEx("KickEx",1873,false,"d",extraid);
        }
        else {
            IsIPBan(extraid);
            // -> THREADED auf mysql_CheckAccount(extraid);
        }
    }
    else if( resultid == THREAD_ADDBLACKLISTNAME ) {

    }
    else if( resultid == THREAD_SAVEFRAKTIONSSAFEBOX ) {

    }
    else if( resultid == THREAD_LEADER ) {
        new
            name[MAX_PLAYER_NAME],
            frakid,
            fraktion[50],
            giveid,
            status[20],

            row,
            rows = cache_get_row_count(connectionHandle),
            String[920];
        String = COLOR_HEX_WHITE;
        while( row < rows ) {

            cache_get_row(row,0,name,connectionHandle);
            frakid = cache_get_row_int(row,1,connectionHandle);

            sscanf(name,"u",giveid);
            if( IsPlayerConnected(giveid) ) {
                status = ""#COLOR_HEX_GREEN"Online";
            }
            else {
                status = ""#COLOR_HEX_RED"Offline";
            }
            ReturnFraktionByID( frakid , fraktion );
            format(String,sizeof(String),"%s%s - %s ( %s"#COLOR_HEX_WHITE")\n",String,name,fraktion,status);
            row++;
        }
        ShowPlayerDialog(extraid,DIALOG_LEADER_LIST,DIALOG_STYLE_MSGBOX,"Leader-Übersicht",String,"Ok","");
    }
    else if(resultid == THREAD_FRAKBLACKLIST ) {
        new
            resultline[64],
            String[128],
            row,
            rows = cache_get_row_count(connectionHandle),
            i = 1;
        while( row < rows ) {
            cache_get_field_content(row,"name",resultline,connectionHandle);
            if( i == 1 ) {
                SendClientMessage(extraid,COLOR_BLUE,"========BLACKLIST========");
            }
            format(String,sizeof(String),"%d. %s",i,resultline);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            i++;
            row++;
        }
    }
    else if(resultid == THREAD_FRAKBLACKLISTLABEL)
    {
        new fID;
        new i,rows = cache_get_row_count(connectionHandle);
        for(;i<rows;i++)
        {
            UpdateDynamic3DTextLabelText( Spieler[extraid][pBlacklistLabel], 0xFF0000FF," ");
            fID = cache_get_field_content_int(i,"fraktion", connectionHandle);
            new visibleto[MAX_PLAYERS] =INVALID_PLAYER_ID;
            new c;
            for(; c < MAX_PLAYERS ; c++)
            {
                if( IsPlayerConnected(c) )
                {
                    if(Spieler[c][pFraktion]==fID)
                    {
                        visibleto[extraid] = c;
                    }
                }
            }
            for(new b;b<MAX_PLAYERS;b++)
            {
                if(IsPlayerConnected(b))
                {
                    Streamer_RemoveArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[extraid][pBlacklistLabel] , E_STREAMER_PLAYER_ID ,b);
                    if(fID!=0&&Spieler[b][pFraktion]==fID)
                    {
                        for(new v = 0 ; v < MAX_PLAYERS ; v++)
                        {
                            if( visibleto[v] != INVALID_PLAYER_ID)
                            {
                                Streamer_AppendArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[extraid][pBlacklistLabel] , E_STREAMER_PLAYER_ID , visibleto[v] );
                                UpdateDynamic3DTextLabelText( Spieler[extraid][pBlacklistLabel], 0xFF0000FF,"> BLACKLIST <");
                            }
                        }
                    }
                }
            }
        }
    }
    else if(resultid == THREAD_ADDFRAKBLACKLIST_COUNT ) {
        if( cache_get_row_count() >= 8 ) {
            SendClientMessage(extraid,COLOR_RED,"Die Fraktionsblacklist ist bereits voll! (8/8)");
        }
        else
        {
            new
                extra[24];
            ReadPlayerSQLExtra(extraid,extra);
            new queryb[2000];
            format(queryb,sizeof(queryb),"SELECT * FROM `accounts` WHERE `Name` = '%s'",extra);
            mysql_pquery(queryb , THREAD_FRAKBLACKLISTCHECK , extraid, gSQL,MySQLThreadOwner);
        }
    }
    else if(resultid == THREAD_ADDFRAKBLACKLIST ) {
    }
    else if(resultid == THREAD_DELFRAKBLACKLIST_COUNT ) {
        if( !cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_RED,"Der Spieler befindet sich nicht auf der Fraktions-Blacklist");
        }
        else {
            new
                extra[24],
                String[128];
            ReadPlayerSQLExtra(extraid,extra);
            format(String,sizeof(String),"DELETE FROM `frakblacklist` WHERE `name` = '%s' AND `fraktion` = %d",extra,Spieler[extraid][pFraktion]);
            mysql_pquery(String,THREAD_DELFRAKBLACKLIST,extraid,gSQL,MySQLThreadOwner);
            format(String,sizeof(String),"Spieler %s wurde von der Fraktions-Blacklist gelöscht",extra);
            SendClientMessage(extraid,COLOR_WHITE,String);
        }
    }
    else if(resultid == THREAD_DELFRAKBLACKLIST ) {
    }
    else if(resultid == THREAD_LOADWAFFENLAGER ) {
        new
            rows = cache_get_row_count(connectionHandle),
            i;
        while( i < rows ) {

            g_WaffenLager[i][WL_iFraktion] = cache_get_field_content_int( i,"fraktion",connectionHandle);
            g_WaffenLager[i][WL_fX] = cache_get_field_content_float(i,"x",connectionHandle);
            g_WaffenLager[i][WL_fY] = cache_get_field_content_float(i,"y",connectionHandle);
            g_WaffenLager[i][WL_fZ] =  cache_get_field_content_float( i,"z",connectionHandle);
            g_WaffenLager[i][WL_iWaffenTeile] = cache_get_field_content_int(i,"waffenteile",connectionHandle);
            /*
            if(sscanf(resultline,"p<|>dfffd",fraktion,x,y,z,waffenteile)) {
                printf("ERROR @ THREAD_LOADWAFFENLAGER");
            }
            g_WaffenLager[i][WL_iFraktion] = fraktion;
            g_WaffenLager[i][WL_fX] = x;
            g_WaffenLager[i][WL_fY] = y;
            g_WaffenLager[i][WL_fZ] = z;
            g_WaffenLager[i][WL_iWaffenTeile] = waffenteile;
            */
            i++;
        }
        g_iWaffenLager = i;
    }
    else if(resultid == THREAD_LOADFIRMA) {
        new
            i,
            rows = cache_get_row_count(connectionHandle);
        while( i < rows ) {

            g_Firma[i][F_iID] = cache_get_row_int(i,0,connectionHandle);
            g_Firma[i][F_iJobID] = cache_get_row_int(i,1,connectionHandle);
            cache_get_row(i,2,g_Firma[i][F_sBezeichnung],connectionHandle,32);
            cache_get_row(i,3,g_Firma[i][F_sBesitzer],connectionHandle,MAX_PLAYER_NAME);
            g_Firma[i][F_iKasse] = cache_get_row_int(i,4,connectionHandle);
            g_Firma[i][F_iGehalt] = cache_get_row_int(i,5,connectionHandle);

            i++;
        }
    }
    else if(resultid == THREAD_LOADINFOS ) {
        new
            //resultline[200],
            row,
            rows = cache_get_row_count(connectionHandle),
            kassenbestand,
            fraktion[20];
        while( row < rows ) {
            cache_get_field_content(row,"Info",fraktion,connectionHandle);
            kassenbestand = cache_get_field_content_int(row,"Bestand",connectionHandle);

            if(!strcmp(fraktion,"Lager")) {
                lagerbestand = kassenbestand;
            }
            else if(!strcmp(fraktion,"StaatsKasse")) {
                Kasse[Staat] = kassenbestand;
            }
            else if(!strcmp(fraktion,"SAMDKasse")) {
                Kasse[Samd] = kassenbestand;
            }
            else if(!strcmp(fraktion,"SANAKasse")) {
                Kasse[Sana] = kassenbestand;
            }
            else if(!strcmp(fraktion,"OAMTKasse")) {
                Kasse[Oamt] = kassenbestand;
            }
            else if(!strcmp(fraktion,"GSKasse")) {
                Kasse[Grove] = kassenbestand;
            }
            else if(!strcmp(fraktion,"BALLASKasse")) {
                Kasse[Ballas] = kassenbestand;
            }
            else if(!strcmp(fraktion,"SchulKasse")) {
                Kasse[Fahrschule] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Yakuza")) {
                Kasse[Yakuza] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Aztecas")) {
                Kasse[Aztecas] = kassenbestand;
            }
            else if(!strcmp(fraktion,"LCN")) {
                Kasse[LCN] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Vagos")) {
                Kasse[Vagos] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Lotto")) {
                Lottostand = kassenbestand;
            }
            else if(!strcmp(fraktion,"Hitman")) {
                Kasse[Hitman] = kassenbestand;
            }
            else if(!strcmp(fraktion,"BBikerZ")) {
                Kasse[BBikerZ] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Wheelmenk")) {
                Kasse[Wheelmenk] = kassenbestand;
            }
            else if(!strcmp(fraktion,"TerrorK")) {
                Kasse[TerrorK] = kassenbestand;
            }
            else if(!strcmp(fraktion,"OutlawzK")) {
                Kasse[OutlawzK] = kassenbestand;
            }
            else if(!strcmp(fraktion,"ndgradethaK")) {
                Kasse[ndgradethaK] = kassenbestand;
            }
            else {
                printf("Keine Kasse definiert für %s mit %d$",fraktion,kassenbestand);
            }
            row++;
        }
        UpdateInfos();
    }
    else if(resultid == THREAD_BIZLOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            i = 1;
        while( row < rows ) {

            Biz[i][bID] = cache_get_row_int(row,0,connectionHandle);
            Biz[i][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Biz[i][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Biz[i][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            Biz[i][ExitX] = cache_get_row_float(row,4,connectionHandle);
            Biz[i][ExitY] = cache_get_row_float(row,5,connectionHandle);
            Biz[i][ExitZ] = cache_get_row_float(row,6,connectionHandle);
            cache_get_row(row,7,Biz[i][bBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,8,Biz[i][bName],connectionHandle,32);
            Biz[i][bPreis] = cache_get_row_int(row,9,connectionHandle);
            Biz[i][bLock] = cache_get_row_int(row,10,connectionHandle);
            Biz[i][bInterior] = cache_get_row_int(row,11,connectionHandle);
            Biz[i][bKasse] = cache_get_row_int(row,12,connectionHandle);
            Biz[i][bEintritt] = cache_get_row_int(row,13,connectionHandle);
            Biz[i][bWaren] = cache_get_row_int(row,14,connectionHandle);
            Biz[i][bMaxWaren] = cache_get_row_int(row,15,connectionHandle);
            Biz[i][bWarenPreis] = cache_get_row_int(row,16,connectionHandle);
            Biz[i][bLadenAuf] = cache_get_row_int(row,17,connectionHandle);
            Biz[i][bLadenZu] = cache_get_row_int(row,18,connectionHandle);
            Biz[i][bErpresserFraktion] = cache_get_row_int(row,19,connectionHandle);
            Biz[i][bErpresserForderung] = cache_get_row_int(row,20,connectionHandle);
            Biz[i][bErpresserState] = cache_get_row_int(row,21,connectionHandle);

            new bStr[512];
            if(strcmp(Biz[i][bBesitzer], "Niemand", true) == 0)
            {
                format(bStr, sizeof(bStr), "{FFFFFF}[ {FFB732}%s {FFFFFF}]\n{FFB732}Dieses Geschäft ist zu verkaufen\n{FFB732}Preis: {FFFFFF}$%s\n{FFB732}Öffnungszeiten: {FFFFFF}%d Uhr bis %d Uhr\n\n{E0E5E7}Zum Kaufen tippe /Bizkaufen ein", Biz[i][bName], AddDelimiters(Biz[i][bPreis]),Biz[i][bLadenAuf],Biz[i][bLadenZu]);
                Biz[i][bPickup] = CreateDynamicPickup(1318, 1, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 0);
                Biz[i][bText] = CreateDynamic3DTextLabel(bStr, COLOR_PROP, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 8, .worldid = 0);
            }
            else
            {
                format(bStr, sizeof(bStr), "{FFFFFF}[ {FFB732}%s {FFFFFF}]\n{FFB732}Besitzer: {FFFFFF}%s\n{FFB732}Eintritt: {FFFFFF}$%s\n{FFB732}Warenstand: {FFFFFF}%d/%d\n{FFB732}Öffnungszeiten: {FFFFFF}%d Uhr bis %d Uhr", Biz[i][bName], Biz[i][bBesitzer], AddDelimiters(Biz[i][bEintritt]), Biz[i][bWaren], Biz[i][bMaxWaren],Biz[i][bLadenAuf],Biz[i][bLadenZu]);
                Biz[i][bPickup] = CreateDynamicPickup(1318, 1, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 0);
                Biz[i][bText] = CreateDynamic3DTextLabel(bStr, COLOR_PROP, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 8, .worldid = 0);
            }
            row++;
            i++;
        }
        CasinoBiz_Index = GetBizIndexByID(51);
        HandyShopBiz_Index = GetBizIndexByID(52);
        StromBiz_Index = GetBizIndexByID(5);
        Robbing_Init();
    }
    else if(resultid == THREAD_STATICBIZLOAD) {
        new
            rows = cache_get_row_count(connectionHandle),
            i = 0;
        while( i < rows ) {
            StaticBiz[i][SBD_iID] = cache_get_row_int(i,0,connectionHandle);
            StaticBiz[i][SBD_iTyp] = cache_get_row_int(i,1,connectionHandle);
            StaticBiz[i][SBD_iWaren] = cache_get_row_int(i,2,connectionHandle);
            StaticBiz[i][SBD_fX] = cache_get_row_float(i,3,connectionHandle);
            StaticBiz[i][SBD_fY] = cache_get_row_float(i,4,connectionHandle);
            StaticBiz[i][SBD_fZ] = cache_get_row_float(i,4,connectionHandle);

            StaticBiz[i][SBD_t3dLabel] = CreateDynamic3DTextLabel("Loading...", COLOR_BLUE, StaticBiz[i][SBD_fX],StaticBiz[i][SBD_fY],StaticBiz[i][SBD_fZ], 15);
            i++;
        }
    }
    else if(resultid == THREAD_ISVALIDGEBURTSTAG ) {
        if( cache_get_row_count() ) {
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen noch dein Geburtsdatum!");
            ShowPlayerDialog(extraid,DIALOG_GEBURTSTAG,DIALOG_STYLE_INPUT,"Geburtstag",COLOR_HEX_WHITE "Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
        }
        else {
            IsValidVornameDB(extraid);
        }
    }
    else if(resultid == THREAD_ISVALIDVORNAME) {
        if( cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen noch deinen Vornamen!");
            ShowPlayerDialog(extraid,DIALOG_VORNAME,DIALOG_STYLE_INPUT,"Vorname",COLOR_HEX_WHITE "Gib deinen Vornamen an.\n\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich\nder Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
        }
        else {
            IsValidEmailDB(extraid);
        }
    }
    else if(resultid == THREAD_ISVALIDEMAIL) {
        if( cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen noch deine E-Mail Adresse!");
            ShowPlayerDialog(extraid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"E-Mail",COLOR_HEX_WHITE "Gib deine E-Mail Adresse an.\n\nDeine E-Mail Adresse wird nicht öffentlich angezeigt,\nsondern dient lediglich der Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
        }
        else {
            TogglePlayerSpectating(extraid,false);
            SpawnPlayerEx(extraid);
            SetCameraBehindPlayer(extraid);
        }
    }
    else if(resultid == THREAD_WERBEBANNER ) {
        new
            rows = cache_get_row_count(connectionHandle),
            i = 0;
        while( i < rows ) {
            g_Werbebanner[i][W_iID] = cache_get_row_int(i,0,connectionHandle);
            g_Werbebanner[i][W_fX] = cache_get_row_float(i,1,connectionHandle);
            g_Werbebanner[i][W_fY] = cache_get_row_float(i,2,connectionHandle);
            g_Werbebanner[i][W_fZ] = cache_get_row_float(i,3,connectionHandle);
            g_Werbebanner[i][W_iModelID] = cache_get_row_int(i,4,connectionHandle);
            g_Werbebanner[i][W_fObjX] = cache_get_row_float(i,5,connectionHandle);
            g_Werbebanner[i][W_fObjY] = cache_get_row_float(i,6,connectionHandle);
            g_Werbebanner[i][W_fObjZ] = cache_get_row_float(i,7,connectionHandle);
            g_Werbebanner[i][W_fObjRotX] = cache_get_row_float(i,8,connectionHandle);
            g_Werbebanner[i][W_fObjRotY] = cache_get_row_float(i,9,connectionHandle);
            g_Werbebanner[i][W_fObjRotZ] = cache_get_row_float(i,10,connectionHandle);
            cache_get_row(i,11,g_Werbebanner[i][W_sText],connectionHandle,256);
            g_Werbebanner[i][W_iMaterialIndex] = cache_get_row_int(i,12,connectionHandle);
            g_Werbebanner[i][W_iMaterialSize] = cache_get_row_int(i,13,connectionHandle);
            cache_get_row(i,14,g_Werbebanner[i][W_iFontFace],connectionHandle,32);
            g_Werbebanner[i][W_iFontSize] = cache_get_row_int(i,15,connectionHandle);
            g_Werbebanner[i][W_iBold] = cache_get_row_int(i,16,connectionHandle);
            g_Werbebanner[i][W_iFontColor] = cache_get_row_int(i,17,connectionHandle);
            g_Werbebanner[i][W_iBackColor] = cache_get_row_int(i,18,connectionHandle);
            g_Werbebanner[i][W_iTextAlignment] = cache_get_row_int(i,19,connectionHandle);
            g_Werbebanner[i][W_unixBought] = cache_get_row_int(i,20,connectionHandle);
            cache_get_row(i,21,g_Werbebanner[i][W_sOwner],connectionHandle,MAX_PLAYER_NAME);

            AddWerbebanner(i);
            i++;
        }
        g_iWerbebanner = i;
    }
    else if(resultid == THREAD_HOTELLOADID ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            hStr[256];
        while( row < rows ) {
            if( iHotel >= MAX_HOTELS ) {
                break;
            }
            Hotel[iHotel][hID] = cache_get_row_int(row,0,connectionHandle);
            Hotel[iHotel][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Hotel[iHotel][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Hotel[iHotel][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            Hotel[iHotel][ExitX] = cache_get_row_float(row,4,connectionHandle);
            Hotel[iHotel][ExitY] = cache_get_row_float(row,5,connectionHandle);
            Hotel[iHotel][ExitZ] = cache_get_row_float(row,6,connectionHandle);
            cache_get_row(row,7,Hotel[iHotel][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,8,Hotel[iHotel][hName],connectionHandle,32);
            Hotel[iHotel][hLock] = cache_get_row_int(row,9,connectionHandle);
            Hotel[iHotel][hMietPreis] = cache_get_row_int(row,10,connectionHandle);
            Hotel[iHotel][hEnterInterior] = cache_get_row_int(row,11,connectionHandle);
            Hotel[iHotel][hExitInterior] = cache_get_row_int(row,12,connectionHandle);
            Hotel[iHotel][hEnterVirtualWorld] = cache_get_row_int(row,13,connectionHandle);

            if(strcmp(Hotel[iHotel][hBesitzer], "Niemand", true) == 0)
            {
                format(hStr, sizeof(hStr), "Dieses Hotelzimmer ist noch zu vermieten!\n\
                                            %s\n\
                                            Zimmer Mietpreis: $%s\n\
                                            Mit /Miethotelraum mietest du ein Hotelzimmer", Hotel[iHotel][hName], Hotel[iHotel][hMietPreis]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19524, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            else
            {
                format(hStr, sizeof(hStr), "Besitzer: %s\nBeschreibung: %s", Hotel[iHotel][hBesitzer], Hotel[iHotel][hName]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19522, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            row++;
            iHotel++;
        }
    }
    else if(resultid == THREAD_HOTELLOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            hStr[256];
        while( row < rows ) {
            if( iHotel >= MAX_HOTELS ) {
                break;
            }
            Hotel[iHotel][hID] = cache_get_row_int(row,0,connectionHandle);
            Hotel[iHotel][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Hotel[iHotel][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Hotel[iHotel][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            Hotel[iHotel][ExitX] = cache_get_row_float(row,4,connectionHandle);
            Hotel[iHotel][ExitY] = cache_get_row_float(row,5,connectionHandle);
            Hotel[iHotel][ExitZ] = cache_get_row_float(row,6,connectionHandle);
            cache_get_row(row,7,Hotel[iHotel][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,8,Hotel[iHotel][hName],connectionHandle,32);
            Hotel[iHotel][hLock] = cache_get_row_int(row,9,connectionHandle);
            Hotel[iHotel][hMietPreis] = cache_get_row_int(row,10,connectionHandle);
            Hotel[iHotel][hEnterInterior] = cache_get_row_int(row,11,connectionHandle);
            Hotel[iHotel][hExitInterior] = cache_get_row_int(row,12,connectionHandle);
            Hotel[iHotel][hEnterVirtualWorld] = cache_get_row_int(row,13,connectionHandle);

            if(strcmp(Hotel[iHotel][hBesitzer], "Niemand", true) == 0)
            {
                format(hStr, sizeof(hStr), "Dieses Hotelzimmer ist noch zu vermieten!\n\
                                            %s\n\
                                            Zimmer Mietpreis: $%s\n\
                                            Mit /miethotelraum mietest du ein Hotelzimmer", Hotel[iHotel][hName], Hotel[iHotel][hMietPreis]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19524, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            else
            {
                format(hStr, sizeof(hStr), "Besitzer: %s\nBeschreibung: %s", Hotel[iHotel][hBesitzer], Hotel[iHotel][hName]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19522, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            row++;
            iHotel++;
        }
    }
    else if( resultid == THREAD_WEBSQL_AKTE ) {
        if( IsPlayerConnected(extraid) ) {
            SendClientMessage(extraid,COLOR_YELLOW,"Eintrag in der Spielerakte angelegt");
        }
    }
    else if( resultid == THREAD_SAVEALL ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Alle Daten gespeichert");
    }
    else if( resultid == THREAD_LOADFRIENDLIST ) {
        new
            i,
            rows = cache_get_row_count(connectionHandle),
            //resultline[128],
            name[MAX_PLAYER_NAME],
            sender[MAX_PLAYER_NAME],
            empfaenger[MAX_PLAYER_NAME];
        GetPlayerName(extraid,name,sizeof(name));
        for( i =0; i < MAX_FRIEND_LIST ; i++) {
            g_FriendList[extraid][i][FL_sSpieler] = '\0';
            g_FriendList[extraid][i][FL_iStatus] = 0;
        }
        i = 0;
        while( i < rows ) {
            sender[0] = '\0';
            empfaenger[0] = '\0';

            cache_get_field_content(i,"Spieler",sender,connectionHandle);
            cache_get_field_content(i,"SpielerEx",empfaenger,connectionHandle);

            if( !strcmp(name,sender) ) {
                format( g_FriendList[extraid][i][FL_sSpieler] , MAX_PLAYER_NAME , "%s",empfaenger);
            }
            else if( !strcmp(name,empfaenger) ) {
                format( g_FriendList[extraid][i][FL_sSpieler] , MAX_PLAYER_NAME , "%s",sender);
            }
            g_FriendList[extraid][i][FL_iStatus] = FriendList_Active;
            i++;
        }
    }
    else if(resultid == THREAD_ADDFRIENDLIST ) {
    /*
        print("THREAD_ADDFRIENDLIST");
    */
    }
    else if(resultid == THREAD_DELFRIENDLIST ) {
    /*
        print("THREAD_DELFRIENDLIST");
        new
            giveid,
            sid[32];
        ReadPlayerSQLExtra(extraid,sid);
        sscanf(sid,"u",giveid);
        LoadPlayerFriendList(extraid);
        if( IsPlayerConnected(giveid) ) {
            LoadPlayerFriendList(giveid);
        }
    */
    }
    else if(resultid == THREAD_SAVEGANGZONES) {
    }
    else if(resultid == THREAD_LOADGANGZONES ) {
        new
            Text:Textdraw0,
            row,
            rows = cache_get_row_count(connectionHandle),
            color;
        while( row < rows ) {

            g_GangZone[iGangZones][GZ_iID] = cache_get_row_int(row,0,connectionHandle);
            g_GangZone[iGangZones][GZ_fMinX] = cache_get_row_float(row,1,connectionHandle);
            g_GangZone[iGangZones][GZ_fMaxX] = cache_get_row_float(row,2,connectionHandle);
            g_GangZone[iGangZones][GZ_fMinY] = cache_get_row_float(row,3,connectionHandle);
            g_GangZone[iGangZones][GZ_fMaxY] = cache_get_row_float(row,4,connectionHandle);
            g_GangZone[iGangZones][GZ_fIconX] = cache_get_row_float(row,5,connectionHandle);
            g_GangZone[iGangZones][GZ_fIconY] = cache_get_row_float(row,6,connectionHandle);
            g_GangZone[iGangZones][GZ_fIconZ] = cache_get_row_float(row,7,connectionHandle);
            g_GangZone[iGangZones][GZ_iOwner] = cache_get_row_int(row,8,connectionHandle);
            g_GangZone[iGangZones][GZ_iTimeout] = cache_get_row_int(row,9,connectionHandle);
            g_GangZone[iGangZones][GZ_igbestand] = cache_get_row_int(row,10,connectionHandle);
            g_GangZone[iGangZones][GZ_igupgrade] = cache_get_row_int(row,11,connectionHandle);
            g_GangZone[iGangZones][GZ_iAreaID] = CreateDynamicRectangle( g_GangZone[iGangZones][GZ_fMinX] , g_GangZone[iGangZones][GZ_fMinY] , g_GangZone[iGangZones][GZ_fMaxX], g_GangZone[iGangZones][GZ_fMaxY],.interiorid = 0 );
            //Streamer_SetIntData(STREAMER_TYPE_AREA,g_GangZone[iGangZones][GZ_iAreaID],E_STREAMER_EXTRA_ID,AREA_GANGZONE);
            g_GangZone[iGangZones][GZ_iGangZoneID] = GangZoneCreate(g_GangZone[iGangZones][GZ_fMinX] , g_GangZone[iGangZones][GZ_fMinY] , g_GangZone[iGangZones][GZ_fMaxX], g_GangZone[iGangZones][GZ_fMaxY]);
            g_GangZone[iGangZones][GZ_iIconID] = CreateDynamicPickup(1313,1,g_GangZone[iGangZones][GZ_fIconX],g_GangZone[iGangZones][GZ_fIconY],g_GangZone[iGangZones][GZ_fIconZ]);
            g_GangZone[iGangZones][GZ_t3dLabel] = CreateDynamic3DTextLabel("...",0x0000FFFF,g_GangZone[iGangZones][GZ_fIconX],g_GangZone[iGangZones][GZ_fIconY],g_GangZone[iGangZones][GZ_fIconZ] + 0.6 ,50.0, .testlos = 1);
            Textdraw0 = TextDrawCreate(452.000000, 186.000000, "~n~~r~Angreifer: ~w~Ballas 5P. ~n~~y~Verteidiger: ~w~Vagos 21P.~n~~n~~p~Flagge: ~y~Vagos~n~");
            TextDrawBackgroundColor(Textdraw0, 255);
            TextDrawFont(Textdraw0, 1);
            TextDrawLetterSize(Textdraw0, 0.319999, 1.299999);
            TextDrawColor(Textdraw0, -1);
            TextDrawSetOutline(Textdraw0, 0);
            TextDrawSetProportional(Textdraw0, 1);
            TextDrawSetShadow(Textdraw0, 1);
            TextDrawUseBox(Textdraw0, 1);
            TextDrawBoxColor(Textdraw0, 0x00000090);
            TextDrawTextSize(Textdraw0, 636.000000, 10.000000);
            g_GangZone[iGangZones][GZ_tdInfo] = Textdraw0;

            color = GetZoneColorOfFaction(g_GangZone[iGangZones][GZ_iOwner]);
            GangZoneShowForAll( g_GangZone[iGangZones][GZ_iGangZoneID] , color );
            g_GangZone[iGangZones][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
            g_GangZone[iGangZones][GZ_iFlagge] = 0;
            iGangZones++;
            row++;
        }
        //printf("iGangZones %d",iGangZones);
    }
    else if(resultid == THREAD_LOADHAUSMOEBEL ) {
        new
            interior_index,
            row,
            rows = cache_get_row_count(connectionHandle),
            house_index,
            slot,
            moebel_index;
        while( row < rows ) {

            HausMoebelDummy[HMD_iID] = cache_get_row_int(row,0,connectionHandle);
            HausMoebelDummy[HMD_iHouseID] = cache_get_row_int(row,1,connectionHandle);
            HausMoebelDummy[HMD_iMoebelID] = cache_get_row_int(row,2,connectionHandle);
            HausMoebelDummy[HMD_fX] = cache_get_row_float(row,3,connectionHandle);
            HausMoebelDummy[HMD_fY] = cache_get_row_float(row,4,connectionHandle);
            HausMoebelDummy[HMD_fZ] = cache_get_row_float(row,5,connectionHandle);
            HausMoebelDummy[HMD_fRotX] = cache_get_row_float(row,6,connectionHandle);
            HausMoebelDummy[HMD_fRotY] = cache_get_row_float(row,7,connectionHandle);
            HausMoebelDummy[HMD_fRotZ] = cache_get_row_float(row,8,connectionHandle);
            row++;

            // Daten in g_HausMoebelObjekt überführen
            house_index = GetHouseIndexByID( HausMoebelDummy[HMD_iHouseID] );
            slot = GetHausMoebelFreeSlot( house_index );
            if(slot == -1 ) {
                printf("Für Haus %d sind zu viele Hausmöbel vorhanden",HausMoebelDummy[HMD_iHouseID]);
                continue;
            }
            moebel_index = GetHausMoebelIndex( HausMoebelDummy[HMD_iMoebelID] );
            if( moebel_index == -1 ) {
                printf("Ungültige Moebel ID %d",HausMoebelDummy[HMD_iMoebelID]);
                continue;
            }
            interior_index = GetHouseInteriorIndexByID( Haus[house_index][HouseInteriorID] );

            g_HausMoebelObjekt[house_index][slot][HMO_iID] = HausMoebelDummy[HMD_iID];
            g_HausMoebelObjekt[house_index][slot][HMO_iMoebelID] = HausMoebelDummy[HMD_iMoebelID];
            g_HausMoebelObjekt[house_index][slot][HMO_iObjectID] =
            CreateDynamicObject( g_HausMoebel[moebel_index][HM_iModelID],HausMoebelDummy[HMD_fX],HausMoebelDummy[HMD_fY],HausMoebelDummy[HMD_fZ],HausMoebelDummy[HMD_fRotX],HausMoebelDummy[HMD_fRotY],HausMoebelDummy[HMD_fRotZ], house_index , g_HouseInterior[interior_index][HI_iInterior] ,-1, 80.0);
        }
    }
    else if(resultid == THREAD_LOADFACTION ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            partnerid,
            fraktionid;
        while( row < rows ) {
            fraktionid = cache_get_row_int(row,0,connectionHandle);
            partnerid = cache_get_row_int(row,1,connectionHandle);
            g_Faction[fraktionid][F_iPartner] = partnerid;
            row++;
        }
    }
    else if(resultid == THREAD_LOBEN ) {
    }
    else if(resultid == THREAD_LOBENSELECT ) {
        new
            anzahl;
        if( cache_get_row_count(connectionHandle) ) {
            // cache_get_row(0,0,resultline,connectionHandle);
            anzahl = cache_get_row_int(0,0,connectionHandle);
            if( anzahl > 2 ) {
                SendClientMessage(extraid,COLOR_RED,"Du hast heute schon 3 Spieler gelobt");
            }
            else {
                new
                    giveid,
                    Float:x,
                    Float:y,
                    Float:z,
                    String[128],
                    params[128];
                GetPVarString(extraid,"Loben",params,sizeof(params));
                sscanf(params,"u",giveid);
                GetPlayerPos(giveid,x,y,z);
                format(String,sizeof(String),"INSERT INTO `lob` VALUES(NULL,'%s','%s',CURDATE())",GetName(extraid),GetName(giveid));
                mysql_pquery(String,THREAD_LOBEN,extraid,gSQL,MySQLThreadOwner);
                SpielerGelobt(giveid);
                format(String,sizeof(String),"%s hat %s gelobt!",GetName(extraid),GetName(giveid));
                SendRoundMessage(x,y,z, COLOR_LIGHTGREY, String);
                format(String,sizeof(String),"Du hast Spieler %s gelobt!",GetName(giveid));
                SendClientMessage(extraid,COLOR_YELLOW,String);
                format(String,sizeof(String),"Spieler %s hat dich gelobt",GetName(extraid));
                SendClientMessage(giveid,COLOR_YELLOW,String);
            }
        }
    }

    else if(resultid == THREAD_LOAD_ACCOUNT_WEAPONS ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            bool:bInfo = false,
            weapons[13],
            weapon,
            muni;
        while( row < rows ) {
            for(new i ; i < sizeof(weapons) ; i++) {
                weapons[i] = cache_get_row_int(row,i,connectionHandle);
            }

            for(new i ; i < sizeof(weapons) ; i++) {
                Class_SplitWeaponInfo(weapons[i],weapon,muni);
                if( weapon && muni > 0 ) {
                    // printf("uncompressded weapon %d muni %d",weapon,muni);
                    GivePlayerWeapon(extraid,weapon,muni);
                    if( !bInfo ) {
                        bInfo = true;
                        SendClientMessage(extraid,COLOR_GREEN,"Deine Waffen sind wieder da!");
                    }
                }
            }
            row++;
        }
        SavePremiumWeaponData(extraid,true);
    }
    return 1;
}

stock PlayerSQLExtra(playerid,text[]) {
    SetPVarString(playerid,"SQLExtra",text);
    return 1;
}
stock ReadPlayerSQLExtra(playerid,text[] , len = sizeof(text) ) {
    GetPVarString(playerid,"SQLExtra",text, len );
    return 1;
}

COMMAND:frakblacklist(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 6 && Spieler[playerid][pFraktion] != 7 && Spieler[playerid][pFraktion] != 10 && Spieler[playerid][pFraktion] != 11 && Spieler[playerid][pFraktion] != 12 && Spieler[playerid][pFraktion] != 13 && Spieler[playerid][pFraktion] != 20 && Spieler[playerid][pFraktion] != 21 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Fraktion bietet diese Funktion nicht an");
    }
    new
        query[128];
    format(query,sizeof(query),"SELECT `name` FROM `frakblacklist` WHERE `fraktion` = %d",Spieler[playerid][pFraktion]);
    mysql_pquery(query,THREAD_FRAKBLACKLIST,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:addfrakblacklist(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 6 && Spieler[playerid][pFraktion] != 7 && Spieler[playerid][pFraktion] != 10 && Spieler[playerid][pFraktion] != 11 && Spieler[playerid][pFraktion] != 12 && Spieler[playerid][pFraktion] != 13 && Spieler[playerid][pFraktion] != 20 && Spieler[playerid][pFraktion] != 21 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Fraktion bietet diese Funktion nicht an");
    }
    if(Spieler[playerid][pRank] < 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Dein Fraktionsrang ist zu niedrig für diese Funktion");
    }
    new
        name[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",name)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Addfrakblacklist [ID/Name]");
    }
    new
        querys[128];
    PlayerSQLExtra(playerid,name);
    format(querys,sizeof(querys),"SELECT `name` FROM `frakblacklist` WHERE `fraktion` = %d",Spieler[playerid][pFraktion]);
    mysql_pquery(querys,THREAD_ADDFRAKBLACKLIST_COUNT,playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

COMMAND:delfrakblacklist(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 6 && Spieler[playerid][pFraktion] != 7 && Spieler[playerid][pFraktion] != 10 && Spieler[playerid][pFraktion] != 11 && Spieler[playerid][pFraktion] != 12 && Spieler[playerid][pFraktion] != 13 && Spieler[playerid][pFraktion] != 20 && Spieler[playerid][pFraktion] != 21 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Fraktion bietet diese Funktion nicht an");
    }
    if(Spieler[playerid][pRank] < 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Dein Fraktionsrang ist zu niedrig für diese Funktion");
    }
    new
        name[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",name)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Delfrakblacklist [ID/Name]");
    }
    new
        query[128];
    PlayerSQLExtra(playerid,name);
    format(query,sizeof(query),"SELECT * FROM `frakblacklist` WHERE `fraktion` = %d AND `name` = '%s'",Spieler[playerid][pFraktion],name);
    mysql_pquery(query,THREAD_DELFRAKBLACKLIST_COUNT,playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
    printf("OnQueryError(%d,'%s','%s')",errorid,error,query);
    if( errorid == CR_SERVER_GONE_ERROR ) {
        mysql_reconnect( connectionHandle );
    }
    return 1;
}

COMMAND:kofferraum(playerid,params[]) {
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Fahrzeug.");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst der Fahrer dieses Fahrzeuges zum Öffnen sein.");
    }
    new engine,lights,doors,bonnet,boot,objective,alarm;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(boot > 0 ) {
        SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,false,objective);
        SendClientMessage(playerid, COLOR_ORANGE, "Kofferraum geschlossen" );
    }
    else {
        SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,true,objective);
        SendClientMessage(playerid, COLOR_GREEN, "Kofferraum geöffnet" );
    }
    return 1;
}

CMD:kansehen(playerid, params[]) return cmd_kofferraumansehen(playerid, params);

COMMAND:kofferraumansehen(playerid,params[]) {
    new
        vehicleid;
    vehicleid = GetClosestVehicle(playerid,4.0);
    if( IsPlayerInAnyVehicle(playerid)) {
        SendClientMessage(playerid, COLOR_RED, "Du musst am Kofferraum sein");
        return 1;
    }
    if( vehicleid == INVALID_VEHICLE_ID ) {
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in direkter Nähe zu einem Fahrzeug");
        return 1;
    }
    if( !IsTrunkOpen(vehicleid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
    }
    if( Spieler[playerid][pLevel] < 4 ) {
        SendClientMessage(playerid, COLOR_RED, "Diese Funktion ist für Spieler unter Level 4 nicht möglich.");
        return 1;
    }
    ShowKofferraum(playerid,vehicleid);
    return 1;
}

stock IsTrunkOpen(vehicleid) {
    new engine,lights,doors,bonnet,boot,objective,alarm;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if( boot < 1) {
        return 0;
    }
    return 1;
}
stock IsDoorOpen(vehicleid) {
    new engine,lights,doors,bonnet,boot,objective,alarm;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if( doors == 1) {
        return 0;
    }
    return 1;
}
stock ResetKofferraum(vehicleid) {
    g_Kofferraum[vehicleid][K_iDrogen] = 0;
    g_Kofferraum[vehicleid][K_iWaffenteile] = 0;
    g_Kofferraum[vehicleid][K_iWaffen] = 0;
    g_Kofferraum[vehicleid][K_iWantedcodes] = 0;
    g_Kofferraum[vehicleid][K_iSpice] = 0;
}
stock ShowKofferraum(playerid,vehicleid) {
    new
        String[256];
    for(new i ; i < sizeof(g_KofferraumBezeichnung); i++) {
        if(i == 2 ) {
            if( g_Kofferraum[vehicleid][e_Kofferraum:i] == 0 ) {
                format(String,sizeof(String),"%s%s: Keine Waffe\n",String,g_KofferraumBezeichnung[i]);
            }
            else {
                new
                    weapon,
                    muni,
                    wname[24];
                Class_SplitWeaponInfo( g_Kofferraum[vehicleid][e_Kofferraum:i] , weapon,muni);
                GetWeaponNameEx(weapon,wname,sizeof(wname));
                format(String,sizeof(String),"%s%s: %s mit %d Munition\n",String,g_KofferraumBezeichnung[i],wname,muni);
            }
        }
        else {
            format(String,sizeof(String),"%s%s: %d Stk\n",String,g_KofferraumBezeichnung[i],g_Kofferraum[vehicleid][e_Kofferraum:i]);
        }
    }
    ApplyAnimation(playerid, "BD_FIRE", "BD_PANIC_LOOP", 4.0, 1, 0, 0, 0, 0); // Kofferraum durchsuchen
    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM,DIALOG_STYLE_LIST,"Kofferraum",String,"Weiter","Abbruch");
    return 1;
}

stock ShowKoffer(playerid,giveid) {
    new
        String[256];
    for(new i ; i < sizeof(g_KofferBezeichnung); i++) {
        if(i == 2 ) {
            if( g_Koffer[giveid][e_Koffer:i] == 0 ) {
                format(String,sizeof(String),"%s%s: Keine Waffe\n",String,g_KofferBezeichnung[i]);
            }
            else {
                new
                    weapon,
                    muni,
                    wname[24];
                Class_SplitWeaponInfo( g_Koffer[giveid][e_Koffer:i] , weapon,muni);
                GetWeaponNameEx(weapon,wname,sizeof(wname));
                format(String,sizeof(String),"%s%s: %s mit %d Munition\n",String,g_KofferBezeichnung[i],wname,muni);
            }
        }
        else {
            format(String,sizeof(String),"%s%s: %d Stk\n",String,g_KofferBezeichnung[i],g_Koffer[giveid][e_Koffer:i]);
        }
    }
    ShowPlayerDialog(playerid,DIALOG_KOFFER,DIALOG_STYLE_LIST,"Koffer",String,"Weiter","Abbruch");
    return 1;
}
stock SendKofferInfo(playerid,giveid) {
    new
        String[256];
    format(String,sizeof(String),"Kofferinhalt von %s:",GetName(giveid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    for(new i ; i < sizeof(g_KofferBezeichnung); i++) {
        if(i == 2 ) {
            if( g_Koffer[giveid][e_Koffer:i] == 0 ) {
                format(String,sizeof(String),"%s: Keine Waffe",g_KofferBezeichnung[i]);
            }
            else {
                new
                    weapon,
                    muni,
                    wname[24];
                Class_SplitWeaponInfo( g_Koffer[giveid][e_Koffer:i] , weapon,muni);
                GetWeaponNameEx(weapon,wname,sizeof(wname));
                format(String,sizeof(String),"%s: %s mit %d Munition\n",g_KofferBezeichnung[i],wname,muni);
            }
        }
        else {
            format(String,sizeof(String),"%s: %d Stk\n",g_KofferBezeichnung[i],g_Koffer[giveid][e_Koffer:i]);
        }
        SendClientMessage(playerid,COLOR_YELLOW,String);
    }
    return 1;
}
stock ResetKoffer(playerid) {
    g_Koffer[playerid][K_iDrogen] = 0;
    g_Koffer[playerid][K_iWaffenteile] = 0;
    g_Koffer[playerid][K_iWaffen] = 0;
    g_Koffer[playerid][K_iWantedcodes] = 0;
    g_Koffer[playerid][K_iSpice] = 0;
}

new const Float:g_TutCameraPos[][] = {
    {1441.5684,-1699.7312,33.8},
    {1519.45,-1626.48,33.5938},
    {1945.22,-1464.24,54.3545},
    {1488.76,-1058.72,39.7917},
    {322.974,-2077.92,33.7381}
};
new const Float:g_TutCameraLookAt[][] = {
    {1484.75,-1761.88,23.5938},
    {1552.55,-1676.48,23.4937},
    {2025.22,-1414.24,37.3545},
    {1465.86,-1018.72,33.4917},
    {389.974,-2027.42,16.3381}
};

forward ShowPlayerTutorial(playerid,step);
public ShowPlayerTutorial(playerid,step) {
    ClearPlayerChat(playerid);
    SetPlayerVirtualWorld(playerid,100 + playerid );
    KillTimer(Spieler[playerid][pTutTimer]);
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;
    FreezePlayer(playerid);
    if( step == 0 ) {
        InterpolateCameraPos(playerid, 447.5718, -1750.7904, 17.8588 , g_TutCameraPos[0][0], g_TutCameraPos[0][1], g_TutCameraPos[0][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 448.5773, -1750.8137, 17.8939, g_TutCameraLookAt[0][0], g_TutCameraLookAt[0][1], g_TutCameraLookAt[0][2], 1000, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,1441.5684,-1699.7312,33.8);
        //SetPlayerCameraLookAt(playerid,1484.75,-1761.88,23.5938);

        SetPlayerPos(playerid,1490.6090,-1741.4506,13.5469);
        SetPlayerFacingAngle(playerid,152.2931);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Stadthalle ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Dieser Platz ist einer der wichtigsten Orte auf Live your Dream!");
        SendClientMessage(playerid,COLOR_WHITE,"Auf diesem Platz liegt das Arbeitsamt, wo du eine Auswahl von mehr als 20 Berufen hast.");
        SendClientMessage(playerid,COLOR_WHITE,"Staatsangehörigkeit, Fahrzeugzulassung, Meldestelle - alle diese");
        SendClientMessage(playerid,COLOR_WHITE,"Verwaltungsangelegenheiten lassen sich beim Stadtamt erledigen.");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,1);
    }
    else if( step == 1 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 800, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 800, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,1519.45,-1626.48,33.5938);
        //SetPlayerCameraLookAt(playerid,1552.55,-1676.48,23.4937);

        SetPlayerPos(playerid,1541.2928,-1661.9829,13.5523);
        SetPlayerFacingAngle(playerid,224.5919);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Polizeizentrale ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Das ist die Los Santos Polizeidienststelle, wo unter anderem auch gefährliche");
        SendClientMessage(playerid,COLOR_WHITE,"Straftäter hinter Gitter sitzen.");
        SendClientMessage(playerid,COLOR_WHITE,"Sollten die Verbrecher über den Weg laufen oder wenn du eine Straftat beobachtest,");
        SendClientMessage(playerid,COLOR_WHITE,"bitten wir dich umgehend die Polizei zu alarmieren!");
        SendClientMessage(playerid,COLOR_ORANGE,"Die Polizei alamierst du unter /Anrufen 110");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,2);
    }
    else if( step == 2 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 1000, CAMERA_MOVE );

        //SetPlayerCameraPos(playerid,1945.22,-1464.24,54.3545);
        //SetPlayerCameraLookAt(playerid,2025.22,-1414.24,37.3545);

        SetPlayerPos(playerid,2010.0386,-1438.3197,13.5547);
        SetPlayerFacingAngle(playerid,319.7918);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Rettungsdienstsstelle ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Das ist die Rettungsdienstsstelle Los Santos wo du eine Krankenversicherung abschließen kannst,");
        SendClientMessage(playerid,COLOR_WHITE,"die Kosten für eine ärztliche Behandlung werden dann für dich kostenlos sein!");
        SendClientMessage(playerid,COLOR_WHITE,"Eine ärztliche Behandlung würde ohne einer Krankenversicherung 450$ kosten,");
        SendClientMessage(playerid,COLOR_WHITE,"eine Krankenversicherung kostet 7.000$ diese hält für 7 Tage.");
        SendClientMessage(playerid,COLOR_WHITE,"Wenn du stirbst kannst du den Rettungsdienst alarmieren diese werden dich dann");
        SendClientMessage(playerid,COLOR_WHITE,"an der Position wo du gestorben bist wiederbeleben.");
        SendClientMessage(playerid,COLOR_ORANGE,"Der Rettungsdienst ist unter /Service -> Rettungsdienst(Notruf) zu alarmieren!");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,3);
    }
    else if( step == 3 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 1000, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,1488.76,-1058.72,39.7917);
        //SetPlayerCameraLookAt(playerid,1465.86,-1018.72,33.4917);

        SetPlayerPos(playerid,1455.5131,-1024.8951,23.8281);
        SetPlayerFacingAngle(playerid,335.7801);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Landeszentralbank ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Das ist die Landeszentralbank in Los Santos wo du ein Kredit aufnehmen kannst");
        SendClientMessage(playerid,COLOR_WHITE,"so wie dein Bankkonto mit einer Bankpinnummer anlegen kannst.");
        SendClientMessage(playerid,COLOR_WHITE,"In Los Santos gibt es zwei Banken, einmal die normale Los Santos Bank und die");
        SendClientMessage(playerid,COLOR_WHITE,"Landeszentralbank in Los Santos. Die Landeszentralbank kann überfallen werden!");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,4);
    }
    else if( step == 4 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 1000, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,322.974,-2077.92,33.7381);
        //SetPlayerCameraLookAt(playerid,389.974,-2027.42,16.3381);

        SetPlayerPos(playerid,376.7904,-2020.4138,7.8301);
        SetPlayerFacingAngle(playerid,225.8178);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Freizeit ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Auf Live your Dream gibt es viele Orte wo du deine Freizeit genießen kannst!");
        SendClientMessage(playerid,COLOR_WHITE,"Du könntest eine Runde mit dem Riesenrad drehen oder schön in Ruhe angeln auf dem");
        SendClientMessage(playerid,COLOR_WHITE,"sonnigen LS Strand oder vielleicht mal auf der Go-Kartbahn oder auf unserem");
        SendClientMessage(playerid,COLOR_WHITE,"Wasser-Autoscooter herumdüsen und vieles mehr!");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,5);
    }
    else if( step == 5 ) {
        new
            String[128];
        UnfreezePlayer(playerid);
        SendClientMessage(playerid,COLOR_YELLOW,"Das Tutorial ist vorbei. Jetzt folgen noch einige Hilfetexte!");
        format(String,sizeof(String),"Wir begrüßen ganz herzlich unser neuen Spieler %s",GetName(playerid));
        SendClientMessageToAll(0xFF00B9FF,String);
        Spieler[playerid][pTut] = 1;
        pMakeTutorial[playerid] = 1;
        gPlayerLogged[playerid] = 1;
        Spieler[playerid][pLevel] = 1;

        //gPlayerLogged[playerid] = 1;
        //SetSpawnInfo(playerid, 0,0,0,0,0,0,0,0,0,0,0,0);
        // SetTimerEx("OnPlayerMoneyCheck", 1000, 1, "i", playerid);

        paydaywait[playerid] = 0;
        /*
        if(Spieler[playerid][pHandyNr] == 0)
        {
            Spieler[playerid][pHandyNr] = random(89999999)+10000000; //Handynummer mit 8 Ziffern
        }
        for(new fs;fs<sizeof(FightSystem);fs++)
        {
            GangZoneShowForPlayer(playerid, FightSystem[fs][fsZoneID], GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
        }*/
        // SpawnPlayer(playerid);
        ShowPlayerDialog(playerid, DIALOG_TUT_3, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"INFORMATION", COLOR_HEX_WHITE"Jetzt beginnt noch eine kleine Einführung der Funktionen, bitte lese die Hilfetexte gründlich durch,\num dich auf dem Server zurecht zu finden! Es dauert auch nicht mehr lange.", "Weiter", "Abbrechen");
    }
    Streamer_Update(playerid);
    return 1;
}


stock GetPlayerHandyName(playerid) {
    new
        playerhandy,
        String[26];
    playerhandy = Spieler[playerid][pHandy];
    format(String,sizeof(String), g_Mobiltelefon[playerhandy][M_sName]);
    return String;
}

stock ShowPlayerHandyList(playerid) {
    new
        String[256];
    for(new i ; i < sizeof(g_Mobiltelefon) ; i++) {
        format(String,sizeof(String),"%s%s - $%s\n",String, g_Mobiltelefon[i][M_sName], AddDelimiters(g_Mobiltelefon[i][M_iPrice]));
    }
    ShowPlayerDialog(playerid, DIALOG_HANDYKAUFEN, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Handy kaufen", String , "Sofortkauf", "Abbrechen");
    return 1;
}

COMMAND:finanzen(playerid,params[]) {
    new
        String[128],
        giveid;
    format(String,sizeof(String),"U(%d)",playerid);
    if(sscanf(params,String,giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Finanzen [Spieler]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht Online.");
    }
    if( Spieler[giveid][pAdminDienst] ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst");
    }
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(giveid, 5.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    if( playerid != giveid ) {
        format(String,sizeof(String),"Du zeigst %s deine Finanzen.",GetName(giveid));
        SendClientMessage(playerid,COLOR_WHITE,String);
        format(String,sizeof(String),"%s zeigt dir seine Finanzen.",GetName(playerid));
        SendClientMessage(giveid,COLOR_WHITE,String);
    }
    SendClientMessage(giveid,COLOR_GREEN,"======= {FFFFFF}[ FINANZEN ] {009D00}=======");
    format(String,sizeof(String),"Finanzen von: {FFFFFF}%s",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Bargeld: {FFFFFF}$%s", AddDelimiters(GetPlayerMoney(playerid)));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Kontostand: {FFFFFF}$%s", AddDelimiters(Spieler[playerid][pBank]));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    SendClientMessage(giveid,COLOR_GREEN,"=========================");
    return 1;
}

CMD:inventar(playerid, params[]) {
    new giveid = playerid;
    if (!isnull(params)) {
        if (sscanf(params, "u", giveid)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Inventar [Spieler ID/Name]");
        if (giveid != playerid) {
            if (giveid >= MAX_PLAYERS || !gPlayerLogged[giveid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht online.");
            if (Spieler[giveid][pAdminDienst]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist gerade im Admindienst.");
            if (!IsPlayerInRangeOfPlayer(playerid, giveid, 5.0)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht in deiner Nähe.");

            SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du zeigst %s dein Inventar.", GetName(giveid));
            SCMFormatted(giveid, COLOR_YELLOW, "[INFO] {FFFFFF}%s zeigt dir sein Inventar.", GetName(playerid));
        }
    }

    SendClientMessage(giveid, COLOR_GREEN, "======= {FFFFFF}[ INVENTAR ] {009D00}=======");
    SCMFormatted(giveid, COLOR_YELLOW, "Inventar von: {FFFFFF}%s", GetName(playerid));
    SCMFormatted(giveid, COLOR_YELLOW, "Drogen: {FFFFFF}%s Gramm", AddDelimiters(Spieler[playerid][pDrugs]));
    SCMFormatted(giveid, COLOR_YELLOW, "Spice: {FFFFFF}%s Gramm", AddDelimiters(Spieler[playerid][pSpice]));
    SCMFormatted(giveid, COLOR_YELLOW, "Waffenteile: {FFFFFF}%s Stück", AddDelimiters(Spieler[playerid][pWaffenteile]));
    SCMFormatted(giveid, COLOR_YELLOW, "Wantedcodes: {FFFFFF}%s Stück", AddDelimiters(Spieler[playerid][pWantedCodes]));
    SCMFormatted(giveid, COLOR_YELLOW, "Kanister: {FFFFFF}%d Stück", Spieler[playerid][pKanister]);
    SCMFormatted(giveid, COLOR_YELLOW, "Kekse: {FFFFFF}%s Stück", AddDelimiters(Spieler[playerid][pKekse]));
    SCMFormatted(giveid, COLOR_YELLOW, "Zigaretten: {FFFFFF}%s Stück", AddDelimiters(Spieler[playerid][pZigaretten]));
    if (Spieler[playerid][pZollValid] == 0) SendClientMessage(giveid, COLOR_YELLOW, "Zollpass: {FFFFFF}Nicht vorhanden");
    else {
        new year, month, day, hour, minute, sec, unix = Spieler[playerid][pZollValid];
        TimestampToDate(unix, year, month, day, hour, minute, sec, 1, 0);
        SCMFormatted(giveid, COLOR_YELLOW, "Zollpass: {FFFFFF}Gültig bis %02d/%02d/%d", day, month, year);
    }

    return SendClientMessage(giveid, COLOR_GREEN, "==========================");
}


COMMAND:mydata(playerid,params[]) {
    new
        Float:x,
        Float:y,
        Float:z,
        String[128];
    GetPlayerPos(playerid,x,y,z);
    format(String,sizeof(String),"World: %d Interior: %d ",GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"X: %.1f Y: %.1f Z: %.1f",x,y,z);
    SendClientMessage(playerid,COLOR_WHITE,String);
    return 1;
}

stock ShowPlayerKampfStyleList(playerid) {
    new
        String[128];
    for(new i ; i < sizeof(g_KampfStyle) ; i++) {
        format(String,sizeof(String),"%s%s - $%s\n",String,g_KampfStyle[i][KS_sName], AddDelimiters(g_KampfStyle[i][KS_iPrice]));
    }
    ShowPlayerDialog(playerid,DIALOG_FIGHTSTYLE,DIALOG_STYLE_LIST,COLOR_HEX_ORANGE"Kampfstyle Kaufen",String,"Sofortkauf","Abbruch");
    return 1;
}
COMMAND:kampfstyle(playerid,params[]) {
    for(new i ; i < sizeof(g_KampfShop) ; i++) {
        if( GetPlayerInterior(playerid) == g_KampfShop[i][KS_iInterior] ) {
            if( GetPlayerVirtualWorld(playerid) == g_KampfShop[i][KS_iVirtualWorld] ) {
                if( IsPlayerInRangeOfPoint(playerid,5.0,g_KampfShop[i][KS_fX],g_KampfShop[i][KS_fY],g_KampfShop[i][KS_fZ])) {
                    ShowPlayerKampfStyleList(playerid);
                    return 1;
                }
            }
        }
    }
    SendClientMessage(playerid,COLOR_RED,"Hier kannst du keinen Kampfstyle kaufen");
    return 1;
}

COMMAND:kampfstil(playerid,params[]) {
    return cmd_kampfstyle(playerid,params);
}

stock AddVehicleBlitzer(vehicleid,limit,geldstrafe) {
    new
        Float:Z,
        Float:X,
        Float:Y;
    if( g_iBlitzer >= sizeof(g_Blitzer) ) return 0;

    GetVehiclePos(vehicleid,X,Y,Z);

    g_Blitzer[g_iBlitzer][B_iObjectID] = INVALID_OBJECT_ID;
    g_Blitzer[g_iBlitzer][B_iArea] = CreateDynamicCircle(X,Y,15.0);
    g_Blitzer[g_iBlitzer][B_iAreaOuter] = CreateDynamicCircle(X,Y,55.0);
    g_Blitzer[g_iBlitzer][B_iVehicle] = vehicleid;

    aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex] = g_iBlitzer;
    aiVehicleBlitzer[vehicleid][FB_iLimit] = limit;
    aiVehicleBlitzer[vehicleid][FB_iGeldStrafe] = geldstrafe;

    Streamer_SetIntData(STREAMER_TYPE_AREA, g_Blitzer[g_iBlitzer][B_iArea] ,E_STREAMER_EXTRA_ID, AREA_BLITZER_VEHICLE );
    Streamer_SetIntData(STREAMER_TYPE_AREA, g_Blitzer[g_iBlitzer][B_iAreaOuter] ,E_STREAMER_EXTRA_ID, AREA_BLITZER_OUTER );
    //printf("AddVehicleBlitzer(%d,%d,%d) AreaID: %d",vehicleid,limit,geldstrafe,g_Blitzer[g_iBlitzer][B_iArea]);
    g_iBlitzer++;
    return 1;
}

stock DestroyVehicleBlitzer(vehicleid) {
    new
        blitzer;
    blitzer = aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex];
    //printf("DestroyVehicleBlitzer(%d) AreaID:%d",vehicleid,g_Blitzer[blitzer][B_iArea]);
    if( blitzer != -1 ) {
        DestroyDynamicArea( g_Blitzer[blitzer][B_iArea] );
        DestroyDynamicArea( g_Blitzer[blitzer][B_iAreaOuter] );
        g_Blitzer[blitzer][B_iArea] = -1;
        g_Blitzer[blitzer][B_iAreaOuter] = -1;
        g_Blitzer[blitzer][B_iObjectID] = INVALID_OBJECT_ID;
        g_Blitzer[blitzer][B_iVehicle] = INVALID_VEHICLE_ID;
        aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex] = -1;
        aiVehicleBlitzer[vehicleid][FB_iLimit] = 0;
        aiVehicleBlitzer[vehicleid][FB_iGeldStrafe] = 0;
        return 1;
    }
    return 0;
}

stock InitBlitzer() {
    new
        Float:X,
        Float:Y;
    for(new i , j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT) ; i < j ; i++) {
        if( IsValidDynamicObject(i) ) {
            if( Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID) == 18880 ) {
                // Objekt für Blitzer gefunden,area erstellen
                if( g_iBlitzer >= sizeof(g_Blitzer) ) continue;

                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_X,X);
                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Y,Y);
                g_Blitzer[g_iBlitzer][B_iObjectID] = i;
                g_Blitzer[g_iBlitzer][B_iArea] = CreateDynamicCircle(X,Y,15.0);
                g_Blitzer[g_iBlitzer][B_iAreaOuter] = CreateDynamicCircle(X,Y,65.0);
                g_Blitzer[g_iBlitzer][B_iVehicle] = INVALID_VEHICLE_ID;
                Streamer_SetIntData(STREAMER_TYPE_AREA, g_Blitzer[g_iBlitzer][B_iArea] ,E_STREAMER_EXTRA_ID, AREA_BLITZER );
                Streamer_SetIntData(STREAMER_TYPE_AREA, g_Blitzer[g_iBlitzer][B_iAreaOuter] ,E_STREAMER_EXTRA_ID, AREA_BLITZER_OUTER );
                g_iBlitzer++;
            }
        }
    }
    return 1;
}

stock InitTelefonzelle() {
    new
        Float:X,
        Float:Z,
        Float:Y;
    for(new i , j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT) ; i < j ; i++) {
        if( IsValidDynamicObject(i) ) {
            if( Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID) == 1216 ) {
                // Objekt für Blitzer gefunden,area erstellen
                if( g_iTelefonzelle >= sizeof(g_Blitzer) ) continue;

                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_X,X);
                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Y,Y);
                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Z,Z);
                g_Telefonzelle[g_iTelefonzelle][T_iObjectID] = i;
                g_Telefonzelle[g_iTelefonzelle][T_t3dLabel] = CreateDynamic3DTextLabel("{FFFF00}- Telefonzelle -\n{00FF00}Befehl: /Telefonzelle",0xFFFFFFFF,X,Y,Z + 1.25 ,20.0, .testlos = 1);
                g_iTelefonzelle++;
            }
        }
    }
    // printf("g_iTelefonzelle %d",g_iTelefonzelle);
    return 1;
}



COMMAND:promille(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Promille [Spieler]");
    }
    if( !IsPlayerConnected(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( !(( Spieler[playerid][pFraktion] == 1) || ( Spieler[playerid][pFraktion] == 2) || ( Spieler[playerid][pFraktion] == 5) || ( Spieler[playerid][pFraktion] == 16 ) || ( Spieler[playerid][pFraktion] == 22 )) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist");
    }
    new
        String[128];
    if( pDrogenEinfluss[playerid] == 1 ) {
        format(String,sizeof(String),"Spieler %s steht unter Drogen Einfluss.",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
    }
    else if( GetPlayerDrunkLevel(giveid) >= 2000 ) {
        format(String,sizeof(String),"Spieler %s steht unter Alkohol Einfluss.",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
    }
    else {
        format(String,sizeof(String),"Spieler %s steht nicht unter Alkohol- noch Drogeneinfluss",GetName(giveid));
        SendClientMessage(playerid,COLOR_YELLOW,String);
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    format(String,sizeof(String),"Beamter %s prüft den Alkohol-Drogeneinfluss von %s",GetName(playerid),GetName(giveid));
    SendRoundMessage(x,y,z, COLOR_PURPLE, String);
    return 1;
}

stock SetPlayerAutomatAnim(playerid) {
    switch(random(4)) {
        case 0: ApplyAnimation(playerid, "COP_AMBIENT", "COPLOOK_NOD", 4.0, 1, 0, 0, 0, 0); // cop view bankautomat
        case 1: ApplyAnimation(playerid, "CRACK", "BBALBAT_IDLE_01", 4.0, 1, 0, 0, 0, 0); // crack bankautomat
        case 2: ApplyAnimation(playerid, "INT_HOUSE", "WASH_UP", 4.0, 1, 0, 0, 0, 0); // 
        case 3: ApplyAnimation(playerid, "INT_SHOP", "SHOP_LOOP", 4.0, 1, 0, 0, 0, 0); // 
    }
    return 1;
}

COMMAND:hauseinbrechen(playerid,params[]) {
    if( !Spieler[playerid][pBrecheisen] ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Brechstange um die Tür aufzubrechen");
        return 1;
    }
    new
        house;
    house = GetClosestHouse(playerid);
    if(house == 999 ) {
        SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht am Eingang eines Hauses");
        return 1;
    }
    new
        String[128],
        Float:x,
        Float:y,
        Float:z;
    Spieler[playerid][unixHausAufbrechen] = gettime() + 8;
    Spieler[playerid][pBrecheisen]--;
    KillTimer(Spieler[playerid][tEinbrechen]);
    Spieler[playerid][tEinbrechen] = SetTimerEx("Pulse_Einbrechen",1868,true,"dd",playerid,house);
    format(String,sizeof(String),"%s versucht in ein Haus einzubrechen!",GetName(playerid));
    GetPlayerPos(playerid,x,y,z);
    SendRoundMessage(x,y,z, COLOR_RED, String);
    /*
        for(new i=0; i < iHaus ;i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]))
            {
                new index = GetHouseIndexByID( Spieler[playerid][pHouseKey] );
    */
    return 1;
}

stock GetClosestHouse(playerid) {
    for(new i=0; i < iHaus ;i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]))
        {
            return i;
        }
    }
    return 999;
}

stock GetClosestBiz(playerid) {
    for(new i=0;i<MAX_BIZES;i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ]))
        {
            return i;
        }
    }
    return 999;
}

forward Pulse_Einbrechen(playerid,house);
public Pulse_Einbrechen(playerid,house) {
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, Haus[house][EnterX], Haus[house][EnterY], Haus[house][EnterZ]))
    {
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        KillTimer(Spieler[playerid][tEinbrechen]);
        GetPlayerPos(playerid,x,y,z);
        format(String,sizeof(String),"%s hat es nicht geschafft in ein Haus einzubrechen",GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_GREEN, String);
        return 1;
    }
    if( Spieler[playerid][unixHausAufbrechen] <= gettime() ) {
        // Einbruch erfolgreich
        new
            String[128],
            Float:x,
            Float:y,
            Float:z,
            owner;
        GetPlayerPos(playerid,x,y,z);
        KillTimer(Spieler[playerid][tEinbrechen]);
        format(String,sizeof(String),"%s ist in ein Haus eingebrochen!",GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_RED, String);

        new
            index;
        index = GetHouseInteriorIndexByID( Haus[house][HouseInteriorID] );
        SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior] );

        SetPlayerVirtualWorld(playerid, house);
        SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);

        //SetPlayerInterior(playerid, Haus[house][hInterior]);
        SetPlayerVirtualWorld(playerid, house);
        //SetPlayerPos(playerid, Haus[house][ExitX], Haus[house][ExitY], Haus[house][ExitZ]);
        sscanf(Haus[house][hBesitzer],"u",owner);
        if( IsPlayerConnected(owner)) {
            SendClientMessage(owner,COLOR_RED,"In deinem Haus wurde eingebrochen! Alarmiere schnellstmöglich die Polizei!");
        }
        return 1;
    }
    return 1;
}

COMMAND:caufbrechen(playerid,params[]) {
    new
        biz,
        house;
    if(!IsPlayerExecutive(playerid)) {
        SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist");
        return 1;
    }
    new
        String[128],
        Float:x,
        Float:y,
        Float:z;
    house = GetClosestHouse(playerid);
    if(house == 999 ) {
        biz = GetClosestBiz(playerid);
        if( biz != 999 ) {
            GetPlayerPos(playerid,x,y,z);
            SetPlayerInterior(playerid, Biz[biz][bInterior]);
            SetPlayerVirtualWorld(playerid, biz);
            SetPlayerPos(playerid, Biz[biz][ExitX], Biz[biz][ExitY], Biz[biz][ExitZ]);
            format(String,sizeof(String),"Beamter %s bricht in ein Geschäft ein",GetName(playerid));
            SendRoundMessage(x,y,z, COLOR_RED, String);
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Du bist kein Polizist");
            return 1;
        }
    }
    else {
        GetPlayerPos(playerid,x,y,z);
        new
            index;
        index = GetHouseInteriorIndexByID( Haus[house][HouseInteriorID] );
        SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior] );
        SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);
        // SetPlayerInterior(playerid, Haus[house][hInterior]);
        SetPlayerVirtualWorld(playerid, house );
        // SetPlayerPos(playerid, Haus[house][ExitX], Haus[house][ExitY], Haus[house][ExitZ]);
        format(String,sizeof(String),"Beamter %s bricht in ein Haus ein",GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_RED, String);
    }
    return 1;
}

forward FreeLicence();
public FreeLicence() {
    new
        now = gettime();
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            // Auto
            if( Spieler[i][punixFSperre] != 0 && Spieler[i][pCarLic] == 0 && Spieler[i][pFPunkte] == 0) {
                if( Spieler[i][punixFSperre] < now ) {
                    Spieler[i][punixFSperre] = 0;
                    SendClientMessage(i,COLOR_YELLOW,"Deine Autoschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
                }
            }
            // Flug
            if( Spieler[i][punixFlSperre] != 0 && Spieler[i][pFlyLic] == 0 && Spieler[i][pFlPunkte] == 0) {
                if( Spieler[i][punixFlSperre] < now ) {
                    Spieler[i][punixFlSperre] = 0;
                    SendClientMessage(i,COLOR_YELLOW,"Deine Flugschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
                }
            }
            // Motorrad
            if( Spieler[i][punixMotoSperre] != 0 && Spieler[i][pMotoLic] == 0 && Spieler[i][pMotoPunkte] == 0) {
                if( Spieler[i][punixMotoSperre] < now ) {
                    Spieler[i][punixMotoSperre] = 0;
                    SendClientMessage(i,COLOR_YELLOW,"Deine Motorradschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
                }
            }
            // LKW
            if( Spieler[i][punixLKWSperre] != 0 && Spieler[i][pLKWLic] == 0 && Spieler[i][pLKWPunkte] == 0) {
                if( Spieler[i][punixLKWSperre] < now ) {
                    Spieler[i][punixLKWSperre] = 0;
                    SendClientMessage(i,COLOR_YELLOW,"Deine LKW Scheinsperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
                }
            }
            // Gun
            if( Spieler[i][punixGunSperre] != 0 && (Spieler[i][pGunLic] == 0 && Spieler[i][pGunLicB] == 0 ) && Spieler[i][pGunPunkte] == 0) {
                if( Spieler[i][punixGunSperre] < now ) {
                    Spieler[i][punixGunSperre] = 0;
                    SendClientMessage(i,COLOR_YELLOW,"Deine Waffenschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
                }
            }
        }
    }
    return 1;
}

stock GivePlayerStrafpunkte(playerid,schein,anzahl) {
    if(schein == 1)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pFPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Autoschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pFPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pFPunkte] += anzahl;
            if(Spieler[playerid][pFPunkte] >= 10)
            {
                Spieler[playerid][pCarLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Autoschein! Ihr Fahrerlaubnis ist hiermit für 7 Stunden entzogen.");
                Spieler[playerid][pFPunkte] = 0;
                Spieler[playerid][punixFSperre] = gettime() + 1*24*30*30;
            }
        }
    }
    if(schein == 2)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pFlPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Flugschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pFlPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pFlPunkte] += anzahl;
            if(Spieler[playerid][pFlPunkte] >= 10)
            {
                Spieler[playerid][pFlyLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Flugschein! Ihre Flugerlaubnis ist hiermit entzogen für 2 Tage.");
                Spieler[playerid][pFlPunkte] = 0;
                Spieler[playerid][punixFlSperre] = gettime() + 2*24*60*60;
            }
        }
    }
    if(schein == 3)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pMotoPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Motorradschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pMotoPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pMotoPunkte] += anzahl;
            if(Spieler[playerid][pMotoPunkte] >= 10)
            {
                Spieler[playerid][pMotoLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Motorradschein! Ihre Fahrerlaubnis ist hiermit für 10 Stunden entzogen.");
                Spieler[playerid][pMotoPunkte] = 0;
                Spieler[playerid][punixMotoSperre] = gettime() + 1*24*40*40;
            }
        }
    }
    if(schein == 4)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pLKWPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem LKW-schein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pLKWPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pLKWPunkte] += anzahl;
            if(Spieler[playerid][pLKWPunkte] >= 10)
            {
                Spieler[playerid][pLKWLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem LKW-schein! Ihre Fahrerlaubnis ist hiermit für 2 Tage entzogen.");
                Spieler[playerid][pLKWPunkte] = 0;
                Spieler[playerid][punixLKWSperre] = gettime() + 2*24*60*60;
            }
        }
    }
    if(schein == 5)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pGunPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Waffenschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pGunPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pGunPunkte] += anzahl;
            if(Spieler[playerid][pGunPunkte] >= 10)
            {
                Spieler[playerid][pGunLic] = 0;
                Spieler[playerid][pGunLicB] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Waffenschein! Ihre Waffenerlaubnis ist hiermit für 2 Tage entzogen");
                Spieler[playerid][pGunPunkte] = 0;
                Spieler[playerid][punixGunSperre] = gettime() + 2*24*60*60;
            }
        }
    }
    return 1;
}

COMMAND:checkscheine(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, string[128];
    if(sscanf(params, "u", pID))
    {
        Scheine(playerid, playerid);
        SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Checkscheine [SpielerID/Name]");
        return 1;
    }
    if(IsPlayerConnected(pID) && gPlayerLogged[pID] == 1)
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        if(IsPlayerInRangeOfPoint(pID, 5.0, x,y,z))
        {
            format(string, sizeof(string), ".", GetName(playerid));
            SendClientMessage(pID, COLOR_PURPLE, string);
            Scheine(playerid, pID,1);
        }
    }
    return 1;
}


COMMAND:savehouseobject(playerid,params[]) {
    new h = IsPlayerAtHouse(playerid,4.0);
    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    new
        Float:x,
        Float:y,
        Float:z,
        Float:rot,
        query[400];
    GetPlayerPos(playerid,x,y,z);
    GetPlayerFacingAngle(playerid,rot);
    format(query,sizeof(query),"UPDATE `houses` SET \
        `SellX` = %.2f, \
        `SellY` = %.2f, \
        `SellZ` = %.2f, \
        `SellRot` = '%.1f' \
        WHERE `ID` = %d",
            x,
            y,
            z,
            rot,
            Haus[h][hID]
    );
    print(query);
    SendClientMessage(playerid,COLOR_YELLOW,"Gespeichert!");
    return 1;
}

COMMAND:zulassungsstelle(playerid,params[]) {
	if( !IsPlayerInRangeOfPoint(playerid,5.0,2316.4529,-12.6540,26.7422) || !IsPlayerInRangeOfPoint(playerid,5.0,2316.3318,-9.9532,26.7422) )
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe der Zulassungsstelle.");

	return
	ShowPlayerDialog(playerid,DIALOG_ZULASSUNGSSTELLE,DIALOG_STYLE_LIST,"Zulassungsstelle","Fahrzeug zulassen\nFahrzeug abmelden","Weiter","Abbruch");

}

stock CreateHouseSellObject(houseindex) {
    Haus[houseindex][SellObjectID] = CreateDynamicObject(19471, Haus[houseindex][SellX], Haus[houseindex][SellY], Haus[houseindex][SellZ] - 1.0 ,0.0, 0.0 , Haus[houseindex][SellRot] + 90.0 );
    return 1;
}
stock DestroyHouseSellObject(houseindex) {
    DestroyDynamicObject(Haus[houseindex][SellObjectID]);
    Haus[houseindex][SellObjectID] = INVALID_OBJECT_ID;
    return 1;
}
stock DestroyPayDayTextdraw(playerid) {
    PlayerTextDrawDestroy(playerid,Spieler[playerid][ptPayDay]);
    return 1;
}

stock CreatePayDayTextdraw(playerid) {
    // Spieler[playerid][ptPayDay] = CreatePlayerTextDraw(playerid,406.000000, 27.000000, "..." );
    // PlayerTextDrawBackgroundColor(playerid,Spieler[playerid][ptPayDay], 85);
    // PlayerTextDrawFont(playerid,Spieler[playerid][ptPayDay], 2);
    // PlayerTextDrawLetterSize(playerid,Spieler[playerid][ptPayDay], 0.190000, 0.899999);
    // PlayerTextDrawColor(playerid,Spieler[playerid][ptPayDay], -1);
    // PlayerTextDrawSetOutline(playerid,Spieler[playerid][ptPayDay], 1);
    // PlayerTextDrawSetProportional(playerid,Spieler[playerid][ptPayDay], 1);
    // UpdatePayDayTextdraw(playerid);
    Spieler[playerid][ptPayDay] = CreatePlayerTextDraw(playerid, 540.0, 12.0, "PayDay");
    PlayerTextDrawBackgroundColor(playerid,Spieler[playerid][ptPayDay], 255);
    PlayerTextDrawFont(playerid,Spieler[playerid][ptPayDay], 3);
    PlayerTextDrawLetterSize(playerid,Spieler[playerid][ptPayDay], 0.28, 1.0);
    PlayerTextDrawColor(playerid,Spieler[playerid][ptPayDay], -1);
    PlayerTextDrawSetOutline(playerid,Spieler[playerid][ptPayDay], 1);
    PlayerTextDrawSetProportional(playerid,Spieler[playerid][ptPayDay], 1);
    PlayerTextDrawAlignment(playerid, Spieler[playerid][ptPayDay], 3);
    UpdatePayDayTextdraw(playerid);
    return 1;
}
stock UpdatePayDayTextdraw(playerid) {
    new String[64];
    format(String,sizeof(String),"~b~~h~~h~PayDay in: ~w~~h~~h~%d ~b~~h~~h~Min", 60 - Spieler[playerid][pPayDay]);
    PlayerTextDrawSetString(playerid,Spieler[playerid][ptPayDay],String);
    return 1;
}

CMD:createhotelroom(playerid, params[])
{
    new chName[32], HotelType, Preis;
    if(sscanf(params, "iis[32]", HotelType, Preis, chName))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Createhotelroom [Hotel-Typ] [MietPreis] [Name]");
    if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new query[1024], Float:x, Float:y, Float:z, Float:iX, Float:iY, Float:iZ;
    GetPlayerPos(playerid, x, y, z);
    new interior;
    new enterinterior = GetPlayerInterior(playerid);
    new virtualworld = GetPlayerVirtualWorld(playerid);
    if(HotelType < 1 || HotelType > 11)return SendClientMessage(playerid, COLOR_RED, "Der Hotel-Typ muss zwischen 1 und 14 liegen.");
    else if(HotelType == 1)
    {
            interior = 3;
            iX = 235.508994;
            iY = 1189.169897;
            iZ = 1080.339966;
    }
    else if(HotelType == 2)
    {
            interior = 2;
            iX = 225.756989;
            iY = 1240.000000;
            iZ = 1082.149902;
    }
    else if(HotelType == 3)
    {
            interior = 1;
            iX = 223.043991;
            iY = 1289.259888;
            iZ = 1082.199951;
    }
    else if(HotelType == 4)
    {
            interior = 7;
            iX = 225.630997;
            iY = 1022.479980;
            iZ = 1084.069946;
    }
    else if(HotelType == 5)
    {
            interior = 15;
            iX = 295.138977;
            iY = 1474.469971;
            iZ = 1080.519897;
    }
    else if(HotelType == 6)
    {
            interior = 15;
            iX = 328.493988;
            iY = 1480.589966;
            iZ = 1084.449951;
    }
    else if(HotelType == 7)
    {
            interior = 15;
            iX = 385.803986;
            iY = 1471.769897;
            iZ = 1080.209961;
    }
    else if(HotelType == 8)
    {
            interior = 1;
            iX = 244.411987;
            iY = 305.032989;
            iZ = 999.148437;
    }
    else if(HotelType == 9)
    {
            interior = 5;
            iX = 2233.7566;
            iY = -1114.8241;
            iZ = 1050.8828;
    }
    else if(HotelType == 10)
    {
            interior = 2;
            iX = 2468.0276;
            iY = -1698.2456;
            iZ = 1013.5078;
    }
    else if(HotelType == 11)
    {
            interior = 12;
            iX = 2324.419921;
            iY = -1145.568359;
            iZ = 1050.710083;
    }

    format(query, sizeof(query), "INSERT INTO `hotel` (`ID`,`EnterX`, `EnterY`, `EnterZ`, `ExitX`, `ExitY`, `ExitZ`, `Besitzer`, `Name`, `Lock`, `MietPreis`, `EnterInterior`, `ExitInterior`,`EnterVirtualWorld`) VALUES (NULL,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, '%s', '%s', %d, %d, %d , %d , %d )", x,y,z, iX, iY, iZ,  "Niemand", chName, 1, Preis, enterinterior , interior,virtualworld);
    mysql_pquery(query,THREAD_CREATEHOTEL,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:miethotelraum(playerid,params[]) {
    #pragma unused params
    if(GetPlayerHouse(playerid) != 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Haus und kannst somit kein Hotel mieten!");
    if(Spieler[playerid][pPlayerHotel] != 999)return SendClientMessage(playerid, COLOR_RED, "Du mietest bereits ein Hotelzimmer!");
    new
        hotel = IsPlayerAtHotel(playerid);
    if(hotel == 999) return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Hotelzimmer.");
    if( strcmp(Hotel[hotel][hBesitzer],"Niemand") != 0 )return SendClientMessage(playerid, COLOR_GREY, "Das Hotel wird bereits gemietet");

    Spieler[playerid][pPlayerHotel] = hotel;
    format( Hotel[hotel][hBesitzer] , MAX_PLAYER_NAME , GetName(playerid) );
    SendClientMessage(playerid, COLOR_WHITE, "Du hast dich erfolgreich ins Hotel eingemietet und zahlst jeden Zahltag einen gewissen Betrag an Miete.");
    SendClientMessage(playerid, COLOR_WHITE, "Mit /Spawnchange kannst du deinen Spawn zwischen Haus/Hotel oder Fraktion bzw. Zivi-Spawn wechseln.");
    new hStr[256];
    format(hStr, sizeof(hStr), "Besitzer: %s\nBeschreibung: %s", Hotel[hotel][hBesitzer], Hotel[hotel][hName]);
    UpdateDynamic3DTextLabelText(Hotel[hotel][hText],COLOR_PROP,hStr);
    return 1;
}
COMMAND:entmietenhotelraum(playerid,params[]){
    if(Spieler[playerid][pPlayerHotel] == 999)return SendClientMessage(playerid, COLOR_RED, "Du mietest kein Hotelzimmer!");
    new
        //query[128],
        hStr[256],
        hotel = Spieler[playerid][pPlayerHotel];
    format( Hotel[hotel][hBesitzer] , MAX_PLAYER_NAME , "Niemand" );
    Hotel[hotel][hLock] = 1;
    Spieler[playerid][pSpawnChange] = 0;
    Spieler[playerid][pPlayerHotel] = 999;
    SendClientMessage(playerid, COLOR_WHITE, "Du hast das Hotelzimmer entmietet und lebst nun wieder auf der Straße.");
    format(hStr, sizeof(hStr), "Dieses Hotelzimmer ist noch zu vermieten!\n\
                                %s\n\
                                Zimmer Mietpreis: %d$\n\
                                Mit /miethotelraum mietest du ein Hotelzimmer", Hotel[hotel][hName], Hotel[hotel][hMietPreis]);
    UpdateDynamic3DTextLabelText(Hotel[hotel][hText],COLOR_PROP,hStr);

    //format(query, sizeof(query), "UPDATE `accounts` SET `HotelKey` = '999' WHERE `Name` = '%s'", GetName(playerid) );
    //mysql_pquery(query,THREAD_SELLHOTEL,playerid,gSQL,MySQLThreadOwner);

    return 1;
}
COMMAND:hoteltuer(playerid, params[])
{
    new status[12];
    new hotel;
    if(sscanf(params, "s[12]", status))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hoteltuer [Auf/Zu]");
    hotel = IsPlayerAtHotel(playerid);
    if(hotel == 999) return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Hotelzimmer.");
    if(strcmp(status, "AUF", true) == 0)
    {
        if(Spieler[playerid][pPlayerHotel] == hotel )
        {
            if(Hotel[hotel][hLock] == 1)
            {
                Hotel[hotel][hLock] = 0;
                GameTextForPlayer(playerid, "~w~Hotelzimmer ~g~Auf", 5000, 6);
            }
            else
            {
                SendClientMessage(playerid, COLOR_ORANGE, "Das Hotelzimmer ist bereits offen.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Dieses Hotelzimmer hast du nicht gemietet.");
            return 1;
        }
    }
    else if(strcmp(status, "ZU", true) == 0)
    {
        if(Spieler[playerid][pPlayerHotel] == hotel )
        {
            if(Hotel[hotel][hLock] == 0)
            {
                Hotel[hotel][hLock] = 1;
                GameTextForPlayer(playerid, "~w~Hotelzimmer ~g~Zu", 5000, 6);
            }
            else
            {
                SendClientMessage(playerid, COLOR_ORANGE, "Das Hotelzimmer ist bereits geschlossen.");
                return 1;
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Dieses Hotelzimmer hast du nicht gemietet.");
            return 1;
        }
    }
    return 1;
}
// Werbetafel Befehle in werbetafel.inc ( COMMAND:WERBETFALE , WERBETAFELKAUFEN )

/*
#if defined USE_NPCS
forward UpdateBotLabel();
public UpdateBotLabel()
{
    new
        r,
        time;
    for(new i ; i < sizeof(BotID) ; i++) {
        BotPulse[i]--;
        if( !IsPlayerConnected(i) ) continue;
        if( BotPulse[i] > 0 ) continue;
        time = ( 12 + random(16) ) * 1007;
        BotPulse[i] = 2 + random(3);
        switch(i) {
            case 0: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Schule ist blöd!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Ich hasse die Schule!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 1: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Endlich wieder Berufstätig!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Das Arbeitsamt bietet echt tolle Jobs an!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 2: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Das Hotel ist für Touristen und Neubürger ideal!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Die Gegend ist hier wundervoll!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 3: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Ordnung und Sicherheit ist das wichtigste!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Gerechtigkeit und Ordnung! Dafür sorgt die Polizei!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 4: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Mehr Cheeseburger!!!" , 0xECC57FF0 , 20.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Die Cheesebürger schmecken sehr lecker!!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 5: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Mehr Cheeseburger!!!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Ich brauche mehr Cheeseburger!!!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 6: {
            }
            case 7: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Hast du nen Dollar?" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Morgen zum Arbeitsamt..." , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 8: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Morgen zum Arbeitsamt..." , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Hast du nen Dollar?" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 9: {
            }
            case 10: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Die Jugend heutzutage! Schmeißen ihr Müll überall hin!" , 0xECC57FF0 , 25.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Mein Vorgarten wird immer mit Müll beschmutzt!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 11: {
            }
            case 12: {
            }
            case 13: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Der Bus verspätet sich wieder..." , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Heute wurde Regen angekündigt, hoffentlich komme ich pünklich nach Hause" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 14: {
                SetPlayerChatBubble( BotID[i] , "Hoffentlich sieht mich die Presse nicht..." , 0xECC57FF0 , 15.0 , time);
            }
            case 15: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Der Sprit geht schneller leer wenn man zu oft beschleunigt!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Ich arbeite schon seit 2 Monaten in dieser Tankstelle." , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 16: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Der Sprit geht schneller leer wenn man zu oft beschleunigt!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Ich arbeite schon seit 3 Monaten in dieser Tankstelle." , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 17: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Mhh.. Lecker..!!" , 0xECC57FF0 , 20.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Die Pizza aus der Pizzaria schmeckt wundervoll!!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 18,19: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Ich bin wegen der Finanzkrise arbeitslos! IST DAS KLAR!?" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Meine nervige Frau hat mich verlassen!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 20: {
            }
            case 21: {
                SetPlayerChatBubble( BotID[i] , ">>Bitte halten Sie sich an die Flug-Verkehrsordnung<<" , 0xECC57FF0 , 15.0 , time);
            }
            case 22: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Let's Party!!!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Go..!! Go..!! Let's Partyy!!!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 23: {
                SetPlayerChatBubble( BotID[i] , "Halten Sie Abstand von der Bahnsteigkante!" , 0xECC57FF0 , 15.0 , time);
            }
            case 24: {
                SetPlayerChatBubble( BotID[i] , "Tag zu Tag reisen hier immer mehr Touristen mit den Zug an." , 0xECC57FF0 , 15.0 , time);
            }
            case 25: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Meine Kinder müssten gleich mit dem Zug ankommen.." , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Gut das die Straßen hier neu gepflastert wurden!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 26: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Bahnhof ist der beste Platz zum chillen.." , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Ich wollte schon immer nach Las Venturas und zocken.." , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 27: {
                SetPlayerChatBubble( BotID[i] , "Los Santos ist eine wunderbare Stadt!" , 0xECC57FF0 , 15.0 , time);
            }
            case 28: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Der Zug müsste gleich kommen..." , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Ich fahre zum Mount Everest und werde ihn besteigen! Ich freue mich schon!!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 29: {
                r = random(2);
                if(r == 0 ) {
                    SetPlayerChatBubble( BotID[i] , "Juuhh...!!" , 0xECC57FF0 , 15.0 , time);
                }
                else if( r == 1 ) {
                    SetPlayerChatBubble( BotID[i] , "Yeahr!!!" , 0xECC57FF0 , 15.0 , time);
                }
            }
            case 30: {
                SetPlayerChatBubble( BotID[i] , "DISCO!!" , 0xECC57FF0 , 15.0 , time);
            }
            case 31: {
                SetPlayerChatBubble( BotID[i] , "Geile Party!!" , 0xECC57FF0 , 15.0 , time);
            }
            case 32: {
                SetPlayerChatBubble( BotID[i] , "PARTY!!" , 0xECC57FF0 , 15.0 , time);
            }
            case 33: {
                SetPlayerChatBubble( BotID[i] , "DISCO..PARTY!!" , 0xECC57FF0 , 15.0 , time);
            }
            case 34: {
                SetPlayerChatBubble( BotID[i] , "BOOMM!!" , 0xECC57FF0 , 15.0 , time);
            }
            case 35: {
                SetPlayerChatBubble( BotID[i] , "BOOMM!!" , 0xECC57FF0 , 15.0 , time);
            }
            case 36: {
                SetPlayerChatBubble( BotID[i] , "Illegale Inventare sind nicht gestattet!" , 0xECC57FF0 , 15.0 , time);
            }
            case 37: {
                SetPlayerChatBubble( BotID[i] , "Waffen und Schläger werden nicht gestattet!" , 0xECC57FF0 , 15.0 , time);
            }
            case 38: {
                SetPlayerChatBubble( BotID[i] , "Lust auf ein kaltes und erfrischendes Getränk?" , 0xECC57FF0 , 15.0 , time);
            }
            case 39: {
                SetPlayerChatBubble( BotID[i] , "GEGEN RASER!!!" , 0xECC57FF0 , 30.0 , time);
                RandomShoutAnim( BotID[i] );
                BotPulse[i] = 1 + random(3);
            }
            case 40: {
                SetPlayerChatBubble( BotID[i] , "GEGEN RAUDIES!!!" , 0xECC57FF0 , 30.0 , time);
                RandomShoutAnim( BotID[i] );
                BotPulse[i] = 1 + random(3);
            }
            case 41: {
                SetPlayerChatBubble( BotID[i] , "GEGEN RAUDIES!!!" , 0xECC57FF0 , 30.0 , time);
                RandomShoutAnim( BotID[i] );
                BotPulse[i] = 1 + random(3);
            }

        }
    }
    return true;
}

stock RandomShoutAnim(playerid) {
    switch(random(4)) {
        case 0: ApplyAnimation(playerid, "ON_LOOKERS", "WAVE_LOOP", 4.0, 1, 0, 0, 0, 0 ,1); // 
        case 1: ApplyAnimation(playerid, "ON_LOOKERS", "SHOUT_01", 4.0, 1, 0, 0, 0, 0,1); // 
        case 2: ApplyAnimation(playerid, "ON_LOOKERS", "SHOUT_02", 4.0, 1, 0, 0, 0, 0,1); // 
        case 3: ApplyAnimation(playerid, "ON_LOOKERS", "SHOUT_LOOP", 4.0, 1, 0, 0, 0, 0,1); // 
    }
    return 1;
}
forward NPC(var);
public NPC(var)
{
    switch(var)
    {
        case 1:
        {
            ConnectNPC(BOT_NAME_18,"trans");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 2:
        {
            ConnectNPC(BOT_NAME_19,"norm");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 3:
        {
            ConnectNPC(BOT_NAME_20,"norm1");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 4:
        {
            ConnectNPC(BOT_NAME_21,"norm2");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 5:
        {
            ConnectNPC(BOT_NAME_22,"fahrschule");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 6:
        {
            ConnectNPC(BOT_NAME_23,"bsndraußen");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 7:
        {
            ConnectNPC(BOT_NAME_24,"vinewood");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 8:
        {
            ConnectNPC(BOT_NAME_25,"tanke1");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 9:
        {
            ConnectNPC(BOT_NAME_26,"tanke2");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 10:
        {
            ConnectNPC(BOT_NAME_27,"pizza");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 11:
        {
            ConnectNPC(BOT_NAME_28,"drauß");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 12:
        {
            ConnectNPC(BOT_NAME_29,"ammu2");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 13:
        {
            ConnectNPC(BOT_NAME_30,"norm3");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 14:
        {
            ConnectNPC(BOT_NAME_31,"airport");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 15:
        {
            ConnectNPC(BOT_NAME_32,"disco");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 16:
        {
            ConnectNPC(BOT_NAME_33,"bahn");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 17:
        {
            ConnectNPC(BOT_NAME_34,"spawn");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 18:
        {
            ConnectNPC(BOT_NAME_35,"spawn1");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 19:
        {
            //ConnectNPC(BOT_NAME_36,"spawn2");
            ConnectNPC(BOT_NAME_36,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 20:
        {
            ConnectNPC(BOT_NAME_37,"spawn3");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 21:
        {
            //ConnectNPC(BOT_NAME_38,"spawn4");
            ConnectNPC(BOT_NAME_38,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 22:
        {
            ConnectNPC(BOT_NAME_39,"aline");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 23:
        {
            ConnectNPC(BOT_NAME_40,"kai");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 24:
        {
            ConnectNPC(BOT_NAME_41,"dance1");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 25:
        {
            ConnectNPC(BOT_NAME_42,"dance2");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 26:
        {
            ConnectNPC(BOT_NAME_43,"dance3");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 27:
        {
            ConnectNPC(BOT_NAME_44,"dance4");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 28:
        {
            ConnectNPC(BOT_NAME_45,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 29:
        {
            ConnectNPC(BOT_NAME_46,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 30:
        {
            ConnectNPC(BOT_NAME_47,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 31:
        {
            ConnectNPC(BOT_NAME_48,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 32:
        {
            ConnectNPC(BOT_NAME_49,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 33:
        {
            ConnectNPC(BOT_NAME_50,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 34:
        {
            ConnectNPC(BOT_NAME_51,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 35:
        {
            ConnectNPC(BOT_NAME_13,"pd");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 36:
        {
            ConnectNPC(BOT_NAME_14,"bsn2");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 37:
        {
            ConnectNPC(BOT_NAME_15,"bsn1");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 38:
        {
            ConnectNPC(BOT_NAME_16,"ammu");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 39:
        {
            ConnectNPC(BOT_NAME_17,"waffen");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 40:
        {
            ConnectNPC( BOT_NAME_1 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 41:
        {
            ConnectNPC( BOT_NAME_2 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 42:
        {
            ConnectNPC( BOT_NAME_3 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 43:
        {
            ConnectNPC( BOT_NAME_4 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 44:
        {
            ConnectNPC( BOT_NAME_5 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 45:
        {
            ConnectNPC( BOT_NAME_6 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 46:
        {
            ConnectNPC( BOT_NAME_7 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 47:
        {
            ConnectNPC( BOT_NAME_8 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 48:
        {
            ConnectNPC( BOT_NAME_9 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 49:
        {
            ConnectNPC(BOT_NAME_11,"stadthalle1");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 50:
        {
            ConnectNPC( BOT_NAME_52 ,"empty");
            SetTimerEx("NPC",10079,false,"i",++var);
        }
        case 51:
        {
            ConnectNPC(BOT_NAME_12,"stadthalle");
            print("All Bots connected");
            //print("Starting Timer for updateing 3dLabels");
        }
    }
    return true;
}
#endif
*/
COMMAND:allesspeichern(playerid,params[]) {
    #pragma unused params
    if(Spieler[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    SendClientMessage(playerid,COLOR_YELLOW,"Daten werden zum speichern gesendet ...");
    SaveAll();
    mysql_pquery("SELECT NOW()",THREAD_SAVEALL,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:haube(playerid,params[]) {
    #pragma unused params
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Fahrzeug!");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst der Fahrer dieses Fahrzeuges zum Öffnen sein!");
    }
    new engine,lights,doors,bonnet,boot,objective,alarm;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet > 0 ) {
        SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,false,boot,objective);
        SendClientMessage(playerid, COLOR_ORANGE, "Motorhaube geschlossen" );
    }
    else {
        SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,true,boot,objective);
        SendClientMessage(playerid, COLOR_GREEN, "Motorhaube geöffnet" );
    }
    return 1;
}
COMMAND:wantedticket(playerid,params[]) {
	#pragma unused params
	if( !IsPlayerInRangeOfPoint(playerid,3.0,LSPD_INTERIOR_WANTED_TICKET_POINT) )
 		return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keine Wanted-Tickets kaufen");

	ShowWantedTicketList(playerid);
	return 1;
}
ShowWantedTicketList(playerid) {
    new
        String[128];
    if( !(1 <= Spieler[playerid][pWanteds] <= 3) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst kein Wanted-Ticket kaufen, weil du nicht unter 3 Wanted hast!");
    }
    for(new i ; i < sizeof(g_WantedTicket) ; i++) {
        format(String,sizeof(String),"%s%d Wanteds - $%s\n",String,g_WantedTicket[i][WT_iPoints], AddDelimiters(g_WantedTicket[i][WT_iPrice]));
    }
    ShowPlayerDialog(playerid,DIALOG_WANTEDTICKET,DIALOG_STYLE_LIST,"WantedTicket",String,"Kaufen","Abbruch");
    return 1;
}

stock SendUCPAktenEintrag( playerid, admin[] ,  spieler[] , text[] , thread = THREAD_WEBSQL_AKTE) {
    new
        query[256];
    // $query = mysql_oquery("INSERT INTO `akte` (`spieler`, `admin`, `content`) VALUES ('$spieler', '$admin', '$content')")
    format(query,sizeof(query),"INSERT INTO `akte` (`spieler`, `admin`, `content`) VALUES ('%s', '%s', '%s')",spieler,admin,text);
    mysql_pquery(query, thread ,playerid,gWebSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:sendfs(playerid,params[]) {
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Sendfs [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( !IsFriendSlotFree(playerid) ) {
        return SendClientMessage(playerid,COLOR_RED, "Du hast keinen Platz für weitere Freunde in deiner List!");
    }
    if( !IsFriendSlotFree(giveid) ) {
        return SendClientMessage(playerid,COLOR_RED, "Der Spieler hat keinen Platz für weitere Freunde in seiner List!");
    }
    if( IsPlayerOnFriendList(playerid,giveid,FriendList_Wait) ) {
        return SendClientMessage(playerid,COLOR_RED, "Du hast diesem Spieler bereits eine Anfrage gesendet!");
    }
    if( IsPlayerOnFriendList(playerid,giveid,FriendList_Active) ) {
        return SendClientMessage(playerid,COLOR_RED, "Der Spieler ist bereits auf deiner Freundesliste!");
    }
    if( IsPlayerOnFriendList(playerid,giveid,FriendList_Approval) ) {
        return cmd_acceptfs(playerid,GetName(giveid));
    }
    new
        String[128],
        flslot = GetFreeFriendSlot(playerid);
    format( g_FriendList[playerid][flslot][FL_sSpieler] , MAX_PLAYER_NAME , "%s", GetName(giveid) );
    g_FriendList[playerid][flslot][FL_iStatus] = FriendList_Wait;
    flslot = GetFreeFriendSlot(giveid);
    format( g_FriendList[giveid][flslot][FL_sSpieler] , MAX_PLAYER_NAME , "%s", GetName(playerid) );
    g_FriendList[giveid][flslot][FL_iStatus] = FriendList_Approval;
    format(String,sizeof(String),"[FS] %s hat dir eine Freundschaftsanfrage gesendet! Mit /Acceptfs akzeptierst du die Anfrage.",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Du hast %s eine Freundschaftsanfrage gesendet!",GetName(giveid));
    SendClientMessage(playerid,COLOR_GREEN,String);
    return 1;
}

COMMAND:acceptfs(playerid,params[]) {
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Acceptfs [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( IsPlayerOnFriendList(playerid,giveid) ) {
        return SendClientMessage(playerid,COLOR_RED, "Dieser Spieler ist bereits auf deiner Freundesliste!");
    }
    if( !IsPlayerOnFriendList(playerid,giveid,FriendList_Approval) ) {
        return SendClientMessage(playerid,COLOR_RED, "Von diesem Spieler liegt keine Freundschaftanfrage vor!");
    }
    new
        String[128],
        index;
    index = GetPlayerFriendSlot(playerid,giveid);
    g_FriendList[playerid][index][FL_iStatus] = FriendList_Active;
    index = GetPlayerFriendSlot(giveid,playerid);
    g_FriendList[giveid][index][FL_iStatus] = FriendList_Active;
    format(String,sizeof(String),"[FS] %s hat deine Freundschaftsanfrage akzeptiert!",GetName(playerid));
    SendClientMessage(giveid,COLOR_GREEN,String);
    format(String,sizeof(String),"Du hast die Freundschaftsanfrage von %s akzeptiert!",GetName(giveid));
    SendClientMessage(playerid,COLOR_GREEN,String);

    format(String,sizeof(String),"INSERT INTO `friendlist` VALUES (NULL, '%s', '%s');",GetName(giveid),GetName(playerid));
    mysql_pquery( String ,THREAD_ADDFRIENDLIST,playerid,gSQL,MySQLThreadOwner);

    format(String,sizeof(String),"INSERT INTO `friendlist` VALUES (NULL, '%s', '%s');",GetName(playerid),GetName(giveid));
    mysql_pquery( String ,THREAD_ADDFRIENDLIST,playerid,gSQL,MySQLThreadOwner);

    return 1;
}

COMMAND:delfs(playerid,params[]) {
    new
        idx,
        giveid,
        name[MAX_PLAYER_NAME];
    if( sscanf(params,"s[24]",name)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Delfs [Spieler]");
    }
    if( !IsNameOnFriendList(playerid,name,idx) ) {
        return SendClientMessage(playerid,COLOR_RED, "Der Name befindet sich nicht auf deiner Freundschaftsliste!");
    }
    new
        String[256];
    sscanf(name,"u",giveid);
    g_FriendList[playerid][idx][FL_iStatus] = 0;
    g_FriendList[playerid][idx][FL_sSpieler] = '\0';
    if( IsPlayerConnected(giveid) ) {
        if( IsNameOnFriendList(giveid,GetName(playerid),idx) ) {
            /*
            if( g_FriendList[giveid][idx][FL_iStatus] == FriendList_Approval) {
                format(String,sizeof(String),"%s hat deine Freundschaftsanfrage abgelehnt",name);
                SendClientMessage(giveid,COLOR_YELLOW,String);
            }
            else {
                format(String,sizeof(String),"%s hat dich aus seiner Freundschaftsliste entfernt!",name);
                SendClientMessage(giveid,COLOR_YELLOW,String);
            }
            */
            format(String,sizeof(String),"[FS] %s hat dich aus seiner Freundschaftsliste entfernt!", GetName(playerid) );
            SendClientMessage(giveid,COLOR_ORANGE,String);

            g_FriendList[giveid][idx][FL_iStatus] = 0;
            g_FriendList[giveid][idx][FL_sSpieler] = '\0';
        }
    }
    format(String,sizeof(String),"Du hast %s aus deiner Freundschaft entfernt!",name);
    SendClientMessage(playerid,COLOR_ORANGE,String);


    mysql_real_escape_string(name,name);
    format(String,sizeof(String),"DELETE FROM `friendlist` WHERE `Spieler` IN('%s','%s') AND `SpielerEx` IN('%s','%s')",GetName(playerid),name,GetName(playerid),name);
    mysql_pquery( String ,THREAD_DELFRIENDLIST,playerid,gSQL,MySQLThreadOwner);

    return 1;
}

SSCANF:playername(string[]) {
    new name[MAX_PLAYER_NAME];
    for (new i = 0; i <= GetPlayerPoolSize(); i++) {
        if (!GetPlayerName(i, name, sizeof(name))) continue;
        if (!strcmp(name, string, true)) return i;
    }

    return INVALID_PLAYER_ID;
}

// REMOVE_THIS
/*
CMD:myname(playerid, params[]) {
    SetPlayerName(playerid, params);
    return 1;
}*/

COMMAND:fsliste(playerid)
{
    new giveid, dialogText[600];
    for (new i; i < MAX_FRIEND_LIST; i++) {
        if (isnull(g_FriendList[playerid][i][FL_sSpieler])) continue;

        format(dialogText, sizeof(dialogText), "%s{FFFFFF}%s", dialogText, g_FriendList[playerid][i][FL_sSpieler]);
        if (g_FriendList[playerid][i][FL_iStatus] == FriendList_Approval) strcat(dialogText, " (wartet auf Bestätigung)", sizeof(dialogText));
        else if (g_FriendList[playerid][i][FL_iStatus] == FriendList_Wait) strcat(dialogText, " (muss bestätigen)", sizeof(dialogText));

        sscanf(g_FriendList[playerid][i][FL_sSpieler], "k<playername>", giveid);
        if (giveid == INVALID_PLAYER_ID) format(dialogText, sizeof(dialogText), "%s\t{FF0000}Offline\n", dialogText);
        else format(dialogText, sizeof(dialogText), "%s\t{00FF00}Online\n", dialogText);
    }

    if (isnull(dialogText)) format(dialogText, sizeof(dialogText), "{FFFFFF}Du hast noch keine Spieler auf deiner Freundesliste.");
    ShowPlayerDialog(playerid, DIALOG_FSLISTE, DIALOG_STYLE_TABLIST, "{FF0080}Freundesliste", dialogText, "Schließen", "");
    return 1;
}

COMMAND:fschat(playerid,params[]) {
    new
        giveid,
        text[128];
    if(sscanf(params,"us[128]",giveid,text)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Fschat [Spieler] [Nachricht]");
    }
    if( !IsPlayerOnFriendList(playerid,giveid) ) {
        return SendClientMessage(playerid,COLOR_RED, "Der Spieler ist noch nicht auf deiner Freundschaftsliste.");
    }
    if(Spieler[playerid][pPrisonRun] > 0 ) return SendClientMessage(playerid, COLOR_RED, "Du kannst niemandem schreiben, wenn du im Straflauf bist!");
    new
        String[256];
    format(String,sizeof(String),"[FS-CHAT] %s sagt: %s",GetName(playerid),text);
    SendClientMessage(giveid,COLOR_PINK,String);
    format(String,sizeof(String),"[FS-CHAT] >> %s: %s",GetName(giveid),text);
    SendClientMessage(playerid,COLOR_PINK,String);

    format(String,sizeof(String),"%s an %s: %s",GetName(playerid),GetName(giveid),text);
    FriendLog(String);
    return 1;
}
stock IsFriendSlotFree(playerid) {
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            return 1;
        }
    }
    return 0;
}

stock GetFreeFriendSlot(playerid) {
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            return i;
        }
    }
    return -1;
}
stock IsPlayerOnFriendList(playerid,giveid, status = FriendList_Active ) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(giveid,name,sizeof(name));
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( g_FriendList[playerid][i][FL_iStatus] == status ) {
            if( !isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
                if(!strcmp(g_FriendList[playerid][i][FL_sSpieler],name)) {
                    return 1;
                }
            }
        }
    }
    return 0;
}

stock GetPlayerFriendSlot(playerid,giveid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(giveid,name,sizeof(name));
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( !isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            if(!strcmp(g_FriendList[playerid][i][FL_sSpieler],name)) {
                return i;
            }
        }
    }
    return -1;
}

stock IsNameOnFriendList(playerid,name[],&index) {
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( !isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            if(!strcmp(g_FriendList[playerid][i][FL_sSpieler],name)) {
                index = i;
                return 1;
            }
        }
    }
    return 0;
}
stock LoadPlayerFriendList(playerid) {
    new
        String[256];
    format(String,sizeof(String),"SELECT `Spieler`,`SpielerEx` FROM `friendlist` WHERE `Spieler` = '%s' LIMIT "#MAX_FRIEND_LIST"",
        GetName(playerid),GetName(playerid));
    mysql_pquery( String ,THREAD_LOADFRIENDLIST,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock GetPlayerWantedRang(playerid) {
    new rang[20] = "INVALID";
    for(new i ; i < sizeof(g_WantedRang) ; i++ ) {
        if( g_WantedRang[i][WR_iPoints] <= Spieler[playerid][pWanteds] ) {
            format(rang,sizeof(rang),g_WantedRang[i][WR_sRang]);
        }
    }
    return rang;
}

COMMAND:helm(playerid,params[]) {
    /*
    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED,"Du kannst den Helm nicht ohne Fahrzeug nutzen!");
    }
    modelid = GetVehicleModel(vehicleid);
    if(!IsABike(modelid)) {
        return SendClientMessage(playerid, COLOR_RED,"Du kannst den Helm nur auf einem Motorrad nutzen!");
    }
    */
    if(!Spieler[playerid][pHelm]) {
        return SendClientMessage(playerid, COLOR_RED,"Du besitzt keinen Motorrad Helm!");
    }
    if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_HELM)) {
        RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_HELM);
        SendClientMessage(playerid,COLOR_ORANGE,"Helm abgesetzt");
    }
    else {
        Helmet_SetPlayerHelmet(playerid);
        SendClientMessage(playerid,COLOR_GREEN,"Helm aufgesetzt");
    }
    return 1;
}



stock FakeKill(playerid,killerid,reason) {
    #pragma unused reason
    new
        Float:health,
        level;
    if(!IsPlayerStreamedIn(playerid, killerid)) {
        level++;
    }
    if(GetPlayerInterior(playerid) != GetPlayerInterior(killerid)) {
        level++;
    }
    if( GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(killerid) ) {
        level++;
    }
    if( g_aiLastDamagedByPlayer[playerid] != killerid ) {
        level += 2;// Sehr verdächtiges Kriterium,daher 2pkt
    }
    if( 0 <= reason <= 42 ) { // Nur gültige reason's verwenden
        if(GetPlayerWeapon(killerid) != reason) {
            level++;
        }
    }
    GetPlayerHealth(playerid,health);
    if( health > 1.0 ) { // Gestorben trotz Energie ?
        level += 2;// Sehr verdächtiges Kriterium,daher 2pkt
    }
    return level;
}
COMMAND:acceptcpartner(playerid,params[]) {
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Acceptcpartner [Spieler]");
    }
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED,"Du bist kein Polizist!");
    }
    if( !IsPlayerExecutive(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED,"Der Spieler ist kein Polizist!");
    }
    if( g_PolizeiPartner[playerid][PP_iStatus] == PolizeiPartner_Active ) {
        return SendClientMessage(playerid, COLOR_RED,"Du hast bereits einen Streifenpartner!");
    }
    if( g_PolizeiPartner[giveid][PP_iStatus] == PolizeiPartner_Active ) {
        return SendClientMessage(playerid, COLOR_RED,"Der Spieler hat bereits einen Streifenpartner!");
    }
    if( g_PolizeiPartner[giveid][PP_iStatus] != PolizeiPartner_Wait ) {
        return SendClientMessage(playerid, COLOR_RED,"Der Spieler hat keinen Streifenpartner-Anfrage versendet!");
    }
    if( g_PolizeiPartner[giveid][PP_iPartner] != playerid ) {
        return SendClientMessage(playerid, COLOR_RED,"Der Spieler hat keinen Streifenpartner-Anfrage an dich versendet!");
    }
    new
        String[128];
    format(String,sizeof(String),"Polizeibeamter %s und %s sind zusammen auf Streife!",GetName(giveid),GetName(playerid));
    SendExecutiveMessage(COLOR_YELLOW,String);
    g_PolizeiPartner[giveid][PP_iPartner] = playerid;
    g_PolizeiPartner[giveid][PP_iStatus] = PolizeiPartner_Active;
    g_PolizeiPartner[playerid][PP_iPartner] = giveid;
    g_PolizeiPartner[playerid][PP_iStatus] = PolizeiPartner_Active;

    SetPlayerMarkerForPlayer(playerid,giveid,COLOR_COPPARTNER);
    SetPlayerMarkerForPlayer(giveid,playerid,COLOR_COPPARTNER);
    return 1;
}
COMMAND:cpartner(playerid,params[]) {
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Cpartner [Spieler]");
    }
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED,"Du bist kein Polizist!");
    }
    if( !IsPlayerExecutive(giveid) ) {
        return SendClientMessage(playerid, COLOR_RED,"Der Spieler ist kein Polizist!");
    }
    if( g_PolizeiPartner[playerid][PP_iStatus] == PolizeiPartner_Wait ) {
        return SendClientMessage(playerid, COLOR_RED,"Du hast bereits eine Partneranfrage gesendet!");
    }
    if( g_PolizeiPartner[playerid][PP_iStatus] == PolizeiPartner_Active ) {
        return SendClientMessage(playerid, COLOR_RED,"Du hast bereits einen Streifenpartner!");
    }
    if( g_PolizeiPartner[giveid][PP_iStatus] == PolizeiPartner_Wait && g_PolizeiPartner[giveid][PP_iPartner] == playerid) {
        return cmd_acceptcpartner(playerid,params);
    }
    if( g_PolizeiPartner[giveid][PP_iStatus] == PolizeiPartner_Active ) {
        return SendClientMessage(playerid, COLOR_RED,"Der Spieler hat bereits einen Streifenpartner!");
    }
    new
        String[128];
    format(String,sizeof(String),"Du hast an Polizeibeamten %s eine Streifenpartnerschafts-Anfrage gesendet!",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Polizeibeamter %s möchte mit dir zusammen auf Streife fahren! Akzeptieren mit /Acceptcpartner",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);

    g_PolizeiPartner[playerid][PP_iPartner] = giveid;
    g_PolizeiPartner[playerid][PP_iStatus] = PolizeiPartner_Wait;

    return 1;
}



stock ClearPolizeiPartner(playerid) {
    g_PolizeiPartner[playerid][PP_iPartner] = INVALID_PLAYER_ID;
    g_PolizeiPartner[playerid][PP_iStatus] = 0;
    return 1;
}

stock ShowBuyInformation(playerid,text[],time = 4) {
    new PlayerText:td;
    td = CreatePlayerTextDraw(playerid,200.000000, 360.000000, text );
    PlayerTextDrawBackgroundColor(playerid,td, 255);
    PlayerTextDrawFont(playerid,td, 1);
    PlayerTextDrawLetterSize(playerid,td, 0.470000, 2.100000);
    PlayerTextDrawColor(playerid,td, -1);
    PlayerTextDrawSetOutline(playerid,td, 1);
    PlayerTextDrawSetProportional(playerid,td, 1);
    PlayerTextDrawShow(playerid,td);
    SetTimerEx("KillBuyInformation", time * 1000,0,"dd",playerid,_:td);
    return 1;
}

forward KillBuyInformation(playerid,PlayerText:td);
public KillBuyInformation(playerid,PlayerText:td) {
    PlayerTextDrawHide(playerid,td);
    PlayerTextDrawDestroy(playerid,td);
    return 1;
}

COMMAND:pickwaffe(playerid,params[]) {
    if(Spieler[playerid][pTot] == 1 || Spieler[playerid][pTot] == 2 )return SendClientMessage(playerid, COLOR_RED, "Während du Tot bist, kannst du diese Funktion nicht nutzen.");
    if( Spieler[playerid][pLevel] < 4 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist unter Level 4 und kannst die Waffe daher nicht aufheben!");
        return 1;
    }
    if(HasWeaponBlock(playerid)) {
        return SendWeaponBlockInfo(playerid);
    }
    for(new i ; i < sizeof(DropItems) ; i++) {
        if( DropItems[i][DI_iExtra] != 0 && DropItems[i][DI_iPlayerID] != INVALID_PLAYER_ID ) {
            if( IsPlayerInRangeOfPoint(playerid,3.0,DropItems[i][DI_fX],DropItems[i][DI_fY],DropItems[i][DI_fZ])) {
                Weapon_OnPlayerPickUpPickup(playerid,i);
                ShowBuyInformation(playerid,"~y~Waffe ~w~aufgehoben!");
            }
        }
    }
    return 1;
}

/*forward SpawnHack();
public SpawnHack() {
    new
        String[128];
    for(new i ; i < MAX_PLAYERS ; i++ ) {
        if( IsPlayerConnected(i) ) {
            if( !IsPlayerNPC(i) ) {
                if( gSpawned{i} == 0 ) {
                    if( !IsPlayerInRangeOfPoint(i,2.0,1133.0504,-2038.4034,69.1000) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1416.5498,-806.5092,85.0357) &&
                        !IsPlayerInRangeOfPoint(i,2.0,483.1288,-1762.5616,7.1238) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1490.6090,-1741.4506,13.5469) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1541.2928,-1661.9829,13.5523) &&
                        !IsPlayerInRangeOfPoint(i,2.0,2010.0386,-1438.3197,13.5547) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1455.5131,-1024.8951,23.8281) &&
                        !IsPlayerInRangeOfPoint(i,2.0,376.7904,-2020.4138,7.8301) ) {

                        format(String,sizeof(String),"[WARNUNG] %s verdacht auf Login/Register Hacker",GetName(i));
                        SendAdminMessage(COLOR_RED, String);
                        //KickDelay(i);
                    }
                }
            }
        }
    }
    return 1;
}*/

enum e_JobSkins {
    Float:JS_fX,
    Float:JS_fY,
    Float:JS_fZ,
    JS_iJob,
    JS_iSkin
};

new const g_JobSkins[][e_JobSkins] = {
    // X    Y       Z     Job , SkinID
    {-90.4999,  -10.3628,  3.1094,  1, 161 }, //Bauer
    {BUSSTATION_JOBSKIN_POINT,  2, 255 }, //Busfahrer
    {TRUCKERBASE_JOBSKIN_POINT,  3, 32 }, //Trucker
    {AIRPORTLS_JOBSKIN_POINT,  4, 61 }, //Pilot
    {980.6174,  -933.2461,   41.3419,  5, 50 }, //Mechaniker
    {1945.9237,-1793.6355,13.5469,  5, 50 }, //Mechaniker
    {662.6830,-579.0665,16.3359,  5, 50 }, //Mechaniker
    {-93.9144,-1196.9713,2.4775,  5, 50 }, //Mechaniker
    { LSPD_INTERIOR_LAWYER_SKIN_POINT,  6, 57 }, // Lawyer (Anwalt)
    {2046.2723,  -1913.2064,  13.5469,  7, 260 }, //Straßenreiniger
    {2118.6157,  -2085.0828,  13.5544,  8, 260 }, //Müllmann
    {GARDENERBASE_JOBSKIN_POINT, 9, 35 }, //Gärtner
    {831.2045,  865.6005,  12.5911,  10, 27 }, //Bauarbeiter
    {BOATCARGOJOB_JOBSKIN_POINT,  11, 37 }, //Schiffsfahrer
    {1551.5492,  -1005.0830,  24.0781,  12, 295 }, //Geldtransport
    {1021.9334,  -1371.0099,  13.5585,  13, 264 }, //Eisfahrer
    {2117.3662,  -1790.0100,  13.5547,  15, 155 }, //Pizzalieferant
    {TAXISTATIONS_JOBSKIN_POINT_CITYHALL, 16, 189 }, //Taxifahrer
	{TAXISTATIONS_JOBSKIN_POINT_BUSSTATION,  16, 189 }, //Taxifahrer
    {1437.4211,  -1694.0231,    13.5469,  16, 189 }, //Taxifahrer am Werbepunkt
    {1735.0045,  -1944.0450,  13.5681,  23, 253 }, //Zugfahrer
    {2417.1555,  -1220.1472,  25.3914,  20, 63 }, //Hure
    {2384.0181,  -1915.5509,  13.5469,  24, 168 } //Hotdog
};

COMMAND:jobkleidung(playerid,params[]) {
    #pragma unused params
    new
        job = Spieler[playerid][pJob];
    if(!job) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keinen Job.");
    }
    else {
        for(new i ; i < sizeof(g_JobSkins) ; i++) {
            if( IsPlayerInRangeOfPoint(playerid,5.0,g_JobSkins[i][JS_fX],g_JobSkins[i][JS_fY],g_JobSkins[i][JS_fZ] )) {
                if( job == g_JobSkins[i][JS_iJob] ) {
                    if( GetPlayerSkin(playerid) == Spieler[playerid][pSkin] ) {
                        SetPlayerSkin(playerid,g_JobSkins[i][JS_iSkin]);
                        SendClientMessage(playerid,COLOR_GREEN,"Du hast deinen Job-Skin angezogen.");
                    }
                    else {
                        SetPlayerSkin(playerid,Spieler[playerid][pSkin]);
                        SendClientMessage(playerid,COLOR_YELLOW,"Du hast deinen Job-Skin ausgezogen.");
                    }
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Falscher Job für diese Wechselposition.");
                }
                return 1;
            }
        }
        SendClientMessage(playerid,COLOR_RED,"Du kannst deine Jobkleidung hier nicht wechseln.");
    }
    return 1;
}

stock GetOnlinePlayers( ) {
    new
        players;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            players++;
        }
    }
    return players;
}
COMMAND:technikabteilung(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(isnull(params)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Technikabteilung [Nachricht]");
    }
    new
        String[256];
    mysql_real_escape_string(params,String,gWebSQL,sizeof(String) );
    format(String,sizeof(String),"INSERT INTO `notizen` (`admin`, `content`) VALUES ('%s', '%s')",GetName(playerid),String);
    mysql_pquery(String,THREAD_TECHNIKABTEILUNG,playerid,gWebSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:akteneintrag(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        Spielername[MAX_PLAYER_NAME],
        String[128],
        query[300];
    mysql_real_escape_string(params,params,gSQL,strlen(params) );
    if(sscanf(params,"s[24]s[128]",Spielername,String)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Akteneintrag [SPIELERNAME] [EINTRAG]");
    }
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s'",Spielername);
    mysql_pquery(query,THREAD_AKTENEINTRAG_EXISTS,playerid,gSQL,MySQLThreadOwner);
    SetPVarString(playerid,"Akteneintrag",params);
    return 1;
}

COMMAND:offprison(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        Spielername[MAX_PLAYER_NAME],
        String[128],
        time,
        query[300];
    mysql_real_escape_string(params,String,gSQL, strlen(params) );
    if(sscanf(params,"s[24]is[128]",Spielername,time,String)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Offprison [SPIELERNAME] [MINUTEN-ZEIT] [GRUND]");
    }
    if( time < 0 ) {
        SendClientMessage(playerid, COLOR_RED, "Ungültige Zeit.");
        return 1;
    }
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s'",Spielername);
    mysql_pquery(query,THREAD_OFFPRISON_EXISTS,playerid,gSQL,MySQLThreadOwner);
    SetPVarString(playerid,"OffPrison",params);
    return 1;
}

COMMAND:newsspenden(playerid,params[]) {
    new
        betrag;
    if(sscanf(params,"i",betrag)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Newsspenden [BETRAG]");
    }
    if( !IsPlayerInRangeOfPoint(playerid, 3.0, SANABASE_DONATION_POINT)) {
        SendClientMessage(playerid, COLOR_RED, "Falscher Ort um eine Spende durchzuführen.");
        return 1;
    }
    if( !( 50000  <= betrag <= 50000000) ) {
        SendClientMessage(playerid, COLOR_RED, "Ungültiger Betrag (50.000$ - 50.000.000$)");
        return 1;
    }
    if( Spieler[playerid][pCash] < betrag ) {
        SendClientMessage(playerid, COLOR_RED, "Du besitzt diese Menge an Geld nicht auf der Hand.");
        return 1;
    }
    new
        String[128];
    format(String,sizeof(String),"[SPENDE] %s hat $%s an die SA-NA gespendet. Vielen Dank!",GetName(playerid), AddDelimiters(betrag));
    GivePlayerCash(playerid, -betrag);
    Kasse[Sana] += betrag;
    SendClientMessageToAll(COLOR_YELLOW,String);
    return 1;
}
COMMAND:waffenlager(playerid,params[]) {
    if(HasWeaponBlock(playerid))
    {
        SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Befehl nicht ausführen!");
        return SendWeaponBlockInfo(playerid);
    }
    if( Spieler[playerid][pFraktion] == 0 )
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion.");
        return 1;
    }
    for(new i ; i < g_iWaffenLager ; i++)
    {
        if( IsPlayerInRangeOfPoint(playerid,3.0,g_WaffenLager[i][WL_fX],g_WaffenLager[i][WL_fY],g_WaffenLager[i][WL_fZ]))
        {
            if( Spieler[playerid][pFraktion] == g_WaffenLager[i][WL_iFraktion] )
            {
                if(waffenlagerzu[Spieler[playerid][pFraktion]]==0)
                {
                    ShowWaffenLager(playerid,0);
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Das Waffenlager ist geschlossen!");
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Das ist nicht das Waffenlager deiner Fraktion.");
            }
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht in der Nähe eines Waffenlagers.");
    return 1;
}

stock GetWaffenLagerIndex( fraktion ) {
    for(new i ; i < g_iWaffenLager ; i++) {
        if( g_WaffenLager[i][WL_iFraktion] == fraktion ) {
            return i;
        }
    }
    return -1;
}
stock ShowWaffenLager(playerid, menuid ) {
    if( menuid == 0 ) {
        ShowPlayerDialog(playerid,DIALOG_WAFFENLAGER,DIALOG_STYLE_LIST, COLOR_HEX_LIGHTBLUE "Waffenlager","Einlagern\nWaffe bauen\nLagerinformation","Weiter","Abbruch");
    }
    else if( menuid == 1 ) {
        ShowPlayerDialog(playerid,DIALOG_WAFFENLAGER_LAGERN,DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE "Waffenlager - Einlagern","{FFFFFF}Gib an,wieviele Waffenteile du im\nWaffenlager einlagern möchtest.","Einlagern","Zurück");
    }
    else if( menuid == 2 ) {
        // DIALOG_WAFFENLAGER_BAUEN
        new
            index,
            waffe[24],
            String[600];
        index = GetWaffenLagerIndex( Spieler[playerid][pFraktion] );
        for(new i ; i < sizeof(g_WaffenLagerConfig) ; i++) {
            if( g_WaffenLagerConfig[i][WLC_iPrice] > g_WaffenLager[index][WL_iWaffenTeile] ) {
                strcat( String , "{FF0000}", sizeof(String) );
            }
            else {
                strcat( String , "{00FF00}", sizeof(String) );
            }
            if( g_WaffenLagerConfig[i][WLC_iWaffe] == -1 ) {
                format(String,sizeof(String),"%sSchutzweste / HP , Wert: %d , Waffenteile: %d\n",String,g_WaffenLagerConfig[i][WLC_iMuni],g_WaffenLagerConfig[i][WLC_iPrice]);
            }
            else {
                GetWeaponNameEx( g_WaffenLagerConfig[i][WLC_iWaffe] , waffe , sizeof(waffe) );
                format(String,sizeof(String),"%s%s, Schuss: %d , Waffenteile: %d\n",String,waffe,g_WaffenLagerConfig[i][WLC_iMuni],g_WaffenLagerConfig[i][WLC_iPrice]);
            }
        }
        ShowPlayerDialog(playerid,DIALOG_WAFFENLAGER_BAUEN,DIALOG_STYLE_LIST, COLOR_HEX_LIGHTBLUE "Waffenlager - Bauen", String ,"Bauen","Zurück");
    }
    else if( menuid == 3 ) {
        new
            index,
            fraktion[50],
            String[128];
        ReturnPlayerFraktion( playerid, fraktion );
        index = GetWaffenLagerIndex( Spieler[playerid][pFraktion] );
        format(String,sizeof(String),"{FFFFFF}Waffenlager: %s\nWaffenteile: %d Stk", fraktion , g_WaffenLager[index][WL_iWaffenTeile] );
        ShowPlayerDialog(playerid,DIALOG_WAFFENLAGER_INFO,DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE "Waffenlager - Lagerinformation", String ,"Zurück","");
    }
    return 1;
}

COMMAND:hmenu(playerid,params[]) {
    return 1;
}

COMMAND:bombelegen(playerid,params[]) {
    if(Spieler[playerid][pFraktion] != 19 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Terrorist.");
        return 1;
    }
    if( Bombs[B_iTickBlocked] > gettime() ) {
        SendClientMessage(playerid, COLOR_RED, "Es kann zur Zeit keine Bombe gelegt werden.");
        return 1;
    }
    if( Bombs[B_iStatus] != Bombe_Inactive ) {
        SendClientMessage(playerid, COLOR_RED, "Eine Bombe ist bereits gelegt worden.");
        return 1;
    }
    new
        String[128];
    GetBombDrahtColorString(String);
    ShowPlayerDialog(playerid,DIALOG_BOMBELEGEN,DIALOG_STYLE_LIST,COLOR_HEX_LIGHTBLUE "Bombe Legen - Drahtfarbe", String , "Legen","Abbruch");
    return 1;
}

stock GetBombDrahtColorString( string[] , size = sizeof(string) ) { // scheiss funktionsname
    for(new i ; i < sizeof(g_BombenDraht) ; i++) {
        format(string,size,"%s%s%s\n",string,GetColorCodeFromHex( g_BombenDraht[i][BD_iColor] ), g_BombenDraht[i][BD_sFarbe] );
    }
    return 1;
}

stock GetColorCodeFromHex(hexColor)
{
    new
        string[9]
    ;
    format(string, sizeof(string), "{%06x}", hexColor >>> 8);
    return string;
}

stock ClearAnimationsEx(playerid,delay = 50 ) {
    SetTimerEx("_ClearAnimationsEx",delay,false,"d",playerid);
    return 1;
}
forward _ClearAnimationsEx(playerid,delay ) ;
public _ClearAnimationsEx(playerid,delay ) {
    ClearAnimations(playerid,1);
    return 1;
}
stock ClearAnimationsExx(playerid,delay = 50 ) {
    SetTimerEx("_ClearAnimationsExx",delay,false,"d",playerid);
    return 1;
}
forward _ClearAnimationsExx(playerid,delay ) ;
public _ClearAnimationsExx(playerid,delay ) {
    ClearActorAnimations(playerid);
    return 1;
}

forward OnBombPlanted(playerid,bomb);
public OnBombPlanted(playerid,bomb) {
    new
        String[128];
    format(String,sizeof(String),"ACHTUNG! Es wurde von einem Terroristen eine Bombe platziert!");
    SendClientMessageToAll(COLOR_RED,String);
    return 1;
}

COMMAND:entschaerfen(playerid,params[]) {
    if( !IsPlayerExecutive(playerid) ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
        return 1;
    }
    if( !IsPlayerInRangeOfBomb(playerid) ) {
        SendClientMessage(playerid, COLOR_RED, "Hier befindet sich keine Bombe.");
        return 1;
    }
    if( Bombs[B_iStatus] == Bombe_Planting ) {
        SendClientMessage(playerid, COLOR_RED, "Die Bombe ist noch nicht scharf.");
        return 1;
    }
    if( Bombs[B_iStatus] == Bombe_Defusing ) {
        SendClientMessage(playerid, COLOR_RED, "Die Bombe wird bereits von jemandem entschärft.");
        return 1;
    }
    new
        String[128];
    GetBombDrahtColorString(String);

    Bombs[B_iStatus] = Bombe_Defusing;
    ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.0, 1, 0, 0, 1, 0); // bombe legen
    SetTimerEx("BombDefuseAnimation",73,false,"d",playerid);

    ShowPlayerDialog(playerid,DIALOG_BOMBDEFUSE,DIALOG_STYLE_LIST,COLOR_HEX_LIGHTBLUE "Bombe - Entschärfen",String,"Weiter","Abbruch");
    return 1;
}

forward BombDefuseAnimation(playerid);
public BombDefuseAnimation(playerid) {
    ApplyAnimation(playerid, "BOMBER", "BOM_PLANT_CROUCH_OUT", 4.0, 1, 0, 0, 1, 0); // bombe ende
    return 1;
}

COMMAND:loben(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Loben [Spieler]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht online.");
    }
    if( playerid == giveid ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst dich selber nicht loben.");
    }
    if( Spieler[giveid][pAdminDienst] ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist gerade im Admindienst.");
    }
    new
        String[140];
    SetPVarString(playerid,"Loben",params);
    // SpielerGelobt(giveid);
    format(String,sizeof(String),"SELECT COUNT(*) AS `Anzahl` FROM `lob` WHERE `lobender` = '%s'  AND `datum` = CURDATE()",GetName(playerid));
    mysql_pquery( String , THREAD_LOBENSELECT , playerid, gSQL,MySQLThreadOwner );
    return 1;
}

stock SpielerGelobt(playerid) {
    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_LOBEN , 345, 1, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 );
    SetTimerEx("RemovePlayerAttachedObjectEx",73,false,"dd",playerid,ATTACHED_INDEX_LOBEN);
    Spieler[playerid][pLobe]++;
    return 1;
}

forward RemovePlayerAttachedObjectEx(playerid,index);
public RemovePlayerAttachedObjectEx(playerid,index) {
    RemovePlayerAttachedObject(playerid,index);
    return 1;
}

stock LoadFahrzeugVerleih() {
    new
        modelid,
        price,
        String[128];
    for(new i ; i < sizeof(g_FahrzeugVerleihFahrzeuge) ; i++) {
        modelid = g_FahrzeugVerleihFahrzeuge[i][FVF_iModel];
        price = g_FahrzeugVerleihFahrzeuge[i][FVF_iPrice];
        format(String,sizeof(String),"{FFBB00}%s\n\
        Mietpreis: $%s, für 3 Stunden",CarName[modelid - 400], AddDelimiters(price));
        g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] = CreateVehicle( modelid ,  g_FahrzeugVerleihFahrzeuge[i][FVF_fX] , g_FahrzeugVerleihFahrzeuge[i][FVF_fY] , g_FahrzeugVerleihFahrzeuge[i][FVF_fZ] , g_FahrzeugVerleihFahrzeuge[i][FVF_fRot],-1,-1, 60 );
        g_FahrzeugVerleihFahrzeuge[i][FVF_t3dLabel] = CreateDynamic3DTextLabel( String , 0xFF8C00FF , 0.0,0.0 , 1.0 , 25.0 ,.attachedvehicle = g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] );
        SetVehicleNumberPlate(g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID],"VERLEIH");
        SetVehicleToRespawn(g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID]);
        aiVehicles[ g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] ] = VEH_VERLEIH;
        //Attach
    }
    SetTimer("FahrzeugVerleih_Pulse",15149,true);
    return 1;
}

stock GetFahrzeugVerleihIndex( vehicleid ) {
    for(new i ; i < sizeof(g_FahrzeugVerleihFahrzeuge) ; i++) {
        if( g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] == vehicleid) {
            return i;
        }
    }
    return -1;
}

stock GetFreeFahrzeugVerleihSpawn( index ) {
    new
        i;
    for( i = 0 ; i < sizeof(g_FahrzeugVerleihSpawn) ; i++) {
        if( g_FahrzeugVerleihSpawn[i][FVS_iVerleihIndex] == index) {
            if( g_FahrzeugVerleihSpawn[i][FVS_bFree] == true) {
                return i;
            }
        }
    }
    // Wenn alle geblockt,setzen wir einfach alle wieder auf frei und fangen bei 0 an
    for( i = 0 ; i < sizeof(g_FahrzeugVerleihSpawn) ; i++) {
        if( g_FahrzeugVerleihSpawn[i][FVS_iVerleihIndex] == index) {
            g_FahrzeugVerleihSpawn[i][FVS_bFree] = true;
        }
    }
    return GetFreeFahrzeugVerleihSpawn(index);
}

stock SetCameraBehindPlayerEx(playerid,delay = 50 ) {
    SetTimerEx("_SetCameraBehindPlayerEx",delay,false,"d",playerid);
    return 1;
}

forward _SetCameraBehindPlayerEx(playerid);
public _SetCameraBehindPlayerEx(playerid) {
    SetCameraBehindPlayer(playerid);
    return 1;
}

forward FahrzeugVerleih_Pulse();
public FahrzeugVerleih_Pulse() {
    new
        modelid,
        String[128],
        jetzt = gettime();
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i)) continue;
            //#endif
            if( Spieler[i][pVehicleVerleih] != INVALID_VEHICLE_ID ) {
                if( Spieler[i][tickVehicleVerleih] < jetzt ) {
                    modelid = GetVehicleModel( Spieler[i][pVehicleVerleih] );
                    //printf("playerid %d modelid %d",i,modelid);
                    format(String,sizeof(String),"Die Leihzeit ist abgelaufen ( Fahrzeug: %s )",CarName[modelid - 400]);
                    SendClientMessage(i,COLOR_RED,String);
                    Spieler[i][tickVehicleVerleih] = 0;
                    DestroyVehicle(Spieler[i][pVehicleVerleih]);
                    Spieler[i][pVehicleVerleih] = INVALID_VEHICLE_ID;
                }
            }
        }
    }
    return 1;
}

COMMAND:hwban(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        grund[128],
        giveid;
    if(sscanf(params,"us[128]",giveid,grund)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Hwban [SPIELER] [GRUND]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden.");
    }
    new
        serial[128],
        query[256];
    gpci(giveid, serial,sizeof( serial ) );
    format(query,sizeof(query),"INSERT INTO `hwban` (`id`, `hwid`) VALUES (NULL, '%s')",serial );
    mysql_pquery(query,THREAD_HWBAN_INSERT,playerid,gSQL,MySQLThreadOwner);
    format(query,sizeof(query),"%s %s hat Spieler %s einen PC-Ban verpasst.", GetPlayerAdminRang(playerid), GetName(playerid),GetName(giveid));
    SendAdminMessage(COLOR_YELLOW, query);
    format(query,sizeof(query),"Begründung: %s",grund);
    SendAdminMessage(COLOR_YELLOW, query);

    format(query,sizeof(query),"SELECT * FROM `hwban` WHERE `hwid` = '%s'",serial );
    mysql_pquery(query,THREAD_HWBAN,giveid,gSQL,MySQLThreadOwner);

    return 1;
}

forward DelayCameraMove(playerid,time,Float:x,Float:y,Float:z,Float:offset_x,Float:offset_y,Float:offset_z);
public DelayCameraMove(playerid,time,Float:x,Float:y,Float:z,Float:offset_x,Float:offset_y,Float:offset_z) {
    /* wiki.sa-mp.com */
    new
        // Float:x,Float:y,Float:z,
        Float:fScale = 5.0,
        Float:fPX, Float:fPY, Float:fPZ,
        Float:fVX, Float:fVY, Float:fVZ,
        Float:object_x, Float:object_y, Float:object_z;

    // Change me to change the scale you want. A larger scale increases the distance from the camera.
    // A negative scale will inverse the vectors and make them face in the opposite direction.

    GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
    GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);

    /*
    x = g_FahrzeugVerleihSpawn[spawn][FVS_fX];
    y = g_FahrzeugVerleihSpawn[spawn][FVS_fY];
    z = g_FahrzeugVerleihSpawn[spawn][FVS_fZ];
    */

    object_x = fPX + floatmul(fVX, fScale);
    object_y = fPY + floatmul(fVY, fScale);
    object_z = fPZ + floatmul(fVZ, fScale);
    /* --- */
    InterpolateCameraPos(playerid, fPX, fPY, fPZ ,x + offset_x , y + offset_y ,z + offset_z , 2750,CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, object_x , object_y , object_z, x, y, z + 1.0 , 2750 , CAMERA_MOVE);
    SetCameraBehindPlayerEx(playerid,time);
    SetTimerEx("TogglePlayerControllableEx",time + 307,false,"dd",playerid,true);
    SetTimerEx("RemovePlayerFromVehicleEx",time + 307,false,"d",playerid);
    return 1;
}

ShowKreditLimitUebersicht(playerid,page,referenz = 0) {
    new
        String[400];
    if( page == 0 ) {
        for(new i ; i < sizeof(g_KreditLimit) ; i++) {
            format(String,sizeof(String),"%s%d$\n",String,g_KreditLimit[i][KL_iKreditwert]);
        }
        ShowPlayerDialog(playerid,DIALOG_KREDITUEBERSICHT,DIALOG_STYLE_LIST,COLOR_HEX_ORANGE"Kreditübersicht",String,"Weiter","Abbruch");
    }
    else if(page == 1 ) {
        strcat(String,"Sie möchten vom Ihrer Bank einen Kredit in Höhe von $%d aufnehmen.\n\n\
                                Dieses Geld wird Ihnen nur von Ihrer Bank GELIEHEN und \n\
                                muss natürlich in Raten wieder zurückgezahlt werden!\n\n\
                                Wenn Sie diesen Kredit von Ihrer Bank akzeptierst,\n\
                                wird Ihnen jeden PayDay $%d abgezogen, um die Raten an die Bank zurückzuzahlen.",sizeof(String));
        strcat(String,"\nHinzu müssen Sie +$%d im Voraus zahlen, damit der Kredit genehmigt wird.",sizeof(String));
        format(String,sizeof(String),String,g_KreditLimit[referenz][KL_iKreditwert],g_KreditLimit[referenz][KL_iKreditRate],g_KreditLimit[referenz][KL_iKreditRate]);
        Spieler[playerid][pKreditAuswahl] = referenz;
        ShowPlayerDialog(playerid,DIALOG_KREDITCONFIRM,DIALOG_STYLE_MSGBOX,COLOR_HEX_ORANGE"Kredit Bestätigen",String,"Akzeptieren","Abbruch");
    }
    return 1;
}

COMMAND:kredit(playerid,params[]) {
    if(Spieler[playerid][pKreditwert] != 0 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du beziehst bereits einen Kredit.");
    }
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, BANKINTERIORLS_CREDIT_POINT) && !IsPlayerInRangeOfPoint(playerid, 2.0, BANKINTERIORLV_CREDIT_POINT) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keinen Kredit beantragen.");
    }
    new string1[256];
    new string2[256];
    new string3[256];
    new string4[768];
    format(string1, sizeof(string1), "Sehr geehrte Kundin, sehr geehrter Kunde,\n\num ein Kredit aufnehmen zu können, müssen Sie auf unserer Internetseite www.LyD-Roleplay.de,\n");
    format(string2, sizeof(string2), "unter der Kategorie'Staatliche Antragsstelle' ein Kreditantrag stellen.\nBitte verwenden Sie für Ihren Kreditantrag die dafür bestehende Vorlage.\n");
    format(string3, sizeof(string3), "Ihre Kreditanfrage werden wir dann dann von einem Sachbearbeiter bearbeiten lassen!\n");
    format(string4, sizeof(string4), "Unter welchen Konditionen Sie ein Kredit erhalten, werden Sie während der Bearbeitung\nIhrer Kreditanfrage von unserem Sachbearbeiter erfahren.\n\ngez.\nIhre Bank");
    format(string4, sizeof(string4), "%s%s%s%s", string1, string2, string3, string4);
    ShowPlayerDialog(playerid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "ZENTRALBANK", string4, "OK", "");
    //ShowKreditLimitUebersicht(playerid,0);
    return 1;
}

COMMAND:inthaft(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Inthaft [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( Spieler[giveid][pWanteds] < 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keine Wanted Punkte.");
    }
    new
        String[128];
    format(String,sizeof(String),"[FAHNDUNG] Die Polizei schreibt eine öffentliche Fahndung gegen %s aus.",GetName(giveid),Spieler[giveid][pWanteds]);
    SendClientMessageToAll(COLOR_ORANGE,String);
    format(String,sizeof(String),"Die Bevölkerung wird um Mithilfe zur Ergreifung des Täters gebeten. Belohnung: $50.000");
    SendClientMessageToAll(COLOR_ORANGE,String);
    return 1;
}

COMMAND:pnotrufinfo(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Notrufinfo [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        String[128];
    format(String,sizeof(String),"[STAAT] Bürgerstreit, Verbrechen oder Verkehrsdelikt - POLIZEI NOTRUF: /Anrufen 110.");
    SendClientMessageToAll(COLOR_ORANGE,String);
    return 1;
}
COMMAND:adventsinfop(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /adventsinfop [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        String[128];
    format(String,sizeof(String),"[WEIHNACHTEN] {00FF00}Nimm am täglichen Gewinnspiel teil und gewinne ein Adventstürchen! Befehl: /Adventskalender.");
    SendClientMessageToAll(COLOR_TURKIS,String);
    return 1;
}

COMMAND:ermitteln(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ermitteln [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( Spieler[giveid][pWanteds] < 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keine Wanted Punkte.");
    }
    new
        String[128];
    format(String,sizeof(String),"Polizeibeamter %s nimmt die Ermittlungen gegen Straftäter %s, Wantedanzahl: %d auf!",GetName(playerid),GetName(giveid),Spieler[giveid][pWanteds]);
    SendFraktionMessage(1, COLOR_YELLOW, String);
    SendFraktionMessage(2, COLOR_YELLOW, String);
    SendFraktionMessage(16, COLOR_YELLOW, String);
    SendFraktionMessage(18, COLOR_YELLOW, String);
    Spieler[playerid][pDutyTask] = 1;
    return 1;
}
COMMAND:pvk(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Pvk [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( Spieler[giveid][pWanteds] < 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keine Wanted Punkte.");
    }
    new
        String[128];
    format(String,sizeof(String),"Polizeibeamter %s benötigt dringende Verstärkung beim Straftäter %s, Wantedanzahl: %d!",GetName(playerid),GetName(giveid),Spieler[giveid][pWanteds]);
    SendFraktionMessage(1, COLOR_RED, String);
    SendFraktionMessage(2, COLOR_RED, String);
    SendFraktionMessage(16, COLOR_RED, String);
    SendFraktionMessage(18, COLOR_RED, String);
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    return 1;
}

COMMAND:ovk(playerid,params[]) {
    new
        giveid;
    if(!(Spieler[playerid][pFraktion] == 5) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ovk [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        String[128];
    format(String,sizeof(String),"Ordnungsbeamter %s benötigt polizeiliche Verstärkung! Täter: %s, Wantedanzahl: %d!",GetName(playerid),GetName(giveid),Spieler[giveid][pWanteds]);
    SendFraktionMessage(1, COLOR_RED, String);
    SendFraktionMessage(2, COLOR_RED, String);
    SendFraktionMessage(5, COLOR_RED, String);
    SendFraktionMessage(16, COLOR_RED, String);
    SendFraktionMessage(18, COLOR_RED, String);
    SendFraktionMessage(22, COLOR_RED, String);
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    return 1;
}

COMMAND:zvk(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Zvk [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( Spieler[giveid][pWanteds] < 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat keine Wanted Punkte.");
    }
    new
        String[128];
    format(String,sizeof(String),"Zollbeamter %s benötigt dringende Verstärkung beim Straftäter %s, Wantedanzahl: %d!",GetName(playerid),GetName(giveid),Spieler[giveid][pWanteds]);
    SendFraktionMessage(1, COLOR_RED, String);
    SendFraktionMessage(2, COLOR_RED, String);
    SendFraktionMessage(16, COLOR_RED, String);
    SendFraktionMessage(18, COLOR_RED, String);
    SendFraktionMessage(22, COLOR_RED, String);
    return 1;
}

COMMAND:meldestelle(playerid,params[]) {
    new
        giveid;
    if( !IsPlayerExecutive(playerid) && Spieler[playerid][pFraktion] != 5) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI!");
    }
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Meldestelle [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        String[128];
    SendClientMessage(playerid,COLOR_YELLOW,"=========MELDEREGISTER=========");
    format(String,sizeof(String),"Eintrag von: %s",GetName(giveid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Staatsbürger: %s",Spieler[giveid][pStaat]);
    SendClientMessage(playerid,COLOR_WHITE,String);
    if( GetPlayerHouse(giveid) == 999 && Spieler[giveid][pPlayerHotel] == 999 ) {
        SendClientMessage(playerid,COLOR_WHITE,"Obdachlos: Ja");
    }
    else {
        SendClientMessage(playerid,COLOR_WHITE,"Obdachlos: Nein");
    }
    new pHouse = GetPlayerHouse(giveid);
    if( pHouse == 999 ) {
        SendClientMessage(playerid,COLOR_WHITE,"Wohnhaft: Unbekannt");
    }
    else {
        format(String,sizeof(String),"Wohnhaft: %s",Haus[pHouse][hName]);
        SendClientMessage(playerid,COLOR_WHITE,String);
        SendClientMessage(playerid,COLOR_YELLOW,"Der Wohnort vom Spieler wurde dir auf der Map markiert!");
        SetPlayerCheckpointEx(playerid, Haus[pHouse][EnterX],Haus[pHouse][EnterY],Haus[pHouse][EnterZ], 3.0, CP_MELDESTELLE);
    }
    return 1;
}

forward Pulse_Tickets();
public Pulse_Tickets() {
    new tickets;
    new String[64];
    for(new i=0 ; i< MAX_PLAYERS ;i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAdmin] > 0 ) {
                TextDrawShowForPlayer(i,tdOffeneTickets);
            }
            else {
                TextDrawHideForPlayer(i,tdOffeneTickets);
            }
            //
            if(PlayerNeedsHelp[i] == 1)
            {
                tickets++;
            }
        }
    }
    if( tickets == 0 ) {
        format(String,sizeof(String),"Offene Support-Tickets: ~g~0");
    }
    else {
        format(String,sizeof(String),"Offene Support-Tickets: ~y~%d",tickets);
    }
    TextDrawSetString(tdOffeneTickets,String);
    return 1;
}

COMMAND:musik(playerid,params[]) {
    if( !Spieler[playerid][pMP3Player] ) {
        return SendClientMessage(playerid,COLOR_RED,"Du besitzt keinen MP3-Player.");
    }
    ShowPlayerDialog(playerid, DIALOG_MUSIK, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Radiosender", COLOR_HEX_WHITE"Radio ausschalten\n1-Live\nTechnoBase.FM\nHardBase.FM\nI Love Radio\nBreakz.us\nYouFM\nPlanet Radio\nThe Club\nNightWax\nI Love Mashup\nDas Hitradio\nI Love the Battle\nI Love 2Dance\nLogin-Musik\niTunes Hot 40", "Auswählen", "Abbrechen");
    return 1;
}
COMMAND:mp3player(playerid,params[]) {
    return cmd_musik(playerid,params);
}

stock MaxVehicles(playerid) {
    if( !Spieler[playerid][pPremiumCarSlot] ) {
        return (MaxVeh - 1);
    }
    return MaxVeh;
}

COMMAND:sfreischalten(playerid,params[] ) {
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /SFreischalten [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    if( Spieler[giveid][pPremiumCarSlot] == 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat bereits den Premium Fahrzeugslot.");
    }
    new
        String[128];
    format(String,sizeof(String),"%s %s hat dir einen Premium Fahrzeugslot freigeschaltet!", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    Spieler[giveid][pPremiumCarSlot] = 1;
    return 1;
}

/*stock IsValidSpawn(playerid) {
    printf("IsValidSpawn(%s) - Spawn(X,Y,Z,Face,Int,Virtual) = (%.1f,%.1f,%.1f,%.1f,%d,%d)",
        GetName(playerid),
        Spieler[playerid][pSpawnX],
        Spieler[playerid][pSpawnY],
        Spieler[playerid][pSpawnZ],
        Spieler[playerid][pSpawnFace],
        Spieler[playerid][pSpawnInt],
        Spieler[playerid][pSpawnVirtual]
    );

    if( Spieler[playerid][pSpawnX] == 0.0 &&
        Spieler[playerid][pSpawnY] == 0.0 &&
        // Spieler[playerid][pSpawnZ] == 0.0 &&
        Spieler[playerid][pSpawnFace] == 0.0 &&
        Spieler[playerid][pSpawnInt] == 0 &&
        Spieler[playerid][pSpawnVirtual] == 0 ) {
        return 0;
    }
    return 1;
}

stock ResetPlayerSpawn(playerid) {
    Spieler[playerid][pSpawnX] = 0.0;
    Spieler[playerid][pSpawnY] = 0.0;
    Spieler[playerid][pSpawnZ] = 0.0;
    Spieler[playerid][pSpawnFace] = 0.0;
    Spieler[playerid][pSpawnInt] = 0;
    Spieler[playerid][pSpawnVirtual] = 0;
    return 1;
}
stock SetOldPlayerSpawn(playerid) {
    SetPlayerPos(playerid,Spieler[playerid][pSpawnX],Spieler[playerid][pSpawnY],Spieler[playerid][pSpawnZ]);
    SetPlayerFacingAngle(playerid,Spieler[playerid][pSpawnFace]);
    SetPlayerInterior(playerid,Spieler[playerid][pSpawnInt]);
    SetPlayerVirtualWorld(playerid,Spieler[playerid][pSpawnVirtual]);
    Streamer_UpdateEx(playerid,Spieler[playerid][pSpawnX],Spieler[playerid][pSpawnY],Spieler[playerid][pSpawnZ],Spieler[playerid][pSpawnVirtual],Spieler[playerid][pSpawnInt]);
    return 1;
}*/

COMMAND:wdrop(playerid,params[]) {
    if( GetPlayerWeapon(playerid) == 0 ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast keine Waffe, die du ablegen kannst.");
        return 1;
    }
    if( ForbiddenGun(playerid) ) {
        SendClientMessage(playerid,COLOR_RED,"Ban-Escape.");
        return 1;
    }
    if( DropWeapon(playerid) == 0 ) {
        SendClientMessage(playerid,COLOR_RED,"Diese Waffe kann nicht abgelegt werden.");
        return 1;
    }
    else {
        SendClientMessage(playerid,COLOR_YELLOW,"Du hast die Waffe weggeworfen.");
    }
    return 1;
}

COMMAND:rauswerfenhotel(playerid,params[]){
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        giveid,
        query[128],
        hStr[256],
        hotel;
    hotel = IsPlayerAtHotel(playerid);
    if(hotel == 999) return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Hotelzimmer.");
    if( strcmp(Hotel[hotel][hBesitzer],"Niemand") == 0 )return SendClientMessage(playerid, COLOR_GREY, "Das Hotelzimmer wird nicht gemietet.");
    sscanf( Hotel[hotel][hBesitzer] , "u",giveid);
    if( IsPlayerConnected(giveid) ) {
        // Falls Spieler verbunden,direkt rauswerden
        Spieler[giveid][pSpawnChange] = 0;
        Spieler[giveid][pPlayerHotel] = 999;
        SendClientMessage(giveid,COLOR_RED,"Du wurdest aus dem Hotelzimmer geworfen.");
    }

    //format(query, sizeof(query), "UPDATE `accounts` SET `HotelKey` = '999' WHERE `Name` = '%s'", Hotel[hotel][hBesitzer] );
    //mysql_pquery(query,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);


    format( Hotel[hotel][hBesitzer] , MAX_PLAYER_NAME , "Niemand" );
    Hotel[hotel][hLock] = 1;

    format(query,sizeof(query),"%s %s hat %s aus seinem Hotelzimmer geworfen.", GetPlayerAdminRang(playerid), GetName(playerid),GetName(giveid));
    SendAdminMessage(COLOR_YELLOW, query);

    format(hStr, sizeof(hStr), "Dieses Hotelzimmer ist noch zu vermieten!\n\
                                %s\n\
                                Zimmer Mietpreis: %d$\n\
                                Mit /miethotelraum mietest du ein Hotelzimmer", Hotel[hotel][hName], Hotel[hotel][hMietPreis]);
    UpdateDynamic3DTextLabelText(Hotel[hotel][hText],COLOR_PROP,hStr);


    return 1;
}

COMMAND:telefonzelle(playerid,params[]) {
    if( IsPlayerAtTelefonzelle(playerid) == 999 ) {
        SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht an einer Telefonzelle.");
        return 1;
    }
    if( Spieler[playerid][pLevel] < 2 ) {
        return SendClientMessage(playerid, COLOR_RED, "Aus Sicherheitsgründen musst du Level 2 sein um diese Funktion nutzen zu können!");
    }
    if( TelefonzelleAn[playerid] != INVALID_PLAYER_ID ) {
        SendClientMessage(playerid,COLOR_RED,"Du tätigst bereits einen Anruf.");
        return 1;
    }
    if( bBlockTelecom ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Telekommunikation wurde vom Staat vorübergehend abgeschaltet.");
    }
    ShowPlayerDialog(playerid,DIALOG_TELEFONZELLE,DIALOG_STYLE_LIST,"Telefonzelle","Anrufen\nSMS","Weiter","Abbruch");
    return 1;
}

COMMAND:bank(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid, 2.0, BANKINTERIORLS_SERVICE_POINT) && !IsPlayerInRangeOfPoint(playerid, 2.0, BANKINTERIORLV_SERVICE_POINT) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diesen Befehl hier nicht ausführen.");
    }
    Spieler[playerid][pPinVergessen] = 0;
    ShowPlayerDialog(playerid, DIALOG_BANK, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Bank", COLOR_HEX_WHITE"Bank-Info\nBankpin ändern\nGeldcheck einlösen\nBankpin vergessen", "Ausführen", "Abbrechen");
    return 1;
}

COMMAND:koffer(playerid,params[]) {
    if(Spieler[playerid][pKoffer] == false ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Koffer.");
    }
    if( PlayerIsPaintballing[playerid] == 1 ) {
            return SendClientMessage(playerid, COLOR_RED, "In der Paintball-Arena kannst du keinen Koffer rausholen!");
    }
    if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_KOFFER) ) {
        RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_KOFFER);
    }
    else {
        SetPlayerAttachedObject( playerid, ATTACHED_INDEX_KOFFER, 1210, 5, 0.293532, 0.103431, 0.007843, 340.256103, 257.806579, 0.000000, 1.000000, 1.000000, 1.000000 );
    }
    return 1;
}

COMMAND:kofferauf(playerid,params[]) {
    if(Spieler[playerid][pKoffer] == false ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt keinen Koffer.");
    }
    if( !IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_KOFFER) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst den Koffer nur öffnen, wenn du ihn gerade trägst.");
    }
    ShowKoffer(playerid,playerid);
    return 1;
}

COMMAND:kofferdurchsuchen(playerid,params[]) {
    if(!IsPlayerExecutive(playerid) && Spieler[playerid][pFraktion] != 5 )return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist oder Ordnungsbeamter.");
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Kofferdurchsuchen [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,4.0,x,y,z) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist zu weit entfernt von dir.");
    }
    if(Spieler[giveid][pKoffer] == false ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler besitzt keinen Koffer.");
    }
    if( !IsPlayerAttachedObjectSlotUsed(giveid,ATTACHED_INDEX_KOFFER) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler trägst seinen Koffer nicht.");
    }
    new
        String[128];
    format(String, sizeof(String), "* Officer %s durchsucht den Koffer von %s.", GetName(playerid), GetName(giveid));
    SendRoundMessage(x, y, z, COLOR_PURPLE, String);
    // Kofferinhalt
    SendKofferInfo(playerid,giveid);
    return 1;
}
COMMAND:koffereinziehen(playerid,params[]) {
    if(!IsPlayerExecutive(playerid) && Spieler[playerid][pFraktion] != 5 )return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist oder Ordnungsbeamter.");
    new
        giveid;
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Koffereinziehen [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,4.0,x,y,z) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist zu weit entfernt von dir.");
    }
    if(Spieler[giveid][pKoffer] == false ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler besitzt keinen Koffer.");
    }
    if( !IsPlayerAttachedObjectSlotUsed(giveid,ATTACHED_INDEX_KOFFER) ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler trägst seinen Koffer nicht.");
    }
    new
        String[128];
    format(String, sizeof(String), "* Officer %s entzieht den Koffer von %s.", GetName(playerid), GetName(giveid));
    SendRoundMessage(x, y, z, COLOR_PURPLE, String);
    // Kofferinhalt
    format(String,sizeof(String),"%s hat den Koffer von %s eingezogen.",GetName(playerid),GetName(giveid));
    SendFraktionMessage(1, COLOR_YELLOW, String);
    SendFraktionMessage(2, COLOR_YELLOW, String);
    SendFraktionMessage(16, COLOR_YELLOW, String);
    SendFraktionMessage(18, COLOR_YELLOW, String);
    ResetKoffer(giveid);
    Spieler[giveid][pKoffer] = false;
    if( IsPlayerAttachedObjectSlotUsed(giveid,ATTACHED_INDEX_KOFFER) ) {
        RemovePlayerAttachedObject(giveid,ATTACHED_INDEX_KOFFER);
    }
    return 1;
}

stock IsPlayerSpawned(playerid){
    new statex = GetPlayerState(playerid);
    if(statex != PLAYER_STATE_NONE && statex != PLAYER_STATE_WASTED && statex != PLAYER_STATE_SPAWNED) return true;
    return false;
}

forward LoadPremiumWeaponData(playerid);
public LoadPremiumWeaponData(playerid) {
    new
        query[550];
    for (new i = 0; i < 13; i++) {
        if( !isnull(query) ) {
            format(query,sizeof(query),"%s,`weapondata_slot%02d`",query,i);
        }
        else {
            format(query,sizeof(query),"`weapondata_slot%02d`",i);
        }
    }
    format(query,sizeof(query),"SELECT %s FROM `accounts` WHERE `name` = '%s'",query,GetName(playerid));
    mysql_pquery(query,THREAD_LOAD_ACCOUNT_WEAPONS,playerid,gSQL,MySQLThreadOwner);
    //printf("LoadPremiumWeaponData(%d) - %s",playerid,query);
    return 1;
}

stock SavePremiumWeaponData(playerid,bool:clear = false) {
    new
        info,
        query[600],
        Waffen[2];
    format(query,sizeof(query),"UPDATE `accounts` SET");
    for (new i = 0; i < 13; i++)
    {
        if( clear ) {
            format(query,sizeof(query),"%s `weapondata_slot%02d` = %d ",query,i,0);
            if( i != 12 ) {
                strcat(query,",",sizeof(query));
            }
        }
        else {
            GetPlayerWeaponData(playerid, i, Waffen[0], Waffen[1]);
            info = Class_CompressWeaponInfo( Waffen[0], Waffen[1] );
            if( Waffen[0] && Waffen[1] > 0 ) {
                format(query,sizeof(query),"%s `weapondata_slot%02d` = %d ",query,i,info);
            }
            else {
                format(query,sizeof(query),"%s `weapondata_slot%02d` = %d ",query,i,info);
            }
            if( i != 12 ) {
                strcat(query,",",sizeof(query));
            }
        }
    }
    format(query,sizeof(query),"%s WHERE `Name` = '%s'",query,GetName(playerid));
    //printf("SavePremiumWeaponData(%d) %s",playerid,query);
    mysql_oquery(query,THREAD_SAVE_ACCOUNT_WEAPONS,playerid,gSQL);
    return 1;
}

COMMAND:spielerip(playerid,params[]) {
    new
        giveid;
    if(Spieler[playerid][pAdmin] < 2 )return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if( sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Spielerip [Spieler]");
    }
    if(!IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    }
    new
        ip[16],
        String[128];
    GetPlayerIp(giveid,ip,sizeof(ip));
    format(String,sizeof(String),"%s - IP: %s",GetName(giveid),ip);
    SendClientMessage(playerid,COLOR_YELLOW,String);
    return 1;
}


COMMAND:blitzeraufstellen(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2 && Spieler[playerid][pFraktion] != 5  && Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitarbeiter des Ordnungsamtes oder der Polizei");
    }
    new
        limit,
        geldstrafe,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(sscanf(params,"dd",limit,geldstrafe)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Blitzeraufstellen [Geschwindigkeit] [Geldstrafe]");
    }
    if( !vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst nur als Fahrer den Blitzer installieren");
    }
    if( !IsACar( GetVehicleModel(vehicleid) ) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst nur in Autos einen Blitzer installieren");
    }
    if( aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex] != -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Ein Blitzer ist bereits installiert");
    }
    new
        String[128];
    if( AddVehicleBlitzer(vehicleid,limit,geldstrafe) ) {
        format(String,sizeof(String),"%s hat einen Blitzer im Auto installiert (%d km/h, $%d)",GetName(playerid),limit,geldstrafe);
        SendFraktionMessage(1, COLOR_RED, String);
        SendFraktionMessage(2, COLOR_RED, String);
        SendFraktionMessage(5, COLOR_RED, String);
        SendFraktionMessage(16, COLOR_RED, String);

        FreezePlayer(playerid);
    }
    else {
        SendClientMessage(playerid,COLOR_RED,"Es können keine weiteren Blitzer erstellt werden.");
    }
    return 1;
}

COMMAND:blitzerabbauen(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2 && Spieler[playerid][pFraktion] != 5  && Spieler[playerid][pFraktion] != 16 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist kein Mitarbeiter des Ordnungsamtes oder der Polizei");
    }
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if( !vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst nur als Fahrer den Blitzer deinstallieren");
    }
    if( !IsACar( GetVehicleModel(vehicleid) ) ) {
        return SendClientMessage(playerid,COLOR_RED,"In diesem Fahrzeug kann kein Blitzer installiert sein");
    }
    if( aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex] == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Es ist kein Blitzer installiert");
    }
    new
        String[128];

    DestroyVehicleBlitzer(vehicleid);
    format(String,sizeof(String),"%s hat den Blitzer im Auto deinstalliert",GetName(playerid));
    SendFraktionMessage(1, COLOR_RED, String);
    SendFraktionMessage(2, COLOR_RED, String);
    SendFraktionMessage(5, COLOR_RED, String);
    SendFraktionMessage(16, COLOR_RED, String);

    UnfreezePlayer(playerid);
    return 1;
}

stock PlaySoundForAll(soundid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        PlayerPlaySound(i,soundid,0.0,0.0,0.0);
    }
    return 1;
}

forward EventUhr();
public EventUhr() {
    new
        String[128];
    g_EventUhr[EU_iLeft]--;
    if( g_EventUhr[EU_iLeft] == 0 ) {
        KillTimer(g_EventUhr[EU_tTimer]);
        g_EventUhr[EU_tTimer] = INVALID_TIMER_ID;
        GameTextForAll("~g~Go Go Go",1550,5);
        PlaySoundForAll(1057);
    }
    else {
        format(String,sizeof(String),"~y~%d",g_EventUhr[EU_iLeft]);
        GameTextForAll(String,1260,5);
        PlaySoundForAll(1056);
    }
    return 1;
}

COMMAND:eventuhr(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if( g_EventUhr[EU_tTimer] != INVALID_TIMER_ID ) {
        return SendClientMessage(playerid,COLOR_RED,"Ein Eventtimer läuft gerade");
    }
    g_EventUhr[EU_tTimer] = SetTimer("EventUhr",1000,true);
    g_EventUhr[EU_iLeft] = 5 + 1;
    return 1;
}


COMMAND:eventmarker(playerid,params[]) {
    new
        funktion[32];
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(sscanf(params,"s[32]",funktion)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Eventmarker [START/LOESCHEN/ABBRECHEN/ERSTELLEN]");
    }
    if(!strcmp(params,"start")) {
        if( g_EventMarker[EV_iState] == 1 ) {
            new
                String[128];
            format(String,sizeof(String),"%s %s startet das Event", GetPlayerAdminRang(playerid), GetName(playerid));
            SendClientMessageToAll(COLOR_GREEN,String);

            for(new i ; i < MAX_PLAYERS ; i++) {
                SetPlayerRaceCheckpoint(i,0,
                    g_EventMarkerCheckpoints[0][0],
                    g_EventMarkerCheckpoints[0][1],
                    g_EventMarkerCheckpoints[0][2],
                    g_EventMarkerCheckpoints[1][0],
                    g_EventMarkerCheckpoints[1][1],
                    g_EventMarkerCheckpoints[1][2],
                    5.0)
                ;
                EventCP[i] = 0;
            }
            g_EventMarker[EV_iState] = 2;
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Eventstart nicht möglich");
        }
        return 1;
    }
    else if(!strcmp(params,"erstellen")) {
        if( g_EventMarker[EV_iState] == 0 ) {
            new
                Float:X,
                Float:Y,
                Float:Z,
                Float:Rot,
                cp;
            g_EventMarker[EV_iState] = 1;
            g_EventMarker[EV_iPlayerID] = playerid;
            g_EventMarker[EV_iCheckpoints] = 0;

            cp = g_EventMarker[EV_iCheckpoints];
            GetPlayerPos(playerid,X,Y,Z);
            GetPlayerFacingAngle(playerid,Rot);
            g_EventMarkerCheckpoints[cp][0] = X;
            g_EventMarkerCheckpoints[cp][1] = Y;
            g_EventMarkerCheckpoints[cp][2] = Z;
            g_EventMarkerCheckpoints[cp][3] = Rot;
            SendClientMessage(playerid,COLOR_GREEN,"Erstellen gestartet");
            SendClientMessage(playerid,COLOR_GREEN,"Weitere Positionen kannst du mit /Eventmarker erstellen");
            g_EventMarker[EV_iCheckpoints]++;
        }
        else if( g_EventMarker[EV_iState] == 1 ) {
            if( g_EventMarker[EV_iPlayerID] != playerid ) {
                return SendClientMessage(playerid,COLOR_RED,"Das Event wird bereits von einem Spieler erstellt");
            }
            new
                Float:X,
                Float:Y,
                Float:Z,
                Float:Rot,
                String[128],
                cp;
            cp = g_EventMarker[EV_iCheckpoints];
            GetPlayerPos(playerid,X,Y,Z);
            GetPlayerFacingAngle(playerid,Rot);
            g_EventMarkerCheckpoints[cp][0] = X;
            g_EventMarkerCheckpoints[cp][1] = Y;
            g_EventMarkerCheckpoints[cp][2] = Z;
            g_EventMarkerCheckpoints[cp][3] = Rot;
            format(String,sizeof(String),"%d. Checkpoint gespeichert!", cp + 1 );
            SendClientMessage(playerid,COLOR_YELLOW,String);
            g_EventMarker[EV_iCheckpoints]++;
        }
        else if ( g_EventMarker[EV_iState] == 2 ) {
            return SendClientMessage(playerid,COLOR_RED,"Event läuft bereits");
        }
    }
    else if(!strcmp(params,"loeschen")) {
        if( g_EventMarker[EV_iState] == 1 ) {
            for(new i ; i < sizeof(g_EventMarkerCheckpoints) ; i++) {
                g_EventMarkerCheckpoints[i][0] = 0.0;
                g_EventMarkerCheckpoints[i][1] = 0.0;
                g_EventMarkerCheckpoints[i][2] = 0.0;
                g_EventMarkerCheckpoints[i][3] = 0.0;
            }
            g_EventMarker[EV_iCheckpoints] = 0;
            g_EventMarker[EV_iState] = 0;
            g_EventMarker[EV_iPlayerID] = INVALID_PLAYER_ID;
            SendClientMessage(playerid,COLOR_YELLOW,"Eventmarker gelöscht!");
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Eventmarker können nicht gelöscht werden");
        }
    }
    else if(!strcmp(params,"abbrechen")) {
        if( g_EventMarker[EV_iState] == 2 ) {
            new
                String[128];
            for(new i ; i < sizeof(g_EventMarkerCheckpoints) ; i++) {
                g_EventMarkerCheckpoints[i][0] = 0.0;
                g_EventMarkerCheckpoints[i][1] = 0.0;
                g_EventMarkerCheckpoints[i][2] = 0.0;
                g_EventMarkerCheckpoints[i][3] = 0.0;
            }
            g_EventMarker[EV_iState] = 0;
            g_EventMarker[EV_iPlayerID] = INVALID_PLAYER_ID;
            g_EventMarker[EV_iCheckpoints] = 0;
            for(new i ; i < MAX_PLAYERS ; i++) {
                DisablePlayerRaceCheckpoint(i);
                EventCP[playerid] = 0;
            }
            format(String,sizeof(String),"%s %s hat das Event abgebrochen", GetPlayerAdminRang(playerid), GetName(playerid));
            SendClientMessageToAll(COLOR_RED,String);
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Das Event kann nicht abgebrochen werden, da es nicht läuft");
        }
    }
    else {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Eventmarker [START/LOESCHEN/ABBRECHEN/ERSTELLEN]");
    }
    return 1;
}


stock InitBallon() {
    new
        index;
    g_BallonConfig[BC_iStep] = 4;
    index = g_BallonConfig[BC_iStep];
    g_BallonConfig[BC_bForward] = false;
    g_BallonConfig[BC_iObject] = CreateDynamicObject( 19338 , g_BallonRoute[index][BR_fX], g_BallonRoute[index][BR_fY], g_BallonRoute[index][BR_fZ] , 0.0 , 0.0 , 0.0 );
    MoveBallon();
    return 1;
}
forward MoveBallon();
public MoveBallon() {
    new
        Float:x,
        Float:y,
        Float:z,
        index;
    //printf("MoveBallon Step %d Forward %d sizeof %d ",g_BallonConfig[BC_iStep],g_BallonConfig[BC_bForward], sizeof(g_BallonRoute) );
    if( g_BallonConfig[BC_bForward] == true ) {
        g_BallonConfig[BC_iStep]++;
        index = g_BallonConfig[BC_iStep];
        /*
        if( index == sizeof(g_BallonRoute) - 1 ) {
            printf("index %d",index);
            x = g_BallonRoute[index][BR_fX]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            y = g_BallonRoute[index][BR_fY]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            z = g_BallonRoute[index][BR_fZ]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            MoveDynamicObject( g_BallonConfig[BC_iObject] , x , y , z , g_BallonRoute[index][BR_fSpeed] + 8.0  ,  0.0  , 0.0  , frandom(0.0,360.0,1));
            printf("x,y,z = %.1f %.1f %.1f ",x,y,z);
            // Umdrehen
            print("Umdrehen");
            SendClientMessageToAll(COLOR_YELLOW,"Umdrehen");
        }
        */
        if( index == sizeof(g_BallonRoute)  ) {
            g_BallonConfig[BC_bForward] = false;
            SetTimer("MoveBallon",2*60*1000,false);
        }
        else {
            //printf("index %d",index);
            x = g_BallonRoute[index][BR_fX]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            y = g_BallonRoute[index][BR_fY]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            z = g_BallonRoute[index][BR_fZ]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            MoveDynamicObject( g_BallonConfig[BC_iObject] , x , y , z , g_BallonRoute[index][BR_fSpeed] ,  0.0  , 0.0  , frandom(0.0,360.0,1));
            //printf("x,y,z = %.1f %.1f %.1f ",x,y,z);
        }
    }
    else {
        g_BallonConfig[BC_iStep]--;
        index = g_BallonConfig[BC_iStep];
        if( index < 0 ) {
            // Umdrehen
            g_BallonConfig[BC_bForward] = true;
            SetTimer("MoveBallon",2*60*1000,false);
        }
        else {
            x = g_BallonRoute[index][BR_fX]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            y = g_BallonRoute[index][BR_fY]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            z = g_BallonRoute[index][BR_fZ]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            MoveDynamicObject( g_BallonConfig[BC_iObject] , x , y , z , g_BallonRoute[index][BR_fSpeed] ,  0.0  , 0.0  , frandom(0.0,360.0,1));
            //printf("x,y,z = %.1f %.1f %.1f ",x,y,z);
        }
    }
    return 1;
}

COMMAND:inballon(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        Float:x,Float:y,Float:z;
    GetDynamicObjectPos(  g_BallonConfig[BC_iObject] , x ,y ,z);
    SetPlayerPos(playerid,x,y,z  + 0.75 );
    return 1;
}

COMMAND:hausupgrade(playerid,params[]) {
    new
        String[128],
        house_index,
        vw;
    vw = GetPlayerVirtualWorld(playerid);
    house_index = vw;
    //printf("vw %d house_index %d",vw,house_index);
    if( !( 0 <= vw < MAX_HOUSES )  ) {
        return SendClientMessage(playerid,COLOR_RED,"Du stehst in keinem Haus-Upgrade Pickup.");
    }
    new
        index;
    index = GetHouseInteriorIndexByID( Haus[house_index][HouseInteriorID] );
    if( index == 999 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du stehst in keinem Haus-Upgrade Pickup.");
    }
    if( !IsPlayerInRangeOfPoint(playerid, 3.0 , g_HouseInterior[index][HI_fPickupX], g_HouseInterior[index][HI_fPickupY], g_HouseInterior[index][HI_fPickupZ] )) {
        return SendClientMessage(playerid,COLOR_RED,"Du stehst in keinem Haus-Upgrade Pickup.");
    }
    if( Spieler[playerid][pUpgradeWaffenlager] ) {
        format(String,sizeof(String),"Haus Waffenlager - FREIGESCHALTET");
    }
    else {
        format(String,sizeof(String),"Haus Waffenlager - NICHT FREIGESCHALTET");
    }
    if( Spieler[playerid][pUpgradeSafebox] ) {
        format(String,sizeof(String),"%s\nHaus Safebox - FREIGESCHALTET",String);
    }
    else {
        format(String,sizeof(String),"%s\nHaus Safebox - NICHT FREIGESCHALTET",String);
    }
    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE,DIALOG_STYLE_LIST,"Haus Upgrades",String,"Weiter","Abbruch");
    return 1;
}

COMMAND:savehausupgrade(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        String[160],
        house_index,
        vw;
    vw = GetPlayerVirtualWorld(playerid);
    house_index = vw;
    //printf("vw %d house_index %d",vw,house_index);
    if( !( 0 <= vw < MAX_HOUSES )  ) {
        return SendClientMessage(playerid,COLOR_RED,"Du stehst in keinem Haus-Upgrade Pickup.");
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    format(String,sizeof(String),"UPDATE `houseinterior` SET \
        `PickupX` = %.2f,\
        `PickupY` = %.2f,\
        `PickupZ` = %.2f \
        WHERE `ID` = %d",
        x,y,z, Haus[house_index][HouseInteriorID]
    );
    //print(String);
    mysql_pquery(String,THREAD_SAVEHOUSEUPGRADE,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock ShowHausUpgrade(playerid,bool:safebox = true) {
    new
        String[256];
    if( safebox ) {
        format(String,sizeof(String),"%s: %d Stk\n",g_HouseUpgradeBezeichnung[0],Spieler[playerid][pHausSafeboxDrogen]);
        format(String,sizeof(String),"%s%s: %d Stk\n",String,g_HouseUpgradeBezeichnung[1],Spieler[playerid][pHausSafeboxSpice]);
        ShowPlayerDialog(playerid, DIALOG_HAUSUPGRADE_SB ,DIALOG_STYLE_LIST,"Haus - Safebox",String,"Weiter","Abbruch");
    }
    else {
        if( Spieler[playerid][pHausWaffenlager] == 0 ) {
            format(String,sizeof(String),"Keine Waffe\n");
        }
        else {
            new
                weapon,
                muni,
                wname[24];
            Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager] , weapon,muni);
            GetWeaponNameEx(weapon,wname,sizeof(wname));
            format(String,sizeof(String),"%s mit %d Munition\n",wname,muni);
        }
        ShowPlayerDialog(playerid, DIALOG_HAUSUPGRADE_WL ,DIALOG_STYLE_LIST,"Haus - Waffenlager",String,"Weiter","Abbruch");
    }
    return 1;
}

CMD:festnehmen(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 5))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Festnehmen [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    /*
    if(playerid == pID ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an dir selbst ausführen!");
    }
    */
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(pID, 3.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");
    if( IsPlayerAttachedObjectSlotUsed(pID,ATTACHED_INDEX_HANDSCHELLE) ) {
        format(string, sizeof(string), "* Ordnungsbeamter %s hat %s die Handschellen abgemacht.", GetName(playerid), GetName(pID));
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
            {
                SendClientMessage(i, COLOR_LIGHTRED2, string);
            }
        }
        SetPlayerSpecialAction(pID,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(pID,ATTACHED_INDEX_HANDSCHELLE);
        Cuffed[pID] = 0;
    }
    else {
        format(string, sizeof(string), "* Ordnungsbeamter %s hat %s die Handschellen angelegt.", GetName(playerid), GetName(pID));
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
            {
                SendClientMessage(i, COLOR_LIGHTRED2, string);
            }
        }
        SetPlayerAttachedObject(pID, ATTACHED_INDEX_HANDSCHELLE, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
        SetPlayerSpecialAction(pID,SPECIAL_ACTION_CUFFED);
        Cuffed[pID] = 1;
    }

    UnFreeze(pID);
    return 1;
}

CMD:zerbrechen(pID, params[])
{
    new string[128];
    if( !IsPlayerInRangeOfPoint(pID, 2.0, -382.0342,-1426.4521,26.0822) ) {
        return SendClientMessage(pID, COLOR_RED, "Du bist nicht beim Schmied!");
    }
    new Float:x, Float:y, Float:z;
    GetPlayerPos(pID, x,y,z);
    if( IsPlayerAttachedObjectSlotUsed(pID,ATTACHED_INDEX_HANDSCHELLE) ) {
        format(string, sizeof(string), "Der Schmied zerbricht die Handschellen von %s", GetName(pID));
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
            {
                SendClientMessage(i, COLOR_PURPLE, string);
            }
        }
        SetPlayerSpecialAction(pID,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(pID,ATTACHED_INDEX_HANDSCHELLE);
        Cuffed[pID] = 0;
        GivePlayerCash(pID, -500);
    }
    return 1;
}

CMD:verhaften(playerid, params[])
{
    new pID, string[128];
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    if(sscanf(params, "u", pID))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Verhaften [SpielerID/Name]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    #if defined USE_NPCS
    if( IsPlayerNPC(pID) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an einem Bot ausführen!");
    #endif
    /*
    if(playerid == pID ) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst diese Funktion nicht an dir selbst ausführen!");
    }
    */
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    if(!IsPlayerInRangeOfPoint(pID, 3.0, x,y,z))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");

    if( IsPlayerAttachedObjectSlotUsed(pID,ATTACHED_INDEX_HANDSCHELLE) ) {
        format(string, sizeof(string), "* Polizeibeamter %s hat %s die Handschellen abgemacht.", GetName(playerid), GetName(pID));
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
            {
                SendClientMessage(i, COLOR_LIGHTRED2, string);
            }
        }
        SetPlayerSpecialAction(pID,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(pID,ATTACHED_INDEX_HANDSCHELLE);
        Cuffed[pID] = 0;
    }
    else {
        format(string, sizeof(string), "* Polizeibeamter %s hat %s die Handschellen angelegt.", GetName(playerid), GetName(pID));
        for(new i = 0 ; i < MAX_PLAYERS ; i++)
        {
            if(IsPlayerInRangeOfPoint(i, 10.0, x,y,z))
            {
                SendClientMessage(i, COLOR_LIGHTRED2, string);
            }
        }
        SetPlayerAttachedObject(pID, ATTACHED_INDEX_HANDSCHELLE, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
        SetPlayerSpecialAction(pID,SPECIAL_ACTION_CUFFED);
        Cuffed[pID] = 1;
    }

    UnFreeze(pID);
    return 1;
}

COMMAND:haustiershop(playerid,params[]) {
    /*new b = IsPlayerAtBiz(playerid);
    if(b == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Geschäftes.");
    new index = GetBizIndexByID( 50 );
    if( b != index ) {
         return SendClientMessage(playerid, COLOR_RED, "Nicht am Haustier Geschäft");
    }*/
    if( !IsPlayerInRangeOfPoint(playerid,3.0, PETSHOP_COORDS)) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht am Haustier Geschäft.");
    }
    ShowPlayerDialog(playerid,DIALOG_HAUSTIER,DIALOG_STYLE_LIST,"Haustier Geschäft","Hund - $100.000\nPapagei - $80.000\nSchildkröte - $120.000\n1x Futter - $300","Kaufen","Abbruch");
    return 1;
}
COMMAND:haustier(playerid,params[]) {
    if( 1 <= Spieler[playerid][pHaustier] <= 3 ) {
        // Hat n Haustier
        if( Spieler[playerid][pHaustierSpawned] ) {
            Haustier_RemovePlayer(playerid);
            SendClientMessage(playerid,COLOR_ORANGE,"Du gehst nicht mehr mit deinem Haustier spazieren.");
            Spieler[playerid][pHaustierSpawned] = false;
        }
        else {
            SendClientMessage(playerid,COLOR_GREEN,"Du gehst mit deinem Haustier spazieren.");
            Haustier_SetPlayer(playerid);
            Spieler[playerid][pHaustierSpawned] = true;
        }
    }
    else if( Spieler[playerid][pHaustier] == 0 ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Du hast kein Haustier.");
    }
    else {
        SendClientMessage(playerid,COLOR_YELLOW,"Du hast ein Haustierverbot.");
    }
    return 1;
}
COMMAND:sellhaustier(playerid,params[]) {
    if( 1 <= Spieler[playerid][pHaustier] <= 3 ) {
        new haustier[16];
        new String[128];
        if( Spieler[playerid][pHaustier] == 1 ) {
            haustier = "Hund";
        }
        else if( Spieler[playerid][pHaustier] == 2 ) {
            haustier = "Papagei";
        }
        else if( Spieler[playerid][pHaustier] == 3 ) {
            haustier = "Schildkröte";
        }
        format(String,sizeof(String),"Du hast deine(n) %s verkauft.",haustier);
        SendClientMessage(playerid,COLOR_YELLOW,String);
        Haustier_RemovePlayer(playerid);
        Spieler[playerid][pHaustier] = 0;
        Spieler[playerid][pHaustierCooldown] = 0;
        Spieler[playerid][pHaustierSpawned] = false;
    }
    else {
        SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Haustier.");
    }
    return 1;
}
COMMAND:fuettern(playerid,params[]) {
    if( 1 <= Spieler[playerid][pHaustier] <= 3 ) {
        if( !Haustier_OnFoot(playerid) ) {
            return SendClientMessage(playerid,COLOR_RED,"Dein Haustier ist nicht mit dir Gassi.");
        }
        new haustier[16];
        new String[128];
        if( Spieler[playerid][pHaustier] == 1 ) {
            haustier = "Hund";
        }
        else if( Spieler[playerid][pHaustier] == 2 ) {
            haustier = "Papagei";
        }
        else if( Spieler[playerid][pHaustier] == 3 ) {
            haustier = "Schildkröte";
        }
        if( Spieler[playerid][pHaustierFutter] > 0 ) {
            if( 80 <= Spieler[playerid][pHaustierCooldown] < 150 ) {
                format(String,sizeof(String),"Du hast deine(n) %s gefüttert, obwohl es keinen Hunger hat.",haustier);
            }
            else if( Spieler[playerid][pHaustierCooldown] >= 150 ) {
                format(String,sizeof(String),"Du kannst deine(n) %s nicht weiter füttern. Es hat keinen Appetit.",haustier);
                SendClientMessage(playerid,COLOR_RED,String);
                return 1;
            }
            else {
                format(String,sizeof(String),"Du hast deine(n) %s gefüttert.",haustier);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
            Spieler[playerid][pHaustierFutter]--;
            Spieler[playerid][pHaustierCooldown] += 80; // 80min pro Futter "gut schreiben";
            if( Spieler[playerid][pHaustierCooldown] > 160 ) {
                Spieler[playerid][pHaustierCooldown] = 160;
            }
            return cmd_me(playerid,"füttert sein Haustier");

        }
        else {
            format(String,sizeof(String),"Du hast kein Futter für deine(n) %s.",haustier);
            SendClientMessage(playerid,COLOR_RED,String);
        }
    }
    else {
        SendClientMessage(playerid,COLOR_RED,"Du besitzt kein Haustier.");
    }
    return 1;
}
COMMAND:deltierverbot(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 5 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht beim Ordnungsamt.");
    }
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Deltierverbot [SpielerID/Name]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Spieler nicht Online.");
    }
    if( Spieler[giveid][pHaustier] != -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler hat kein Tierhalteverbot.");
    }
    new
        String[128];
    format(String,sizeof(String),"[TIERAMT] Beamter %s hat Ihr Tierhalteverbot zurückgezogen. Sie dürfen wieder Haustiere besitzen!",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Du hast %s das Tierhalteverbot zurückgezogen.",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    Spieler[giveid][pHaustier] = 0;
    return 1;
}

COMMAND:tierverbot(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 5 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht beim Ordnungsamt.");
    }
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tierverbot [SpielerID/Name]");
    }
    if( !IsPlayerConnected(giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "Spieler nicht Online.");
    }
    new String[128];
    Haustier_RemovePlayer(giveid);
    format(String,sizeof(String),"[TIERAMT] Beamter %s hat Ihnen aufgrund eines Verstoßes ein Tierhalteverbot erteilt!",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Beamter %s hat Spieler %s ein Tierhalteverbot erteilt!",GetName(playerid),GetName(giveid));
    SendFraktionMessage(5, COLOR_YELLOW, String);

    Spieler[giveid][pHaustier] = -1;
    Spieler[giveid][pHaustierCooldown] = 0;
    Spieler[giveid][pHaustierSpawned] = false;
    return 1;
}
stock Haustier_SetPlayer(playerid) {
    if( Spieler[playerid][pHaustier] == 1 ) {
        new
            Float:a,
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        GetPlayerFacingAngle(playerid,a);
        Spieler[playerid][pHaustierObject] = CreateDynamicObject(19315,x + 1.5  ,y + 1.5 ,z - 0.7,0.0,0.0, a + 9.0 );
        //SetPlayerAttachedObject( playerid, ATTACHED_INDEX_HAUSTIER, 19315, 15, -0.430907, -0.020142, -1.312935, 344.807861, 358.984252, 258.654113, 1.000000, 1.000000, 1.000000 ); // deer01 - haustier
    }
    else if( Spieler[playerid][pHaustier] == 2 ) {
        SetPlayerAttachedObject(playerid,ATTACHED_INDEX_HAUSTIER,19078,1,0.320722,-0.067912,-0.165151,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000); // Parrot
    }
    else if( Spieler[playerid][pHaustier] == 3 ) {
        SetPlayerAttachedObject(playerid,ATTACHED_INDEX_HAUSTIER,1609,15,0.121000, -0.012000, 0.062000, -11.399999, 13.200001, -178.000000, 0.079000, 0.070000, 0.085000); // Turtle
    }
    return 1;
}
stock Haustier_RemovePlayer(playerid) {
    if( Spieler[playerid][pHaustier] == 1 ) {
        DestroyDynamicObject( Spieler[playerid][pHaustierObject] );
        Spieler[playerid][pHaustierObject] = INVALID_OBJECT_ID;
    }
    else {
        RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_HAUSTIER);
    }
    return 1;
}

stock Haustier_OnFoot(playerid) {
    if( Spieler[playerid][pHaustierSpawned] ) {
        if( Spieler[playerid][pHaustier] == 1 ) {
            if( Spieler[playerid][pHaustierObject] != INVALID_OBJECT_ID ) {
                return 1;
            }
        }
        else if( Spieler[playerid][pHaustier] > 1 ) {
            if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_HAUSTIER)) {
                return 1;
            }
        }
    }
    return 0;
}

forward Haustier_Follow();
public Haustier_Follow() {
    new
        time = gettime(),
        Float:speed,
        Float:opos[3],
        Float:distance,
        Float:a,
        Float:x,
        Float:y,
        Float:z;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pHaustier] == 1 ) {
                if( Haustier_OnFoot(i) ) {
                    if( GetPlayerState(i) == PLAYER_STATE_ONFOOT ) {
                        // Hund,gespawnt und zu Fuß!
                        GetPlayerPos(i,x,y,z);
                        if( Spieler[i][pPos][0] != x || Spieler[i][pPos][1] != y || Spieler[i][pPos][2] != z ) {
                            Spieler[i][pPos][0] = x;
                            Spieler[i][pPos][1] = y;
                            Spieler[i][pPos][2] = z;
                            // Hat sich bewegt, also Tier eventuell bewegen
                            GetPlayerFacingAngle(i,a);
                            GetDynamicObjectPos( Spieler[i][pHaustierObject] , opos[0], opos[1], opos[2]);
                            distance = GetDistance( x , y, z, opos[0] , opos[1] , opos[2] );
                            GetXYInFrontOfPosition(x,y,a, -HAUSTIER_OFFSET );
                            //printf("Bewegte Distanz zwischen Tier und Position %.2f",distance);
                            if( distance >= HAUSTIER_OFFSET + 2.0 ) {
                                // Nicht immer sofort bewegen,erst bei genug bewegung zur letzten Tierposition
                                speed = distance;
                                if( speed > 8.0 ) speed = 8.0; // Maximalgeschwindigkeit
                                if( !(distance > 22.0)  ) {
                                    // Zu weit weg,bewegt sich nicht mehr
                                    MoveDynamicObject( Spieler[i][pHaustierObject] , x,y, z - 0.6, distance , 0.0,0.0, a + 90.0);
                                }
                                else {
                                    if( Spieler[i][pHaustierDistanceAlert] < time ) {
                                        Spieler[i][pHaustierDistanceAlert] = time + 30; // Alle 30 Sekunden nur melden
                                        SendClientMessage(i,COLOR_YELLOW,"Du bist zu weit entfernt von deinem Hund. Er findet dich nicht!");
                                    }
                                }
                            }
                        }
                        else {
                            // Hund aus langeweile bewegen / drehen ?
                        }
                    }
                }
            }
        }
    }
    return 1;
}

stock ShowPlayerTacho(playerid, gear = 0 ) {
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Name] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][0] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][1] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][2] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][3] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][4] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][5] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Info] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Speed] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Tank] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_TankInfo] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Kennzeichen] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Liter] );
    if(gear) {
        PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Gear] );
    }
    return 1;
}
stock HidePlayerTacho(playerid) {
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Name] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][0] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][1] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][2] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][3] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][4] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][5] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Info] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Speed] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Tank] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_TankInfo] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Kennzeichen] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Liter] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Gear] );
    return 1;
}
stock DestroyPlayerTacho(playerid) {
    if(!IsPlayerNPC(playerid)) {
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Name] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][0] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][1] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][2] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][3] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][4] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][5] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Info] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Speed] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Tank] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_TankInfo] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Kennzeichen] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Liter] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Gear] );
        return 1;
    }
    return 0;
}
stock CreatePlayerTacho(playerid) {
    new PlayerText:Textdraw0;
    new PlayerText:Textdraw1;
    new PlayerText:Textdraw2;
    new PlayerText:Textdraw3;
    new PlayerText:Textdraw4;
    new PlayerText:Textdraw5;
    new PlayerText:Textdraw6;
    new PlayerText:Textdraw7;
    new PlayerText:Textdraw8;
    new PlayerText:Textdraw9;
    new PlayerText:Textdraw10;
    new PlayerText:Textdraw11;
    new PlayerText:Textdraw12;
    new PlayerText:Textdraw13;


    // Create the textdraws:
    Textdraw0 = CreatePlayerTextDraw(playerid,547.000000, 357.000000, " ~n~~n~~n~~n~~n~~n~~n~~n~");
    PlayerTextDrawAlignment(playerid,Textdraw0, 2);
    PlayerTextDrawBackgroundColor(playerid,Textdraw0, 255);
    PlayerTextDrawFont(playerid,Textdraw0, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw0, 0.300000, 1.200000);
    PlayerTextDrawColor(playerid,Textdraw0, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw0, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw0, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw0, 0);
    PlayerTextDrawUseBox(playerid,Textdraw0, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw0, 0x00000050);
    PlayerTextDrawTextSize(playerid,Textdraw0, -9.000000, 157.000000);

    Textdraw1 = CreatePlayerTextDraw(playerid,631.000000, 357.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw1, 255);
    PlayerTextDrawFont(playerid,Textdraw1, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw1, 8.769996, 9.600004);
    PlayerTextDrawColor(playerid,Textdraw1, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw1, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw1, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw1, 1);
    PlayerTextDrawUseBox(playerid,Textdraw1, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw1, 255);
    PlayerTextDrawTextSize(playerid,Textdraw1, 624.000000, 270.000000);

    Textdraw2 = CreatePlayerTextDraw(playerid,468.000000, 357.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw2, 255);
    PlayerTextDrawFont(playerid,Textdraw2, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw2, 8.769996, 9.600004);
    PlayerTextDrawColor(playerid,Textdraw2, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw2, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw2, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw2, 1);
    PlayerTextDrawUseBox(playerid,Textdraw2, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw2, 255);
    PlayerTextDrawTextSize(playerid,Textdraw2, 466.000000, 270.000000);

    Textdraw3 = CreatePlayerTextDraw(playerid,469.000000, 357.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw3, 255);
    PlayerTextDrawFont(playerid,Textdraw3, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw3, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw3, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw3, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw3, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw3, 1);
    PlayerTextDrawUseBox(playerid,Textdraw3, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw3, 255);
    PlayerTextDrawTextSize(playerid,Textdraw3, 626.000000, -37.000000);

    Textdraw4 = CreatePlayerTextDraw(playerid,469.000000, 445.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw4, 255);
    PlayerTextDrawFont(playerid,Textdraw4, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw4, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw4, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw4, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw4, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw4, 1);
    PlayerTextDrawUseBox(playerid,Textdraw4, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw4, 255);
    PlayerTextDrawTextSize(playerid,Textdraw4, 626.000000, -37.000000);

    Textdraw5 = CreatePlayerTextDraw(playerid,469.000000, 371.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw5, 255);
    PlayerTextDrawFont(playerid,Textdraw5, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw5, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw5, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw5, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw5, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw5, 1);
    PlayerTextDrawUseBox(playerid,Textdraw5, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw5, 255);
    PlayerTextDrawTextSize(playerid,Textdraw5, 626.000000, -37.000000);

    Textdraw6 = CreatePlayerTextDraw(playerid,475.000000, 372.000000, "Kraftstoff:  ~n~Zustand:  ~n~Radio:  ~n~Fahrzeugtuer:  ");
    PlayerTextDrawBackgroundColor(playerid,Textdraw6, 255);
    PlayerTextDrawFont(playerid,Textdraw6, 1);
    new Float:height = 0.22;
    PlayerTextDrawLetterSize(playerid,Textdraw6, height, height * 4.16); // 4.16
    PlayerTextDrawColor(playerid,Textdraw6, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw6, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw6, 1);

    Textdraw7 = CreatePlayerTextDraw(playerid,475.0, 413.0, "Km/h: 0");
    PlayerTextDrawBackgroundColor(playerid,Textdraw7, 255);
    PlayerTextDrawFont(playerid,Textdraw7, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw7, 0.53, 1.65);
    PlayerTextDrawColor(playerid,Textdraw7, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw7, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw7, 1);

    Textdraw8 = CreatePlayerTextDraw(playerid,611.000000, 376.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw8, 68);
    PlayerTextDrawFont(playerid,Textdraw8, 3);
    PlayerTextDrawLetterSize(playerid,Textdraw8, 1.00, 6.000000);
    PlayerTextDrawColor(playerid,Textdraw8, 0x00FF0070);
    PlayerTextDrawSetOutline(playerid,Textdraw8, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw8, 1);

    Textdraw9 = CreatePlayerTextDraw(playerid,469.000000, 432.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw9, 255);
    PlayerTextDrawFont(playerid,Textdraw9, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw9, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw9, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw9, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw9, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw9, 1);
    PlayerTextDrawUseBox(playerid,Textdraw9, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw9, 255);
    PlayerTextDrawTextSize(playerid,Textdraw9, 626.000000, -37.000000);

    Textdraw10 = CreatePlayerTextDraw(playerid,582.000000, 372.000000, "Tank:");
    PlayerTextDrawBackgroundColor(playerid,Textdraw10, 255);
    PlayerTextDrawFont(playerid,Textdraw10, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw10, 0.250000, 1.100000);
    PlayerTextDrawColor(playerid,Textdraw10, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw10, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw10, 1);

    Textdraw11 = CreatePlayerTextDraw(playerid,486.000000, 431.000000, " ");
    PlayerTextDrawBackgroundColor(playerid,Textdraw11, 255);
    PlayerTextDrawFont(playerid,Textdraw11, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw11, 0.350000, 1.200000);
    PlayerTextDrawColor(playerid,Textdraw11, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw11, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw11, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw11, 1);

    Textdraw12 = CreatePlayerTextDraw(playerid,608.000000, 381.000000, "0 l");
    PlayerTextDrawAlignment(playerid,Textdraw12, 3);
    PlayerTextDrawBackgroundColor(playerid,Textdraw12, 255);
    PlayerTextDrawFont(playerid,Textdraw12, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw12, 0.220000, 0.899999);
    PlayerTextDrawColor(playerid,Textdraw12, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw12, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw12, 1);

    Textdraw13 = CreatePlayerTextDraw(playerid,557.000000, 340.000000, "1 ~g~2 ~w~3");
    PlayerTextDrawBackgroundColor(playerid,Textdraw13, 255);
    PlayerTextDrawFont(playerid,Textdraw13, 3);
    PlayerTextDrawLetterSize(playerid,Textdraw13, 0.390000, 1.400000);
    PlayerTextDrawColor(playerid,Textdraw13, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw13, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw13, 0);
    PlayerTextDrawSetShadow(playerid,Textdraw13, 1);
    PlayerTextDrawUseBox(playerid,Textdraw13, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw13, 119);
    PlayerTextDrawTextSize(playerid,Textdraw13, 599.000000, 0.000000);

    g_PlayerTacho[playerid][pt_Name] = Textdraw0;
    g_PlayerTacho[playerid][pt_Border][0] = Textdraw1;
    g_PlayerTacho[playerid][pt_Border][1] = Textdraw2;
    g_PlayerTacho[playerid][pt_Border][2] = Textdraw3;
    g_PlayerTacho[playerid][pt_Border][3] = Textdraw4;
    g_PlayerTacho[playerid][pt_Border][4] = Textdraw5;
    g_PlayerTacho[playerid][pt_Border][5] = Textdraw9;
    g_PlayerTacho[playerid][pt_Info] = Textdraw6;
    g_PlayerTacho[playerid][pt_Speed] = Textdraw7;
    g_PlayerTacho[playerid][pt_Tank] = Textdraw8;
    g_PlayerTacho[playerid][pt_TankInfo] = Textdraw10;
    g_PlayerTacho[playerid][pt_Kennzeichen] = Textdraw11;
    g_PlayerTacho[playerid][pt_Liter] = Textdraw12;
    g_PlayerTacho[playerid][pt_Gear] = Textdraw13;

    return 1;
}
/*
COMMAND:settank(playerid,params[]) {
    new
        vehicleid,
        tank;

    if(sscanf(params,"d",tank)) {
        return SendClientMessage(playerid,COLOR_RED,"/TANK [Wert]");
    }
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Kein Fahrzeug");
    }
    new
        String[64];
     format(String,sizeof(String),"Neuer Tankstand: %dl",tank);
     SendClientMessage(playerid,COLOR_YELLOW,String);
    gGas[vehicleid] = tank;
    return 1;
}


COMMAND:peilsender(playerid,params) {
    #pragma unused params
    if( !IsPlayerInRangeOfPoint(playerid,3.0,1151.7448,-1203.0283,19.5159 )) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst hier keine Peilsender kaufen");
    }
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        return SendClientMessage(playerid,COLOR_RED,"Nur als Fahrer kannst du diese Funktion ausführen");
    }
    if( playerid != GetCarOwner(vehicleid) ) {
        return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht!");
    }
    ShowPeilsender(playerid);
    return 1;
}

stock ShowPeilsender(playerid,step = 0) {
    if( step == 0 ) {
        new
            String[256];
        for(new i ; i < sizeof(g_Peilsender) ; i++) {
            format(String,sizeof(String),"%s%s ( %dm ) - %d$\n",String,g_Peilsender[i][P_sText],g_Peilsender[i][P_iDistance],g_Peilsender[i][P_iPrice]);
        }
        ShowPlayerDialog(playerid,DIALOG_PEILSENDER_LISTE,DIALOG_STYLE_LIST,"Peilsender Übersicht",String,"Weiter","Abbruch");
    }
    else if( step == 1 ) {
        new
            index,
            String[256];
        index = Spieler[playerid][pPeilsenderTemp];
        format(String,sizeof(String),"Peilsender: %s\nReichweite: %dm\nPreis: %d$",g_Peilsender[index][P_sText],g_Peilsender[index][P_iDistance],g_Peilsender[index][P_iPrice]);
        ShowPlayerDialog(playerid,DIALOG_PEILSENDER_KAUFEN,DIALOG_STYLE_MSGBOX,"Peilsender Kaufdetails",String,"Kaufen","Abbruch");
    }
    return 1;
}


forward UpdatePeilsender();
public UpdatePeilsender() {
    new
        Float:x,
        Float:y,
        Float:z,
        vehicleid,
        mapicon,
        max_vehicles;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            max_vehicles = MaxVehicles(i);
            for(new j ; j < max_vehicles ; j++) {
                if( PlayerHaveCar[i][j] ) {
                    if( PlayerCar[i][j][CarPeilsender] != 0 ) {
                        //printf("Peilsender Update für Spieler %s und Slot %d",GetName(i),j);
                        vehicleid = PlayerCar[i][j][CarId];
                        mapicon = PlayerCar[i][j][CarPeilsenderIcon];
                        GetVehiclePos(vehicleid,x,y,z);

                        // MAPICON_GLOBAL
                        Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON,mapicon,E_STREAMER_X,x);
                        Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON,mapicon,E_STREAMER_Y,y);
                        Streamer_SetFloatData(STREAMER_TYPE_MAP_ICON,mapicon,E_STREAMER_Z,z);
                    }
                }
            }
        }
    }
    return 1;
}

stock CreatePeilsender(playerid,slot) {

    new
        mapicon,
        index;
    if( PlayerHaveCar[playerid][slot] ) {
        if( PlayerCar[playerid][slot][CarPeilsender] != 0 ) {
            index = ( PlayerCar[playerid][slot][CarPeilsender] - 1 ) ;
            mapicon = CreateDynamicMapIconEx(0.0,0.0,0.0,55,0,MAPICON_GLOBAL,float(g_Peilsender[index][P_iDistance]) );
            for(new a = -1; a < MAX_PLAYERS ; a++) {
                Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON , mapicon , E_STREAMER_PLAYER_ID , a );
            }
            Streamer_AppendArrayData( STREAMER_TYPE_MAP_ICON , mapicon , E_STREAMER_PLAYER_ID , playerid );
            PlayerCar[playerid][slot][CarPeilsenderIcon] = mapicon;
            return 1;
        }
    }
    return 0;
}

stock DestroyPeilsender(playerid,slot) {
    if( PlayerHaveCar[playerid][slot] ) {
        if( PlayerCar[playerid][slot][CarPeilsender] != 0 ) {
            DestroyDynamicMapIcon(PlayerCar[playerid][slot][CarPeilsenderIcon]);
            return 1;
        }
    }
    return 0;
}
*/


forward ConnectBot(c);
public ConnectBot(c)
{
    if( c < sizeof(g_Bots) ) {
        //printf("ConnectNPC(\"%s\",\"%s\")",g_Bots[c][Bot_sName] , g_Bots[c][Bot_sScript]);
        ConnectNPC( g_Bots[c][Bot_sName] , g_Bots[c][Bot_sScript]);
        SetTimerEx("ConnectBot",11500,false,"d",++c);
    }
    return true;
}

static Float:s_WeaponRange[] = {
    0.0, // 0 - Fist
    0.0, // 1 - Brass knuckles
    0.0, // 2 - Golf club
    0.0, // 3 - Nitestick
    0.0, // 4 - Knife
    0.0, // 5 - Bat
    0.0, // 6 - Shovel
    0.0, // 7 - Pool cue
    0.0, // 8 - Katana
    0.0, // 9 - Chainsaw
    0.0, // 10 - Dildo
    0.0, // 11 - Dildo 2
    0.0, // 12 - Vibrator
    0.0, // 13 - Vibrator 2
    0.0, // 14 - Flowers
    0.0, // 15 - Cane
    0.0, // 16 - Grenade
    0.0, // 17 - Teargas
    0.0, // 18 - Molotov
    90.0, // 19 - Vehicle M4 (custom)
    75.0, // 20 - Vehicle minigun (custom)
    0.0, // 21
    35.0, // 22 - Colt 45
    35.0, // 23 - Silenced
    35.0, // 24 - Deagle
    40.0, // 25 - Shotgun
    35.0, // 26 - Sawed-off
    40.0, // 27 - Spas
    35.0, // 28 - UZI
    45.0, // 29 - MP5
    70.0, // 30 - AK47
    90.0, // 31 - M4
    35.0, // 32 - Tec9
    100.0, // 33 - Cuntgun
    320.0, // 34 - Sniper
    0.0, // 35 - Rocket launcher
    0.0, // 36 - Heatseeker
    0.0, // 37 - Flamethrower
    75.0  // 38 - Minigun
};

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if (!((22 <= weaponid <= 34) || weaponid == 38) && Spieler[playerid][pAdmin] < 5) {
        SendClientMessage(playerid, COLOR_RED, "Gebannt vom Server-System, Grund: Erkannter Player-Crasher");
        Ban(playerid);
    }

    // Anti Wide Shot Message
    if (s_WeaponRange[weaponid] == 0.0)
        return 1;

    new Float:fOriginX, Float:fOriginY, Float:fOriginZ;
    GetPlayerLastShotVectors(playerid, fOriginX, fOriginY, fOriginZ, fX, fY, fZ);
    new Float:vectorSize = VectorSize(fOriginX - fX, fOriginY - fY, fOriginZ - fZ);

    if (vectorSize > s_WeaponRange[weaponid]) {
        //new string[128], weaponName[24];
        //GetWeaponNameEx(weaponid, weaponName, sizeof(weaponName));
        //format(string, sizeof(string), "[AC] Spieler %s (%d) hat einen Weitschussbug. (Waffe: %s, Schussdistanz: %.1f, Max. Distanz der Waffe: %.1f)", GetName(playerid), playerid, vectorSize, s_WeaponRange[weaponid]);
        //SendAdminMessage(COLOR_RED, string);
        return 0;
    }

    return 1;
}

public OnPlayerFloodControl(playerid, iCount, iTimeSpan) {
    if(iCount > 3 && iTimeSpan < 10000) {
        Ban(playerid);
    }
    return 1;
}
/*
forward AntiDriveBy();
public AntiDriveBy() {
    new
        String[128],
        weapon;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( !IsPlayerNPC(i) ) {
                weapon = GetPlayerWeapon(i);
                if( IsPlayerDrivebying(i) ) {
                    if( !(weapon == 29 || weapon == 31) ) {
                        format(String,sizeof(String),"Gun Reset %d",weapon);
                        SendClientMessage(i,COLOR_YELLOW,String);
                        SetPlayerArmedWeapon(i,0);
                    }
                }
            }
        }
    }
    return 1;
}

public OnPlayerStartDriveby(playerid) {
    new
        weapon,
        String[128];
    weapon = GetPlayerWeapon(playerid);
    format(String,sizeof(String),"OnPlayerStartDriveby(%d) Weapon: %d",playerid,weapon);
    SendClientMessage(playerid,COLOR_YELLOW,String);
    if( !(weapon == 29 || weapon == 31) ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Gun Reset");
        SetPlayerArmedWeapon(playerid,0);
    }
    return 1;
}
public OnPlayerStopDriveby(playerid) {
    //SendClientMessage(playerid,COLOR_YELLOW,"OnPlayerStopDriveby");
    return 1;
}*/


COMMAND:roulette(playerid,params[])
{
 	//new einsatz;
	//if(sscanf(params,"d",einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /Gluecksrad [Einsatz($300 - $20.000)]");
	//SendClientMessage(playerid,COLOR_GREEN, "CASINO-INFO: Der Einsatz wird bei Gewinn in diesem Spiel Einsatz verdoppelt!");
	if (IsPlayerInRangeOfPoint(playerid, 5.0, CASINO_INTERIOR_ROULETTE_POINT))SendClientMessage(playerid,COLOR_WHITE, "Croupier sagt: Der Roulettetisch ist für heute geschlossen!");
	/*if( !IsPlayerInRangeOfPoint(playerid,5.0,1982.5961,1019.0432,994.4688) && !IsPlayerInRangeOfPoint(playerid,5.0,1982.4845,1023.5238,994.4688)) {
		return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
	}
	if( Spieler[playerid][pCash] >= einsatz)
	{
  		new dice = random(2);
		new gegenzahl = random(2);
		if(einsatz < 300 || einsatz > 20000)
		{
		    SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $300 und $20000 liegen.");
		    return 1;
		}
		if(dice == gegenzahl)
		{
			new string[128];
			format(string,sizeof(string), "Das Glücksrad wurde gedreht... -> GEWONNEN! Dein Einsatz hat sich soeben verdoppelt.");
			SendClientMessage(playerid,COLOR_GREEN,string);
			GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
			GivePlayerCash(playerid, 2*einsatz);
		}
		else
		{
			new string[128];
		   	format(string,sizeof(string), "Das Glücksrad wurde gedreht... -> LEIDER VERLOREN. Dein Einsatz hat sich in Luft aufgelöst.");
   			GivePlayerCash(playerid,-einsatz);
   			GameTextForPlayer(playerid, "~g~Leider VERLOREN!!!", 4000, 1);
   			SendClientMessage(playerid,COLOR_RED,string);
		}
	}
	else
	{
	    new string[128];
		format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
	    SendClientMessage(playerid,COLOR_RED,string);
	}*/
	return 1;
}

COMMAND:viproulette(playerid,params[])
{
 	//new einsatz;
	//if(sscanf(params,"d",einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /Gluecksrad [Einsatz($300 - $20.000)]");
	//SendClientMessage(playerid,COLOR_GREEN, "CASINO-INFO: Der Einsatz wird bei Gewinn in diesem Spiel Einsatz verdoppelt!");
	if (IsPlayerInRangeOfPoint(playerid, 5.0, CASINO_INTERIOR_VIPROULETTE_POINT))SendClientMessage(playerid,COLOR_WHITE, "Croupier sagt: Der Roulettetisch ist für heute geschlossen!");
	/*if( !IsPlayerInRangeOfPoint(playerid,5.0,1982.5961,1019.0432,994.4688) && !IsPlayerInRangeOfPoint(playerid,5.0,1982.4845,1023.5238,994.4688)) {
		return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
	}
	if( Spieler[playerid][pCash] >= einsatz)
	{
  		new dice = random(2);
		new gegenzahl = random(2);
		if(einsatz < 300 || einsatz > 20000)
		{
		    SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $300 und $20000 liegen.");
		    return 1;
		}
		if(dice == gegenzahl)
		{
			new string[128];
			format(string,sizeof(string), "Das Glücksrad wurde gedreht... -> GEWONNEN! Dein Einsatz hat sich soeben verdoppelt.");
			SendClientMessage(playerid,COLOR_GREEN,string);
			GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
			GivePlayerCash(playerid, 2*einsatz);
		}
		else
		{
			new string[128];
		   	format(string,sizeof(string), "Das Glücksrad wurde gedreht... -> LEIDER VERLOREN. Dein Einsatz hat sich in Luft aufgelöst.");
   			GivePlayerCash(playerid,-einsatz);
   			GameTextForPlayer(playerid, "~g~Leider VERLOREN!!!", 4000, 1);
   			SendClientMessage(playerid,COLOR_RED,string);
		}
	}
	else
	{
	    new string[128];
		format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
	    SendClientMessage(playerid,COLOR_RED,string);
	}*/
	return 1;
}


COMMAND:gluecksrad(playerid,params[])
{
    new zahl,einsatz;
    if(sscanf(params,"dd",zahl,einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /Gluecksrad [Zahl] [Einsatz($800 - $25.000)]");
    if( !IsPlayerInRangeOfPoint(playerid,5.0, CASINO_INTERIOR_WHEEL_POINT)) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
    }
    if( Spieler[playerid][pCash] >= einsatz)
    {
        new dice = random(10)+1;
        if(zahl > 10 || zahl < 1 )
        {
            SendClientMessage(playerid, COLOR_RED, "Die geschätzte Zahl muss zwischen 1 und 10 liegen.");
            return 1;
        }
        if(einsatz < 800 || einsatz > 25000)
        {
            SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $800 und $25.000 liegen.");
            return 1;
        }
        if(zahl == dice)
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die %d getippt und gewonnen! Dein Einsatz verfünffacht sich.",zahl);
            SendClientMessage(playerid,COLOR_GREEN,string);
            GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
            GivePlayerCash(playerid, 5 * einsatz);
            Biz[CasinoBiz_Index][bKasse] -= 5 * einsatz;
            ApplyAnimation(playerid,"CASINO","Roulette_win",4.1,0,1,1,0,5,1);
        }
        else
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die %d getippt, doch die richtige lautete %d. Dein Einsatz hat sich in Luft aufgelöst.", zahl,dice);
            GivePlayerCash(playerid,-einsatz);
            Biz[CasinoBiz_Index][bKasse] += einsatz;
            GameTextForPlayer(playerid, "~r~Leider VERLOREN", 4000, 1);
            SendClientMessage(playerid,COLOR_RED,string);
            ApplyAnimation(playerid,"CASINO","Roulette_lose",4.0,0,1,1,1,1,1);
        }
    }
    else
    {
        new string[128];
        format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
        SendClientMessage(playerid,COLOR_RED,string);
    }
    return 1;
}

COMMAND:vipgluecksrad(playerid,params[])
{
    new zahl,einsatz;
    if(sscanf(params,"dd",zahl,einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /VIPGluecksrad [Zahl] [Einsatz($80.000 - $500.000)]");
    if( !IsPlayerInRangeOfPoint(playerid,5.0, CASINO_INTERIOR_VIPWHEEL_POINT)) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
    }
    if( Spieler[playerid][pCash] >= einsatz)
    {
        new dice = random(10)+1;
        if(zahl > 10 || zahl < 1 )
        {
            SendClientMessage(playerid, COLOR_RED, "Die geschätzte Zahl muss zwischen 1 und 10 liegen.");
            return 1;
        }
        if(einsatz < 80000 || einsatz > 500000)
        {
            SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $80.000 und $500.000 liegen.");
            return 1;
        }
        if(zahl == dice)
        {
            new string[128];
            format(string,sizeof(string), "Du hast beim Glücksrad auf die %d getippt und gewonnen! Dein Einsatz verfünffacht sich.",zahl);
            SendClientMessage(playerid,COLOR_GREEN,string);
            GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
            GivePlayerCash(playerid, 5 * einsatz);
            Biz[CasinoBiz_Index][bKasse] -= 5 * einsatz;
            ApplyAnimation(playerid,"CASINO","Roulette_win",4.0,0,1,1,1,1,1);
        }
        else
        {
            new string[128];
            format(string,sizeof(string), "Du hast bei Glücksrad auf die %d getippt, doch die es kam die %d. Dein Einsatz hat sich in Luft aufgelöst.", zahl,dice);
            GivePlayerCash(playerid,-einsatz);
            Biz[CasinoBiz_Index][bKasse] += einsatz;
            GameTextForPlayer(playerid, "~r~Leider VERLOREN", 4000, 1);
            SendClientMessage(playerid,COLOR_RED,string);
            ApplyAnimation(playerid,"CASINO","Roulette_lose",4.0,0,1,1,1,1,1);
        }
    }
    else
    {
        new string[128];
        format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
        SendClientMessage(playerid,COLOR_RED,string);
    }
    return 1;
}

COMMAND:kartenspiel(playerid,params[])
{
    new
        farbe[16],
        einsatz;
    if(sscanf(params,"s[16]d",farbe,einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /Kartenspiel [Schwarz/Rot/Gelb/Blau/Pink] [Einsatz($600 - $20.000)]");

    if( !IsPlayerInRangeOfPoint(playerid,5.0, CASINO_INTERIOR_CARDS_POINT) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
    }

    new auswahl;
    new const ai_Farben[][] = {
        {"Rot"},
        {"Schwarz"},
        {"Gelb"},
        {"Blau"},
        {"Pink"}
    };
    for(new i = 0 ; i < sizeof(ai_Farben); i++) {
        if( !strcmp(ai_Farben[i],farbe,true) ) auswahl = i+1;
    }
    if( auswahl == 0 ) {
        return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /Kartenspiel [Schwarz/Rot/Gelb/Blau/Pink] [Einsatz($600 - $20.000)]");
    }
    if( Spieler[playerid][pCash] >= einsatz)
    {
        new dice = random( sizeof(ai_Farben) ) + 1;
        if(einsatz < 600 || einsatz > 20000)
        {
            SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $600 und $20000 liegen.");
            return 1;
        }
        if(auswahl == dice)
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Farbe %s getippt und gewonnen. Dein Einsatz verdreifacht sich.",farbe);
            SendClientMessage(playerid,COLOR_GREEN,string);
            GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
            GivePlayerCash(playerid, 3 * einsatz);
            Biz[CasinoBiz_Index][bKasse] -= 3 * einsatz;
            ApplyAnimation(playerid,"CASINO","Roulette_win",4.0,0,1,1,1,1,1);
        }
        else
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Farbe %s getippt, doch die richtige Farbe war %s. Dein Einsatz hat sich in Luft aufgelöst.", farbe, ai_Farben[dice-1] );
            GivePlayerCash(playerid,-einsatz);
            Biz[CasinoBiz_Index][bKasse] += einsatz;
            GameTextForPlayer(playerid, "~r~Leider VERLOREN", 4000, 1);
            SendClientMessage(playerid,COLOR_RED,string);
            ApplyAnimation(playerid,"CASINO","Roulette_lose",4.0,0,1,1,1,1,1);
        }
    }
    else
    {
        new string[128];
        format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
        SendClientMessage(playerid,COLOR_RED,string);
    }
    return 1;
}
COMMAND:vipkartenspiel(playerid,params[])
{
    new
        farbe[16],
        einsatz;
    if(sscanf(params,"s[16]d",farbe,einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /VIPKartenspiel [Dame/König/Bube/Ass/10] [Einsatz($100.000 - $500.000)]");

    if( !IsPlayerInRangeOfPoint(playerid,5.0, CASINO_INTERIOR_VIPCARDS_POINT) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
    }

    new auswahl;
    new const ai_Farben[][] = {
        {"Dame"},
        {"König"},
        {"Bube"},
        {"Ass"},
        {"10"}
    };
    for(new i = 0 ; i < sizeof(ai_Farben); i++) {
        if( !strcmp(ai_Farben[i],farbe,true) ) auswahl = i+1;
    }
    if( auswahl == 0 ) {
        return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /Kartenspiel [Dame/König/Bube/Ass/10] [Einsatz($100.000 - $500.000)]");
    }
    if( Spieler[playerid][pCash] >= einsatz)
    {
        new dice = random( sizeof(ai_Farben) ) + 1;
        if(einsatz < 100000 || einsatz > 500000)
        {
            SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $100.000 und $500.000 liegen.");
            return 1;
        }
        if(auswahl == dice)
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Karte %s getippt und gewonnen. Dein Einsatz hat sich verdreifacht!",farbe);
            SendClientMessage(playerid,COLOR_GREEN,string);
            GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
            GivePlayerCash(playerid, 3 * einsatz);
            Biz[CasinoBiz_Index][bKasse] -= 3 * einsatz;
            ApplyAnimation(playerid,"CASINO","Slot_win_out",4.0,0,1,1,1,1,1);
        }
        else
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Karte %s getippt, doch die richtige Karte war %s. Dein Einsatz hat sich in Luft aufgelöst!", farbe, ai_Farben[dice-1] );
            GivePlayerCash(playerid,-einsatz);
            Biz[CasinoBiz_Index][bKasse] += einsatz;
            GameTextForPlayer(playerid, "~r~Leider VERLOREN", 4000, 1);
            SendClientMessage(playerid,COLOR_RED,string);
            ApplyAnimation(playerid,"CASINO","Roulette_lose",4.0,0,1,1,1,1,1);
        }
    }
    else
    {
        new string[128];
        format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
        SendClientMessage(playerid,COLOR_RED,string);
    }
    return 1;
}

COMMAND:vipwuerfelspiel(playerid,params[])
{
    new zahl,einsatz;
    if(sscanf(params,"dd",zahl,einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /VIPWuerfelspiel [1/2/3/4/5/6] [Einsatz($150.000 - $650.000)]");
    if( !IsPlayerInRangeOfPoint(playerid,5.0, CASINO_INTERIOR_VIPDICE_POINT)) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
    }
    if( Spieler[playerid][pCash] >= einsatz)
    {
        new dice = random(6)+1;
        if(zahl > 6 || zahl < 1 )
        {
            SendClientMessage(playerid, COLOR_RED, "Die geschätzte Zahl beim Würfel muss zwischen 1 und 6 liegen.");
            return 1;
        }
        if(einsatz < 150000 || einsatz > 650000)
        {
            SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $150.000 und $650.000 liegen.");
            return 1;
        }
        if(zahl == dice)
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Zahl %d getippt gewonnen. Dein Einsatz hat sich vervierfacht!",zahl);
            SendClientMessage(playerid,COLOR_GREEN,string);
            GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
            GivePlayerCash(playerid, 4 * einsatz);
            Biz[CasinoBiz_Index][bKasse] -= 4 * einsatz;
            ApplyAnimation(playerid,"CASINO","Roulette_win",4.0,0,1,1,1,1,1);
        }
        else
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Zahl %d getippt, jedoch hat der Croupier eine %d gewürfelt. Dein Einsatz hat sich in Luft aufgelöst!", zahl,dice);
            GivePlayerCash(playerid,-einsatz);
            Biz[CasinoBiz_Index][bKasse] += einsatz;
            GameTextForPlayer(playerid, "~r~Leider VERLOREN", 4000, 1);
            SendClientMessage(playerid,COLOR_RED,string);
            ApplyAnimation(playerid,"CASINO","Roulette_lose",4.0,0,1,1,1,1,1);
        }
    }
    else
    {
        new string[128];
        format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
        SendClientMessage(playerid,COLOR_RED,string);
    }
    return 1;
}

COMMAND:wuerfelspiel(playerid,params[])
{
    new zahl,einsatz;
    if(sscanf(params,"dd",zahl,einsatz)) return SendClientMessage(playerid,COLOR_ORANGE, "* Benutze:"COLOR_HEX_GREENA" /Wuerfelspiel [1/2/3/4/5/6] [Einsatz($8.000 - $35.000)]");
    if( !IsPlayerInRangeOfPoint(playerid,5.0, CASINO_INTERIOR_DICE_POINT)) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
    }
    if( Spieler[playerid][pCash] >= einsatz)
    {
        new dice = random(6)+1;
        if(zahl > 6 || zahl < 1 )
        {
            SendClientMessage(playerid, COLOR_RED, "Die geschätzte Zahl beim Würfel muss zwischen 1 und 6 liegen.");
            return 1;
        }
        if(einsatz < 8000 || einsatz > 35000)
        {
            SendClientMessage(playerid, COLOR_RED, "Der Einsatz muss zwischen $8.000 und $35.000 liegen.");
            return 1;
        }
        if(zahl == dice)
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Zahl %d getippt gewonnen. Dein Einsatz hat sich vervierfacht!",zahl);
            SendClientMessage(playerid,COLOR_GREEN,string);
            GameTextForPlayer(playerid, "~g~GEWONNEN!!!", 4000, 1);
            GivePlayerCash(playerid, 4 * einsatz);
            Biz[CasinoBiz_Index][bKasse] -= 4 * einsatz;
            ApplyAnimation(playerid,"CASINO","Slot_win_out",4.0,0,1,1,1,1,1);
        }
        else
        {
            new string[128];
            format(string,sizeof(string), "Du hast auf die Zahl %d getippt, jedoch hat der Croupier eine %d gewürfelt. Dein Einsatz hat sich in Luft aufgelöst!", zahl,dice);
            GivePlayerCash(playerid,-einsatz);
            Biz[CasinoBiz_Index][bKasse] += einsatz;
            GameTextForPlayer(playerid, "~r~Leider VERLOREN", 4000, 1);
            SendClientMessage(playerid,COLOR_RED,string);
            ApplyAnimation(playerid,"CASINO","Roulette_lose",4.0,0,1,1,1,1,1);
        }
    }
    else
    {
        new string[128];
        format(string,sizeof(string),"Du benötigst mehr Geld für deinen Einsatz (%d) oder Du setzt einen niedrigeren ein.",einsatz);
        SendClientMessage(playerid,COLOR_RED,string);
    }
    return 1;
}

COMMAND:ap(playerid,params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    new giveid, now = gettime();
    if (Spieler[playerid][ptickBotTest] > now) return SendClientMessage(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Du kannst den Aimbot-Test nur jede Minute durchführen.");
    if (sscanf(params, "u", giveid)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ap [Spieler]");
    if (!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht online.");
    if (giveid == playerid) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst dich nicht selbst auf Aimbot testen.");

    new Float:gx, Float:gy, Float:gz;
    GetPlayerPos(giveid, gx, gy, gz);
    if (!IsPlayerInRangeOfPoint(playerid, 11.0, gx, gy, gz)) return SendClientMessage(playerid,COLOR_RED,"[INFO] {FFFFFF}Der Spieler befindet sich nicht in deiner Nähe.");
    GetPlayerFacingAngle(giveid, Spieler[playerid][pAimbotTestValues][0]);
    new Float:px, Float:py, Float:pz, Float:face;
    GetPlayerPos(playerid, px, py, pz);
    GetPlayerFacingAngle(playerid, face);

    Spieler[playerid][ptickBotTest] = now + 1*60;
    new Float:nx = gx, Float:ny = gy, Float:cx, Float:cy, Float:cz;
    GetXYInFrontOfPosition(nx, ny, Spieler[playerid][pAimbotTestValues][0], -9.0);

    GetPlayerCameraPos(playerid, cx, cy, cz);
    SetPlayerPos(playerid, nx, ny, gz);
    SetPlayerCameraPos(playerid, cx, cy, cz);
    SetPlayerCameraLookAt(playerid, gx, gy, gz);
    SetTimerEx("AimbotTest_Reset", 519, false, "ddffff", playerid, giveid, px, py, pz, face);
    return 1;
}

forward AimbotTest_Reset(playerid,giveid,Float:x,Float:y,Float:z,Float:fa);
public AimbotTest_Reset(playerid,giveid,Float:x,Float:y,Float:z,Float:fa) {
    new
        Float:facingangle,
        Float:differenz,
        String[128];
    GetPlayerFacingAngle(giveid, Spieler[playerid][pAimbotTestValues][1] );
    SendClientMessage(playerid,COLOR_WHITE,"Aimbot-Test Daten");
    AimbotLog("Aimbot-Test Daten");
    format(String,sizeof(String),"Von: %s  An: %s",GetName(playerid),GetName(giveid));
    AimbotLog(String);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Ausrichtung Anfang: %.2f  Ausrichtung Ende: %.2f",Spieler[playerid][pAimbotTestValues][0],Spieler[playerid][pAimbotTestValues][1]);
    AimbotLog(String);
    SendClientMessage(playerid,COLOR_WHITE,String);

    facingangle = Spieler[playerid][pAimbotTestValues][1] + 180.0;
    if( facingangle > 360.0 ) {
        facingangle -= 360.0;
    }
    differenz = facingangle - Spieler[playerid][pAimbotTestValues][0];
    differenz = floatabs(differenz);
    if( 0 <= differenz <= 25.0 ) {// 50° als range
        format(String,sizeof(String),"Tendenz: Wahrscheinlich Aimbot ");
    }
    else {
        format(String,sizeof(String),"Tendenz: Kein Aimbot");
    }
    AimbotLog(String);
    SendClientMessage(playerid,COLOR_WHITE,String);

    SetPlayerPos(playerid, x,y,z);
    SetPlayerFacingAngle( playerid, fa );
    SetCameraBehindPlayer(playerid);
    return 1;
}

stock AimbotLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AimbotLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[Aimbot] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

COMMAND:spielautomat(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,5.0,1998.4296,1014.8951,994.8906) && !IsPlayerInRangeOfPoint(playerid,5.0,1996.2943,1014.8025,994.8906) && !IsPlayerInRangeOfPoint(playerid, 5.0, CASINO_INTERIOR_SLOT2_POINT)
        && !IsPlayerInRangeOfPoint(playerid,5.0,1989.8939,1014.8328,994.8906) && !IsPlayerInRangeOfPoint(playerid,5.0,1988.7532,1020.4262,994.8906) && !IsPlayerInRangeOfPoint(playerid,5.0,1991.1975,1020.7736,994.8906)
        && !IsPlayerInRangeOfPoint(playerid, 5.0, CASINO_INTERIOR_SLOT1_POINT) && !IsPlayerInRangeOfPoint(playerid,5.0,1996.0505,1020.6999,994.8906) && !IsPlayerInRangeOfPoint(playerid, 5.0, SHISHABAR_SLOTS_POINT) && !IsPlayerInRangeOfPoint(playerid,5.0,1998.2787,1020.6613,994.8906)) {
        return SendClientMessage(playerid,COLOR_RED,"Hier befindet sich kein Spielautomat!");
    }
    if( Spieler[playerid][pCash] < OAB_MONEY_AT_PLAYCOST ) {
        SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld ( "#OAB_MONEY_AT_PLAYCOST "$ ) um am Spielautomaten zu spielen!");
        return 1;
    }
    SendClientMessage(playerid,COLOR_GREEN,"Jede Spielrunde kostet 300$. Bei 3 gleichen Bilder erhält man 10.000$ Gewinn!");
    SendClientMessage(playerid,COLOR_WHITE,"Mit Leertaste kannst du die Rollen stoppen");
    SendClientMessage(playerid,COLOR_WHITE,"Um das Spiel zu beenden, gib /Spielautomatstop ein");
    ShowBuyInformation(playerid,"~r~-"#OAB_MONEY_AT_PLAYCOST"$");
    StartOnArmedBanditForPlayer(playerid);
    SetCameraBehindPlayer(playerid);
    TogglePlayerControllable(playerid,false);
    GivePlayerCash(playerid,-OAB_MONEY_AT_PLAYCOST);
    Biz[CasinoBiz_Index][bKasse] += OAB_MONEY_AT_PLAYCOST;
    return 1;
}

COMMAND:spielautomatstop(playerid,params[]) {
	if (_OAB_PlayerPlays[playerid]) {
	    StopOnArmedBanditForPlayer(playerid);
	    TogglePlayerControllable(playerid,true);
	}
    return 1;
}

/*
COMMAND:gluecksrad(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,5.0,1982.0972,1018.7151,994.4688) && !IsPlayerInRangeOfPoint(playerid,5.0,1982.1918,1023.4257,994.4688)) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht im Casino!");
    }

    if(fWheel_Player[playerid]==true) {
        SendClientMessage(playerid,COLOR_RED,"Du spielst gerade bereits am Glücksrad");
        return 1;
    }
    if( Spieler[playerid][pCash] < OAB_MONEY_AT_PLAYCOST ) {
        SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um am Banditen zu spielen");
        return 1;
    }
    GivePlayerCash(playerid,-OAB_MONEY_AT_PLAYCOST);
    fWheel_show(playerid);
    fWheel_start(playerid);
    SendClientMessage(playerid,COLOR_WHITE,"Das Rad dreht sich!");
    return 1;
}
*/

CMD:fixveh(playerid, params[]) {
    if (Spieler[playerid][pAdmin] < 5) return 0;
    new vehicleid = GetPlayerVehicleID(playerid);
    if (!vehicleid) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist in keinem Fahrzeug.");
    new Float:vehhealth;
    if (isnull(params)) vehhealth = 1000.0, RepairVehicle(vehicleid);
    else if (sscanf(params, "%f", vehhealth)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Fixveh optional:[Zustand]");
    SetVehicleHealth(vehicleid, vehhealth);
    return true;
}

CMD:clearchat(playerid, params[])
{
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        String[128],
        runs = 20;
    for(new i ; i < runs ; i++) {
        SendClientMessageToAll(COLOR_WHITE," ");
    }
    format(String,sizeof(String),"*** %s hat den kompletten Chat gereinigt! ***",GetName(playerid));
    SendClientMessageToAll(COLOR_WHITE,String);
    return 1;
}

stock IsPoliceVehicleAllowed(pfraktion,vfraktion) {
    if( vfraktion == 1 || vfraktion == 2 || vfraktion == 16 ) {
        if( pfraktion == 1 || pfraktion == 2 || pfraktion == 16 ) {
            return 1;
        }
    }
    return 0;
}

COMMAND:hausverkaufen(playerid,params[]) {
    new
        giveid,
        price;
    if(sscanf(params,"ud",giveid,price)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Hausverkaufen [ID] [PREIS](20.000$ bis 30.000.000$)");
    }
    if( !( 20000 <= price <= 30000000 )) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Hausverkaufen [ID] [PREIS](20.000$ bis 30.000.000$)");
    }
    new pHouse = GetPlayerHouse(playerid);
    if( pHouse == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Haus!");
    }
    if( Spieler[playerid][pPlayerHouse] == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Das Haus, dessen Schlüssel du besitzt, gehört nicht dir!");
    }
    if( !IsPlayerConnected(giveid) || giveid == playerid) {
        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spieler");
        return 1;
    }
    if( Spieler[playerid][pHouseAngebot][0] != INVALID_PLAYER_ID ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast das Haus bereits einem Spieler angeboten");
        return 1;
    }
    if( Spieler[giveid][pLevel] < 4 ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst ein Haus nur an Spieler verkaufen, dessen Level über 4 liegt");
        return 1;
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss sich in deiner nähe befinden");
    }
    ShowPlayerDialog(playerid,DIALOG_BESTAETIGEN,DIALOG_STYLE_MSGBOX,"Möchtest du diesen Befehl genauso ausführen?",
    "Um Fehleingaben zu vermeiden, wird bei diesem Befehl sicherheitshalber nochmal um Bestätigung gebeten.",
    "AUSFÜHREN","ABBRECHEN");
    sichervar[playerid][1]=1,sichervar[playerid][2]=giveid,sichervar[playerid][3]=price;
    return 1;
}
COMMAND:hausankaufen(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Hausankaufen [ID]");
    }
    if( !IsPlayerConnected(playerid) || playerid == giveid) {
        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spieler");
        return 1;
    }
    new pHouse = GetPlayerHouse(playerid);
    if( pHouse != 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Haus oder bist in eines eingemietet!");
    }
    pHouse = GetPlayerHouse(giveid);
    if( pHouse == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer ist nicht mehr in Besitz des Angebotenen Hauses");
    }
    if(Spieler[giveid][pPlayerHouse] == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer ist nicht mehr der Besitzer des Angebotenen Hauses");
    }
    if( Spieler[giveid][pHouseAngebot][0] != playerid ) {
        SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat dir kein Haus zum Verkauf angeboten");
        return 1;
    }
    new
        string[128],
        price,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer muss sich in deiner nähe befinden");
    }
    price = Spieler[giveid][pHouseAngebot][1];
    if( price > Spieler[playerid][pCash] ) {
        format(string,sizeof(string),"Du hast nicht genug Geld auf der Hand um das Haus zu kaufen ($%s)", AddDelimiters(price));
        return SendClientMessage(playerid, COLOR_RED, string);
    }
    format(string,sizeof(string),"Dein Haus hast du an %s verkauft! Er hat dein Angebot angenommen und ist nun der neue Besitzer.",GetName(playerid));
    SendClientMessage(giveid,COLOR_GREEN,string);
    format(string,sizeof(string),"Du hast das Haus erfolgreich von %s abgekauft!",GetName(giveid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    SendClientMessage(playerid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");
    SendClientMessage(giveid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");

    format(string,sizeof(string),"[HAUSKAUF] Verkäufer: %s, Käufer: %s, Preis: %d",GetName(giveid),GetName(playerid),price);
    KaufLog(string);

    Spieler[giveid][pHouseAngebot][0] = INVALID_PLAYER_ID;
    Spieler[giveid][pHouseAngebot][1] = 0;
    Spieler[giveid][pPlayerHouse] = 999;
    format( Haus[pHouse][hBesitzer] , MAX_PLAYER_NAME , GetName(playerid) );
    CheckPlayerHouse(playerid);
    // Spieler[playerid][pPlayerHouse] = pHouse;
    GivePlayerCash(playerid, -price);
    GivePlayerCash(giveid, price);
    Haus[pHouse][hMieterAnzahl] = 0;
    Haus[pHouse][hKasse] = 0;
    UpdateHouseText(pHouse);
    // Alle alten Leute mit Schlüssel rauswerfen
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( i != playerid ) {
            if( Spieler[i][pHouseMieteKey] == pHouse ) {
                Spieler[i][pHouseMieteKey] = 999;
            }
        }
    }
    format(string,sizeof(string),"UPDATE `accounts` SET `HouseMieteKey` = 999 WHERE `HouseMieteKey` = %d",pHouse);
    mysql_oquery( string ,  THREAD_DUMMY , INVALID_PLAYER_ID ,gSQL);
    return 1;
}
// -------
COMMAND:bizverkaufen(playerid,params[]) {
    new
        giveid,
        price;
    if(sscanf(params,"ud",giveid,price)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Bizverkaufen [ID] [PREIS] (800.000$ bis 80.000.000$)");
    }
    if( !( 800000 <= price <= 80000000 )) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Bizverkaufen [ID] [PREIS] (800.000$ bis 80.000.000$)");
    }
    new indexbiz = Spieler[playerid][pPlayerBiz];
    if( indexbiz == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Biz!");
    }
    if( !IsPlayerConnected(giveid) || giveid == playerid) {
        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spieler");
        return 1;
    }
    if( Spieler[playerid][pBizAngebot][0] != INVALID_PLAYER_ID ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast das Geschäft bereits einem Spieler angeboten.");
        return 1;
    }
    if( Spieler[giveid][pLevel] < 5 ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst ein Geschäft nur an Spieler verkaufen, dessen Level über 5 liegt.");
        return 1;
    }
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(playerid,5.0,x,y,z)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss sich in deiner Nähe befinden.");
    }
    ShowPlayerDialog(playerid,DIALOG_BESTAETIGEN,DIALOG_STYLE_MSGBOX,"Möchtest du diesen Befehl genauso ausführen?",
    "Um Fehleingaben zu vermeiden, wird bei diesem Befehl sicherheitshalber nochmal um Bestätigung gebeten.",
    "AUSFÜHREN","ABBRECHEN");
    sichervar[playerid][4]=1,sichervar[playerid][5]=giveid,sichervar[playerid][6]=price;
    return 1;
}

CMD:bizverstaatlichen(playerid)
{
    new message[145], b = IsPlayerAtBiz(playerid);
    if (b == 999) return SendClientMessage(playerid, COLOR_RED, "Du stehst an keinem BIZ.");

    if (Spieler[playerid][pPlayerBiz] != b) return SendClientMessage(playerid, COLOR_RED, "Dieses BIZ hast du nicht ausgewählt (/Bizkey).");
    format(Biz[b][bBesitzer], MAX_PLAYER_NAME, "Niemand");
    Spieler[playerid][pPlayerBiz] = 999;

    if (Biz[b][bKasse] > 0) {
        Spieler[playerid][pBank] += Biz[b][bKasse];
        format(message, sizeof(message), "In deiner Bizkasse waren noch $%s. Du erhältst diese noch vor dem Verkauf zurück.", AddDelimiters(Biz[b][bKasse]));
        SendClientMessage(playerid, COLOR_YELLOW, message);
    }

    Biz[b][bKasse] = 0;
    Spieler[playerid][pBank] += Biz[b][bPreis] / 4;
    format(message, sizeof(message), "Du hast dein Biz '%s' an den Staat für $%s verkauft.", Biz[b][bName], AddDelimiters(Biz[b][bPreis] / 4));
    UpdateBizText(b);
    return SendClientMessage(playerid, COLOR_WHITE, message);
}

CMD:tankeverstaatlichen(playerid)
{
    new t=IsPlayerAtTanke(playerid);
    if(t==999)
    {
        SendClientMessage(playerid,COLOR_RED,"Du stehst an keiner Tankstelle.");
    }
    else if(strcmp(Tanke[t][tBesitzer],GetName(playerid),true)==0)
    {
        new
            erstattung,
            String[128];
        erstattung = (Tanke[t][tPreis] / 4);
        format(Tanke[t][tBesitzer],MAX_PLAYER_NAME,"Niemand");
        Spieler[playerid][pPlayerTank] = 999;
        if(Tanke[t][tKasse] > 0 ) {
            format(String,sizeof(String),"In deiner Tankkasse waren noch $%s. Du erhältst diese noch vor dem Verkauf zurück.", AddDelimiters(Tanke[t][tKasse]));
            SendClientMessage(playerid,COLOR_YELLOW,String);
            Spieler[playerid][pBank] += Tanke[t][tKasse];
        }
        Tanke[t][tKasse] = 0;
        Spieler[playerid][pBank] += erstattung;
        format(String,sizeof(String),"Du hast deine Tanke '%s' an den Staat für $%s verkauft.",Tanke[t][tName], AddDelimiters(erstattung));
        SendClientMessage(playerid,COLOR_WHITE,String);
        UpdateTankeText(t);
    }
    return 1;
}
COMMAND:bizankaufen(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Bizankaufen [ID]");
    }
    if( !IsPlayerConnected(giveid) || giveid == playerid) {
        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spieler.");
        return 1;
    }
    if( Spieler[playerid][pPlayerBiz] != 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Geschäft.");
    }
    new indexbiz = Spieler[giveid][pPlayerBiz];
    if( indexbiz == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer ist nicht mehr in Besitz des angebotenen Geschäftes.");
    }
    if( Spieler[giveid][pBizAngebot][0] != playerid ) {
        SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat dir kein Geschäft zum Verkauf angeboten.");
        return 1;
    }
    new
        string[128],
        price,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer muss sich in deiner Nähe befinden.");
    }
    price = Spieler[giveid][pBizAngebot][1];
    if( price > Spieler[playerid][pCash] ) {
        format(string,sizeof(string),"Du hast nicht genug Geld auf der Hand um das Geschäft zu kaufen ($%s).", AddDelimiters(price));
        return SendClientMessage(playerid, COLOR_RED, string);
    }
    format(string,sizeof(string),"Du hast dein Geschäft an %s verkauft! Er hat dein Angebot angenommen und ist nun der neue Besitzer.",GetName(playerid));
    SendClientMessage(giveid,COLOR_GREEN,string);
    format(string,sizeof(string),"Du(%s) hast das Geschäft erfolgreich von %s abgekauft!",GetName(giveid));
    SendClientMessage(playerid,COLOR_GREEN,string);
    SendClientMessage(playerid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");
    SendClientMessage(giveid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");

    format(string,sizeof(string),"[BIZKAUF] Verkäufer: %s, Käufer: %s, Preis: %d",GetName(giveid),GetName(playerid),price);
    KaufLog(string);

    Spieler[giveid][pBizAngebot][0] = INVALID_PLAYER_ID;
    Spieler[giveid][pBizAngebot][1] = 0;
    Spieler[giveid][pPlayerBiz] = 999;

    Biz[indexbiz][bErpresserFraktion] = 0;
    Biz[indexbiz][bErpresserForderung] = 0;
    Biz[indexbiz][bErpresserState] = 0;
    Biz[indexbiz][bKasse] = 0;

    Spieler[playerid][pPlayerBiz] = indexbiz;
    format( Biz[indexbiz][bBesitzer] , MAX_PLAYER_NAME , GetName(playerid) );
    GivePlayerCash(playerid, -price);
    GivePlayerCash(giveid, price);

    UpdateBizText(indexbiz);
    return 1;
}
// ---
COMMAND:tankstelleverkaufen(playerid,params[]) {
    new
        giveid,
        price;
    if(sscanf(params,"ud",giveid,price)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Tankstelleverkaufen [ID] [PREIS](1.000.000$ bis 80.000.000$) ");
    }
    if( !( 1000000 <= price <= 80000000 )) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Tankstelleverkaufen [ID] [PREIS](1.000.000$ bis 80.000.000$) ");
    }
    new indextanke = Spieler[playerid][pPlayerTank];
    if( indextanke == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt keine Tankstelle!");
    }
    if( !IsPlayerConnected(giveid) || giveid == playerid) {
        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spieler.");
        return 1;
    }
    if( Spieler[playerid][pTankeAngebot][0] != INVALID_PLAYER_ID ) {
        SendClientMessage(playerid,COLOR_RED,"Du hast die Tankstelle bereits einem Spieler angeboten.");
        return 1;
    }
    if( Spieler[giveid][pLevel] < 5 ) {
        SendClientMessage(playerid,COLOR_RED,"Du kannst eine Tankstelle nur an Spieler verkaufen, dessen Level über 5 liegt.");
        return 1;
    }
    ShowPlayerDialog(playerid,DIALOG_BESTAETIGEN,DIALOG_STYLE_MSGBOX,"Möchtest du diesen Befehl genauso ausführen?",
    "Um Fehleingaben zu vermeiden, wird bei diesem Befehl sicherheitshalber nochmal um Bestätigung gebeten.",
    "AUSFÜHREN","ABBRECHEN");
    sichervar[playerid][7]=1,sichervar[playerid][8]=giveid,sichervar[playerid][9]=price;
    return 1;
}
COMMAND:tankeverkaufen(playerid,params[]) {
    return cmd_tankstelleverkaufen(playerid,params);
}
COMMAND:tankstelleankaufen(playerid,params[]) {
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Tankstelleankaufen [ID]");
    }
    if( !IsPlayerConnected(giveid) || giveid == playerid) {
        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spieler");
        return 1;
    }
    if( Spieler[playerid][pPlayerTank] != 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits ein Geschäft.");
    }
    if( Spieler[giveid][pPlayerTank] == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer ist nicht mehr in Besitz der Angebotenen Tankstelle");
    }
    if( Spieler[giveid][pTankeAngebot][0] != playerid ) {
        SendClientMessage(playerid,COLOR_RED,"Dieser Spieler hat dir keine Tankstelle zum Verkauf angeboten");
        return 1;
    }
    new indextanke = Spieler[giveid][pPlayerTank];
    new
        string[128],
        price,
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Verkäufer muss sich in deiner nähe befinden");
    }
    price = Spieler[giveid][pTankeAngebot][1];
    if( price > Spieler[playerid][pCash] ) {
        format(string,sizeof(string),"Du hast nicht genug Geld auf der Hand um die Tankstelle zu kaufen ($%s)", AddDelimiters(price));
        return SendClientMessage(playerid, COLOR_RED, string);
    }
    format(string,sizeof(string),"Deine Tankstelle hast du an %s verkauft! Er hat dein Angebot angenommen und ist nun der neue Besitzer.",GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,string);
    format(string,sizeof(string),"Du hast die Tankstelle erfolgreich von %s abgekauft!",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,string);
    SendClientMessage(playerid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");
    SendClientMessage(giveid, COLOR_RED, "HINWEIS: Mach zur Datensicherung bitte ein Relog!");

    format(string,sizeof(string),"[TANKEKAUF] Verkäufer: %s, Käufer: %s, Preis: %d",GetName(giveid),GetName(playerid),price);
    KaufLog(string);

    Spieler[giveid][pTankeAngebot][0] = INVALID_PLAYER_ID;
    Spieler[giveid][pTankeAngebot][1] = 0;
    Spieler[giveid][pPlayerTank] = 999;

    Tanke[indextanke][tVideoueberwachung] = false;
    Tanke[indextanke][tAutomatischerNotruf] = false;

    Tanke[indextanke][tErpresserFraktion] = 0;
    Tanke[indextanke][tErpresserForderung] = 0;
    Tanke[indextanke][tErpresserState] = 0;
    Tanke[indextanke][tKasse] = 0;

    Spieler[playerid][pPlayerTank] = indextanke;
    format( Tanke[indextanke][tBesitzer] , MAX_PLAYER_NAME , GetName(playerid) );
    GivePlayerCash(playerid, -price);
    GivePlayerCash(giveid, price);

    UpdateTankeText(indextanke);
    return 1;
}

forward FlasherFunc();
public FlasherFunc() {
    new panelsx,doorsx,lightsx,tiresx;
    for (new i = 1; i<MAX_VEHICLES; i++)
    {
        if (Flasher[i] == 1)
        {
            GetVehicleDamageStatus(i,panelsx,doorsx,lightsx,tiresx);
            if (FlasherState[i] == 1)
            {
                UpdateVehicleDamageStatus(i, panelsx, doorsx, 4, tiresx);
                FlasherState[i] = 0;
            }
            else
            {
                UpdateVehicleDamageStatus(i, panelsx, doorsx, 1, tiresx);
                FlasherState[i] = 1;
            }
        }
    }
    return 1;
}

CMD:hsirene(playerid, params[])
{
    new vehicleid,panels,doors,lights,tires;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!Flasher[vehicleid]) {
        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "Du bist nicht der Fahrer!");
        if (!GetVehicleModel(vehicleid)) return SendClientMessage(playerid, -1, "Du sitzt in keinem Fahrzeug!");
        if (IsValidDynamicObject(sireneobj[vehicleid][0]) || IsValidDynamicObject(sireneobj[vehicleid][1]) || IsValidDynamicObject(sireneobj[vehicleid][2]))
        {
                SendClientMessage(playerid, -1, "Sirene deaktiviert");
                for(new i ; i < sizeof(sireneobj[]); i++) {
                    DestroyDynamicObject(sireneobj[vehicleid][i]);
                    sireneobj[vehicleid][i] = INVALID_OBJECT_ID;
                }
                if(LightPwr[vehicleid] == 1) {
                    UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
                }
                else {
                    UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
                }
                Flasher[vehicleid] = 0;
        }
        switch (GetVehicleModel(vehicleid))
        {
            case 560:
            {
                if (Spieler[playerid][pFraktion] != 3 && Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2)
                    return SendClientMessage(playerid, COLOR_RED, "Du kannst in einem Sultan nur als Cop oder SAMD-Mitglied die Sirene aktivieren.");
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.000000, 0.850341, 0.388433, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 541:
            {
                if (Spieler[playerid][pFraktion] != 3 && Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2)
                    return SendClientMessage(playerid, COLOR_RED, "Du kannst in einem Bullet nur als Cop oder SAMD-Mitglied die Sirene aktivieren.");
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.000000, 0.652832, 0.314574, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 544:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.000000, 2.520202, 1.507225, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 427:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, -0.311401, 1.151977, 1.421513, 0.000000, 0.000000, 0.000000);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, 0.389526, 1.151977, 1.421513, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 426:
            {
                if (Spieler[playerid][pFraktion] != 3 && Spieler[playerid][pFraktion] != 1 && Spieler[playerid][pFraktion] != 2)
                    return SendClientMessage(playerid, COLOR_RED, "Du kannst in einem Premier nur als Cop oder SAMD-Mitglied die Sirene aktivieren.");

                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.000000, 0.882019, 0.343078, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 407:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.686279, 3.204040, 1.289827, 0.000000, 0.000000, 0.000000);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, -0.645385, 3.204040, 1.289827, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 601:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.000000, 0.000000, 1.959999, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 596:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.0);
                sireneobj[vehicleid][2] = CreateDynamicObject(18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.0 );
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, -0.02, 2.18, -0.15,   0.00, 0.00, 0.00);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, 0.399999, -0.400000, 0.899999, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][2], vehicleid, -0.499999, -0.400000, 0.899999, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 597:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.0);
                sireneobj[vehicleid][2] = CreateDynamicObject(18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.0 );
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, -0.02, 2.18, -0.15,   0.00, 0.00, 0.00);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, 0.399999, -0.400000, 0.899999, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][2], vehicleid, -0.499999, -0.400000, 0.899999, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 598:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.0);
                sireneobj[vehicleid][2] = CreateDynamicObject(18646 , 0.0 , 0.0 , 0.0, 0.0 , 0.0, 0.0 );
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, -0.02, 2.18, -0.15,   0.00, 0.00, 0.00);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, 0.399999, -0.400000, 0.899999, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][2], vehicleid, -0.499999, -0.400000, 0.899999, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 599:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.524999,0.000000,1.125000,0.000000,0.000000,0.000000);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, -0.524999,0.000000,1.125000,0.000000,0.000000,0.000000);
                Flasher[vehicleid] = 1;
            }
            case 490:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.000000, 1.191101, 0.559186, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 432:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 1.600000, 3.899998, 0.600000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, 1.600000, -4.099998, 0.799999, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 470:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, -0.000000, -0.299999, 1.100000, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            case 523:
            {
                sireneobj[vehicleid][0] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                sireneobj[vehicleid][1] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][0], vehicleid, 0.000000, 0.599999, 0.600000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(sireneobj[vehicleid][1], vehicleid, 0.000000, -1.100000, 1.000000, 0.000000, 0.000000, 0.000000);
                Flasher[vehicleid] = 1;
            }
            default:
            {
                return SendClientMessage(playerid, COLOR_RED, "Auf diesem Fahrzeug kannst du keine Sirene platzieren.");
            }
        }
        return SendClientMessage(playerid, -1, "Sirene aktiviert");
    }
    else {
        if (IsValidDynamicObject(sireneobj[vehicleid][0]) || IsValidDynamicObject(sireneobj[vehicleid][1]) || IsValidDynamicObject(sireneobj[vehicleid][2])) {
            SendClientMessage(playerid, -1, "Sirene deaktiviert");
            for(new i ; i < sizeof(sireneobj[]) ; i++) {
                DestroyDynamicObject(sireneobj[vehicleid][i]);
                sireneobj[vehicleid][i] = INVALID_OBJECT_ID;
            }
        }
        GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
        if(LightPwr[vehicleid] == 1)
            UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
        else
            UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
        Flasher[vehicleid] = 0;
    }
    return 1;
}

COMMAND:tankstellensecurity(playerid,params[]) {
    new
        tank_index = Spieler[playerid][pPlayerTank];
    if(tank_index == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keine Tankstelle");
    if(strcmp(GetName(playerid), Tanke[tank_index][tBesitzer], true) == 0)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, Tanke[tank_index][EnterX], Tanke[tank_index][EnterY], Tanke[tank_index][EnterZ]))
        {
            ShowPlayerDialog(playerid,DIALOG_TANKSTELLEN_OPTION,DIALOG_STYLE_LIST,"Tankstellen Sicherheitsoptionen","Videoüberwachung - 30.000$\nAutomatischer Notruf an die Polizei - 120.000$","Weiter","Abbruch");
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du musst vor deiner Tankstelle stehen.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Die Tankstelle gehört dir nicht.");
        return 1;
    }
    return 1;
}

stock GetOnlineExecutive() {
    new
        c;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i)) {
            if( IsPlayerExecutive(i) ) {
                c++;
            }
        }
    }
    return c;
}

COMMAND:tankstelleausrauben(playerid,params[]) {
    if( Spieler[playerid][pLevel] < 5 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Level 5 sein, um diese Aktion durchzuführen.");
    }
    new t = IsPlayerAtTanke(playerid);
    if(t == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
    }
    if( Spieler[playerid][tTankeUnix] != 0 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du überfällst bereits eine Tankstelle.");
    }
    if( !strcmp(Tanke[t][tBesitzer],"Niemand")) {
        return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle kann nicht ausgeraubt werden");
    }
    if( Tanke[t][tRobberID] != INVALID_PLAYER_ID ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle wird bereits überfallen");
    }
    if( gettime() < Tanke[t][tUnixRob] ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle wurde erst vor kurzem ausgeraubt. Du musst noch warten.");
    }

    if( GetOnlineExecutive() < 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Es sind nicht genug Polizisten online.");
    }
    new
        String[128];
    // Nachricht an Täter
    SendClientMessage(playerid,COLOR_YELLOW,"Der Überfall wurde gestartet! Warte 3 Minuten und entferne dich nicht zu weit von der Stelle, ansonsten ist der Überfall fehlgeschlagen!");
    if( Tanke[t][tVideoueberwachung] == true && Tanke[t][tAutomatischerNotruf] == true ) {
        SendClientMessage(playerid,COLOR_RED,"Die Tankstelle besitzt ein Alarmsystem!");
        SendClientMessage(playerid,COLOR_RED,"Es wurde automatisch ein Notruf an die Polizei gesendet und der Inhaber über den Überfall benachrichtigt!");
    }
    else if( Tanke[t][tVideoueberwachung] == true ) {
        SendClientMessage(playerid,COLOR_RED,"Die Tankstelle wird Videoüberwacht! Der Inhaber wurde über den Überfall benachrichtigt.");
    }
    else if( Tanke[t][tAutomatischerNotruf] == true ) {
        SendClientMessage(playerid,COLOR_RED,"Die Tankstelle besitzt ein Alarmsystem und hat ein Notruf an die Polizei gesendet!");
    }
    // Nachricht an Besitzer
    if( Tanke[t][tVideoueberwachung] == true ) {
        new besitzerid;
        sscanf( Tanke[t][tBesitzer], "u",besitzerid);
        if( IsPlayerConnected(besitzerid) ) {
            SendClientMessage(besitzerid,COLOR_ORANGE,"Deine Tankstelle wird von einem Räuber überfallen! Die Polizei wurde darüber benachrichtigt.");
        }
    }
    // Nachricht an Polizei
    if( Tanke[t][tAutomatischerNotruf] == true ) {
        format(String,sizeof(String),"[ZENTRALE] Die Tankstelle von %s wird vom %s überfallen!",Tanke[t][tBesitzer],GetName(playerid) );
        SendExecutiveMessage(COLOR_RED,String);
    }

    Spieler[playerid][tTankeUeberfall] = SetTimerEx("Tankstelle_Ueberfall",7649,true,"dd",playerid,t);
    Spieler[playerid][tTankeUnix] = gettime() + 3*60;// 15min
    Tanke[t][tRobberID] = playerid;
    return cmd_me(playerid,"überfällt eine Tankstelle!");
}
COMMAND:tankeausrauben(playerid,params[]) {
    return cmd_tankstelleausrauben(playerid,params);
}

stock RandomEx(min, max) //Y_Less
{
    return random(max - min) + min;
}

stock Tankstelle_Ueberfall_Stop(playerid,tankstelle,reason) {
    new
        String[128];
    KillTimer( Spieler[playerid][tTankeUeberfall] );
    Spieler[playerid][tTankeUnix] = 0;
    if( tankstelle == -1 ) {
        for(new i ; i < MAX_TANKEN ; i++) {
            if( Tanke[i][tRobberID] == playerid ) {
                tankstelle = i;
            }
        }
    }
    Tanke[tankstelle][tUnixRob] = gettime() + 30*60;
    Tanke[tankstelle][tRobberID] = INVALID_PLAYER_ID;
    if( reason == 0 ) { // Distanz
        if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Flucht , Spieler: %s",GetName(playerid) );
            SendExecutiveMessage(COLOR_YELLOW,String);
        }
        if( Tanke[tankstelle][tVideoueberwachung] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Flucht");
            new besitzerid;
            sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_YELLOW,String);
            }
        }
        SendClientMessage(playerid,COLOR_RED,"Tankstellen-Überfall abgebrochen. Du hast dich zu weit entfernt");
    }
    else if( reason == 1 ) { // Erfolgreich
        new besitzerid;
        sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
        if( Tanke[tankstelle][tKasse] < 10000 ) {
            SendClientMessage(playerid,COLOR_ORANGE,"Der Überfall war erfolgreich, jedoch besitzt die Tankstelle kein Geld! Du konntest nichts erbeuten.");
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_ORANGE,"Deine Tankstelle wurde überfallen! Erbeutetes Geld: Keines");
            }
            return 1;
        }
        else {
            new beute, beuteString[32];
            beute = RandomEx( 10000 , (Tanke[tankstelle][tKasse] > 50000 ? 50000 : Tanke[tankstelle][tKasse]));
            beuteString = AddDelimiters(beute);
            format(String,sizeof(String),"Du hast die Tankstelle erfolgreich überfallen! Erbeutetes Geld: $%s", beuteString);
            SendClientMessage(playerid,COLOR_GREEN,String);
            if( IsPlayerConnected(besitzerid) ) {
                format(String,sizeof(String),"Deine Tankstelle wurde überfallen! Erbeutetes Geld: $%s", beuteString);
                SendClientMessage(besitzerid,COLOR_RED,String);
            }
            if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
                format(String,sizeof(String),"Die Tankstelle wurde von %s erfolgreich ausgeraubt! Erbeutetes Geld: $%s",GetName(playerid), beuteString);
                SendExecutiveMessage(COLOR_RED,String);
            }
            Tanke[tankstelle][tKasse] -= beute;
            GivePlayerCash(playerid,beute);
        }
    }
    else if( reason == 2 ) { // Disconnect
        /*
        if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Server verlassen , Spieler: %s",GetName(playerid) );
            SendExecutiveMessage(COLOR_YELLOW,String);
        }
        if( Tanke[tankstelle][tVideoueberwachung] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Server verlassen");
            new besitzerid;
            sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_YELLOW,String);
            }
        }
        */
    }
    else if( reason == 3 ) { // Death
        /*
        if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Täter gestorben , Spieler: %s",GetName(playerid) );
            SendExecutiveMessage(COLOR_YELLOW,String);
        }
        if( Tanke[tankstelle][tVideoueberwachung] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Täter gestorben");
            new besitzerid;
            sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_YELLOW,String);
            }
        }
        */
        SendClientMessage(playerid,COLOR_RED,"Tankstellen-Überfall abgebrochen. Du bist leider gestorben");
    }
    return 1;

}
forward Tankstelle_Ueberfall(playerid,tankstelle);
public Tankstelle_Ueberfall(playerid,tankstelle) {
    if( IsPlayerAtTanke(playerid,8.0) != tankstelle ) {
        Tankstelle_Ueberfall_Stop(playerid,tankstelle,0);
        return 0;
    }
    new
        time = gettime();
    if( Spieler[playerid][tTankeUnix] <= time ) {
        // Zeit rum
        Tankstelle_Ueberfall_Stop(playerid,tankstelle,1);
    }
    return 1;
}


stock GetErpresserCount(fraktionid) {
    new
        c;
    for(new i=0;i<MAX_BIZES;i++) {
        if( Biz[i][bErpresserFraktion] == fraktionid ) {
            c++;
        }
    }
    for(new i=0;i<MAX_TANKEN;i++) {
        if( Tanke[i][tErpresserFraktion] == fraktionid ) {
            c++;
        }
    }
    return c;
}
COMMAND:schutzgeld(playerid,params[])
{
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) )
    {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    new
        schutzgeld;
    if(sscanf(params,"d",schutzgeld))
    {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Schutzgeld [BETRAG]");
    }
    if( !( 0 <= schutzgeld <= 30000 ))
    {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Schutzgeld [BETRAG] ( 0 bis 30.000$ )");
    }
    new t = IsPlayerAtTanke(playerid,4.0);
    new b = IsPlayerAtBiz(playerid);
    if(t == 999 && b == 999)
    {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Geschäft oder Tankstelle.");
    }
    if( Spieler[playerid][pRank] < 5 )
    {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kann NUR Co. -/ oder Leader ausführen");
    }
    if( GetErpresserCount(frak) >= MAX_GANG_ERPRESSUNGEN )
    {
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang bzw. Mafia hat das Erpresser-Limit erreicht");
    }
    new
        besitzerid,
        String[128];
    if( t != 999 )
    {
        // Tanke erpressen
        if( !strcmp(Tanke[t][tBesitzer],"Niemand"))
        {
            return SendClientMessage(playerid, COLOR_RED, "Diese Tanke hat keinen Besitzer");
        }
        if( Tanke[t][tErpresserFraktion] != 0 && Tanke[t][tErpresserFraktion] != frak )
        {
            return SendClientMessage(playerid, COLOR_RED, "Diese Tanke wird bereits von einer Gang bzw. Mafia erpresst");
        }
        if( Tanke[t][tErpresserState] == 0 && Tanke[t][tErpresserFraktion] == frak )
        {
            return SendClientMessage(playerid, COLOR_RED, "Diese Tanke hat noch eine offene Schutzgeldforderung");
        }
        Tanke[t][tErpresserState] = 0;
        Tanke[t][tErpresserForderung] = schutzgeld;
        sscanf( Tanke[t][tBesitzer], "u",besitzerid);
        if( Tanke[t][tErpresserFraktion] == 0 )
        {
            format(String,sizeof(String),"Die Gang bzw. Mafia erpresst ab sofort die Tanke %s auf $%s",Tanke[t][tName], AddDelimiters(schutzgeld));
        }
        else
        {
            format(String,sizeof(String),"Die Gang bzw. Mafia erpresst erneut die Tanke %s auf $%s",Tanke[t][tName], AddDelimiters(schutzgeld));
        }
        Tanke[t][tErpresserFraktion] = frak;
        UpdateTankeText(t);
    }
    else
    {
        // Biz erpressen
        if( !strcmp(Biz[b][bBesitzer],"Niemand"))
        {
            return SendClientMessage(playerid, COLOR_RED, "Dieses Geschäft hat keinen Besitzer");
        }
        if( Biz[b][bErpresserFraktion] != 0 && Biz[b][bErpresserFraktion] != frak)
        {
            return SendClientMessage(playerid, COLOR_RED, "Dieses Geschäft wird bereits von einer Gang bzw. Mafia erpresst");
        }
        if( Biz[b][bErpresserForderung] == 0  && Biz[b][bErpresserFraktion] == frak )
        {
            return SendClientMessage(playerid, COLOR_RED, "Dieses Geschäft hat noch eine offene Schutzgeldforderung");
        }
        Biz[b][bErpresserForderung] = schutzgeld;
        Biz[b][bErpresserState] = 0;
        sscanf( Biz[b][bBesitzer], "u",besitzerid);
        if( Biz[b][bErpresserFraktion] == 0 )
        {
            format(String,sizeof(String),"Die Gang bzw. Mafia erpresst ab sofort das Geschäft %s auf $%s",Biz[b][bName], AddDelimiters(schutzgeld));
        }
        else
        {
            format(String,sizeof(String),"Die Gang bzw. Mafia erpresst erneut das Geschäft %s auf $%s",Biz[b][bName], AddDelimiters(schutzgeld));
        }
        Biz[b][bErpresserFraktion] = frak;
        UpdateBizText(b);
    }
    SendFraktionMessage(frak, COLOR_ORANGE, String);
    if( IsPlayerConnected(besitzerid) )
    {
        new
            frakname[50];
        ReturnFraktionByID( frak , frakname );
        if( t != 999 )
        {
            format(String,sizeof(String),"Deine Tankstelle %s wird von der %s erpresst! Sie fordern von dir Schutzgeld in Höhe von $%s." ,Tanke[t][tName],frakname , AddDelimiters(schutzgeld));
        }
        else
        {
            format(String,sizeof(String),"Dein Geschäft %s wird von der %s erpresst! Sie fordern von dir Schutzgeld in Höhe von $%s." ,Biz[b][bName],frakname , AddDelimiters(schutzgeld));
        }
        SendClientMessage(playerid,COLOR_RED,String);
        SendClientMessage(playerid,COLOR_RED,"Mit /Schutzgeldbezahlen kannst du die geforderte Summe bezahlen, ansonsten wird dir etwas passieren!");
    }
    return 1;
}
COMMAND:schutzgeldpolizei(playerid)
{
    if(Spieler[playerid][pFraktion]==1||Spieler[playerid][pFraktion]==2||Spieler[playerid][pFraktion]==16)
    {
        new t = IsPlayerAtTanke(playerid,4.0);
        new b = IsPlayerAtBiz(playerid);
        if(t!=999)
        {
            for(new i;i<MAX_PLAYERS;i++)
            {
                if(IsPlayerConnected(i)&&Tanke[t][tErpresserFraktion]==Spieler[i][pFraktion])
                {
                    new frakstring[200];
                    format(frakstring,200,"[SCHUTZGELD] Der Besitzer %s der Tankstelle %s hat die Polizei gerufen und schwärzt euch an!",
                    Tanke[t][tBesitzer],Tanke[t][tName]);
                    SendClientMessage(i,COLOR_RED,frakstring);
                }
            }
            Tanke[t][tErpresserState] = 0;
            Tanke[t][tErpresserForderung] = 0;
            Tanke[t][tErpresserFraktion] = 0;
            UpdateTankeText(t);
            SendClientMessage(playerid,COLOR_YELLOW,"Du hast erfolgreich dem Schutzgeld der Tankstelle ein Ende gesetzt");
        }
        else
        {
            for(new i;i<MAX_PLAYERS;i++)
            {
                if(IsPlayerConnected(i)&&Biz[b][bErpresserFraktion]==Spieler[i][pFraktion])
                {
                    new frakstring[200];
                    format(frakstring,200,"[SCHUTZGELD] Der Besitzer %s des Biz %s hat die Polizei gerufen und schwärzt euch an!",
                    Biz[b][bBesitzer],Biz[b][bName]);
                    SendClientMessage(i,COLOR_RED,frakstring);
                }
            }
            Biz[b][bErpresserForderung] = 0;
            Biz[b][bErpresserState] = 0;
            Biz[b][bErpresserFraktion] = 0;
            UpdateBizText(b);
            SendClientMessage(playerid,COLOR_YELLOW,"Du hast erfolgreich dem Schutzgeld des Biz ein Ende gesetzt");
        }
    }
    return 1;
}

COMMAND:schutzgeldbezahlen(playerid,params[]) {
    new t = IsPlayerAtTanke(playerid,4.0);
    new b = IsPlayerAtBiz(playerid);
    if(t == 999 && b == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Geschäft oder Tankstelle.");
    }
    new
        betrag,
        frak,
        frakname[50],
        String[128];
    if( t != 999 ) {
        frak = Tanke[t][tErpresserFraktion];
        if( Spieler[playerid][pPlayerTank] != t ) {
            return SendClientMessage(playerid, COLOR_RED, "Diese Tanke gehört nicht dir.");
        }
        if( Tanke[t][tErpresserState] == 1 ) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast bereits die Schutzgeldforderung gezahlt");
        }
        if( Tanke[t][tErpresserForderung] > Spieler[playerid][pCash] ) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld, um die geforderte Summe zu zahlen");
        }
        ReturnFraktionByID( frak , frakname );
        betrag = Tanke[t][tErpresserForderung];
        Spieler[playerid][pCash] -= betrag;
        format(String,sizeof(String),"Du hast die Erpresserforderung der Fraktion %s in Höhe von $%s gezahlt",frakname, AddDelimiters(betrag) );
        SendClientMessage(playerid,COLOR_ORANGE,String);
        format(String,sizeof(String),"Die Tankstelle %s, Inhaber: %s hat das geforderte Schutzgeld in Höhe von $%s bezahlt!",Tanke[t][tName],GetName(playerid), AddDelimiters(betrag) );
        SendFraktionMessage( frak , COLOR_YELLOW, String);
        Tanke[t][tErpresserState] = 1;
    }
    else {
        frak = Biz[b][bErpresserFraktion];
        if( Spieler[playerid][pPlayerBiz] != b ) {
            return SendClientMessage(playerid, COLOR_RED, "Dieses Geschäft gehört nicht dir.");
        }
        if( Biz[b][bErpresserState] == 1 ) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast bereits die Schutzgeldforderung gezahlt");
        }
        if( Biz[b][bErpresserForderung] > Spieler[playerid][pCash] ) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld, um die geforderte Summe zu zahlen");
        }
        ReturnFraktionByID( frak , frakname );
        betrag = Biz[b][bErpresserForderung];
        Spieler[playerid][pCash] -= betrag;
        format(String,sizeof(String),"Du hast die Erpresserforderung der Fraktion %s in Höhe von $%s gezahlt",frakname, AddDelimiters(betrag) );
        SendClientMessage(playerid,COLOR_ORANGE,String);
        format(String,sizeof(String),"Das Geschäft %s, Inhaber: %s, hat das geforderte Schutzgeld in Höhe von $%s bezahlt!",Biz[b][bName],GetName(playerid), AddDelimiters(betrag) );
        SendFraktionMessage( frak , COLOR_YELLOW, String);
        Biz[b][bErpresserState] = 1;
    }
    // Kassen auffüllen
    if(Spieler[playerid][pFraktion] == 6)Kasse[Grove] += betrag;
    else if(Spieler[playerid][pFraktion] == 7) Kasse[Ballas] += betrag;
    else if(Spieler[playerid][pFraktion] == 10) Kasse[Yakuza] += betrag;
    else if(Spieler[playerid][pFraktion] == 11) Kasse[Aztecas] += betrag;
    else if(Spieler[playerid][pFraktion] == 12) Kasse[LCN] += betrag;
    else if(Spieler[playerid][pFraktion] == 13) Kasse[Vagos] += betrag;
    else if(Spieler[playerid][pFraktion] == 14) Kasse[Hitman] += betrag;
    else if(Spieler[playerid][pFraktion] == 20) Kasse[OutlawzK] += betrag;
    else if(Spieler[playerid][pFraktion] == 21) Kasse[ndgradethaK] += betrag;
    return 1;
}
COMMAND:schutzgeldabbrechen(playerid,params[]) {
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    new t = IsPlayerAtTanke(playerid,4.0);
    new b = IsPlayerAtBiz(playerid);
    if(t == 999 && b == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Geschäft oder Tankstelle.");
    }
    if( Spieler[playerid][pRank] < 5 ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kann NUR Co. -/ oder Leader ausführen");
    }
    new
        besitzerid,
        String[128];
    if( t != 999 ) {
        // Tank erpressen abbrechen
        if( Tanke[t][tErpresserFraktion] != frak ) {
            return SendClientMessage(playerid, COLOR_RED, "Diese Tanke wird nicht von dein Gang bzw. Mafia erpresst");
        }
        Tanke[t][tErpresserFraktion] = 0;
        Tanke[t][tErpresserForderung] = 0;
        Tanke[t][tErpresserState] = 0;
        sscanf( Tanke[t][tBesitzer], "u",besitzerid);
        format(String,sizeof(String),"Die Gang bzw. Mafia erpresst ab sofort nicht mehr die Tankestelle %s",Tanke[t][tName]);
        UpdateTankeText(t);
    }
    else {
        // Biz erpressen abbrechen
        if( Biz[b][bErpresserFraktion] != frak ) {
            return SendClientMessage(playerid, COLOR_RED, "Dieses Biz wird nicht von deiner Gang bzw. Mafia erpresst");
        }
        Biz[b][bErpresserFraktion] = 0;
        Biz[b][bErpresserForderung] = 0;
        Biz[b][bErpresserState] = 0;
        sscanf( Biz[b][bBesitzer], "u",besitzerid);
        format(String,sizeof(String),"Die Gang bzw. Mafia erpresst ab sofort nicht mehr das Geschäft %s",Biz[b][bName]);
        UpdateBizText(b);
    }
    SendFraktionMessage(frak, COLOR_ORANGE, String);
    if( IsPlayerConnected(besitzerid) ) {
        new
            frakname[50];
        ReturnFraktionByID( frak , frakname );
        if( t != 999 ) {
            format(String,sizeof(String),"Deine Tankstelle wird nicht mehr von der Gang bzw. Mafia %s erpresst!" ,frakname);
        }
        else {
            format(String,sizeof(String),"Dein Geschäft wird nicht mehr von der Gang bzw. Mafia %s erpresst!" ,frakname);
        }
        SendClientMessage(playerid,COLOR_RED,String);
    }
    return 1;
}
COMMAND:schutzgeldliste(playerid,params[]) {
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    new
        String[128],
        c;
    for(new i=0;i<MAX_BIZES;i++) {
        if( Biz[i][bErpresserFraktion] == frak ) {
            if( c == 0 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"======SCHUTZGELDLISTE======");
            }
            c++;
            format(String,sizeof(String),"%d. Biz: %s  Besitzer: %s - Gefordert: $%s, Bezahlt: %s",c,Biz[i][bName],Biz[i][bBesitzer], AddDelimiters(Biz[i][bErpresserForderung]), ( Biz[i][bErpresserState] == 1 ? ("Ja") : ("Nein")) );
            SendClientMessage(playerid,COLOR_WHITE,String);
        }
    }
    for(new i=0;i<MAX_TANKEN;i++) {
        if( Tanke[i][tErpresserFraktion] == frak ) {
            if( c == 0 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"======SCHUTZGELDLISTE======");
            }
            c++;
            format(String,sizeof(String),"%d. Tanke: %s  Besitzer: %s - Gefordert: $%s, Bezahlt: %s",c,Tanke[i][tName],Tanke[i][tBesitzer], AddDelimiters(Tanke[i][tErpresserForderung]), ( Tanke[i][tErpresserState] == 1 ? ("Ja"):("Nein")) );
            SendClientMessage(playerid,COLOR_WHITE,String);
        }
    }
    if( !c ) {
        SendClientMessage(playerid,COLOR_YELLOW,"======Keine Erpressender Tankstellen / Geschäfte======");
    }
    return 1;
}


stock udb_hash(buf[]) {
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}


COMMAND:offlinearrest(playerid,params[]) {
    if( !IsPlayerExecutive(playerid)) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    }
    new
        sLowerName[MAX_PLAYER_NAME],
        sName[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",sName)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /offlinearrest [Name]");
    }
    strcat(sLowerName,sName);
    strtolower(sLowerName);
    new
        Float:x,
        Float:y,
        Float:z,
        bool:bTreffer,
        String[160],
        hashName = udb_hash( sLowerName );
    for(new i ; i < MAX_DEATH_NOTICE ; i++) {
        if( g_DeathNotice[i][DN_hashOwner] == hashName ) {
            Streamer_GetFloatData( STREAMER_TYPE_PICKUP , g_DeathNotice[i][DN_iPickup] , E_STREAMER_X , x);
            Streamer_GetFloatData( STREAMER_TYPE_PICKUP , g_DeathNotice[i][DN_iPickup] , E_STREAMER_Y , y);
            Streamer_GetFloatData( STREAMER_TYPE_PICKUP , g_DeathNotice[i][DN_iPickup] , E_STREAMER_Z , z);
            if( IsPlayerInRangeOfPoint(playerid,6.0,x,y,z) ) {
                format(String,sizeof(String),"UPDATE `accounts` SET `Jailed` = 1,`JailTime` = ( 150 * `Wanteds` ),`JailType` = %d , `Wanteds` = 0 WHERE `Name` = '%s'",random(3),sName);
                mysql_pquery(String,THREAD_OFFLINEARREST,playerid,gSQL,MySQLThreadOwner);
                bTreffer = true;
                break;
            }
        }
    }
    if(!bTreffer) {
        format(String,sizeof(String),"Der Spieler %s ist nicht Offline-Geflüchtet, du bist zu weit entfernt oder es ist mehr als 30 Sekunden her",sName);
        SendClientMessage(playerid,COLOR_ORANGE,String);
    }
    else {
        format(String,sizeof(String),"Der Spieler %s wird Offline in das Prison gesteckt",sName);
        SendClientMessage(playerid,COLOR_ORANGE,String);
    }
    return 1;
}
/*COMMAND:einfuehrung(playerid,params[]) {
    if( Spieler[playerid][pLevel] < 2 ) {
        return SendClientMessage(playerid, COLOR_RED, "Nur Spieler unter Level 2 können diese Funktion nutzen");
    }
    if( !IsPlayerInRangeOfPoint(playerid,8.0,0.0,0.0,0.0) ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kannst du hier nicht aufrufen");
    }
    new
        String[128];
    format(String,sizeof(String),"Neuling %s benötigt für den Start eine Einführung!",GetName(playerid));
    SendAdminMessage(COLOR_YELLOW, String);
    return 1;
}*/
COMMAND:vamt(playerid,params[]) {
    if( !IsPlayerExecutive(playerid) && Spieler[playerid][pFraktion] != 5) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    }
    new
        giveid;
    if(sscanf(params,"u",giveid)) {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Vamt [ID/SPIELERNAME]");
    }
    if( !IsPlayerConnected(giveid) ) {
        SendClientMessage(playerid,COLOR_RED,"Ungültiger Spieler");
        return 1;
    }
    Scheine(playerid,giveid,1);
    return 1;
}

stock ConvertSec(secs,&sec,&min,&hour) {
    new
        rest;
    sec = 0;
    min = 0;
    hour = 0;
    hour = (secs / (60*60));
    rest = (secs % (60*60));
    min  = (rest / 60);
    sec = (rest % 60);
    return 1;
}

COMMAND:scheinsperre(playerid,params[]) {
    new
        sperren,
        sekunden,
        minuten,
        stunden,
        time_left,
        String[128],
        unix = gettime();
    SendClientMessage(playerid,COLOR_RED,"=============FAHRSCHEIN-SPERRFRIST=============");
    if( unix < Spieler[playerid][punixFSperre] ) { // car
        time_left = Spieler[playerid][punixFSperre] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"Auto-Lizenzsperre läuft in %d Stunden und %d Minuten aus!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if( unix < Spieler[playerid][punixFlSperre] ) { // fly
        time_left = Spieler[playerid][punixFlSperre] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"Flug-Lizenzsperre läuft in %d Stunden und %d Minuten aus!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if( unix < Spieler[playerid][punixGunSperre] ) {
        time_left = Spieler[playerid][punixGunSperre] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"Waffen-Lizenzsperre läuft in %d Stunden und %d Minuten aus!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if( unix < Spieler[playerid][punixLKWSperre] ) {
        time_left = Spieler[playerid][punixLKWSperre] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"LKW-Lizenzsperre läuft in %d Stunden und %d Minuten aus!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if( unix < Spieler[playerid][punixMotoSperre] ) { // motorrad
        time_left = Spieler[playerid][punixMotoSperre] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"Motorrad-Lizenzsperre läuft in %d Stunden und %d Minuten aus!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if(!sperren) {
        SendClientMessage(playerid,COLOR_GREEN,"Keiner deiner Scheine ist gesperrt!");
    }
    return 1;
}

COMMAND:versicherungen(playerid,params[]) {
    new
        sperren,
        sekunden,
        minuten,
        stunden,
        time_left,
        String[128],
        unix = gettime();
    SendClientMessage(playerid,COLOR_RED,"=============MEINE VERSICHERUNGEN=============");
    if( unix < Spieler[playerid][unixKrankenversicherung] ) { // car
        time_left = Spieler[playerid][unixKrankenversicherung] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"Krankenversicherung für %d Stunden und %d Minuten!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if( unix < Spieler[playerid][pExperte] ) { // boat
        time_left = Spieler[playerid][pExperte] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"Rechtsschutzversichert für %d Stunden und %d Minuten!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if( unix < Spieler[playerid][pKFZVersicherung] ) { // fly
        time_left = Spieler[playerid][pKFZVersicherung] - unix;
        ConvertSec( time_left , sekunden,minuten,stunden );

        format(String,sizeof(String),"KFZ-Versicherung für %d Stunden und %d Minuten!",stunden,minuten);
        SendClientMessage(playerid,COLOR_ORANGE,String);

        sperren++;
    }
    if(!sperren) {
        SendClientMessage(playerid,COLOR_GREEN,"Du hast keine Versicherungen abgeschlossen!");
    }
    return 1;
}


stock GetPlayerLawyerSkillValue(playerid) {
    new
        value,
        points = Spieler[playerid][pLawyerPoints];
    for(new i ; i < sizeof(g_LawyerSkills) ; i++) {
        if( points >= g_LawyerSkills[i][LS_iJobs] ) {
            value = g_LawyerSkills[i][LS_iJailTime];
        }
    }
    return value;
}

stock GetPlayerLawyerLevel(playerid) {
    new
        level,
        points = Spieler[playerid][pLawyerPoints];
    for(new i ; i < sizeof(g_LawyerSkills) ; i++) {
        if( points >= g_LawyerSkills[i][LS_iJobs] ) {
            level = i + 1;
        }
    }
    return level;
}

stock GetPlayerGangFightSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pKillsGangFight];
    for(new i ; i < sizeof(g_GangFightSkills) ; i++) {
        if( points >= g_GangFightSkills[i][GFS_iKills] ) {
            value = i + 1;
        }
    }
    return value;
}


stock GetPlayerLawyerStateShare(playerid) {
    new
        share,
        points = Spieler[playerid][pLawyerPoints];
    for(new i ; i < sizeof(g_LawyerSkills) ; i++) {
        if( points >= g_LawyerSkills[i][LS_iJobs] ) {
            share = g_LawyerSkills[i][LS_iStateShare];
        }
    }
    return share;
}
COMMAND:clubneon(playerid,paramas[]) {
    if( !IsPlayerInRangeOfPoint(playerid,6.0,1747.8992,2243.8093,10.8203)) {
        return SendClientMessage(playerid,COLOR_RED,"Du kannst diese Funktion hier nicht aufrufen");
    }
    if( Spieler[playerid][pDonateRank] != 2 ) {
        return SendClientMessage(playerid,COLOR_RED,"Aufgrund eines Fehlers werden zeitweise keine Neonröhren verkauft!");
    }
    /*if( Spieler[playerid][pDonateRank] != 1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Nur Clubmitglieder können diese Funktion nutzen");
    }*/
    new vehicleid = GetPlayerVehicleID(playerid);
    if( !vehicleid ) {
        return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Fahrzeug für diese Funktion");
    }
    new owner = GetCarOwner( vehicleid );
    if( owner != playerid ) {
        return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört nicht dir");
    }
    ShowPlayerDialog(playerid,DIALOG_CLUBNEON,DIALOG_STYLE_LIST,"Clubneon","{FF0000}Entfernen{FFFFFF}\nWeiß\nBlau\nGrün\nRot\nPink\nGelb","Anbringen","Abbruch");

    return 1;
}

COMMAND:entladen(playerid,params[]) {
    if( Spieler[playerid][pJob] != 3 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst Trucker sein, für diese Funktion");
    }
    if( CP_TRUCKERWAREN == pCheckpoint[playerid] || CP_TRUCKERWAREN2 == pCheckpoint[playerid]) {
        // Waren
        new vehicleid = GetPlayerVehicleID(playerid);
        if( !vehicleid ) {
            return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug");
        }
        new modelid = GetVehicleModel(vehicleid);
        if ( !(modelid == 514 || modelid == 515) ) {
            return SendClientMessage(playerid,COLOR_RED,"Du musst in einem LKW sitzen für diese Funktion");
        }
        new trailer = GetVehicleTrailer(vehicleid);
        if( !trailer ) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast keinen Anhänger hinten dran.");
        }
        if( GetVehicleModel(trailer) != 435) {
                return SendClientMessage(playerid, COLOR_RED, "Du hast nicht den passenden Anhänger dran.");
        }
        if( Waren[vehicleid] < 1 ) {
            return SendClientMessage(playerid,COLOR_RED,"Du hast keine Waren aufgeladen");
        }
        if( CP_TRUCKERWAREN == pCheckpoint[playerid] && !IsPlayerInRangeOfPoint(playerid,6.0,2187.6926,-2263.8967,13.4674) ) {
            return SendClientMessage(playerid,COLOR_RED,"Du kannst die Ware hier nicht abladen");
        }
        if( CP_TRUCKERWAREN2 == pCheckpoint[playerid] && !IsPlayerInRangeOfPoint(playerid,6.0,2571.6233,-2226.6980,13.3550) ) {
            return SendClientMessage(playerid,COLOR_RED,"Du kannst die Ware hier nicht abladen");
        }
        new ppw = RandomEx(14,16);
        new preis = ppw * Waren[vehicleid];
        new String[128];
        format(String,sizeof(String),"Du hast %d Waren für je $%d pro Ware Verkauft ($%s)",Waren[vehicleid],ppw, AddDelimiters(preis));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        GivePlayerCash(playerid,preis);
        Spieler[playerid][tickJobCheckpoint] = gettime() + (3*60);
        if( CP_TRUCKERWAREN == pCheckpoint[playerid] ) {
            StaticBiz[0][SBD_iWaren] += Waren[vehicleid];
            UpdateStaticBizText(0);
        }
        else if( CP_TRUCKERWAREN2 == pCheckpoint[playerid] ) {
            StaticBiz[1][SBD_iWaren] += Waren[vehicleid];
            UpdateStaticBizText(1);
        }
        Waren[vehicleid] = 0;
        DisablePlayerCheckpointEx(playerid);
    }
    else if( CP_TRUCKERTANK == pCheckpoint[playerid] || CP_TRUCKERTANK2 == pCheckpoint[playerid]) {
        // Benzin
        new vehicleid = GetPlayerVehicleID(playerid);
        if( !vehicleid ) {
            return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug");
        }
        new modelid = GetVehicleModel(vehicleid);
        if( modelid != 514 ) {
            return SendClientMessage(playerid,COLOR_RED,"Du musst in einem Tanklaster sitzen für diese Funktion");
        }
        new trailer = GetVehicleTrailer(vehicleid);
        if( !trailer ) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast keinen Anhänger hinten dran.");
        }
        if( GetVehicleModel(trailer) != 584) {
            return SendClientMessage(playerid, COLOR_RED, "Du hast nicht den passenden Anhänger dran.");
        }
        if( Benzin[trailer] < 1 ) {
            return SendClientMessage(playerid,COLOR_RED,"Du hast kein Benzin beladen.");
        }
        if( CP_TRUCKERTANK == pCheckpoint[playerid] && !IsPlayerInRangeOfPoint(playerid,6.0,-1034.6223,-626.2365,32.0078) ) {
            return SendClientMessage(playerid,COLOR_RED,"Du kannst den Benzin hier nicht abladen");
        }
        if( CP_TRUCKERTANK2 == pCheckpoint[playerid] && !IsPlayerInRangeOfPoint(playerid,6.0,2482.8813,-2084.2239,13.5469) ) {
            return SendClientMessage(playerid,COLOR_RED,"Du kannst den Benzin hier nicht abladen");
        }
        new ppw = RandomEx(10,11);
        new preis = ppw * Benzin[trailer];
        new String[128];
        format(String,sizeof(String),"Du hast %d Liter Benzin für je $%d pro Liter Verkauft ($%s)",Benzin[trailer],ppw, AddDelimiters(preis));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        GivePlayerCash(playerid,preis);
        Spieler[playerid][tickJobCheckpoint] = gettime() + (3*60);
        if( CP_TRUCKERTANK == pCheckpoint[playerid] ) {
            StaticBiz[2][SBD_iWaren] += Benzin[trailer];
            UpdateStaticBizText(2);
        }
        else if( CP_TRUCKERTANK2 == pCheckpoint[playerid] ) {
            StaticBiz[3][SBD_iWaren] += Benzin[trailer];
            UpdateStaticBizText(3);
        }
        Benzin[trailer] = 0;
        DisablePlayerCheckpointEx(playerid);
    }
    else {
        return SendClientMessage(playerid,COLOR_ORANGE,"Du hast die Mission gar nicht gestartet");
    }
    return 1;
}

COMMAND:startwaren(playerid,params[]) {
    if( Spieler[playerid][pJob] != 3 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst Trucker sein, für diese Funktion.");
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    if( !vehicleid ) {
        return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug.");
    }
    new modelid = GetVehicleModel(vehicleid);
    if( modelid != 515) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst in einem LKW sitzen für diese Funktion.");
    }
    new trailer = GetVehicleTrailer(vehicleid);
    if( !trailer ) {
        return SendClientMessage(playerid, COLOR_RED, "Du hast keinen Anhänger hinten dran.");
    }
    if( GetVehicleModel(trailer) != 435) {
        return SendClientMessage(playerid, COLOR_RED, "Du hast nicht den passenden Anhänger dran.");
    }
    if( Waren[vehicleid] < 1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast keine Waren aufgeladen.");
    }
    if( Spieler[playerid][pTruckerBlock] > gettime() ) {
        return SendClientMessage(playerid,COLOR_RED,"Eine neue Route kann für dich aktuell nicht kalkuliert werden.");
    }
    new
        r = random(2);
    if(r == 0 ) {
        SetPlayerCheckpointEx(playerid,2187.6926,-2263.8967,13.4674,5.0,CP_TRUCKERWAREN);
    }
    else if(r == 1 ) {
        SetPlayerCheckpointEx(playerid,2571.6233,-2226.6980,13.3550,5.0,CP_TRUCKERWAREN2);
    }
    SendClientMessage(playerid,COLOR_YELLOW,"Du kannst die Waren nun zu der markierten Position liefern.");
    Spieler[playerid][pTruckerBlock] = gettime() + 5*60;
    return 1;
}
COMMAND:startbenzin(playerid,params[]) {
    if( Spieler[playerid][pJob] != 3 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst Trucker sein, für diese Funktion.");
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    new modelid = GetVehicleModel(vehicleid);
    if( modelid != 514 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst in einem Tanklaster sitzen für diese Funktion.");
    }
    new trailer = GetVehicleTrailer(vehicleid);
    if( !trailer ) {
        return SendClientMessage(playerid, COLOR_RED, "Du hast keinen Anhänger hinten dran.");
    }
    if( GetVehicleModel(trailer) != 584) {
        return SendClientMessage(playerid, COLOR_RED, "Du hast nicht den passenden Anhänger dran.");
    }
    if( Benzin[trailer] < 1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du hast kein Benzin beladen.");
    }
    if( Spieler[playerid][pTruckerBlock] > gettime() ) {
        return SendClientMessage(playerid,COLOR_RED,"Eine neue Route kann für dich aktuell nicht kalkuliert werden.");
    }
    new
        r = random(2);
    if(r == 0 ) {
        SetPlayerCheckpointEx(playerid,-1034.6223,-626.2365,32.0078,5.0,CP_TRUCKERTANK);
    }
    else if(r == 1 ) {
        SetPlayerCheckpointEx(playerid,2482.8813,-2084.2239,13.5469,5.0,CP_TRUCKERTANK2);
    }
    SendClientMessage(playerid,COLOR_YELLOW,"Du kannst den Benzin nun zu der markierten Position liefern.");
    Spieler[playerid][pTruckerBlock] = gettime() + 5*60;
    return 1;
}
COMMAND:tankkaufen(playerid,params[]) {
    new
        idx = -1,
        menge;
    if(sscanf(params,"d",menge)) {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tankkaufen [Menge]");
    }
    if( menge < 1 ) {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Tankkaufen [Menge]");
    }
    if( IsPlayerInRangeOfPoint(playerid,6.0,-1034.6223,-626.2365,32.0078) ) {
        idx = 2;
    }
    if( IsPlayerInRangeOfPoint(playerid,6.0,2482.8813,-2084.2239,13.5469) ) {
        idx = 3;
    }
    if( idx == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Ort, wo du Benzin kaufen kannst");
    }
    new indextanke = Spieler[playerid][pPlayerTank];
    if( indextanke == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt keine Tankstelle!");
    }
    if( StaticBiz[idx][SBD_iWaren] < menge ) {
        return SendClientMessage(playerid, COLOR_RED, "Das Lager kann deinen Bedarf am Benzin nicht decken");
    }
    new
        String[128];
    if( Tanke[indextanke][tMaxBenzin] < Tanke[indextanke][tBenzin] + menge ) {
        format(String,sizeof(String),"Diese Menge kannst du nicht kaufen,da deine Tanke nur Maximal %d Liter Benzin halten kann ( Noch %d )",Tanke[indextanke][tMaxBenzin],( Tanke[indextanke][tMaxBenzin] - Tanke[indextanke][tBenzin] ) );
        return SendClientMessage(playerid, COLOR_RED, String );
    }
    new price = menge * 25;
    if( Spieler[playerid][pCash] < price ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld. Jeder Liter kostet 25$");
    }
    format(String,sizeof(String),"Du hast für deine Tankstelle %d Liter Benzin für je 25$ pro Liter gekauft (-$%s)",menge, AddDelimiters(price));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    GivePlayerCash(playerid,-price);
    Tanke[indextanke][tBenzin] += menge;
    StaticBiz[idx][SBD_iWaren] -= menge;
    UpdateStaticBizText(idx);
    return 1;
}
COMMAND:warenkaufen(playerid,params[]) {
    new
        idx = -1,
        menge;
    if(sscanf(params,"d",menge)) {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Warenkaufen [Menge]");
    }
    if( menge < 1 ) {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Warenkaufen [Menge]");
    }
    if( IsPlayerInRangeOfPoint(playerid,6.0,2187.6926,-2263.8967,13.4674) ) {
        idx = 0;
    }
    if( IsPlayerInRangeOfPoint(playerid,6.0,2571.6233,-2226.6980,13.3550) ) {
        idx = 1;
    }
    if( idx == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Ort,wo du Benzin kaufen kannst");
    }
    new indexbiz = Spieler[playerid][pPlayerBiz];
    if( indexbiz == 999) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Biz!");
    }
    if( StaticBiz[idx][SBD_iWaren] < menge ) {
        return SendClientMessage(playerid, COLOR_RED, "Das Lager kann deinen Bedarf an Waren nicht decken");
    }
    new
        String[128];
    if( Biz[indexbiz][bMaxWaren] < Biz[indexbiz][bWaren] + menge ) {
        format(String,sizeof(String),"Diese Menge kannst du nicht kaufen,da dein Biz nur Maximal %d Waren halten kann ( Noch %d )",Biz[indexbiz][bMaxWaren],( Biz[indexbiz][bMaxWaren] - Biz[indexbiz][bWaren] ) );
        return SendClientMessage(playerid, COLOR_RED, String );
    }
    new price = menge * 20;
    if( Spieler[playerid][pCash] < price ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld. Jede Ware kostet 20$");
    }
    format(String,sizeof(String),"Du hast für dein Biz %d Waren für je 20$ pro Ware gekauft (-$%s)",menge, AddDelimiters(price));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    GivePlayerCash(playerid,-price);
    Biz[indexbiz][bWaren] += menge;
    StaticBiz[idx][SBD_iWaren] -= menge;
    UpdateStaticBizText(idx);
    return 1;
}


stock LoadGangZones() {
    mysql_oquery("SELECT * FROM `gangfight`",THREAD_LOADGANGZONES,INVALID_PLAYER_ID,gSQL);
    tdGangZoneHeader = TextDrawCreate(469.000000, 169.000000, "Gangzone");
    TextDrawBackgroundColor(tdGangZoneHeader, 255);
    TextDrawFont(tdGangZoneHeader, 1);
    TextDrawLetterSize(tdGangZoneHeader, 0.549999, 1.900000);
    TextDrawColor(tdGangZoneHeader, -1);
    TextDrawSetOutline(tdGangZoneHeader, 0);
    TextDrawSetProportional(tdGangZoneHeader, 1);
    TextDrawSetShadow(tdGangZoneHeader, 1);
    TextDrawSetString(tdGangZoneHeader,"Gangzone");
    return 1;
}
stock SaveGangZones() {
    new
        query[128];
    for(new i ; i < iGangZones ; i++) {
        format(query,sizeof(query),"UPDATE `gangfight` SET \
            `owner` = %d, \
            `timeout` = %d, \
            `gbestand` = %d, \
            `gupgrade` = %d \
            WHERE `id` = %d",
            g_GangZone[i][GZ_iOwner],
            g_GangZone[i][GZ_iTimeout],
            g_GangZone[i][GZ_igbestand],
            g_GangZone[i][GZ_igupgrade],
            g_GangZone[i][GZ_iID]);
        mysql_oquery( query ,THREAD_SAVEGANGZONES,i,gSQL);
    }
    return 1;
}

forward GangZone_Pulse();
public GangZone_Pulse() {
    //print("GangZone_Pulse");
    new
        time,
        String[200],
        color;
    time = gettime();
    for(new i ; i < iGangZones ; i++) {
        color = GetZoneColorOfFaction(g_GangZone[i][GZ_iOwner]);
        GangZoneShowForAll( g_GangZone[i][GZ_iGangZoneID], color );
        if( g_GangZone[i][GZ_iGangWarEnd] > time ) {
            if( g_GangZone[i][GZ_iStatus] == 0 ) {
                color = GetZoneColorOfFaction(g_GangZone[i][GZ_iOwner]);
                GangZoneShowForAll( g_GangZone[i][GZ_iGangZoneID], color );
            }
            else if( g_GangZone[i][GZ_iStatus] == 1 ) {
                //printf("GangZone %d - Attacker %s %d Pkt vs Owner %s %d Pkt",i, GetFactionNameOfFaction(g_GangZone[i][GZ_iAttacker]) , g_GangZone[i][GZ_iAttackerScore],GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]),g_GangZone[i][GZ_iOwnerScore] );
                color = GetZoneColorOfFaction( g_GangZone[i][GZ_iAttacker] );
                GangZoneFlashForAll( g_GangZone[i][GZ_iGangZoneID], color );
                // Im Gangfight
                if( g_GangZone[i][GZ_iFlaggeEnd] != 0 ) {
                    // Flaggeneroberung läuft
                    new
                        giveid;
                    giveid = g_GangZone[i][GZ_iFlaggePlayer];
                    if( !IsPlayerConnected(giveid)) {
                        g_GangZone[i][GZ_iFlaggeEnd] = 0;
                        g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                    }
                    if( !IsPlayerInRangeOfPoint( giveid , 7.0 , g_GangZone[i][GZ_fIconX],g_GangZone[i][GZ_fIconY],g_GangZone[i][GZ_fIconZ] )) {
                        g_GangZone[i][GZ_iFlaggeEnd] = 0;
                        g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                        SendClientMessage(giveid,COLOR_ORANGE,"Du hast dich zu weit von der Flagge entfernt.");
                        format(String,sizeof(String),"Die Eroberung der Flagge wurde abgebrochen, da sich %s zu weit davon entfernt hat.",GetName(giveid));
                        SendFraktionMessage( g_GangZone[i][GZ_iOwner] , COLOR_YELLOW, String );
                        SendFraktionMessage( g_GangZone[i][GZ_iAttacker] , COLOR_YELLOW, String );
                    }
                    if( time >= g_GangZone[i][GZ_iFlaggeEnd] && g_GangZone[i][GZ_iFlaggeEnd] != 0 ) {
                        // 60 Sekunden bei Flaggeneroberung abgelaufen
                        new position[16];
                        if( Spieler[giveid][pFraktion] == g_GangZone[i][GZ_iOwner] ) {
                            position = "Verteidiger";
                            g_GangZone[i][GZ_iFlagge] = 0;
                            g_GangZone[i][GZ_iOwnerScore] += 2;
                        }
                        else if( Spieler[giveid][pFraktion] == g_GangZone[i][GZ_iAttacker] ) {
                            position = "Angreifer";
                            g_GangZone[i][GZ_iFlagge] = 1;
                            g_GangZone[i][GZ_iAttackerScore] += 2;
                        }
                        g_GangZone[i][GZ_iFlaggeEnd] = 0;
                        g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                        format(String,sizeof(String),"->GANGFIGHT<- {00FF00}Die Flagge wurde erobert durch %s ( %s: %s ) (2P.)",GetName(giveid),position,GetFactionNameOfFaction(Spieler[giveid][pFraktion]));
                        SendFraktionMessage( g_GangZone[i][GZ_iOwner] ,COLOR_YELLOW,String);
                        SendFraktionMessage( g_GangZone[i][GZ_iAttacker] ,COLOR_YELLOW,String);
                    }
                }
                if( g_GangZone[i][GZ_iCounter] <= time ) {
                    if( g_GangZone[i][GZ_iFlagge] == 0 ) {
                        g_GangZone[i][GZ_iOwnerScore]++;
                    }
                    else if( g_GangZone[i][GZ_iFlagge] == 1 ) {
                        g_GangZone[i][GZ_iAttackerScore]++;
                    }
                    g_GangZone[i][GZ_iCounter] = time + 60;
                }
                UpdateGangFightInfo(i);
            }
        }
        else {
            // Gangwar Zeit agelaufen
            if( g_GangZone[i][GZ_iStatus] == 1 ) {
                new
                    betrag = 40000,
                    score,
                    winner,
                    loser;
                GangZoneStopFlashForAll( g_GangZone[i][GZ_iGangZoneID] );

                if( g_GangZone[i][GZ_iAttackerScore] > g_GangZone[i][GZ_iOwnerScore]) {
                    winner = g_GangZone[i][GZ_iAttacker];
                    loser = g_GangZone[i][GZ_iOwner];
                    score = g_GangZone[i][GZ_iAttackerScore];
                    g_GangZone[i][GZ_iOwner] = g_GangZone[i][GZ_iAttacker];
                }
                else if( g_GangZone[i][GZ_iAttackerScore] <= g_GangZone[i][GZ_iOwnerScore]) {
                    loser = g_GangZone[i][GZ_iAttacker];
                    winner = g_GangZone[i][GZ_iOwner];
                    score = g_GangZone[i][GZ_iOwnerScore];
                }
                //printf("Attacker %d Owner %d",g_GangZone[i][GZ_iAttacker],g_GangZone[i][GZ_iOwner]);

                g_GangZone[i][GZ_iOwnerScore] = 0;
                g_GangZone[i][GZ_iAttackerScore] = 0;
                g_GangZone[i][GZ_iAttacker] = 0;
                g_GangZone[i][GZ_iGangWarEnd] = 0;
                g_GangZone[i][GZ_iTimeout] = gettime() + 2*146*146;
                g_GangZone[i][GZ_iStatus] = 0;
                g_GangZone[i][GZ_iFlaggeEnd] = 0;
                g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                g_GangZone[i][GZ_iFlagge] = 0;

                for(new j ; j < MAX_PLAYERS ; j++) {
                    if( IsPlayerConnected(j)) {
                        if( IsPlayerInDynamicArea(i,g_GangZone[i][GZ_iAreaID]) &&
                            (Spieler[j][pFraktion] == winner || Spieler[j][pFraktion] == loser)) {
                            TextDrawHideForPlayer( j,tdGangZoneHeader );
                            TextDrawHideForPlayer( j,g_GangZone[i][GZ_tdInfo] );
                        }
                    }
                }
                color = GetZoneColorOfFaction(g_GangZone[i][GZ_iOwner]);
                GangZoneShowForAll( g_GangZone[i][GZ_iGangZoneID], color );

                if(winner == 6)Kasse[Grove] += betrag;
                else if(winner == 7) Kasse[Ballas] += betrag;
                else if(winner == 10) Kasse[Yakuza] += betrag;
                else if(winner == 11) Kasse[Aztecas] += betrag;
                else if(winner == 12) Kasse[LCN] += betrag;
                else if(winner == 13) Kasse[Vagos] += betrag;
                else if(winner == 14) Kasse[Hitman] += betrag;
                else if(winner == 20) Kasse[OutlawzK] += betrag;
                else if(winner == 21) Kasse[ndgradethaK] += betrag;

                if(loser == 6)Kasse[Grove] -= betrag;
                else if(loser == 7) Kasse[Ballas] -= betrag;
                else if(loser == 10) Kasse[Yakuza] -= betrag;
                else if(loser == 11) Kasse[Aztecas] -= betrag;
                else if(loser == 12) Kasse[LCN] -= betrag;
                else if(loser == 13) Kasse[Vagos] -= betrag;
                else if(loser == 14) Kasse[Hitman] -= betrag;
                else if(loser == 20) Kasse[OutlawzK] -= betrag;
                else if(loser == 21) Kasse[ndgradethaK] -= betrag;
                gangfightpause[loser]=gettime()+600;
                gangfightpause[winner]=gettime()+600;
                g_FraktionsSafeBox[winner][FSB_iWaffenteile]+=25000;
                new arrayid,teamid[2],c;
                for(new z;z<2;z++)
                {
                    if(gangfightkampffraks[0][z]==winner)
                    {
                        arrayid=0;
                        teamid[0]=z;
                    }
                    else if(gangfightkampffraks[1][z]==winner)
                    {
                        arrayid=1;
                        teamid[0]=z;
                    }
                    else if(gangfightkampffraks[2][z]==winner)
                    {
                        arrayid=2;
                        teamid[0]=z;
                    }
                    else if(gangfightkampffraks[3][z]==winner)
                    {
                        arrayid=3;
                        teamid[0]=z;
                    }
                }
                if(teamid[0]==1)
                {
                    teamid[1]=0;
                }
                else
                {
                    teamid[1]=1;
                }
                new winpot,losepot;
                for(;c<MAX_PLAYERS;c++)
                {
                    if(gangfightwettenppp[c]==winner)
                    {
                        winpot+=gangfightwettenpp[c];
                    }
                }
                losepot=gangfightwettenpot[arrayid]-winpot;
                new gwstring[400];
                format(gwstring,400,
                "Der Pot für den Gangfight zwischen %s und %s beträgt $%s. Es wurden $%s auf %s und $%s auf %s gewettet.",
                GetFactionNameOfFaction(winner),GetFactionNameOfFaction(loser),AddDelimiters(gangfightwettenpot[arrayid]), AddDelimiters(winpot),GetFactionNameOfFaction(winner),AddDelimiters(losepot),GetFactionNameOfFaction(loser));
                SendClientMessageToAll(COLOR_YELLOW,gwstring);
                for(c=0;c<MAX_PLAYERS;c++)
                {
                    if(gangfightwettenppp[c]==winner)
                    {
                        gangfightwettenpot[arrayid]-=gangfightwettenpp[c];
                    }
                }
                for(c=0;c<MAX_PLAYERS;c++)
                {
                    if(gangfightwettenppp[i]==winner)
                    {
                        if(IsPlayerConnected(i))
                        {
                            Spieler[i][pBank] += gangfightwettenpp[i] * 2;
                            new gewinnstr[200];
                            format(gewinnstr,200,"Du hast die Gangfight-Wette gewonnen und deinen Gewinn in Höhe von $%s auf die Bank überwiesen bekommen!", AddDelimiters(gangfightwettenpp[i] * 2));
                            SendClientMessage(i,COLOR_GREEN,gewinnstr);
                        }
                        else
                        {
                            bankchange[i]=-128391;
                            new query[256];
                            format(query,sizeof(query),"SELECT `Bank` FROM `accounts` WHERE `Name` = '%s'",gangfightwettenp[i]);
                            mysql_pquery(query , THREAD_BANKCHANGE , i, gSQL,MySQLThreadOwner);
                            if(bankchange[i]!=-128391)
                            {
                                format(query,sizeof(query),"UPDATE `accounts` SET `Bank` = '%i' WHERE `Name` = '%s'",gangfightwettenpp[i]+bankchange[i],gangfightwettenp[i]);
                                mysql_tquery(gSQL,query);
                            }
                        }
                        gangfightwettenppp[i]=0,gangfightwettenpp[i]=0;
                    }
                    else if(gangfightwettenppp[c]==loser)
                    {
                        gangfightwettenppp[c]=0,gangfightwettenpp[c]=0;
                    }
                }
                gangfightwetten[arrayid]=0,gangfightwettenpot[arrayid]=0,gangfightkampffraks[arrayid][0]=0,gangfightkampffraks[arrayid][1]=0;
                for(new b;b<MAX_PLAYERS;b++)
                {
                    format(gangfightwettenp[b],32,"");
                }
                format(String,sizeof(String),"->GANGFIGHT<- {FFFFFF}Die %s hat den Gangfight mit %dP. gewonnen!",GetFactionNameOfFaction(winner),score);
                SendFraktionMessage(winner,COLOR_YELLOW,String);
                SendFraktionMessage(loser,COLOR_YELLOW,String);
                format(String,sizeof(String),"->GANGFIGHT<- {00FF00}$50.000 und das Gebiet geht an die %s",GetFactionNameOfFaction(winner));
                SendFraktionMessage(winner,COLOR_YELLOW,String);
                SendFraktionMessage(loser,COLOR_YELLOW,String);
                format(String,sizeof(String),"[GANGFIGHT-MELDUNG] {FFFFFF}Die %s haben das Gangfight mit %dP. gegen die %s gewonnen!",GetFactionNameOfFaction(winner),score,GetFactionNameOfFaction(loser));
                SendClientMessageToAll(COLOR_YELLOW, String);
                //
                new team1_killer = GZ_GetBestKiller(winner);
                new team2_killer = GZ_GetBestKiller(loser);
                if( IsPlayerConnected(team1_killer)) {
                    format(String,sizeof(String),"->GANGFIGHT<- %s aus der %s hat mit %d die meisten Kills gemacht.",GetName(team1_killer),GetFactionNameOfFaction(winner),Spieler[team1_killer][pKillsGangFightSession] );
                    SendClientMessageToAll(COLOR_YELLOW, String);
                    /*SendFraktionMessage(winner,COLOR_YELLOW,String);
                    SendFraktionMessage(loser,COLOR_YELLOW,String);*/
                }

                if( IsPlayerConnected(team2_killer)) {
                    format(String,sizeof(String),"%s aus der %s hat mit %d die meisten Kills gemacht.",GetName(team2_killer),GetFactionNameOfFaction(loser),Spieler[team2_killer][pKillsGangFightSession] );
                    SendClientMessageToAll(COLOR_YELLOW, String);
                    /*SendFraktionMessage(winner,COLOR_YELLOW,String);
                    SendFraktionMessage(loser,COLOR_YELLOW,String);*/
                }
                // Spieler[killerid][pKillsGangFightSession]++;
            }
            /*
            else if( g_GangZone[i][GZ_iStatus] == 0 ) {
                format(String,sizeof(String),"~n~~h~~b~Besitzer: ~w~%s~n~",GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]));
                TextDrawSetString(g_GangZone[i][GZ_tdInfo],String);
            }*/
        }
        format(String,sizeof(String),"-> GEBIET DER %s <-\nErobern mit: /Gangfight\n\n(%d)", GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]),g_GangZone[i][GZ_iID] );
        UpdateDynamic3DTextLabelText( g_GangZone[i][GZ_t3dLabel] ,0x1E90FFFF ,String);
    }
    return 1;
}

stock GetFactionOnlinePlayers(fraktion) {
    new
        count;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i)) {
            if( Spieler[i][pFraktion] == fraktion ) {
                count++;
            }
        }
    }
    return count;
}

stock IsGangInFight(fraktion) {
    for(new i ; i < iGangZones ; i++) {
        if( g_GangZone[i][GZ_iStatus] == 1 ) {
            if( g_GangZone[i][GZ_iOwner] == fraktion || g_GangZone[i][GZ_iAttacker] == fraktion) {
                return 1;
            }
        }
    }
    return 0;
}
stock GetGangFight(fraktion) {
    for(new i ; i < iGangZones ; i++) {
        if( g_GangZone[i][GZ_iStatus] == 1 ) {
            if( g_GangZone[i][GZ_iOwner] == fraktion || g_GangZone[i][GZ_iAttacker] == fraktion) {
                return i;
            }
        }
    }
    return -1;
}

stock GetPlayerGangZone(playerid) {
    for(new i ; i < iGangZones ; i++) {
        if( IsPlayerInDynamicArea(playerid, g_GangZone[i][GZ_iAreaID]) ) {
            return i;
        }
    }
    return -1;
}

#define GANG_FIGHT_PLAYERS 3

COMMAND:gangfight(playerid,params[]) {
    new
        frak = Spieler[playerid][pFraktion];
    if( !IsAFightFaction(frak) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang Fraktion");
    }
    /*if( Spieler[playerid][pAdmin] < 3 ) {
        return SendClientMessage(playerid, COLOR_RED, "Ein Wettkampf kann nur durch ein Moderatoren gestartet werden!");
    }*/
    if( Spieler[playerid][pRank] < 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Rang 4 in deiner Gang sein");
    }
    if( IsGangInFight(frak) ){
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang befindet sich zur Zeit in einem Gangfight");
    }

    if( GetFactionOnlinePlayers( frak ) < GANG_FIGHT_PLAYERS ) {
        return SendClientMessage(playerid, COLOR_RED, "Es müssen mindestens "#GANG_FIGHT_PLAYERS" Gangmitglieder deiner und der gegnerischen online sein!");
    }

    new
        index;
    index = GetPlayerGangZone(playerid);
    if( index == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Ganggebiet");
    }
    if( !IsPlayerInRangeOfPoint( playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ] )) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der nähe des Icons");
    }
    if( frak == g_GangZone[index][GZ_iOwner] ) {
        return SendClientMessage(playerid, COLOR_RED, "Dieses Ganggebiet gehört bereits deiner Gang");
    }
    if( gettime() < g_GangZone[index][GZ_iTimeout] ) {
        return SendClientMessage(playerid, COLOR_RED, "Dieses Ganggebiet hat noch eine Zeitsperre, bevor das Gebiet angegriffen werden kann");
    }
    if( IsGangInFight(g_GangZone[index][GZ_iOwner]) ){
        return SendClientMessage(playerid, COLOR_RED, "Die Gang ist bereits noch in einem Gangfight involviert");
    }
    if( GetFactionOnlinePlayers( g_GangZone[index][GZ_iOwner] ) < GANG_FIGHT_PLAYERS ) {
        return SendClientMessage(playerid, COLOR_RED, "Von der Besitzerfraktion sind nicht genug Spieler Online");
    }
    if(gangfightpause[frak]<gettime())
    {
        if(gangfightpause[g_GangZone[index][GZ_iOwner]]<gettime())
        {
            new String[128];
            format(String,sizeof(String),"Gangfight gegen %s wird gestartet! Der Kampf dauert 40 Minuten.",GetFactionNameOfFaction(g_GangZone[index][GZ_iOwner]));
            SendFraktionMessage( frak, COLOR_RED, String );
            format(String,sizeof(String),"%s startet einen Gangfight. Der Kampf dauert 40 Minuten.",GetFactionNameOfFaction(frak));
            SendFraktionMessage( g_GangZone[index][GZ_iOwner], COLOR_RED, String );
            format(String,sizeof(String),"[GANGFIGHT-MELDUNG] {FFFFFF}Die %s startet ein Gangfight gegen die %s! Der Kampf dauert 40 Minuten.",GetFactionNameOfFaction(frak),GetFactionNameOfFaction(g_GangZone[index][GZ_iOwner]));
            SendClientMessageToAll(COLOR_YELLOW, String);
            SendClientMessageToAll(COLOR_YELLOW, "Mit /Gangfightwette kannst du für den Sieg einer Gangfraktion wetten!");
            for(new i;i<4;i++)
            {
                if(gangfightwetten[i]==0)
                {
                    gangfightwetten[i]=gettime();
                    gangfightkampffraks[i][0]=g_GangZone[index][GZ_iOwner];
                    gangfightkampffraks[i][1]=frak;
                    break;
                }
            }
            g_GangZone[index][GZ_iStatus] = 1;
            g_GangZone[index][GZ_iAttacker] = frak;
            g_GangZone[index][GZ_iAttackerScore] = 0;
            g_GangZone[index][GZ_iOwnerScore] = 0;
            g_GangZone[index][GZ_iGangWarEnd] = gettime() + 40*60;
            //g_GangZone[index][GZ_iGangWarEnd] = gettime() + 2*60;
            g_GangZone[index][GZ_iFlagge] = -1;
            g_GangZone[index][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
            g_GangZone[index][GZ_iCounter] = 0;
            UpdateGangFightInfo(index);
            for(new z;z<MAX_PLAYERS;z++) {
                if(IsPlayerConnected(z)) {
                    if( Spieler[z][pFraktion] == frak || Spieler[z][pFraktion] == g_GangZone[index][GZ_iOwner]) {
                        TextDrawShowForPlayer( z,tdGangZoneHeader );
                        TextDrawShowForPlayer( z,g_GangZone[index][GZ_tdInfo] );

                        Spieler[z][pKillsGangFightSession] = 0;
                    }
                }
            }
        }
        else
        {
            new string[200];
            format(string,200,
            "Die %s kann nicht angegriffen werden, da sie vor 10 Minuten zuletzt ein Gangfight hatten",
            GetFactionNameOfFaction(g_GangZone[index][GZ_iOwner]));
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_RED,"Ihr habt eine 10 minütige Gangfightpause, da ihr vorhin schon ein Gangfight hattet.");
    }
    return 1;
}


COMMAND:gangfightstop(playerid,params[]) {
    new
        frak = Spieler[playerid][pFraktion];
    if( !IsAFightFaction(frak) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang Fraktion");
    }
    if( Spieler[playerid][pRank] < 4 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst mindestens Rang 4 sein in deiner Gang");
    }
    if( !IsGangInFight(frak) ){
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang befindet sich in keinem Gangfight");
    }
    new
        index;
    index = GetGangFight( Spieler[playerid][pFraktion] );
    if( index == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang befindet sich in keinem Gangfight");
    }
    new
        betrag = 40000,
        winner,
        loser,
        String[200];
    if( Spieler[playerid][pFraktion] == g_GangZone[index][GZ_iAttacker] ) {
        winner = g_GangZone[index][GZ_iOwner];
        loser = g_GangZone[index][GZ_iAttacker];
    }
    else {
        loser = g_GangZone[index][GZ_iOwner];
        winner = g_GangZone[index][GZ_iAttacker];
    }
    g_GangZone[index][GZ_iStatus] = 0;
    g_GangZone[index][GZ_iGangWarEnd] = 0;
    g_GangZone[index][GZ_iOwner] = winner;
    g_GangZone[index][GZ_iAttacker] = 0;
    g_GangZone[index][GZ_iTimeout] = gettime() + 2*146*146;
    g_GangZone[index][GZ_iCounter] = 0;
    g_GangZone[index][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
    g_GangZone[index][GZ_iFlagge] = -1;
    g_GangZone[index][GZ_iFlaggeEnd] = 0;


    if(winner == 6)Kasse[Grove] += betrag;
    else if(winner == 7) Kasse[Ballas] += betrag;
    else if(winner == 10) Kasse[Yakuza] += betrag;
    else if(winner == 11) Kasse[Aztecas] += betrag;
    else if(winner == 12) Kasse[LCN] += betrag;
    else if(winner == 13) Kasse[Vagos] += betrag;
    else if(winner == 14) Kasse[Hitman] += betrag;
    else if(winner == 20) Kasse[OutlawzK] += betrag;
    else if(winner == 21) Kasse[ndgradethaK] += betrag;

    if(loser == 6)Kasse[Grove] -= betrag;
    else if(loser == 7) Kasse[Ballas] -= betrag;
    else if(loser == 10) Kasse[Yakuza] -= betrag;
    else if(loser == 11) Kasse[Aztecas] -= betrag;
    else if(loser == 12) Kasse[LCN] -= betrag;
    else if(loser == 13) Kasse[Vagos] -= betrag;
    else if(loser == 14) Kasse[Hitman] -= betrag;
    else if(loser == 20) Kasse[OutlawzK] -= betrag;
    else if(loser == 21) Kasse[ndgradethaK] -= betrag;
    gangfightpause[loser]=gettime()+600;
    gangfightpause[winner]=gettime()+600;
    g_FraktionsSafeBox[winner][FSB_iWaffenteile]+=25000;
    new arrayid,teamid[2];
    for(new z;z<2;z++)
    {
        if(gangfightkampffraks[0][z]==winner)
        {
            arrayid=0;
            teamid[0]=z;
        }
        else if(gangfightkampffraks[1][z]==winner)
        {
            arrayid=1;
            teamid[0]=z;
        }
        else if(gangfightkampffraks[2][z]==winner)
        {
            arrayid=2;
            teamid[0]=z;
        }
        else if(gangfightkampffraks[3][z]==winner)
        {
            arrayid=3;
            teamid[0]=z;
        }
    }
    if(teamid[0]==1)
    {
        teamid[1]=0;
    }
    else
    {
        teamid[1]=1;
    }
    new winpot,losepot,i;
    for(;i<MAX_PLAYERS;i++)
    {
        if(gangfightwettenppp[i]==winner)
        {
            winpot+=gangfightwettenpp[i];
        }
    }
    losepot=gangfightwettenpot[arrayid]-winpot;
    new gwstring[400];
    format(gwstring,400,
    "Die Wetten für den Gangfight zwischen %s und %s betragen insgesamt $%s\nEs wurden $%s für die %s gewettet und $%s für die %s.",
    GetFactionNameOfFaction(winner),GetFactionNameOfFaction(loser),AddDelimiters(gangfightwettenpot[arrayid]),AddDelimiters(winpot),GetFactionNameOfFaction(winner),AddDelimiters(losepot),GetFactionNameOfFaction(loser));
    SendClientMessageToAll(COLOR_YELLOW,gwstring);
    for(i=0;i<MAX_PLAYERS;i++)
    {
        if(gangfightwettenppp[i]==winner)
        {
            gangfightwettenpot[arrayid]-=gangfightwettenpp[i];
        }
    }
    for(i=0;i<MAX_PLAYERS;i++)
    {
        if(gangfightwettenppp[i]==winner)
        {
            if(IsPlayerConnected(i))
            {
                Spieler[i][pBank] += gangfightwettenpp[i] * 2;
                new gewinnstr[200];
                format(gewinnstr,200,"Du hast die Gangfight-Wette gewonnen und deinen Gewinn in Höhe von $%s auf die Bank überwiesen bekommen!", AddDelimiters(gangfightwettenpp[i] * 2));
                SendClientMessage(i,COLOR_GREEN,gewinnstr);
            }
            else
            {
                bankchange[i]=-128391;
                new query[256];
                format(query,sizeof(query),"SELECT `Bank` FROM `accounts` WHERE `Name` = '%s'",gangfightwettenp[i]);
                mysql_pquery(query , THREAD_BANKCHANGE , i, gSQL,MySQLThreadOwner);
                if(bankchange[i]!=-128391)
                {
                    format(query,sizeof(query),"UPDATE `accounts` SET `Bank` = '%i' WHERE `Name` = '%s'",gangfightwettenpp[i]+bankchange[i],gangfightwettenp[i]);
                    mysql_tquery(gSQL,query);
                }
            }
            gangfightwettenppp[i]=0,gangfightwettenpp[i]=0;
        }
        else if(gangfightwettenppp[i]==loser)
        {
            gangfightwettenppp[i]=0,gangfightwettenpp[i]=0;
        }
    }
    gangfightwetten[arrayid]=0,gangfightwettenpot[arrayid]=0,gangfightkampffraks[arrayid][0]=0,gangfightkampffraks[arrayid][1]=0;
    for(new b;b<MAX_PLAYERS;b++)
    {
        format(gangfightwettenp[b],32,"");
    }

    format(String,sizeof(String),"->GANGFIGHT<- {FFFFFF} Die %s hat das Gangfight aufgegeben. Die %s haben gewonnen!",GetFactionNameOfFaction(loser),GetFactionNameOfFaction(winner));
    SendFraktionMessage( winner , COLOR_YELLOW, String );
    SendFraktionMessage( loser , COLOR_YELLOW, String );
    format(String,sizeof(String),"->GANGFIGHT<- {00FF00}$40.000 + 25.000 Waffenteile und das Gebiet geht an die %s. ",GetFactionNameOfFaction(winner));
    SendFraktionMessage( winner , COLOR_YELLOW, String );
    SendFraktionMessage( loser , COLOR_YELLOW, String );
    format(String,sizeof(String),"[GANGFIGHT-MELDUNG] {FFFFFF}Die %s haben das Gangfight aufgegeben. Die %s haben somit gewonnen!",GetFactionNameOfFaction(loser),GetFactionNameOfFaction(winner));
    SendClientMessageToAll(COLOR_YELLOW, String);
    GangZoneStopFlashForAll( g_GangZone[index][GZ_iGangZoneID] );

    for(i = 0; i < MAX_PLAYERS; i++)
        if(IsPlayerConnected(i))
            if(Spieler[i][pFraktion] == winner || Spieler[i][pFraktion] == loser)
                TextDrawHideForPlayer(i, tdGangZoneHeader);

    TextDrawHideForAll(g_GangZone[index][GZ_tdInfo]);
    return 1;
}
COMMAND:flaggeerobern(playerid,params[]) {
    return cmd_fge(playerid,params);
}
COMMAND:fge(playerid,params[]) {
    new
        frak = Spieler[playerid][pFraktion];
    if( !IsAFightFaction(frak) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang/Mafia.");
    }
    if( !IsGangInFight(frak) ){
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang befindet sich in keinem Gangfight.");
    }
    new fightzone;
    fightzone = GetPlayerGangZone(playerid);
    if( fightzone == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Gangfightgebiet.");
    }
    if( Spieler[playerid][pTot] != 0 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist tot.");
    }
    new
        String[128],
        index;
    index = GetGangFight(frak);
    if( index == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang befindet sich in keinem Gangfight.");
    }
    if( fightzone != index ) {
        return SendClientMessage(playerid, COLOR_RED, "Der Gangwar findet in einem anderem Gebiet statt.");
    }
    if( frak == g_GangZone[index][GZ_iOwner] && g_GangZone[index][GZ_iFlagge] == 0 ||
        frak == g_GangZone[index][GZ_iAttacker] && g_GangZone[index][GZ_iFlagge] == 1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang hält bereits die Flagge.");
    }
    if( IsPlayerConnected(g_GangZone[index][GZ_iFlaggePlayer]) ) {
        format(String,sizeof(String),"Die Flagge wird bereits erobert von %s",GetName(g_GangZone[index][GZ_iFlaggePlayer]));
        return SendClientMessage(playerid, COLOR_RED, String );
    }

    if (!IsPlayerInRangeOfPoint(playerid, 7.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ]))
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht an der Flagge!");

    format(String,sizeof(String)," ->GANGFIGHT<- {FFFFFF}%s der Gang/Mafia %s versucht die Flagge zu erobern.",GetName(playerid),GetFactionNameOfFaction(frak));
    SendFraktionMessage( g_GangZone[index][GZ_iOwner] , COLOR_YELLOW, String );
    SendFraktionMessage( g_GangZone[index][GZ_iAttacker] , COLOR_YELLOW, String );
    SendClientMessage(playerid,COLOR_ORANGE,"Du musst 60 Sekunden an der Flagge aushalten.");
    g_GangZone[index][GZ_iFlaggePlayer] = playerid;
    g_GangZone[index][GZ_iFlaggeEnd] = gettime() + 60;
    return 1;
}

stock UpdateGangFightInfo(id) {
    new
        secs_left = g_GangZone[id][GZ_iGangWarEnd] - gettime(),
        sec,
        minute,
        hour,
        String[256],
        flagge[64];
    if( g_GangZone[id][GZ_iFlagge] == 0 ) {
        strcat(flagge, GetFactionNameOfFaction(g_GangZone[id][GZ_iOwner]));
    }
    else if(g_GangZone[id][GZ_iFlagge] == 1 ) {
        strcat(flagge, GetFactionNameOfFaction(g_GangZone[id][GZ_iAttacker]));
    }
    else if(g_GangZone[id][GZ_iFlagge] == -1 ) {
        flagge = "Niemand";
    }
    ConvertSec(secs_left,sec,minute,hour);
    format(String,sizeof(String),"~n~~y~Verteidiger: ~w~%s %dP.~n~~r~Angreifer: ~w~%s %dP. ~n~~n~~p~Flagge: ~w~%s~n~~b~~h~Ende: ~w~%02d:%02d~n~",GetFactionNameOfFaction(g_GangZone[id][GZ_iOwner]),g_GangZone[id][GZ_iOwnerScore],GetFactionNameOfFaction(g_GangZone[id][GZ_iAttacker]),g_GangZone[id][GZ_iAttackerScore],flagge,minute,sec);
    TextDrawSetString(g_GangZone[id][GZ_tdInfo],String);
    return 1;
}

stock ReleasePlayerKeys(playerid,extra = true) {
    Spieler[playerid][pPlayerBiz] = 999;
    Spieler[playerid][pPlayerBizEx] = 999;
    Spieler[playerid][pPlayerHotel] = 999;
    Spieler[playerid][pPlayerTank] = 999;
    Spieler[playerid][pPlayerHouse] = 999;
    Spieler[playerid][pPlayerFirma] = 999;
    if(extra) {
        Spieler[playerid][pHouseMieteKey] = 999;
    }
    return 1;
}
stock CheckPlayerBiz(playerid) {
    new
        c = 0,
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i = 1; i < sizeof(Biz) ; i++) {
        if(!strcmp(name,Biz[i][bBesitzer],true)) {
            c++;
            if( c == 1 ) {
                Spieler[playerid][pPlayerBiz] = i;
            }
            else {
                if( Spieler[playerid][pPremiumBizSlot] == 1 ) {
                    Spieler[playerid][pPlayerBizEx] = i;
                }
                else {
                    printf("Weiteres Biz '%s' Spieler %s gefunden, besitzt aber kein Premium BizSlot!",Biz[i][bName],GetName(playerid));
                }
            }
        }
    }/*
    if( Spieler[playerid][pPlayerBiz] != 999 ) {
        printf("Biz für %s gefunden",GetName(playerid));
    }*/
    return 1;
}
stock CheckPlayerHotel(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i ; i < iHotel ; i++) {
        if(!strcmp(name,Hotel[i][hBesitzer],true)) {
            Spieler[playerid][pPlayerHotel] = i;
        }
    }/*
    if( Spieler[playerid][pPlayerHotel] != 999 ) {
        printf("Hotel für %s gefunden",GetName(playerid));
    }
    */
    return 1;
}
stock CheckPlayerHouse(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i=0 ; i < iHaus ; i++) {
        if(!strcmp(name,Haus[i][hBesitzer],true)) {
            Spieler[playerid][pPlayerHouse] = i;
            return 1;
        }
    }
    return 0;
}
stock CheckPlayerTanke(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i ; i < iTanke ; i++) {
        if(!strcmp(name,Tanke[i][tBesitzer],true)) {
            Spieler[playerid][pPlayerTank] = i;
        }
    }
    /*
    if( Spieler[playerid][pPlayerTank] != 999 ) {
        printf("Tanke für %s gefunden",GetName(playerid));
    }
    */
    return 1;
}
stock CheckPlayerFirma(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if(!strcmp(name,g_Firma[i][F_sBesitzer],true)) {
            Spieler[playerid][pPlayerFirma] = i;
        }
    }/*
    if( Spieler[playerid][pPlayerTank] != 999 ) {
        printf("Tanke für %s gefunden",GetName(playerid));
    }
    */
    return 1;
}

COMMAND:ageld(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, cash, string[128];
    if(sscanf(params, "ud", pID,cash))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ageld [SpielerID/Name] [BETRAG]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    format(string,sizeof(string),"%s %s gab $%s an Spieler %s.", GetPlayerAdminRang(playerid), GetName(playerid), AddDelimiters(cash), GetName(pID));
    SendAdminMessage(COLOR_YELLOW, string);
    format(string,sizeof(string),"%s %s gab dir $%s.", GetPlayerAdminRang(playerid), GetName(playerid), AddDelimiters(cash));
    Spieler[pID][pCash] += cash;
    SendClientMessage(pID,COLOR_GREEN,string);
    return 1;
}

stock BuyCar(playerid,paymethod) {
    //print("BuyCar D1");
    if(Spectating[playerid][0]!=-1)
    {
        //print("BuyCar D2");
        if(!PlayerHaveCar[playerid][PlayerKey[playerid]])
        {
            //print("BuyCar D3");
            new preis = Kaufliste[Spectating[playerid][0]][aPreis];
            //print("BuyCar D4");
            if( ( paymethod == 1 && GetPlayerMoney(playerid) >= preis) || ( paymethod == 2 && Spieler[playerid][pBank] >= preis) )
            {
                //print("BuyCar D5");
                new index;
                new autohaus = Kaufliste[Spectating[playerid][0]][Autohaus];
                if(autohaus == 0)
                {
                    index = GetBizIndexByID(32);
                    if(Biz[index][bWaren] < 5)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Das Autohaus hat nicht genügend Waren.");
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else if(autohaus == 1)
                {
                    index = GetBizIndexByID(33);
                    if(Biz[index][bWaren] < 5)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Das Autohaus hat nicht genügend Waren.");
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else if(autohaus == 2)
                {
                    index = GetBizIndexByID(34);
                    if(Biz[index][bWaren] < 5)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Das Motorrad-Verkaufshaus hat nicht genügend Waren.");
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else if(autohaus == 3)
                {
                    index = GetBizIndexByID(35);
                    if(Biz[index][bWaren] < 5)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Das Flugzeug-Verkaufshaus hat nicht genügend Waren.");
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else if(autohaus == 4)
                {
                    index = GetBizIndexByID(47);
                    if(Biz[index][bWaren] < 5)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Das Boots-Verkaufshaus hat nicht genügend Waren.");
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else if(autohaus == 5)
                {
                    index = GetBizIndexByID(48);
                    if(Biz[index][bWaren] < 5)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Das Fahrradgeschäft hat nicht genügend Waren.");
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                if( paymethod == 1 ) {
                    GivePlayerCash(playerid, -preis);
                }
                else if( paymethod == 2 ) {
                    Spieler[playerid][pBank] -= preis;
                }
                new prname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, prname, sizeof prname);
                CreatePlayerCar(playerid, Autospawns[autohaus][CarPos_x] , Autospawns[autohaus][CarPos_y] , Autospawns[autohaus][CarPos_z] ,Autospawns[autohaus][CarRotate],Kaufliste[Spectating[playerid][0]][Modelid] , -1 , -1 );
                // -> THREADED PlayerCar[playerid][PlayerKey[playerid]][Id] = cache_insert_id (); // WICHTIG! Nie löschen!
                PlayerCar[playerid][PlayerKey[playerid]][Id] = 0;
                PlayerCar[playerid][PlayerKey[playerid]][CarOwner] = prname;
                PlayerCar[playerid][PlayerKey[playerid]][CarId]=Spectating[playerid][0];
                PlayerCar[playerid][PlayerKey[playerid]][CarModel]=Kaufliste[Spectating[playerid][0]][Modelid];
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_x]=Autospawns[autohaus][CarPos_x];
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_y]=Autospawns[autohaus][CarPos_y];
                PlayerCar[playerid][PlayerKey[playerid]][CarPos_z]=Autospawns[autohaus][CarPos_z];
                PlayerCar[playerid][PlayerKey[playerid]][CarRotate]=Autospawns[autohaus][CarRotate];
                PlayerCar[playerid][PlayerKey[playerid]][CarNitro]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarHyd]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarWheel]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarAusp]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarSideL]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarSideR]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarFB]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarRB]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarSpoiler]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarRoof]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarHood]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarVents]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarLamps]=0;
                PlayerCar[playerid][PlayerKey[playerid]][CarPJ]=-1;
                PlayerCar[playerid][PlayerKey[playerid]][CarC1]=1;
                PlayerCar[playerid][PlayerKey[playerid]][CarC2]=1;
                PlayerCar[playerid][PlayerKey[playerid]][CarPreis]=preis/2;
                PlayerCar[playerid][PlayerKey[playerid]][CarTank]=Kaufliste[Spectating[playerid][0]][Tank];
                PlayerCar[playerid][PlayerKey[playerid]][CarState]=e_Vehicle_Status_Normal;
                PlayerCar[playerid][PlayerKey[playerid]][TUV]=0;
                //new snp[24];
                // format(snp, 24, "%s", GetName(playerid));
                PlayerCar[playerid][PlayerKey[playerid]][CarId] = CreateVehicle(PlayerCar[playerid][PlayerKey[playerid]][CarModel],PlayerCar[playerid][PlayerKey[playerid]][CarPos_x],PlayerCar[playerid][PlayerKey[playerid]][CarPos_y],PlayerCar[playerid][PlayerKey[playerid]][CarPos_z],PlayerCar[playerid][PlayerKey[playerid]][CarRotate],PlayerCar[playerid][PlayerKey[playerid]][CarC1],PlayerCar[playerid][PlayerKey[playerid]][CarC2], -1);/*vehicle spawn*/
                g_VehicleDistance[ PlayerCar[playerid][PlayerKey[playerid]][CarId] ] = 0;
                aiVehicles[PlayerCar[playerid][PlayerKey[playerid]][CarId]] = VEH_PRIVAT;
                SetVehicleNumberPlate(PlayerCar[playerid][PlayerKey[playerid]][CarId], "");
                format( PlayerCar[playerid][PlayerKey[playerid]][CarNumberplate] ,32 , KEIN_KENNZEICHEN );
                gGas[PlayerCar[playerid][PlayerKey[playerid]][CarId]] = Kaufliste[Spectating[playerid][0]][Tank];
                gMaxGas[PlayerCar[playerid][PlayerKey[playerid]][CarId]] = Kaufliste[Spectating[playerid][0]][Tank];
                LockCar(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
                PlayerHaveCar[playerid][PlayerKey[playerid]] = 1;
                PlayerPlaySound(playerid,1054,0.0,0.0,0.0);


                SCMFormatted(playerid, COLOR_GREEN, "Du hast dir eine(n) %s gekauft.", CarName[PlayerCar[playerid][PlayerKey[playerid]][CarModel] - 400]);
                SendClientMessage(playerid, COLOR_RED, "Unter /Help oder /Hilfekonsole siehst du alle Befehle, die du für die Nutzung und Verwaltung deines Fahrzeuges wissen musst.");
                if (!IsBicycle(PlayerCar[playerid][PlayerKey[playerid]][CarModel])) {
                    SendClientMessage(playerid, COLOR_ORANGE, "Vergiss nicht, dein Fahrzeug amtlich noch anzumelden!");
                    SendClientMessage(playerid, COLOR_ORANGE, "Unter /Navi -> Behörden -> Fahrzeug Zulassungsstelle kannst du dein Fahrzeug amtlich zulassen.");
                }
                new sInfo[64];
                format(sInfo,sizeof(sInfo),"~y~Fahrzeug ~w~gekauft! ( %s )", paymethod == 1 ? ("Barzahlung") : ("EC-Karte") );
                ShowBuyInformation(playerid, sInfo);

                //preis = Autopreis
                new CarMoneyFinal = (preis/100)*30;//0,08%
                Kasse[Staat] += (preis-CarMoneyFinal);
                TogglePlayerControllable(playerid,false);

                SetTimerEx("DelayCameraMove",59,false,"ddffffff",playerid,3500,Autospawns[autohaus][CarPos_x],Autospawns[autohaus][CarPos_y],Autospawns[autohaus][CarPos_z],7.0,-3.0,3.0);
                Biz[index][bKasse] += CarMoneyFinal;
                Biz[index][bWaren] -= 5;
            }
            else
            {
                if( paymethod == 1) SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei!");
                else if( paymethod == 2) SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld auf der Bank!");
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                return 1;
            }
        }
        else
        {
            FreezePlayer(playerid);
            RemovePlayerFromVehicle(playerid);
            SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
            UnfreezePlayer(playerid);
            return 0;
        }
    }
    return 0;
}

CMD:elektromarkt(playerid)
{
    if( IsPlayerInRangeOfPoint(playerid,5.0, ELECTRONICSSHOP_COORDS) )
    {
        if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
            ShowPlayerDialog(playerid, DIALOG_HANDYSHOP, DIALOG_STYLE_LIST, "Elektromarkt", "Handy kaufen\nHandyvertrag kündigen\nKamera kaufen ($750)\nMP3-Player ($1.500", "Kaufen", "Abbrechen");
        }
        else {
            ShowPlayerDialog(playerid, DIALOG_HANDYSHOP, DIALOG_STYLE_LIST, "Elektromarkt", "Handy kaufen\nHandy Vertrag ($1.500)\nKamera kaufen ($750)\nMP3-Player ($1.500)\nCallYa-Handykarte\nCallYa Guthaben", "Kaufen", "Abbrechen");
        }
        return 1;
    }
    SendClientMessage(playerid, COLOR_RED, "Du musst dich im Handy-Shop an der Kasse befinden!");
    return 1;
}

stock GetFreePhoneNumber(playerid) {
    new
        query[80],
        number = random(900000)+100000; // 6 Ziffern
    format(query,sizeof(query),"SELECT `HandyNr` FROM `accounts` WHERE `HandyNr` = %d LIMIT 1",number);
    Spieler[playerid][pHandyNr_Temp] = number;
    mysql_pquery(query,THREAD_FREEPHONENUMBER,playerid,gSQL,MySQLThreadOwner);
    Spieler[playerid][pHandyNr_Counter]++;
    return 1;
}

stock CreateBlitzerWarnung() {
    tdBlitzerWarnung=TextDrawCreate(250.000000, 331.000000, "~r~Vorsicht! ~w~Radarfalle");
    TextDrawBackgroundColor(tdBlitzerWarnung, 255);
    TextDrawFont(tdBlitzerWarnung, 1);
    TextDrawLetterSize(tdBlitzerWarnung, 0.500000, 2.200001);
    TextDrawColor(tdBlitzerWarnung, -1);
    TextDrawSetOutline(tdBlitzerWarnung, 0);
    TextDrawSetProportional(tdBlitzerWarnung, 1);
    TextDrawSetShadow(tdBlitzerWarnung, 1);
    return 1;
}

stock ShowPlayerBlitzerWarnung(playerid) {
    Spieler[playerid][punixRadarfallenWarnung] = gettime() + 2;
    if( Spieler[playerid][tRadarfallenWarnung] == INVALID_TIMER_ID ) {
        Spieler[playerid][tRadarfallenWarnung] = SetTimerEx("Pulse_BlitzerWarnung",1009,true,"d",playerid);
        TextDrawShowForPlayer(playerid,tdBlitzerWarnung);
    }
    return 1;
}

forward Pulse_BlitzerWarnung(playerid);
public Pulse_BlitzerWarnung(playerid) {
    if( gettime() >= Spieler[playerid][punixRadarfallenWarnung] ) {
        KillTimer(Spieler[playerid][tRadarfallenWarnung]);
        Spieler[playerid][tRadarfallenWarnung] = INVALID_TIMER_ID;
        Spieler[playerid][punixRadarfallenWarnung] = 0;
        TextDrawHideForPlayer(playerid,tdBlitzerWarnung);
    }
    return 1;
}

COMMAND:bfreischalten(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new giveid,String[128];
    if(sscanf(params, "u", giveid))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /bfreischalten [SpielerID/Name]");
    if(!IsPlayerConnected(giveid))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    format(String,sizeof(String),"%s %s hat deinen extra Biz-Slot freigeschaltet", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(giveid,COLOR_YELLOW,String);
    format(String,sizeof(String),"Du hast den extra Biz-Slot von %s freigschaltet",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    Spieler[giveid][pPremiumBizSlot] = 1;
    Spieler[giveid][pPlayerBizEx] = 999;
    return 1;
}
COMMAND:bizkey(playerid,params[]) {
    new String[256];
    if( Spieler[playerid][pPlayerBiz] != 999 ) {
        format(String,sizeof(String),"%s - {00FF00}Schluessel ausgewählt{FFFFFF}",Biz[ Spieler[playerid][pPlayerBiz] ][bName] );
    }
    else {
        format(String,sizeof(String),"Leerer Slot - {00FF00}Schluessel ausgewählt{FFFFFF}");
    }
    if( Spieler[playerid][pPremiumBizSlot] == 1 ) {
        if( Spieler[playerid][pPlayerBizEx] != 999 ) {
            format(String,sizeof(String),"%s\n%s",String,Biz[ Spieler[playerid][pPlayerBizEx] ][bName] );
        }
        else {
            format(String,sizeof(String),"%s\nExtra Bizkey freigeschaltet | Kein Geschäft vorhanden",String);
        }
    }
    else {
        format(String,sizeof(String),"%s\n(Zweiter Geschäftsschlüssel nicht freischaltet)",String);
    }
    ShowPlayerDialog(playerid,DIALOG_BIZKEY,DIALOG_STYLE_LIST,"Geschäftsschlüssel",String,"Auswählen","Abbruch");
    return 1;
}

COMMAND:delclub(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 4)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new name[MAX_PLAYER_NAME],String[128];
    if(sscanf(params, "s[24]", name))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Delclub [SpielerID/Name]");
    mysql_real_escape_string(name,name);
    PlayerSQLExtra(playerid,name);
    format(String,sizeof(String),"SELECT `Name`,`DonateRank` FROM `accounts` WHERE `Name` = '%s' LIMIT 1",name);
    mysql_pquery(String,THREAD_DELCLUB,playerid,gSQL,MySQLThreadOwner);
    /*
    if(!IsPlayerConnected(giveid))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    format(String,sizeof(String),"%s %s hat dir deinen Donator-Rank entzogen", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(giveid,COLOR_ORANGE,String);
    format(String,sizeof(String),"Du hast %s den Donator-Rank entzogen",GetName(giveid));
    SendClientMessage(playerid,COLOR_YELLOW,String);
    Spieler[giveid][pDonateRank] = 0;
    */
    return 1;
}

forward World_Pulse();
public World_Pulse() {
    //print("World_Pulse");
    new
        hour,
        minute;
    gettime(hour,minute);
    if( random(10) == 0 ) { // chance 1:5 dass es regnet
        SetWeatherEx(10);
    }
    else {
        if( 7 <= hour <= 17 ) {
            SetWorldTime(17);
        }
        else if( 18 <= hour <= 20 ) {
            SetWorldTime(23);
        }
        else if( 21 <= hour <= 23 ) {
            SetWorldTime(24);
        }
        else if( 0 <= hour <= 6 ) {
            SetWorldTime(3);
        }
    }
    return 1;
}

COMMAND:stelekom(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 9 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist nicht Mitglied der Regierungsmitglied");
    }
    if( Spieler[playerid][pRank] < 4 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst mindestens den Rang 4 haben in der Regierungsfraktion");
    }
    if( bBlockTelecom ) {
        SendClientMessageToAll(COLOR_ORANGE,"_________________________| SAN ANDREAS - STAAT |_________________________|");
        SendClientMessageToAll(COLOR_GREEN,"Die komplette Telekommunikation wurde vom Staat wieder freigegeben!");
        bBlockTelecom = false;
    }
    else {
        SendClientMessageToAll(COLOR_ORANGE,"_________________________| SAN ANDREAS - STAAT |_________________________|");
        SendClientMessageToAll(COLOR_RED,"Die komplette Telekommunikation wurde vom Staat aufgrund einer Notsituation vorübergehend abgeschaltet!");
        bBlockTelecom = true;
    }
    return 1;
}

stock ShowNextGeldTStation(playerid) {
    new
        r,
        index,
        bit,
        bitval;
    do {
        r = random( sizeof(GT_GELDT) );
        index = r / 32;
        bit = (r % 32) + 1;
        bitval = 1 << bit;
    }
    while( (Spieler[playerid][pGELDT][index] & bitval) );
    Spieler[playerid][pGELDT][index] |= bitval;
    Spieler[playerid][pGeldTCP] = r;
    SetPlayerCheckpointEx(playerid,GT_GELDT[r][GT_fPosX],GT_GELDT[r][GT_fPosY],GT_GELDT[r][GT_fPosZ],8.0,CP_GELDT);
    return 1;
}

stock ShowNextMuellStation(playerid) {
    new
        r,
        index,
        bit,
        bitval;
    do {
        r = random( sizeof(g_Muell) );
        index = r / 32;
        bit = (r % 32) + 1;
        bitval = 1 << bit;
    }
    while( (Spieler[playerid][pMuell][index] & bitval) );
    Spieler[playerid][pMuell][index] |= bitval;
    Spieler[playerid][pMuellCP] = r;
    SetPlayerCheckpointEx(playerid,g_Muell[r][M_fPosX],g_Muell[r][M_fPosY],g_Muell[r][M_fPosZ],8.0,CP_MUELL);
    return 1;
}

stock GetBitCount(input) {
    input = input - ((input >>> 1) & 0x55555555);
    input = (input & 0x33333333) + ((input >>> 2) & 0x33333333);
    new count = ((input + (input >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
    return count;
}

COMMAND:geldeinladen(playerid,params[]) {
    if(!(Spieler[playerid][pJob] == 12))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Geldtransport-Fahrer.");
    if( !(pCheckpoint[playerid] == CP_GELDT_ENTLEEREN) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst jetzt kein Geld in ein Automat laden.");
    new
        cp = Spieler[playerid][pGeldTCP];
    if( !IsPlayerInRangeOfPoint(playerid,2.0,GT_GELDT[cp][GT_fPosX],GT_GELDT[cp][GT_fPosY],GT_GELDT[cp][GT_fPosZ])) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Geldautomaten!");
    }
    new vID = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(vID);
    if(model == 428)
    return SendClientMessage(playerid, COLOR_RED, "Du sitzt in keinem Geldtransporter!");
    new
        c;
    c += GetBitCount(Spieler[playerid][pGELDT][0]);
    c += GetBitCount(Spieler[playerid][pGELDT][1]);
    if( c >= 6 ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Du hast alle 6 Geldautomaten befüllt! Fahre nun zurück zur Station.");
        SetPlayerCheckpointEx(playerid,1551.6464,-1019.4492,23.9063,5.0,CP_GELDTFINISH);
    }
    else {
        new
            String[128];
        format(String,sizeof(String),"Du hast den Geldautomaten befüllt! Steig ein und fahr zur nächsten (%d/6)",c);
        SendClientMessage(playerid,COLOR_YELLOW,String);
        ShowNextGeldTStation(playerid);
    }
    return 1;
}

COMMAND:entleeren(playerid,params[]) {
    if(!(Spieler[playerid][pJob] == 8))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Müllmann.");
    if( !(pCheckpoint[playerid] == CP_MUELL_ENTLEEREN) ) return SendClientMessage(playerid, COLOR_RED, "Du kannst jetzt nicht entleeren machen.");
    new
        cp = Spieler[playerid][pMuellCP];
    if( !IsPlayerInRangeOfPoint(playerid,2.0,g_Muell[cp][M_fPosX],g_Muell[cp][M_fPosY],g_Muell[cp][M_fPosZ])) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht an der Mülltonne.");
    }
    if( IsPlayerInAnyVehicle(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du sitzt in einem Fahrzeug!");
    }
    new
        vehicleid = JobVehicle[playerid],
        Float:x,
        Float:y,
        Float:z,
        Float:face;
    GetVehiclePos(vehicleid,x,y,z);
    GetVehicleZAngle(vehicleid,face);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
    GetXYInFrontOfPosition(x, y, face, -4.25 );
    SetPlayerAttachedObject( playerid, 0, 1265, 5, 0.150000, 0.300000, 0.000000, 270.000000, 0.000000, 0.000000, 0.800000, 0.800000, 0.800000 ); // BlackBag2 - trashblabla
    SetPlayerCheckpointEx(playerid,x,y,z,0.8,CP_MUELL_CARRY);
    return 1;
}

stock MuellInit() {
	// TODO: Peek Müll map file?
    CreateDynamicObject(1344, 1575.32, -1860.68, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1575.31, -1794.34, 13.24, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1575.25, -1743.08, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1372.86, -1726.57, 13.32, 0.00, 0.00, 0.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1319.92, -1724.81, 13.33, 0.00, 0.00, -43.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1318.34, -1673.26, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1318.24, -1625.49, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1318.29, -1583.30, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1319.13, -1556.67, 13.32, 0.00, 0.00, -98.69,0,0,-1,150.0);
	CreateDynamicObject(1344, 1354.74, -1476.45, 13.33, 0.00, 0.00, 256.31,0,0,-1,150.0);
	CreateDynamicObject(1344, 1363.24, -1420.69, 13.33, 0.00, 0.00, -93.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1291.04, -1389.49, 13.20, 0.00, 0.00, 0.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1266.28, -1360.01, 13.26, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1266.27, -1308.70, 13.28, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1223.79, -1156.61, 23.43, 0.00, 0.00, -142.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1268.74, -1127.32, 23.80, 0.00, 3.53, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1268.72, -1070.70, 28.36, 0.00, 7.80, -92.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1268.90, -981.15, 36.95, 0.00, 6.88, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1254.53, -920.78, 42.56, 0.00, 0.00, 11.41,0,0,-1,150.0);
	CreateDynamicObject(1344, 1230.39, -913.43, 42.88, 0.00, 0.00, -80.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1143.15, -938.38, 42.80, 0.00, 0.00, 5.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1065.78, -944.34, 42.78, 0.00, 0.00, 8.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1004.78, -952.55, 41.96, 0.00, -0.69, 7.12,0,0,-1,150.0);
	CreateDynamicObject(1344, 878.50, -980.15, 36.11, 0.00, -5.45, 32.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 833.05, -1021.84, 25.96, 0.00, -9.27, 42.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 787.50, -1036.63, 24.42, 0.00, 0.00, 41.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 488.16, -1276.06, 15.49, 0.00, -0.49, 39.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 436.02, -1315.29, 14.87, 0.00, 0.00, 35.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 336.44, -1375.30, 14.11, 0.00, 0.00, 29.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 230.99, -1433.80, 13.15, 0.00, 0.00, 43.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 168.37, -1514.36, 12.15, 0.00, -0.59, 59.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 107.49, -1630.59, 10.10, 0.00, -0.39, 82.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 113.44, -1694.20, 9.38, 0.00, -0.69, 103.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 181.91, -1741.32, 4.13, 0.00, 0.29, -176.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 237.01, -1738.04, 3.99, 0.00, 0.00, -177.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 289.05, -1742.17, 4.12, 0.00, 0.20, 172.57,0,0,-1,150.0);
	CreateDynamicObject(1344, 335.57, -1747.85, 4.43, 0.00, 0.00, 139.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 459.64, -1767.67, 5.44, 0.00, 1.47, -129.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 499.18, -1732.62, 11.29, 0.00, 0.78, 170.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 563.40, -1740.97, 12.62, 0.00, 1.27, 171.31,0,0,-1,150.0);
	CreateDynamicObject(1344, 631.54, -1752.13, 13.14, 0.00, -0.59, 169.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 713.01, -1775.15, 13.42, 0.00, 0.69, 160.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 804.34, -1789.93, 13.26, 0.00, 0.78, -180.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 938.16, -1796.69, 13.65, 0.00, 1.47, 168.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1030.30, -1825.45, 13.64, 0.00, -0.49, 128.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1096.22, -1858.12, 13.34, 0.00, 0.00, -180.51,0,0,-1,150.0);
	CreateDynamicObject(1344, 1157.66, -1858.00, 13.33, 0.00, 0.00, 180.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1234.37, -1857.95, 13.33, 0.00, 0.00, 180.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1415.44, -1878.07, 13.33, 0.00, 0.00, 180.00,0,0,-1,150.0);
	return 1;
}


stock LoadFirma() {
    mysql_oquery("SELECT * FROM `firma`",THREAD_LOADFIRMA,INVALID_PLAYER_ID,gSQL);
    return 1;
}

stock IsJobFirma(jobid) {
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if( g_Firma[i][F_iJobID] == jobid ) {
            return 1;
        }
    }
    return 0;
}

stock GetJobFirmaIndex(jobid) {
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if( g_Firma[i][F_iJobID] == jobid ) {
            return i;
        }
    }
    return -1;
}

stock GetJobFirmaIndexByID(firmenid) {
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if( g_Firma[i][F_iID] == firmenid ) {
            return i;
        }
    }
    return -1;
}

stock SaveFirma() {
    new
        query[128];
    for(new i ; i < g_iWaffenLager ; i++) {
        format(query,sizeof(query),"UPDATE `firma` SET \
            `kasse` = %d,\
            `gehalt` = %d,\
            `besitzer` = '%s' \
            WHERE `id` = %d",
            g_Firma[i][F_iKasse],
            g_Firma[i][F_iGehalt],
            g_Firma[i][F_sBesitzer],
            g_Firma[i][F_iID]
        );
        mysql_oquery(query,THREAD_SAVEFIRMA,i,gSQL);
    }
    return 1;
}

COMMAND:firmen(playerid, params[]) {
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    ShowPlayerDialog(playerid,DIALOG_FIRMENINFO,DIALOG_STYLE_MSGBOX,"Firmen",
        "{FFFFFF}Auf dieser Liste werden alle Firmeninhaber aufgelistet.\n\
        Um eine Firma die noch keinen Besitzer hat zu kaufen,\n\
        muss man ein Antrag beim Gewerbeamt im\n\
        Forum: {4422FF}www.LyD-Roleplay.de{FFFFFF} stellen.","Ansehen","Abbruch");
    return 1;
}

COMMAND:firmenkasse(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pPlayerFirma] == 999) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt keine Firma.");

    new sBefehl[16], cash, firmenindex = Spieler[playerid][pPlayerFirma];
    if (sscanf(params, "s[16]d", sBefehl, cash) || cash < 1) {
        if (isnull(params)) SCMFormatted(playerid, COLOR_CHAT_JOB, "[FIRMA] {FFFFFF}Aktueller Kassenstand: {009D00}$%s", AddDelimiters(g_Firma[firmenindex][F_iKasse]));
        return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Firmenkasse [Einzahlen/Auszahlen] [Betrag]");
    }

    if (!strcmp(sBefehl, "einzahlen", true)) {
        if (Spieler[playerid][pCash] < cash) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}So viel Geld hast du nicht dabei.");
        g_Firma[firmenindex][F_iKasse] += cash;
        GivePlayerCash(playerid, -cash);
        SCMFormatted(playerid, COLOR_CHAT_JOB, "[FIRMA] {FFFFFF}Du hast {009D00}$%s {FFFFFF}in deine Firmenkasse eingezahlt.", AddDelimiters(cash));
    }
    else if (!strcmp(sBefehl, "auszahlen", true)) {
        if (g_Firma[firmenindex][F_iKasse] < cash) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}So viel Geld befindest sich nicht in deiner Firmenkasse.");
        g_Firma[firmenindex][F_iKasse] -= cash;
        GivePlayerCash(playerid, cash);
        SCMFormatted(playerid, COLOR_CHAT_JOB, "[FIRMA] {FFFFFF}Du hast {009D00}$%s {FFFFFF}aus deiner Firmenkasse ausgezahlt.", AddDelimiters(cash));
    }
    else return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Firmenkasse [Einzahlen/Auszahlen] [Betrag]");

    return SCMFormatted(playerid, COLOR_CHAT_JOB, "[FIRMA] {FFFFFF}Aktueller Kassenstand: {009D00}$%s", AddDelimiters(g_Firma[firmenindex][F_iKasse]));
}

COMMAND:firmengehalt(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pPlayerFirma] == 999) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt keine Firma.");
    new cash;
    if (sscanf(params, "d", cash)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Firmengehalt [Gehalt]");
    if (cash < 1000 || cash > 10000) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Firmengehalt [Gehalt ($1.000 - $10.000)]");
    new message[144], firmenindex = Spieler[playerid][pPlayerFirma];
    g_Firma[firmenindex][F_iGehalt] = cash;
    format(message, sizeof(message), "[%s] {FFFFFF}Das Gehalt wurde von Firmeninhaber %s auf {009D00}$%s {FFFFFF}gesetzt.", g_Firma[firmenindex][F_sBezeichnung], GetName(playerid), AddDelimiters(cash));
    SendJobMessage(g_Firma[firmenindex][F_iJobID], COLOR_CHAT_JOB, message);
    return SCMFormatted(playerid, COLOR_CHAT_JOB, "[FIRMA] {FFFFFF}Du hast das Gehalt deiner Firma auf {009D00}$%s {FFFFFF}gesetzt.", AddDelimiters(cash));
}

COMMAND:firmennachricht(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pPlayerFirma] == 999) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt keine Firma.");
    new nachricht[128], message[144], firmenindex = Spieler[playerid][pPlayerFirma];
    if (sscanf(params, "s[128]", nachricht)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Firmennachricht [Text]");
    format(message, sizeof(message), "[%s] {FFFFFF}Firmeninhaber %s sagt: %s", g_Firma[firmenindex][F_sBezeichnung], GetName(playerid), nachricht);
    SendJobMessage(g_Firma[firmenindex][F_iJobID], COLOR_CHAT_JOB, message);
    return SCMFormatted(playerid, COLOR_CHAT_JOB, "[FIRMA] {FFFFFF}Du sagst: %s", nachricht);
}

COMMAND:entlassen(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pPlayerFirma] == 999) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt keine Firma.");
    new giveid, firmenindex = Spieler[playerid][pPlayerFirma];
    if (sscanf(params, "u", giveid)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Entlassen [Spieler]");
    if (!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht Online.");
    if (playerid == giveid) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst dich selber nicht entlassen.");
    if (Spieler[giveid][pJob] != g_Firma[firmenindex][F_iJobID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht in deiner Firma tätig.");

    Spieler[giveid][pJob] = 0;
    SCMFormatted(playerid, COLOR_CHAT_JOB, "[%s] {FFFFFF}Sie wurden von Ihrem Chef %s entlassen!", g_Firma[firmenindex][F_sBezeichnung], GetName(playerid));
    return SCMFormatted(playerid, COLOR_CHAT_JOB, "[FIRMA] {FFFFFF}Du hast %s entlassen", GetName(giveid));
}

COMMAND:gebefirma(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt nicht die benötigten Rechte.");

    new pID, firmenid;
    if (sscanf(params, "ud", pID, firmenid) || !( 0 <= firmenid <= sizeof(g_Firma))) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Gebefirma [SpielerID/Name] [Firmen-ID (0-13)]");
    if (!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht online.");
    if (Spieler[pID][pPlayerFirma] != 999) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler besitzt schon eine Firma.");

    new message[128], firmenindex = GetJobFirmaIndexByID(firmenid);
    if (strcmp(g_Firma[firmenindex][F_sBesitzer], "Niemand") != 0)
        return SCMFormatted(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Die Firma %s gehört aktuell noch %s", g_Firma[firmenindex][F_sBezeichnung], g_Firma[firmenindex][F_sBesitzer]);

    Spieler[playerid][pPlayerFirma] = firmenindex;
    format(g_Firma[firmenindex][F_sBesitzer], MAX_PLAYER_NAME, GetName(pID));
    format(message, sizeof(message), "[GEWERBEAMT] {FFFFFF}%s ist Firmeninhaber der '%s' geworden!", g_Firma[firmenindex][F_sBesitzer], g_Firma[firmenindex][F_sBezeichnung]);
    return SendClientMessageToAll(COLOR_YELLOW, message);
}

COMMAND:delfirma(playerid, params[]) {
    if (!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist nicht eingeloggt.");
    if (Spieler[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du besitzt nicht die benötigten Rechte.");

    new pName[25];
    if (sscanf(params, "s[24]", pName)) return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING "/Delfirma [Name]");
    for (new x; x < MAX_BIZ; x++) {
        if (!strcmp(pName, g_Firma[x][F_sBesitzer], true)) {
            new message[128], giveid;
            format(g_Firma[x][F_sBesitzer], MAX_PLAYER_NAME, "Niemand");
            format(message, sizeof(message),"[GEWERBEAMT] {FFFFFF}%s ist nicht mehr der Firmeninhaber der Firma '%s'!", pName, g_Firma[x][F_sBezeichnung]);
            SendClientMessageToAll(COLOR_YELLOW, message);
            sscanf(pName, "k<playername>", giveid);
            if (giveid != INVALID_PLAYER_ID) Spieler[giveid][pPlayerFirma] = 999;
            break;
        }

        if (x == MAX_BIZ - 1) return SendClientMessage(playerid, COLOR_RED,"[FEHLER] {FFFFFF}Der Spieler besitzt keine Firma");
    }

    return 1;
}

COMMAND:delhaus(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte ( Admin Level 5)");
    new hids;
    for(new i;i<MAX_HOUSES;i++)
    {
        if(IsPlayerInRangeOfPoint(playerid,5,Haus[i][EnterX],Haus[i][EnterY],Haus[i][EnterZ]))
        {
            hids=Haus[i][hID];
            format(Haus[i][hName],32,"geloescht");
            break;
        }
    }
    if(hids!=0)
    {
        new string[200];
        format(string,sizeof(string),"DELETE FROM `houses` WHERE `ID` = '%d'",hids);
        mysql_oquery(string,THREAD_DELETEPLAYERCAR,INVALID_PLAYER_ID,gSQL);
        SendClientMessage(playerid,COLOR_GREEN,"Du hast das Haus vollständig gelöscht!");
        format(string,200,"%s %s hat HausID [%d] gelöscht.", GetPlayerAdminRang(playerid), GetName(playerid),hids);
        SendClientMessageToAll(COLOR_YELLOW,string);
    }
    return 1;
}

stock strtolower(text[])
{
    for(new i, j = strlen(text); j != i; ++i)
    {
        if((90 > text[i] > 64) || (222 > text[i] > 191)) text[i] |= 32;
    }
    return true;
}

stock GetPlayerHouse(playerid) {
    if( Spieler[playerid][pPlayerHouse] != 999 ) { // Hausbesitzer
        return Spieler[playerid][pPlayerHouse];
    }
    if( Spieler[playerid][pHouseMieteKey] != 999 ) { // Hausmieter
        new index;
        index = GetHouseIndexByID(Spieler[playerid][pHouseMieteKey]);
        return index;
    }
    return 999;
}

COMMAND:haussuchen(playerid,params[]) {
    new
        index = -1,
        hausid;
    if(sscanf(params,"d",hausid)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Haussuchen [ID]");
    }
    if( hausid < 1 || hausid > 10000 ) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Haussuchen [ID] ( 1 - 10000 )");
    }
    for(new i ; i < MAX_HOUSES ; i++) {
        if( Haus[i][hID] == hausid ) {
            index = i;
            break;
        }
    }
    if( index == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Kein Haus mit der genannten ID gefunden");
    }
    SendClientMessage(playerid,COLOR_GREEN,"Das Haus wurde Ihnen auf der Map markiert!");
    SendClientMessage(playerid,COLOR_YELLOW,"=====================");
    SetPlayerCheckpointEx(playerid, Haus[index][EnterX], Haus[index][EnterY], Haus[index][EnterZ], 2.0, CP_HAUSSUCHEN);
    return 1;
}

COMMAND:hausmieter(playerid,params[]) {
    #pragma unused params
    if( Spieler[playerid][pPlayerHouse] == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Haus!");
    }
    new
        index = Spieler[playerid][pPlayerHouse],
        String[128];
    format(String,sizeof(String),"SELECT `Name` FROM `accounts` WHERE `HouseMieteKey` = %d ORDER BY `Name` DESC",Haus[index][hID]);
    mysql_pquery(String,THREAD_HAUSMIETER,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:offhausraus(playerid,params[]) {
    if( Spieler[playerid][pPlayerHouse] == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Haus!");
    }
    new name[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",name)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Offhausraus [Name]");
    }
    new
        String[128];
    mysql_real_escape_string(name,name);
    format(String,sizeof(String),"SELECT `Name`,`HouseMieteKey` FROM `accounts` WHERE `Name` = '%s' LIMIT 1",name);
    mysql_pquery(String,THREAD_OFFHAUSRAUS,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:ic(playerid,params[]) {
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    if(isnull(params)) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Ic [Text]");
    }
    new
        Float:x,
        Float:y,
        Float:z,
        String[200];
    format(String,sizeof(String),"{7F007F}(IC){FFFFFF}: %s",params);
    SetPlayerChatBubble(playerid,String,COLOR_WHITE,40.0 , strlen(params) * 65 + 150);
    if (GetPVarInt(playerid, "USE_CHAT_ANIM") && Spieler[playerid][pTot] == 0 && Cuffed[playerid] != 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        MakeAnimation[playerid] = 1;
        // TextDrawShowForPlayer(playerid, Leer);
        ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
    }
    GetPlayerPos(playerid,x,y,z);
    format(String,sizeof(String),"%s sagt %s",GetName(playerid),String);
    SendRoundMessage(x,y,z,COLOR_WHITE,String);
    return 1;
}

COMMAND:warnblinker(playerid,params[]) {
    new vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) return SendClientMessage(playerid,COLOR_RED,"Du kannst den Warnblinker nur in einem Fahrzeug aktivieren");
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) return SendClientMessage(playerid,COLOR_RED,"Du kannst den Warnblinker nur als Fahrer aktivieren");
    new modelid = GetVehicleModel(vehicleid);
    if(!IsACar(modelid)) return SendClientMessage(playerid,COLOR_RED,"Du kannst den Warnblinker nur in Autos aktivieren");
    if( GetVehicleIndicator(vehicleid) == 3 ) {
        DestroyBlinker(vehicleid,0);
        DestroyBlinker(vehicleid,1);
        SendClientMessage(playerid,COLOR_YELLOW,"Warnblinker deaktiviert");
    }
    else {
        SetVehicleIndicator(vehicleid,1,1);
        SendClientMessage(playerid,COLOR_GREEN,"Warnblinker aktiviert");
    }
    return 1;
}

COMMAND:cprison(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new pID, grund[64], anzahl;
    if(sscanf(params, "uis[64]", pID, anzahl,grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /cprison [SpielerID/Name] [Anzahl] [Grund]");
    if(!IsPlayerConnected(pID)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    new String[256];
    format(String,sizeof(String),"[PRISON] Du wurdest von %s %s zum Checkpoint-Lauf verdonnert!", GetPlayerAdminRang(playerid), GetName(playerid));
    SendClientMessage(pID,COLOR_RED,String);
    format(String,sizeof(String),"Du musst insgesammt %d Checkpoints ablaufen. Grund: %s",anzahl,grund);
    SendClientMessage(pID,COLOR_RED,String);

    mysql_real_escape_string(grund,grund);
    format(String,sizeof(String),"[PRISON] Spieler %s wurde von %s %s zum Checkpoint-Lauf verdonnert!",GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid));
    SendAdminMessage(COLOR_RED,String);
    format(String,sizeof(String),"[PRISON] Checkpoints: %d, Grund: %s",anzahl,grund);
    SendAdminMessage(COLOR_RED,String);

    format(String,sizeof(String),"Spieler %s wurde von %s %s zum Checkpoint-Lauf verdonnert! Checkpoints: %d, Grund: %s",GetName(pID), GetPlayerAdminRang(playerid), GetName(playerid),anzahl,grund);
    SendUCPAktenEintrag( playerid, GetName(playerid) ,  GetName(pID) , String );

    SetPlayerPrisonRun(pID);
    Spieler[pID][pPrisonRun] = anzahl;
    Spieler[pID][pPrisonRunCount] = 0;
    Spieler[pID][pPrisonRunStep] = 0;
    SpawnPlayerEx(pID);
    return 1;
}

stock SetPlayerPrisonRun(playerid) {
    TogglePlayerControllable(playerid,true);
    SetPlayerPos(playerid,-1403.6885,-254.3693,1043.6117);
    SetPlayerVirtualWorld(playerid,0);
    SetPlayerInterior(playerid,7);
    DisablePlayerCheckpointEx(playerid);
    SetPlayerPrisonRunCheckpoint(playerid);
    Spieler[playerid][pPrisonRunStep] = 0;
    return 1;
}
stock RemovePlayerPrisonRun(playerid) {
    SetPlayerVirtualWorld(playerid,0);
    SetPlayerInterior(playerid,0);
    return 1;
}
stock SetPlayerPrisonRunCheckpoint(playerid) {
    new index;
    index = Spieler[playerid][pPrisonRunStep] % sizeof(g_PrisonRunCheckpoint);
    // printf("SetPlayerPrisonRunCheckpoint index %d pPrisonRunStep %d",index,Spieler[playerid][pPrisonRunStep]);

    SetPlayerCheckpointEx(playerid, g_PrisonRunCheckpoint[index][PRC_fX], g_PrisonRunCheckpoint[index][PRC_fY], g_PrisonRunCheckpoint[index][PRC_fZ], 4.0 , CP_PRISONRUN );
    return 1;
}


stock Zoll_Init() {
    for(new i ; i < sizeof(g_Zoll); i++) {
        g_Zoll[i][Z_iObject] = CreateDynamicObject( g_Zoll[i][Z_iModel],g_Zoll[i][Z_fX],g_Zoll[i][Z_fY],g_Zoll[i][Z_fZ],g_Zoll[i][Z_fRotX],g_Zoll[i][Z_fRotY],g_Zoll[i][Z_fRotZ],.streamdistance = 150.0);
        g_Zoll[i][Z_iArea] = CreateDynamicCircle(g_Zoll[i][Z_fX],g_Zoll[i][Z_fY],12.0);
        Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_Zoll[i][Z_iObject] ,E_STREAMER_EXTRA_ID, OBJECT_ZOLL );
        Streamer_SetIntData(STREAMER_TYPE_AREA, g_Zoll[i][Z_iArea] ,E_STREAMER_EXTRA_ID, AREA_ZOLL );
    }
    return 1;
}

stock Zoll_Open(zoll,playerid = INVALID_PLAYER_ID) {
    if( g_Zoll[zoll][Z_iStatus] == 0 ) {
        MoveDynamicObject( g_Zoll[zoll][Z_iObject] , g_Zoll[zoll][Z_fX],g_Zoll[zoll][Z_fY],g_Zoll[zoll][Z_fZ] - 4.0 , 1.2 );
        g_Zoll[zoll][Z_iPlayerID] = playerid;
        g_Zoll[zoll][Z_iStatus] = 1;
        return 1;
    }
    return 0;
}
stock Zoll_Close(zoll) {
    if( g_Zoll[zoll][Z_iStatus] == 2 ) {
        StopDynamicObject( g_Zoll[zoll][Z_iObject] );
        MoveDynamicObject( g_Zoll[zoll][Z_iObject] , g_Zoll[zoll][Z_fX],g_Zoll[zoll][Z_fY],g_Zoll[zoll][Z_fZ] , 1.2 );
        g_Zoll[zoll][Z_iPlayerID] = INVALID_PLAYER_ID;
        g_Zoll[zoll][Z_iStatus] = 3;
        return 1;
    }
    return 0;
}

stock Zoll_IsOpen(zoll) {
    return ( g_Zoll[zoll][Z_iStatus] == 2 );
}
stock GetPlayerZollArea(playerid) {
    for(new i ; i < sizeof(g_Zoll); i++) {
        if( IsPlayerInDynamicArea(playerid,g_Zoll[i][Z_iArea])) return i;
    }
    return -1;
}
stock GetPlayerZollAreaUser(playerid) {
    for(new i ; i < sizeof(g_Zoll); i++) {
        if( playerid == g_Zoll[i][Z_iPlayerID] ) {
            return i;
        }
    }
    return -1;
}

COMMAND:zoll(playerid,params[]) {
    new
        zoll;
    zoll = GetPlayerZollArea(playerid);
    if( zoll == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich an keiner Zoll-Station");
    }
    if( g_Zoll[zoll][Z_bSperre] ) {
        return SendClientMessage(playerid,COLOR_RED,"Zollwächter: Die Zollstationen wurden aufgrund einer polizeilichen Maßnahme gesperrt. Sie können die Grenze nicht überqueren!");
    }
    if( !Zoll_Open(zoll,playerid) ) {
        return SendClientMessage(playerid,COLOR_RED,"Zollwächter: Die Bearbeitung eines anderen Fahrer findet noch statt");
    }
    if( Spieler[playerid][pCash] < 500 && gettime() < Spieler[playerid][pZollValid] ) {
        return SendClientMessage(playerid,COLOR_RED,"Zollwächter: Um die Grenze zu überqueren, müssen Sie die Zollgebühren in Höhe von $500 bezahlen!");
    }
    if( Spieler[playerid][pZollValid] < gettime() ) {
        GivePlayerCash(playerid,-500);
        Kasse[Staat] += 500;
        SendClientMessage(playerid,COLOR_YELLOW,"Zollwächter: Vielen Dank! Sie dürfen den Zoll überqueren. Gute Weiterfahrt ( -500$ )!");
    }
    else {
        SendClientMessage(playerid,COLOR_YELLOW,"Zollwächter: Vielen Dank! Sie dürfen den Zoll überqueren. Gute Weiterfahrt!");
    }
    return 1;
}

forward OpenTollStations();
public OpenTollStations() {
    tTollTimer = INVALID_TIMER_ID;
    for(new i ; i < sizeof(g_Zoll) ; i++) {
        g_Zoll[i][Z_bSperre] = false;
    }
    SendClientMessageToAll(COLOR_RED,"[STAAT] "#COL_GREEN"Alle Zollstationen wurden wieder geöffnet! Die polizeiliche Maßnahme wurde beendet.");
    return 1;
}

COMMAND:zollsperre(playerid,params[]) {
    new
        sModus[8];
    if ((!IsPlayerExecutive(playerid) || Spieler[playerid][pRank] < 2) && Spieler[playerid][pAdmin] < 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist/FBI oder bist nicht höher als Rang 2!");
    }
    if(sscanf(params,"s[8]",sModus)) return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Zollsperre [On/Off]");
    if(!strcmp(sModus,"On", true)) {
        if( g_Zoll[0][Z_bSperre] == true ) {
            return SendClientMessage(playerid,COLOR_RED,"Zollsperre bereits aktiv!");
        }
        for(new i ; i < sizeof(g_Zoll) ; i++) {
            g_Zoll[i][Z_bSperre] = true;
        }
        SendClientMessageToAll(COLOR_RED,"[STAAT] "#COL_ORANGE"Alle Zollstationen wurden vorübergehend aufgrund einer polizeilichen Maßnahme gesperrt!");
        if (tTollTimer != INVALID_TIMER_ID) KillTimer(tTollTimer);
        tTollTimer = SetTimer("OpenTollStations", 5 * 60 * 1000, false);
    }
    else if(!strcmp(sModus,"Off", true)) {
        if( g_Zoll[0][Z_bSperre] == false ) {
            return SendClientMessage(playerid,COLOR_RED,"Keine Zollsperre aktiv!");
        }
        for(new i ; i < sizeof(g_Zoll) ; i++) {
            g_Zoll[i][Z_bSperre] = false;
        }
        SendClientMessageToAll(COLOR_RED,"[STAAT] "#COL_GREEN"Alle Zollstationen wurden wieder geöffnet! Die polizeiliche Maßnahme wurde beendet.");
        if (tTollTimer != INVALID_TIMER_ID) KillTimer(tTollTimer);
    }
    else {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Zollsperre [On/Off]");
    }
    return 1;
}

COMMAND:zollamt(playerid,params[]) {
    new
        zoll;
    zoll = GetPlayerZollArea(playerid);
    if( zoll == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich an keiner Zoll-Station");
    }
    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2  || Spieler[playerid][pFraktion] == 3  || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 9 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18) ) {
        return SendClientMessage(playerid,COLOR_RED,"Dieser Befehl ist nur für Staatsbehörden");
    }
    if( !Zoll_Open(zoll,playerid) ) {
        return SendClientMessage(playerid,COLOR_RED,"Zollwächter: Die Bearbeitung eines anderen Fahrer findet noch statt");
    }
    SendClientMessage(playerid,COLOR_YELLOW,"Zollwächter: Vielen Dank! Sie dürfen den Zoll überqueren. Gute Weiterfahrt!");
    return 1;
}

stock PlayerSkillUpgrade(playerid, SpielerDaten:attribute, skill, points ) {
    new
        String[128];
    if( skill == 0 ) {
        new
            old_level,
            new_level;
        old_level = GetPlayerHureLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerHureLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Huren"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Huren"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Huren"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 1 ) {
        new
            old_level,
            new_level;
        old_level = GetPlayerDetectivLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerDetectivLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Detektiv"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Detektiv"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Detektiv"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 2 ) {
        new
            old_level,
            new_level;
        old_level = GetPlayerLawyerLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerLawyerLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Anwalt"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Anwalt"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Anwalt"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 3 ) {
        new
            cur_level,
            new_level;
        cur_level = GetPlayerGangFightSkillLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerGangFightSkillLevel(playerid);
        if( new_level > cur_level ) {
            // Skill Upgrade
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Gangfight"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~GANGFIGHT-SKILL ~g~%d ~y~erreicht!",new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Gangfight"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 4 ) {
        // drogen
        new
            old_level,
            new_level;
        old_level = GetPlayerDrogenSkillLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerDrogenSkillLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Drogen"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Drogen"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Drogen"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 5 ) {
        // waffenteile
        new
            old_level,
            new_level;
        old_level = GetPlayerWaffenteileSkillLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerWaffenteileSkillLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Waffenteile"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Waffenteile"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Waffenteile"),new_level);
            SkillLog(String);
        }
    }
    return 1;
}

COMMAND:startbauer(playerid,params[]) {
    if(!(Spieler[playerid][pJob] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");
    if( Spieler[playerid][tickJobCheckpoint] > gettime() ) {
        SendClientMessage(playerid, COLOR_RED, "Du kannst nur alle 5 Minuten arbeiten, bitte warte einen Moment!");
        return 1;
    }
    if( Spieler[playerid][pCowJob] != 0 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist noch in einem Farmer Job aktiv.");
    }
    ShowPlayerDialog(playerid,DIALOG_STARTBAUER,DIALOG_STYLE_LIST,"Bauer","Feld abernten\nKühe melken","Ausüben","Abbruch");
    return 1;
}
COMMAND:stopbauer(playerid,params[]) {
    DisablePlayerCheckpointEx(playerid);
    Spieler[playerid][pCow][0] = 0;
    Spieler[playerid][pCow][1] = 0;
    Spieler[playerid][pCow][2] = 0;
    Spieler[playerid][pCow] = 0;
    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    Spieler[playerid][pCowJob] = 0;
    RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_JOB );
    return 1;
}
enum e_CowPosition {
    Float:CP_fX,
    Float:CP_fY,
    Float:CP_fZ
}
new g_CowPosition[92][e_CowPosition];

stock CowInit() {
    new
        j,
        Float:x,
        Float:y,
        Float:z,
        start,
        end;
    start = CreateDynamicObject(16442, -125.96608, 60.06145, 3.79410, 0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16442, -136.70894, 45.77469, 3.79410, 0.00000, 0.00000, -84.84000);
    CreateDynamicObject(16442, -142.35411, 59.64023, 3.79410, 0.00000, 0.00000, -123.77999);
    CreateDynamicObject(16442, -189.92209, 78.36684, 3.79410, 0.00000, 0.00000, -151.01997);
    CreateDynamicObject(16442, -142.78531, 26.97668, 3.79410, 0.00000, 0.00000, -202.07996);
    CreateDynamicObject(16442, -156.97450, 32.99458, 3.79410, 0.00000, 0.00000, -155.76006);
    CreateDynamicObject(16442, -153.67236, 44.32209, 3.79410, 0.00000, 0.00000, -55.14002);
    CreateDynamicObject(16442, -162.36833, 59.40239, 3.79410, 0.00000, 0.00000, -55.14002);
    CreateDynamicObject(16442, -167.94984, 46.01622, 3.79410, 0.00000, 0.00000, -194.39999);
    CreateDynamicObject(16442, -169.17175, 74.79633, 3.79410, 0.00000, 0.00000, -194.39999);
    CreateDynamicObject(16442, -186.03668, 64.81738, 3.79410, 0.00000, 0.00000, -166.13998);
    CreateDynamicObject(16442, -177.28195, 56.27567, 3.79410, 0.00000, 0.00000, -65.28000);
    CreateDynamicObject(16442, -177.15005, 32.90548, 3.79410, 0.00000, 0.00000, -118.25998);
    CreateDynamicObject(16442, -170.76878, 20.71162, 3.79410, 0.00000, 0.00000, -118.25998);
    CreateDynamicObject(16442, -155.91841, 15.99560, 3.79410, 0.00000, 0.00000, -63.23999);
    CreateDynamicObject(16442, -164.42017, 1.40912, 3.79410, 0.00000, 0.00000, 52.20001);
    CreateDynamicObject(16442, -151.31874, -6.77877, 3.79410, 0.00000, 0.00000, 119.40004);
    CreateDynamicObject(16442, -180.38377, 2.73226, 3.79410, 0.00000, 0.00000, 119.40004);
    CreateDynamicObject(16442, -189.64589, 19.43103, 3.79410, 0.00000, 0.00000, -25.97997);
    CreateDynamicObject(16442, -189.44766, 37.67817, 3.79410, 0.00000, 0.00000, -281.81985);
    CreateDynamicObject(16442, -195.65918, 54.06594, 3.79410, 0.00000, 0.00000, -216.53981);
    CreateDynamicObject(16442, -203.63411, 33.18205, 3.79410, 0.00000, 0.00000, -209.63980);
    CreateDynamicObject(16442, -207.05188, 16.92773, 3.79410, 0.00000, 0.00000, -125.81982);
    CreateDynamicObject(16442, -199.79311, 4.35569, 3.79410, 0.00000, 0.00000, -49.07981);
    CreateDynamicObject(16442, -184.25958, -8.11793, 3.79410, 0.00000, 0.00000, -135.41980);
    CreateDynamicObject(16442, -167.08412, -11.64091, 3.79410, 0.00000, 0.00000, -226.43982);
    CreateDynamicObject(16442, -163.65929, -28.10913, 3.79410, 0.00000, 0.00000, -159.89984);
    CreateDynamicObject(16442, -178.11102, -19.60854, 3.79410, 0.00000, 0.00000, -69.47988);
    CreateDynamicObject(16442, -198.38930, -9.75505, 3.79410, 0.00000, 0.00000, -163.37994);
    CreateDynamicObject(16442, -216.46967, 2.87481, 3.79410, 0.00000, 0.00000, -163.37994);
    CreateDynamicObject(16442, -217.98761, 27.46272, 3.79410, 0.00000, 0.00000, -201.83995);
    CreateDynamicObject(16442, -211.16953, 46.68614, 3.79410, 0.00000, 0.00000, -201.83995);
    CreateDynamicObject(16442, -203.40834, 67.33411, 3.79410, 0.00000, 0.00000, -357.23990);
    CreateDynamicObject(16442, -209.08920, 83.95598, 3.79410, 0.00000, 0.00000, -400.67978);
    CreateDynamicObject(16442, -220.10411, 66.67113, 3.79410, 0.00000, 0.00000, -513.71991);
    CreateDynamicObject(16442, -225.33287, 46.97904, 3.79410, 0.00000, 0.00000, -443.93997);
    CreateDynamicObject(16442, -230.53523, 18.26859, 3.79410, 0.00000, 0.00000, -409.62006);
    CreateDynamicObject(16442, -176.35732, -35.41095, 3.79410, 0.00000, 0.00000, -138.83987);
    CreateDynamicObject(16442, -192.73196, -28.26979, 3.79410, 0.00000, 0.00000, -42.23987);
    CreateDynamicObject(16442, -211.92059, -13.80678, 3.79410, 0.00000, 0.00000, -19.67987);
    CreateDynamicObject(16442, -228.34785, -6.93035, 3.79410, 0.00000, 0.00000, 18.60013);
    CreateDynamicObject(16442, -234.40105, 5.73009, 3.79410, 0.00000, 0.00000, -248.69977);
    CreateDynamicObject(16442, -237.71082, 35.86252, 3.79410, 0.00000, 0.00000, -248.69977);
    CreateDynamicObject(16442, -247.81337, 17.44417, 3.79410, 0.00000, 0.00000, -178.55975);
    CreateDynamicObject(16442, -246.63646, -1.44542, 3.79410, 0.00000, 0.00000, -178.55975);
    CreateDynamicObject(16442, -241.43004, -19.83572, 3.79410, 0.00000, 0.00000, -325.13980);
    CreateDynamicObject(16442, -224.37344, -25.81573, 3.79410, 0.00000, 0.00000, -347.75980);
    CreateDynamicObject(16442, -208.56688, -33.83857, 3.79410, 0.00000, 0.00000, -435.83975);
    CreateDynamicObject(16442, -192.42683, -42.66315, 3.79410, 0.00000, 0.00000, -435.83975);
    CreateDynamicObject(16442, -182.66054, -63.79105, 3.79410, 0.00000, 0.00000, -480.53967);
    CreateDynamicObject(16442, -176.47409, -49.94964, 3.79410, 0.00000, 0.00000, -538.67987);
    CreateDynamicObject(16442, -198.60461, -55.33841, 3.79410, 0.00000, 0.00000, -538.67987);
    CreateDynamicObject(16442, -217.00060, -50.44470, 3.79410, 0.00000, 0.00000, -445.97980);
    CreateDynamicObject(16442, -228.46001, -38.65093, 3.79410, 0.00000, 0.00000, -358.79971);
    CreateDynamicObject(16442, -241.26224, -31.79682, 3.79410, 0.00000, 0.00000, -512.57983);
    CreateDynamicObject(16442, -254.79425, -13.62565, 3.79410, 0.00000, 0.00000, -510.83990);
    CreateDynamicObject(16442, -256.67801, -30.15676, 3.79410, 0.00000, 0.00000, -510.83990);
    CreateDynamicObject(16442, -245.45988, -46.40671, 3.79410, 0.00000, 0.00000, -388.49979);
    CreateDynamicObject(16442, -227.45573, -59.87135, 3.79410, 0.00000, 0.00000, -411.77975);
    CreateDynamicObject(16442, -209.08817, -63.18591, 3.79410, 0.00000, 0.00000, -442.19977);
    CreateDynamicObject(16442, -193.53641, -73.94958, 3.79410, 0.00000, 0.00000, -442.19977);
    CreateDynamicObject(16442, -210.03889, -74.42095, 3.79410, 0.00000, 0.00000, -337.43976);
    CreateDynamicObject(16442, -227.86240, -73.47112, 3.79410, 0.00000, 0.00000, -414.41974);
    CreateDynamicObject(16442, -239.99902, -61.39411, 3.79410, 0.00000, 0.00000, -307.73984);
    CreateDynamicObject(16442, -259.56262, -51.51152, 3.79410, 0.00000, 0.00000, -254.87981);
    CreateDynamicObject(16442, -249.32695, -56.90627, 3.79410, 0.00000, 0.00000, -254.87981);
    CreateDynamicObject(16442, -120.97840, 98.95062, 3.79410, 0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16442, -119.09953, 114.50349, 3.79410, 0.00000, 0.00000, 121.74000);
    CreateDynamicObject(16442, -110.85193, 133.16795, 3.79410, 0.00000, 0.00000, 74.10000);
    CreateDynamicObject(16442, -119.25746, 145.32318, 3.79410, 0.00000, 0.00000, 47.46000);
    CreateDynamicObject(16442, -130.21591, 126.46263, 3.79410, 0.00000, 0.00000, -5.04000);
    CreateDynamicObject(16442, -131.05293, 110.43054, 3.79410, 0.00000, 0.00000, -5.04000);
    CreateDynamicObject(16442, -142.77469, 108.09543, 3.89481, 0.00000, 0.00000, -31.44000);
    CreateDynamicObject(16442, -140.56607, 119.21395, 4.09187, 0.00000, 0.00000, -188.63998);
    CreateDynamicObject(16442, -130.43369, 137.11520, 4.20977, 0.00000, 0.00000, -188.63998);
    CreateDynamicObject(16442, -132.40044, 153.83987, 4.85039, 0.00000, 0.00000, -155.34000);
    CreateDynamicObject(16442, -140.95828, 146.12637, 4.85039, 0.00000, 0.00000, -155.34000);
    CreateDynamicObject(16442, -144.22665, 132.24455, 4.85039, 0.00000, 0.00000, -345.29999);
    CreateDynamicObject(16442, -157.28069, 119.55559, 4.17385, 0.00000, 0.00000, -465.65994);
    CreateDynamicObject(16442, -172.40321, 124.76702, 4.29686, 0.00000, 0.00000, -505.37997);
    CreateDynamicObject(16442, -159.88194, 133.50537, 4.26611, 0.00000, 0.00000, -549.83997);
    CreateDynamicObject(16442, -154.25711, 147.40797, 5.06773, 0.00000, 0.00000, -629.16003);
    CreateDynamicObject(16442, -149.42297, 159.71071, 6.14143, 0.00000, 0.00000, -697.79980);
    CreateDynamicObject(16442, -167.93280, 142.32567, 5.26359, 0.00000, 0.00000, -697.79980);
    CreateDynamicObject(16442, -164.26904, 157.79172, 6.64802, 0.00000, 0.00000, -867.89978);
    CreateDynamicObject(16442, -177.29436, 151.29977, 6.64802, 0.00000, 0.00000, -867.89978);
    CreateDynamicObject(16442, -182.19092, 137.17256, 5.41141, 0.00000, 0.00000, -721.07971);
    CreateDynamicObject(16442, -202.92041, 143.22769, 5.41141, 0.00000, 0.00000, -721.07971);
    CreateDynamicObject(16442, -190.84160, 151.50127, 6.33961, 0.00000, 0.00000, -659.63989);
    CreateDynamicObject(16442, -181.28932, 163.01686, 8.06141, 0.00000, 0.00000, -731.99969);
    CreateDynamicObject(16442, -196.45894, 162.49364, 7.30664, 0.00000, 0.00000, -877.49963);
    end = CreateDynamicObject(16442, -195.89185, 135.60809, 4.51406, 0.00000, 0.00000, -877.49963);
    for(new i = start ; i <= end ; i++) {
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_X,x);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Y,y);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Z,z);
        g_CowPosition[j][CP_fX] = x;
        g_CowPosition[j][CP_fY] = y;
        g_CowPosition[j][CP_fZ] = z;
        j++;
        if( j >= sizeof(g_CowPosition)) break;
    }
    return 1;
}

stock StartPlayerCow(playerid) {
    DisablePlayerCheckpointEx(playerid);
    Spieler[playerid][pCow][0] = 0;
    Spieler[playerid][pCow][1] = 0;
    Spieler[playerid][pCow][2] = 0;
    //
    ShowNextCow(playerid);
    return 1;
}
forward Cow_ShowNext(playerid);
public Cow_ShowNext(playerid) {
    new
        c;
    c += GetBitCount(Spieler[playerid][pCow][0]);
    c += GetBitCount(Spieler[playerid][pCow][1]);
    c += GetBitCount(Spieler[playerid][pCow][2]);
    DisablePlayerCheckpointEx(playerid);
    ClearAnimations(playerid);
    if( c >= 7 ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Gute Arbeit! Bringe die Milch zum Milchstand.");
        SetPlayerCheckpointEx(playerid,-12.5640,47.6324,3.1172,5.0,CP_COW_FINISH);
    }
    else {
        new
            String[80];
        format(String,sizeof(String),"Du hast die Kuh gemolken! Auf zur Nächsten (%d/7)",c);
        SendClientMessage(playerid,COLOR_YELLOW,String);
        ShowNextCow(playerid);
    }
    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_JOB, 2713, 5, 0.182957, -0.116972, 0.000000, 0.000000, 259.876800, 26.083478, 1.000000, 1.000000, 1.000000 ); // DYN_FIREBIN0 - eimer
    return 1;
}

stock ShowNextCow(playerid) {
    new
        r,
        index,
        bit,
        bitval;
    do {
        r = random( sizeof(g_CowPosition) );
        index = r / 32;
        bit = (r % 32) + 1;
        bitval = 1 << bit;
    }
    while( (Spieler[playerid][pCow][index] & bitval) );
    Spieler[playerid][pCow][index] |= bitval;
    SetPlayerCheckpointEx(playerid,g_CowPosition[r][CP_fX],g_CowPosition[r][CP_fY],g_CowPosition[r][CP_fZ],2.0,CP_COW);
    return 1;
}

COMMAND:zollpass(playerid,params[]) {
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, CITYHALL_INTERIOR_DESK1)) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keinen Zollpass kaufen.");

	ShowPlayerDialog(playerid, DIALOG_ZOLLPASS, DIALOG_STYLE_MSGBOX, "Zollpass", "Du kannst für $15.000 einen Zollpass kaufen.\nDamit kannst du für 7 Tage den Zoll ohne Zahlung passieren.", "Kaufen", "Abbruch");
	return 1;
}

stock SkillUpgrade(playerid,text[]) {
    new PlayerText:playertext;
    playertext = CreatePlayerTextDraw(playerid,190.000000, 240.000000, text);
    PlayerTextDrawBoxColor(playerid,playertext, 255);
    PlayerTextDrawFont(playerid,playertext, 1);
    PlayerTextDrawLetterSize(playerid,playertext, 0.620000, 2.900000);
    PlayerTextDrawColor(playerid,playertext, -1);
    PlayerTextDrawSetOutline(playerid,playertext, 0);
    PlayerTextDrawSetProportional(playerid,playertext, 1);
    PlayerTextDrawSetShadow(playerid,playertext, 1);
    PlayerTextDrawShow(playerid,playertext);

    SetTimerEx("SkillUpgrade_Destroy",5179,false,"dd",playerid,_:playertext);
    return 1;
}

forward SkillUpgrade_Destroy(playerid,playertext);
public SkillUpgrade_Destroy(playerid,playertext) {
    PlayerTextDrawDestroy(playerid,PlayerText:playertext);
    return 1;
}

/*COMMAND:freizeitpark(playerid,params[]) {
    SetPlayerPos(playerid,352.8312,-2143.1543,7.8359);
    Streamer_Update(playerid);
    return 1;
}
*/

COMMAND:ticketkaufen(playerid,params[]) {
    new
        fahrgeschaeft = -1;
    if( IsPlayerInRangeOfPoint(playerid,3.0,374.6658,-2121.6416,7.8820) ) { // fallturm
        fahrgeschaeft = 0;
    }
    else if( IsPlayerInRangeOfPoint(playerid,3.0,373.8057,-2056.3586,7.9260) ) {// autoscooter
        fahrgeschaeft = 1;
    }
    else  if( IsPlayerInRangeOfPoint(playerid,3.0,356.7114,-2149.5613,7.8779) ) {// breakdancer
        fahrgeschaeft = 2;
    }
    else  if( IsPlayerInRangeOfPoint(playerid,3.0,382.0282,-2165.8818,7.8511) ) {// schiff
        fahrgeschaeft = 3;
    }
    else  if( IsPlayerInRangeOfPoint(playerid,3.0, KARTPARCOUR_TICKETPOINT) ) {// Kartbahn
        fahrgeschaeft = 4;
    }
    else  if( IsPlayerInRangeOfPoint(playerid,3.0,396.3516,-2152.5928,7.8399) ) {// Wasserbahn
        fahrgeschaeft = 5;
    }
    if( fahrgeschaeft == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht an einem Fahrgeschäft");
    }
    if( Spieler[playerid][pCash] < 300 ) {
        return SendClientMessage(playerid,COLOR_RED,"Eine Fahrt kostet 300$");
    }
    if( Spieler[playerid][pFahrgeschaeft] != -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Du bist noch in einem Fahrgeschäft");
    }
    SetPlayerToFahrgeschaeft(playerid,fahrgeschaeft);
    return 1;
}


stock GetFreeWasserScooterSlot() {
    new
        free;
    for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
        if( g_WasserScooterSlot[i][ASS_bUsed] == false ) {
            free++;
        }
    }
    if( free ) {
        new
            c,
            r = random(free);
        for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
            if( g_WasserScooterSlot[i][ASS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

forward Pulse_Wasserscooter();
public Pulse_Wasserscooter() {
    //print("Pulse_Autoscooter");
    if( g_WasserScooter[AS_ibStatus] == 1 ) {
        // Start
        KillTimer( g_WasserScooter[AS_tID] );
        g_WasserScooter[AS_tickUpdate] = gettime() + 2*60;
        g_WasserScooter[AS_tID] = SetTimer("Pulse_Wasserscooter",2203,true);
        g_WasserScooter[AS_ibStatus] = 2;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 5 ) {
                SendClientMessage(i,COLOR_ORANGE,"Los gehts! 2 Minuten Wasserspaß.");
                TogglePlayerControllable(i,true);
                SetVehicleParamsEx( GetPlayerVehicleID(i) , VEHICLE_PARAMS_ON , VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
            }
        }
    }
    else if( g_WasserScooter[AS_ibStatus] == 2 ) {
        if( gettime() > g_WasserScooter[AS_tickUpdate] ) {
            //SendClientMessage(i,COLOR_YELLOW,"Autoscooter beendet");
            ClearWasserscooter();
        }
        else {
            new
                veh;
            for(new i = 0 ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pFahrgeschaeft] == 5 ) {
                    veh = GetPlayerVehicleID(i);
                    if(veh) {
                        Benzin[veh] = 100;
                        SetVehicleHealth(veh,1000.0);
                    }
                }
            }
        }
    }
    return 1;
}
stock InitWasserscooter() {
    for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
        g_WasserScooterSlot[i][ASS_iVehicle] = CreateVehicle(539,g_WasserScooterSlot[i][ASS_fX],g_WasserScooterSlot[i][ASS_fY],g_WasserScooterSlot[i][ASS_fZ],g_WasserScooterSlot[i][ASS_fFace],-1,-1,-1);
        if( g_WasserScooterSlot[i][ASS_iVehicle] != INVALID_VEHICLE_ID ) {
            aiVehicles[ g_WasserScooterSlot[i][ASS_iVehicle] ] = VEH_WASSERSCOOTER;
        }
    }
    return 1;
}

stock ClearWasserscooter() {
    KillTimer( g_WasserScooter[AS_tID] );
    g_WasserScooter[AS_ibStatus] = 0;
    g_WasserScooter[AS_tickUpdate] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == 5 ) {
            RemovePlayerWasserScooter(i);
        }
    }
    for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
        SetVehicleToRespawn( g_WasserScooterSlot[i][ASS_iVehicle] );
        g_WasserScooterSlot[i][ASS_bUsed]= false;
    }
    return 1;
}
stock RemovePlayerWasserScooter(playerid) {
    SetPlayerPos(playerid,396.3516,-2152.5928,7.8399);
    SetPlayerFacingAngle(playerid,92.0);
    Streamer_Update(playerid);
    Spieler[playerid][pFahrgeschaeft] = -1;
    return 1;
}

stock GetFreeAutoScooterSlot() {
    new
        free;
    for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
        if( g_AutoScooterSlot[i][ASS_bUsed] == false ) {
            free++;
        }
    }
    if( free ) {
        new
            c,
            r = random(free);
        for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
            if( g_AutoScooterSlot[i][ASS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

forward Pulse_Autoscooter();
public Pulse_Autoscooter() {
    //print("Pulse_Autoscooter");
    if( g_AutoScooter[AS_ibStatus] == 1 ) {
        // Start
        KillTimer( g_AutoScooter[AS_tID] );
        g_AutoScooter[AS_tickUpdate] = gettime() + 3*60;
        g_AutoScooter[AS_tID] = SetTimer("Pulse_Autoscooter",2203,true);
        g_AutoScooter[AS_ibStatus] = 2;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 1 ) {
                SendClientMessage(i,COLOR_ORANGE,"Los gehts! 3 Minuten Autoscooter");
                TogglePlayerControllable(i,true);
                SetVehicleParamsEx( GetPlayerVehicleID(i) , VEHICLE_PARAMS_ON , VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
            }
        }
    }
    else if( g_AutoScooter[AS_ibStatus] == 2 ) {
        if( gettime() > g_AutoScooter[AS_tickUpdate] ) {
            //SendClientMessage(i,COLOR_YELLOW,"Autoscooter beendet");
            ClearAutoscooter();
        }
        else {
            new
                veh;
            for(new i = 0 ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pFahrgeschaeft] == 1 ) {
                    veh = GetPlayerVehicleID(i);
                    if(veh) {
                        Benzin[veh] = 100;
                        SetVehicleHealth(veh,1000.0);
                    }
                }
            }
        }
    }
    return 1;
}
stock InitAutoscooter() {
    for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
        g_AutoScooterSlot[i][ASS_iVehicle] = CreateVehicle(539,g_AutoScooterSlot[i][ASS_fX],g_AutoScooterSlot[i][ASS_fY],g_AutoScooterSlot[i][ASS_fZ],g_AutoScooterSlot[i][ASS_fFace],-1,-1,-1);
        if( g_AutoScooterSlot[i][ASS_iVehicle] != INVALID_VEHICLE_ID ) {
            aiVehicles[ g_AutoScooterSlot[i][ASS_iVehicle] ] = VEH_AUTOSCOOTER;
        }
    }
    return 1;
}

stock ClearAutoscooter() {
    KillTimer( g_AutoScooter[AS_tID] );
    g_AutoScooter[AS_ibStatus] = 0;
    g_AutoScooter[AS_tickUpdate] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == 1 ) {
            RemovePlayerAutoscooter(i);
        }
    }
    for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
        SetVehicleToRespawn( g_AutoScooterSlot[i][ASS_iVehicle] );
        g_AutoScooterSlot[i][ASS_bUsed]= false;
    }
    return 1;
}
stock RemovePlayerAutoscooter(playerid) {
    SetPlayerPos(playerid,373.5172,-2059.1106,7.8831);
    SetPlayerFacingAngle(playerid,92.0);
    Streamer_Update(playerid);
    Spieler[playerid][pFahrgeschaeft] = -1;
    return 1;
}

stock GetFreeKartbahnSlot() {
    new
        free;
    for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
        if( g_KartbahnSlot[i][ASS_bUsed] == false ) {
            free++;
        }
    }
    if( free ) {
        new
            c,
            r = random(free);
        for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
            if( g_KartbahnSlot[i][ASS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

forward Pulse_Kartbahn();
public Pulse_Kartbahn() {
    //print("Pulse_Kartbahn");
    if( g_Kartbahn[AS_ibStatus] == 1 ) {
        // Start
        KillTimer( g_Kartbahn[AS_tID] );
        g_Kartbahn[AS_tickUpdate] = gettime() + 3*60;
        g_Kartbahn[AS_tID] = SetTimer("Pulse_Kartbahn",2203,true);
        g_Kartbahn[AS_ibStatus] = 2;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 4 ) {
                SendClientMessage(i,COLOR_ORANGE,"Los gehts! 3 Minuten Kartrennen");
                TogglePlayerControllable(i,true);
                SetVehicleParamsEx( GetPlayerVehicleID(i) , VEHICLE_PARAMS_ON , VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
            }
        }
    }
    else if( g_Kartbahn[AS_ibStatus] == 2 ) {
        if( gettime() > g_Kartbahn[AS_tickUpdate] ) {
            //SendClientMessage(i,COLOR_YELLOW,"Autoscooter beendet");
            ClearKartbahn();
        }
        else {
            new
                veh;
            for(new i = 0 ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pFahrgeschaeft] == 4 ) {
                    veh = GetPlayerVehicleID(i);
                    if(veh) {
                        Benzin[veh] = 100;
                        SetVehicleHealth(veh,1000.0);
                    }
                }
            }
        }
    }
    return 1;
}
stock InitKartbahn() {
    for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
        g_KartbahnSlot[i][ASS_iVehicle] = CreateVehicle(571,g_KartbahnSlot[i][ASS_fX],g_KartbahnSlot[i][ASS_fY],g_KartbahnSlot[i][ASS_fZ],g_KartbahnSlot[i][ASS_fFace],-1,-1,-1);
        if( g_KartbahnSlot[i][ASS_iVehicle] != INVALID_VEHICLE_ID ) {
            aiVehicles[ g_KartbahnSlot[i][ASS_iVehicle] ] = VEH_KARTBAHN;
        }
    }
    return 1;
}

stock ClearKartbahn() {
    KillTimer( g_Kartbahn[AS_tID] );
    g_Kartbahn[AS_ibStatus] = 0;
    g_Kartbahn[AS_tickUpdate] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == 4 ) {
            RemovePlayerKartbahn(i);
        }
    }
    for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
        SetVehicleToRespawn( g_KartbahnSlot[i][ASS_iVehicle] );
        g_KartbahnSlot[i][ASS_bUsed]= false;
    }
    return 1;
}
stock RemovePlayerKartbahn(playerid) {
    SetPlayerPos(playerid,-2038.8239,-97.9802,35.1641);
    SetPlayerFacingAngle(playerid,92.0);
    Streamer_Update(playerid);
    Spieler[playerid][pFahrgeschaeft] = -4;
    return 1;
}

forward Pulse_Fallturm();
public Pulse_Fallturm() {
    //printf("Pulse_Fallturm %d",g_FallTurm[FT_ibStatus]);
    if( g_FallTurm[FT_ibStatus] == 1 ) {
        // Start
        KillTimer( g_FallTurm[FT_tTimer] );
        g_FallTurm[FT_ibStatus] = 2;
        SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Ticketverkäufer sagt: Der Fallturm setzt sich in Bewegung.");
        MoveUpFallturm();
    }
    else if( g_FallTurm[FT_ibStatus] == 3 ) {
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 4;
        FallDownFallturm();
    }
    else if(g_FallTurm[FT_ibStatus] == 5) {
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 6;
        MoveUpFallturm();
    }
    else if( g_FallTurm[FT_ibStatus] == 7 ) {
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 8;
        FallDownFallturm();
    }
    else if( g_FallTurm[FT_ibStatus] == 9 ) {
        new
            Float:x = 374.2830,
            Float:y = -2123.8054;
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 0;
        SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Ticketverkäufer sagt: Die Fahrt ist zuende! Ich hoffe, dass Ihnen die Fahrt gefallen hat.");
        for(new i = 0 ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 0 ) {
                Spieler[i][pFahrgeschaeft] = -1;
                //ResetPlayerPos(i,x + frandom(2.0,-2.0) ,y + frandom(2.0,-2.0) , 7.8831 );
                SetTimerEx("SetPlayerPosEx",110 + random(90),false,"dfffdd",i, x + frandom(2.0,-2.0) ,y + frandom(2.0,-2.0) , 7.8831, 0, 0);
                SetPlayerFacingAngle(i,83.5);
                SetCameraBehindPlayer(i);
                Streamer_Update(i);
            }
        }
        for(new i ; i < 4 ; i++) {
            g_FallTurm[FT_abUsed][i] = false;
        }
    }
    else if( g_FallTurm[FT_ibStatus] == 4 || g_FallTurm[FT_ibStatus] == 8 ) {
        new
            Float:x,
            Float:y,
            Float:z,

            Float:ox,
            Float:oy,
            Float:oz;
        GetDynamicObjectPos(g_FallTurm[FT_aiWagonObject][0],ox,oy,oz);
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 0 ) {
                if( !IsObjectFallturmWagon( GetPlayerSurfingObjectID(i) )) {
                    if( GetPlayerPos(i,x,y,z) ) {
                        SetPlayerPos(i,x,y,oz - 1.6 );
                    }
                }
            }
        }
    }
    return 1;
}

stock GetFreeFallTurmSlot() {
    new
        free;
    for(new i = 0 ; i < 4 ; i++) {
        if( g_FallTurm[FT_abUsed][i] == false ) {
            free++;
        }
    }
    //printf("GetFreeFallTurmSlot() free %d",free);
    if( free ) {
        new
            c,
            r = random(free);
        for(new i = 0 ; i < 4 ; i++) {
            if( g_FallTurm[FT_abUsed][i] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

stock MoveUpFallturm() {
	new
	    Float:x,
	    Float:y,
	    Float:z;
	for(new i ; i < 4 ; i++) {
		GetDynamicObjectPos( g_FallTurm[FT_aiWagonObject][i] , x,y,z);
		MoveDynamicObject( g_FallTurm[FT_aiWagonObject][i] , x , y, z + 80.0 , 4.5);
		//MoveDynamicObject( g_FallTurm[FT_aiCamera][i] , x , y, z + 80.0 , 2.85);
	}
	GetDynamicObjectPos( g_FallTurm[FT_iScheibeObjekt] , x,y,z);
	MoveDynamicObject( g_FallTurm[FT_iScheibeObjekt] , x , y, z + 80.0 , 4.5);
	return 1;
}
stock FallDownFallturm() {
	new
	    Float:speed,
	    Float:x,
	    Float:y,
	    Float:z;
	/*
	for(new i ; i < MAX_PLAYERS ; i++) {
	    if( Spieler[i][pFahrgeschaeft] == 0 ) {
	        TogglePlayerControllable(i,false);
	        SetCameraBehindPlayer(i);
	    }
	}
	*/
	KillTimer(g_FallTurm[FT_tTimer]);
	g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",197,true);
	speed = frandom(25.0,23.0,3);
	for(new i ; i < 4 ; i++) {
		GetDynamicObjectPos( g_FallTurm[FT_aiWagonObject][i] , x, y , z);
		MoveDynamicObject( g_FallTurm[FT_aiWagonObject][i] , x , y, z - 80.0 , speed);
		//MoveDynamicObject( g_FallTurm[FT_aiCamera][i] , x , y, z - 80.0, speed);
	}
	GetDynamicObjectPos( g_FallTurm[FT_iScheibeObjekt] , x,y,z);
	MoveDynamicObject( g_FallTurm[FT_iScheibeObjekt] , x , y, z - 80.0 , speed);
	return 1;
}

stock SetPlayerToFahrgeschaeft(playerid,fahrgeschaeft) {
	if( fahrgeschaeft == 0 ) {  // fallturm
	    if( g_FallTurm[FT_ibStatus] == 0 || g_FallTurm[FT_ibStatus] == 1 ) { // Wartend oder Warm-Up
	        new
	            slot = GetFreeFallTurmSlot();
			//printf("GetFreeFallTurmSlot() %d",slot);
			if( slot == -1 ) {
			    return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Fallturm ist bereits voll. Versuch es später erneut");
			}
	    	if( g_FallTurm[FT_ibStatus] == 0 ) {
		    	g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",2*60*1000,false);
		    	g_FallTurm[FT_ibStatus] = 1;
			}
			new
			    Float:x,
			    Float:y,
			    Float:z;
			GetDynamicObjectPos( g_FallTurm[FT_aiWagonObject][slot] , x,y,z);
	    	SetPlayerPos( playerid, x,y,z );
	    	g_FallTurm[FT_abUsed][slot] = true;
	    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
			SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Fallturm beginnt in spätestens 2 Minuten!");
	    	GivePlayerCash(playerid,-300);
	    	SetCameraBehindPlayer(playerid);
			Streamer_Update(playerid);
	    }
	    else {
	        SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde Fallturm läuft bereits");
	    }
	}
	else if( fahrgeschaeft == 1 ) { // autoscooter
	    if( g_AutoScooter[AS_ibStatus] == 0 || g_AutoScooter[AS_ibStatus] == 1 ) { // Wartend oder Warm-Up
	        new
	            slot = GetFreeAutoScooterSlot();
			if( slot == -1 ) {
			    return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Autoscooter ist bereits voll. Versuch es später erneut");
			}
	    	if( g_AutoScooter[AS_ibStatus] == 0 ) {
		    	g_AutoScooter[AS_tID] = SetTimer("Pulse_Autoscooter",2*60*1000,false);
		    	g_AutoScooter[AS_ibStatus] = 1;
			}
	    	PutPlayerInVehicle(playerid, g_AutoScooterSlot[slot][ASS_iVehicle],0 );
	    	g_AutoScooterSlot[slot][ASS_bUsed] = true;
	    	SetCameraBehindPlayer(playerid);
			Streamer_Update(playerid);
	    	TogglePlayerControllable(playerid,false);
	    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
			SendFahrgeschaeftMessage(1,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Autoscooter beginnt in spätestens 2 Minuten");
	    	GivePlayerCash(playerid,-300);
	    }
	    else {
	        SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde Autoscooter läuft bereits");
	    }
	}
	else if( fahrgeschaeft == 2 ) {// breakdancer
	    if( g_BreakDancer[BD_ibStatus] == 0 || g_BreakDancer[BD_ibStatus] == 1 ) { // Wartend oder Warm-Up
	        new
	            slot = GetFreeBreakdancerSlot();
			if( slot == -1 ) {
			    return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Breakdancer ist bereits voll. Versuch es später erneut");
			}
	    	if( g_BreakDancer[BD_ibStatus] == 0 ) {
		    	g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",2*60*1000,false);
		    	//g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",2*1000,false);
		    	g_BreakDancer[BD_ibStatus] = 1;
			}
	    	SetPlayerPos( playerid, g_BreakDancerSlot[slot][BDS_fX] + 0.25 , g_BreakDancerSlot[slot][BDS_fY] + 0.35 , g_BreakDancerSlot[slot][BDS_fZ] - 1.5 );
	    	g_BreakDancerSlot[slot][BDS_bUsed] = true;
	    	SetCameraBehindPlayer(playerid);
			Streamer_Update(playerid);
	    	//TogglePlayerSpectating(playerid,true);
	    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
			SendFahrgeschaeftMessage(2,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Die Fahrt beginnt in spätestens 2 Minuten");
	    	GivePlayerCash(playerid,-300);
			ApplyAnimation(playerid, "ATTRACTORS", "STEPSIT_LOOP", 4.0, 1, 1, 1, 1, 0,1);
	    }
	    else {
	        SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde BreakDancer läuft bereits");
	    }
	}
	else if( fahrgeschaeft == 3 ) {// schiff
	    SetPlayerToShip(playerid);
    	SetCameraBehindPlayer(playerid);
	    Streamer_Update(playerid);
	    Spieler[playerid][pFahrgeschaeftData] = gettime() + 1*60;
    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
        SendClientMessage(playerid,COLOR_ORANGE,"Ticketverkäufer sagt: Du kannst nun 1 Minuten auf dem Schiff verbringen");
    }
    else if( fahrgeschaeft == 4 ) { // Kartbahn
        if( g_Kartbahn[AS_ibStatus] == 0 || g_Kartbahn[AS_ibStatus] == 1 ) { // Wartend oder Warm-Up
            new
                slot = GetFreeKartbahnSlot();
            if( slot == -1 ) {
                return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Kartbahn ist bereits voll. Versuch es später erneut");
            }
            if( g_Kartbahn[AS_ibStatus] == 0 ) {
                g_Kartbahn[AS_tID] = SetTimer("Pulse_Kartbahn",2*60*1000,false);
                g_Kartbahn[AS_ibStatus] = 1;
            }
            PutPlayerInVehicle(playerid, g_KartbahnSlot[slot][ASS_iVehicle],0 );
            g_KartbahnSlot[slot][ASS_bUsed] = true;
            SetCameraBehindPlayer(playerid);
            Streamer_Update(playerid);
            TogglePlayerControllable(playerid,false);
            Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
            SendFahrgeschaeftMessage(4,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Das Kartrennen beginnt in spätestens 2 Minuten");
            GivePlayerCash(playerid,-300);
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde Kartrennen läuft bereits");
        }
    }
    else if( fahrgeschaeft == 5 ) { // Wasserscooter
        if( g_WasserScooter[AS_ibStatus] == 0 || g_WasserScooter[AS_ibStatus] == 1 ) { // Wartend oder Warm-Up
            new
                slot = GetFreeWasserScooterSlot();
            if( slot == -1 ) {
                return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Jemand befindet sich bereits auf der Wasserbahn. Versuch es später erneut");
            }
            if( g_WasserScooter[AS_ibStatus] == 0 ) {
                g_WasserScooter[AS_tID] = SetTimer("Pulse_Wasserscooter",1*60,false);
                g_WasserScooter[AS_ibStatus] = 1;
            }
            PutPlayerInVehicle(playerid, g_WasserScooterSlot[slot][ASS_iVehicle],0 );
            g_WasserScooterSlot[slot][ASS_bUsed] = true;
            SetCameraBehindPlayer(playerid);
            Streamer_Update(playerid);
            TogglePlayerControllable(playerid,false);
            Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
            SendFahrgeschaeftMessage(5,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Wasserbahn beginnt in spätestens 1 Minute");
            GivePlayerCash(playerid,-300);
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Jemand befindet sich bereits auf der Wasserbahn. Versuch es später erneut");
        }
    }
    return 1;
}

stock InitFallturm() {
    g_FallTurm[FT_ibStatus] = 0;
    g_FallTurm[FT_iScheibeObjekt] = CreateDynamicObject(19278, 385.37869, -2127.62549, 59.5,   0.00000, 180.00000, 0.00000);

    g_FallTurm[FT_aiWagonObject][0] = CreateDynamicObject(19277, 385.24939, -2133.14404, 8.55,   0.00000, 0.00000, 0.00000);
    g_FallTurm[FT_aiWagonObject][1] = CreateDynamicObject(19277, 380.04660, -2127.43018, 8.55,   0.00000, 0.00000, 272.58011);
    g_FallTurm[FT_aiWagonObject][2] = CreateDynamicObject(19277, 385.24939, -2122.27832, 8.55,   0.00000, 0.00000, 180.00000);
    g_FallTurm[FT_aiWagonObject][3] = CreateDynamicObject(19277, 390.41589, -2127.43018, 8.55,   0.00000, 0.00000, 90.00000);

    /*
    g_FallTurm[FT_aiCamera][0] = CreateDynamicObject(19300, 385.24939, -2133.14404, 8.29360 ,   0.00000, 0.00000, 0.00000);
    g_FallTurm[FT_aiCamera][1] = CreateDynamicObject(19300, 380.04660, -2127.43018, 8.29360 ,   0.00000, 0.00000, 272.58011);
    g_FallTurm[FT_aiCamera][2] = CreateDynamicObject(19300, 385.24939, -2122.27832, 8.29360 ,   0.00000, 0.00000, 180.00000);
    g_FallTurm[FT_aiCamera][3] = CreateDynamicObject(19300, 390.41589, -2127.43018, 8.29360 ,   0.00000, 0.00000, 90.00000);
    */

    Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_FallTurm[FT_iScheibeObjekt] ,E_STREAMER_EXTRA_ID, OBJECT_FALLTURM_PLATTE );
    for(new i ; i < 4 ; i++) {
        // Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_FallTurm[FT_aiWagonObject][i] ,E_STREAMER_EXTRA_ID, OBJECT_FALLTURM );
        g_FallTurm[FT_abUsed][i] = false;
    }
    return 1;
}
stock IsObjectFallturmWagon(objectid) {
    for(new i ; i  < 4 ; i++) {
        if( objectid == g_FallTurm[FT_aiWagonObject][i] ) {
            return 1;
        }
    }
    return 0;
}
// /schiff 372.10446 -2175.82153 20.05120
stock SchaukelschiffInit() {
    g_Schiff[S_ibStatus] = 0;
    g_Schiff[S_fSpeed] = frandom(9.0,7.5,3);
    g_Schiff[S_fX] = 372.10446;
    g_Schiff[S_fY] = -2175.82153;
    g_Schiff[S_fZ] = 20.05120;

    g_Schiff[S_fOffsetX] = 15.858;
    g_Schiff[S_fOffsetY] = 0.0;
    g_Schiff[S_fOffsetZ] = 15.000 - 5.740;

    g_Schiff[S_iObject] = CreateDynamicObject(8493, 372.10446, -2175.82153, 20.05120,   0.00000, 0.00000, 86.0);
    //Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_Schiff[S_iObject] ,E_STREAMER_EXTRA_ID, OBJECT_SCHIFF );
    g_Schiff[S_ibStatus] = 1;
	MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] , g_Schiff[S_fY], g_Schiff[S_fZ] + 0.5 , g_Schiff[S_fSpeed], frandom(35.0,28.0,3) , 0.0 , 86.0 );
	return 1;
}
forward Pulse_Schiff();
public Pulse_Schiff() {
    // printf("g_Schiff[S_ibStatus] %d",g_Schiff[S_ibStatus]);
    g_Schiff[S_fSpeed] = frandom(8.5,7.5,3);
	if( g_Schiff[S_ibStatus] == 2) {
	    g_Schiff[S_ibStatus] = 3;
		MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] , g_Schiff[S_fY], g_Schiff[S_fZ] , g_Schiff[S_fSpeed], 0.0 , 0.0 , 86.0 );
	}
	else if( g_Schiff[S_ibStatus] == 5) {
	    g_Schiff[S_ibStatus] = 6;
		MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] , g_Schiff[S_fY], g_Schiff[S_fZ] , g_Schiff[S_fSpeed], 0.0 , 0.0 , 86.0 );
	}
	return 1;
}

stock GetFreeBreakdancerSlot() {
    new
        free;
    for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
        if( g_BreakDancerSlot[i][BDS_bUsed] == false ) {
            free++;
        }
    }
    if( free ) {
        new
            c,
            r = random(free);
        for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
            if( g_BreakDancerSlot[i][BDS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

stock InitBreakdancer() {
    new
        i;
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 355.99719, -2153.05029, 10.65203,   0.00000, 0.00000, 39.35999);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 358.37784, -2152.10815, 10.65203,   0.00000, 0.00000, -3.96001);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 360.97186, -2151.81274, 10.65203,   0.00000, 0.00000, -29.04001);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 363.17868, -2153.27148, 10.65203,   0.00000, 0.00000, -49.92001);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 364.26526, -2155.45947, 10.65203,   0.00000, 0.00000, -96.48002);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 364.21054, -2158.06372, 10.65203,   0.00000, 0.00000, -121.14003);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 362.63095, -2160.13013, 10.65203,   0.00000, 0.00000, -149.87991);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 360.36526, -2161.11035, 10.65203,   0.00000, 0.00000, -191.03987);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 357.87384, -2160.74023, 10.65203,   0.00000, 0.00000, -214.49988);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 356.06296, -2159.25684, 10.65203,   0.00000, 0.00000, -258.89969);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 355.16202, -2157.21045, 10.65203,   0.00000, 0.00000, -258.05984);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 355.09671, -2155.01904, 10.65203,   0.00000, 0.00000, -286.43948);
    return 1;
}

forward Pulse_Breakdancer();
public Pulse_Breakdancer() {
    KillTimer(g_BreakDancer[BD_tTimer]);
    if( g_BreakDancer[BD_ibStatus] == 1 ) {
        //g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",3*60*1000,false);
        g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",20*1000,false);
        SendFahrgeschaeftMessage(2,COLOR_YELLOW,"Ticketverkäufer sagt: Die Fahrt beginnt. Viel Spaß!");
        g_BreakDancer[BD_ibStatus] = 2;
        for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
            g_BreakDancerSlot[i][BDS_iStep] = i;
        }
        MoveBreakdancer();
    }
    else if( g_BreakDancer[BD_ibStatus] == 2 ) {
        g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",6*1000,false);
        g_BreakDancer[BD_ibStatus] = 3;
    }
    else if( g_BreakDancer[BD_ibStatus] == 3 ) {
        SendFahrgeschaeftMessage(2,COLOR_YELLOW,"Ticketverkäufer sagt: Die Fahrt ist zuende! Ich hoffe, dass Ihnen die Fahrt gefallen hat.");
        for(new i = 0 ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 2 ) {
                //TogglePlayerControllable(i,true);
                //TogglePlayerSpectating(i,false);
                //SetPlayerPos(i,356.7114,-2149.5613,7.8779);
                //Streamer_Update(i);
                Spieler[i][pFahrgeschaeft] = -1;
                SetPlayerPos(i,356.7114,-2149.5613,7.8779);
                SetPlayerFacingAngle(i,162.0);
                SetCameraBehindPlayer(i);
                ClearAnimations(i);
            }
        }
        g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",3500,false);
        g_BreakDancer[BD_ibStatus] = 4;
    }
    else if( g_BreakDancer[BD_ibStatus] == 4 ) {
		for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
		    StopObject(g_BreakDancerSlot[i][BDS_iObject]);
	    	SetDynamicObjectPos(g_BreakDancerSlot[i][BDS_iObject] ,g_BreakDancerSlot[i][BDS_fX],g_BreakDancerSlot[i][BDS_fY],g_BreakDancerSlot[i][BDS_fZ]);
	    	SetDynamicObjectRot(g_BreakDancerSlot[i][BDS_iObject] ,0.0,0.0,0.0);
	    	g_BreakDancerSlot[i][BDS_iStep] = 0;
	    	g_BreakDancerSlot[i][BDS_bUsed] = false;
		}
        g_BreakDancer[BD_ibStatus] = 0;
    }
    return 1;
}

stock MoveBreakdancer() {
	new
	    Float:speed,
	    Float:rx,
	    Float:ry,
	    Float:rz,
	    slot;
	if( g_BreakDancer[BD_ibStatus] == 4 ) {
	    speed = frandom(2.0,1.8,3); // langsamer,da ende
	}
	else {
	    speed = frandom(4.3,4.1,3);
	}
	for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
	    slot = (++g_BreakDancerSlot[i][BDS_iStep]) % sizeof(g_BreakDancerSlot);
		rx = frandom(10.0,-10.0,2);
		ry = frandom(10.0,-10.0,2);
		rz = frandom(360.0,0.0,2);
	    MoveDynamicObject( g_BreakDancerSlot[i][BDS_iObject],g_BreakDancerSlot[slot][BDS_fX],g_BreakDancerSlot[slot][BDS_fY],g_BreakDancerSlot[slot][BDS_fZ],speed,rx,ry,rz);
	}
	return 1;
}

stock ResetPlayerPos(playerid,Float:x,Float:y,Float:z) {
    //printf("ResetPlayerPos(%d)",playerid);
    Spieler[playerid][ResetX] = x;
    Spieler[playerid][ResetY] = y;
    Spieler[playerid][ResetZ] = z;
    return 1;
}
stock SetPlayerToShip(playerid) {
	new
	    Float:x,
	    Float:y,
	    Float:z;
	GetDynamicObjectPos(g_Schiff[S_iObject],x,y,z);
	SetPlayerPos(playerid,x,y,z - 0.5);
	return 1;
}


stock AddOnlinePlayer(playerid) {
    new
        String[128];
    format(String,sizeof(String),"INSERT INTO `onlineplayers` (`playername`, `id`) VALUES ('%s', '%d')",GetName(playerid),playerid);
    mysql_oquery( String ,  THREAD_ADDONLINEPLAYER , 0 ,gSQL);
    return 1;
}
stock DeleteOnlinePlayer(playerid) {
    new
        String[100];
    format(String,sizeof(String),"DELETE FROM `onlineplayers` WHERE `playername` = '%s'",GetName(playerid));
    mysql_oquery( String ,  THREAD_DELONLINEPLAYER , 0 ,gSQL);
    return 1;
}
stock ClearOnlinePlayers() {
    mysql_oquery( "TRUNCATE `onlineplayers`" ,  THREAD_DUMMY , 0 ,gSQL);
    return 1;
}
forward Pulse_Banksystem();
public Pulse_Banksystem() {
    mysql_oquery( "SELECT * FROM `bank` WHERE `PushOnlineAn` = 1 OR `PushOnlineVon` = 1" ,  THREAD_BANKSYSTEM , gettime() ,gSQL);
    return 1;
}


stock IsSecurePassword(password[]) {
    new
        numbers,
        len;
    len = strlen(password);
    if( len < 8 ) {
        return 0;
    }
    for(new i = 0 ; i < len ; i++) {
        if( password[i] >= '0' && password[i] <= '9' ) {
            numbers++;
        }
    }
    if( numbers < 2 ) {
        return 0;
    }
    return 1;
}

// credits go to: RyDeR`
stock randomString(strDest[], strLen = 32)
{
    while(strLen--)
        strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}

stock HashPasswords() {
    mysql_oquery("SELECT `Name` FROM `accounts` WHERE `SaltKey` = ''",THREAD_HASHPASSWORDS,INVALID_PLAYER_ID,gSQL);
    return 1;
}

stock UpdateUserPassword(playerid,password[]) {
    new
        sql[220],
        rndstring[33];
    randomString( rndstring );
    format(sql,sizeof(sql),"UPDATE `accounts` SET `Passwort` = SHA2( CONCAT('%s','%s'),256 ) ,`SaltKey` = '%s' WHERE `Name` = '%s'",password,rndstring,rndstring,GetName(playerid));
    mysql_pquery(sql,THREAD_UPDATE_PLAYER_PASSWORD,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock LoadFaction() {
    for(new i ; i < sizeof(g_Faction) ; i++) {
        g_Faction[i][F_iPartner] = -1;
        g_Faction[i][F_iPartnerRequest] = -1;
    }
    mysql_oquery("SELECT * FROM `faction`",THREAD_LOADFACTION,INVALID_PLAYER_ID,gSQL);
    return 1;
}

stock SaveFaction() {
    new
        String[128];
    mysql_oquery("TRUNCATE `faction`",THREAD_SAVEFACTION,INVALID_PLAYER_ID,gSQL);
    for(new i ; i < sizeof(g_Faction) ; i++) {
        if( g_Faction[i][F_iPartner]  != -1 ) {
            format(String,sizeof(String),"INSERT INTO `faction` (`factionid`, `partner`) VALUES (%d, %d)",g_Faction[i][F_iPartner],i);
            mysql_oquery( String ,THREAD_SAVEFACTION,i,gSQL);
        }
    }
    return 1;
}

COMMAND:buendnisanfrage(playerid,params[]) {
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    new
        partner;
    if(sscanf(params,"d",partner)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Buendnisanfrage [Fraktion]");
    }
    if( frak == partner ) {
        return SendClientMessage(playerid, COLOR_RED, "Das geht nicht");
    }
    if( !IsAFightFaction( partner ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Angegebene Fraktion ist keine Gang bzw. Mafia.");
    }
    if( Spieler[playerid][pRank] < 6 ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kann NUR der Leader ausführen");
    }
    if( g_Faction[frak][F_iPartner] != -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Fraktion hat bereits ein Bündnis");
    }
    if( g_Faction[partner][F_iPartner] != -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Angegeben Fraktion hat bereits ein Bündnis");
    }
    new
        frakname[50],
        String[128];
    ReturnFraktionByID(partner,frakname);
    format(String,sizeof(String),"Du hast der %s eine Bündnisanfrage gesendet!",frakname);
    SendClientMessage(playerid,COLOR_YELLOW,String);

    ReturnFraktionByID(frak,frakname);
    format(String,sizeof(String),"Die %s hat euch ein Bündnis angeboten! Bündnis zustimmen mit: /Buendnisannehmen",frakname);
    SendFraktionMessage(partner, COLOR_YELLOW, String);

    g_Faction[frak][F_iPartnerRequest] = partner;
    return 1;
}
COMMAND:buendnisannehmen(playerid,params[]) {
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    new
        partner;
    if(sscanf(params,"d",partner)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Buendnisannehmen [Fraktion]");
    }
    if( !IsAFightFaction( partner ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Angegebene Fraktion ist keine Gang bzw. Mafia.");
    }
    if( Spieler[playerid][pRank] < 6 ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kann der Leader ausführen");
    }
    if( g_Faction[frak][F_iPartner] != -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Fraktion hat bereits ein Bündnis");
    }
    if( g_Faction[partner][F_iPartnerRequest] != frak ) {
        return SendClientMessage(playerid, COLOR_RED, "Die Angegeben Fraktion hat keine Bündnisanfrage offen an deine Gang bzw. Mafia");
    }
    new
        frakname[50],
        frakname2[50],
        String[128];
    ReturnFraktionByID(partner,frakname);
    ReturnFraktionByID(frak,frakname2);

    format(String,sizeof(String),"Die %s und die %s haben offziell ein Bündnis abgeschlossen!",frakname,frakname2);
    SendFraktionMessage(partner, COLOR_GREEN, String);
    SendFraktionMessage(frak, COLOR_GREEN, String);

    g_Faction[frak][F_iPartnerRequest] = -1;
    g_Faction[partner][F_iPartnerRequest] = -1;

    g_Faction[frak][F_iPartner] = partner;
    g_Faction[partner][F_iPartner] = frak;
    return 1;
}
COMMAND:buendnis(playerid,params[]) {
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    new
        partner,
        frakname[50],
        String[128];
    partner = g_Faction[frak][F_iPartner];
    SendClientMessage(playerid,COLOR_GREEN,"======BÜNDNIS-LISTE======");
    if(partner == -1 ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Ihr seid mit niemanden verbündet!");
    }
    else {
        ReturnFraktionByID(partner,frakname);
        format(String,sizeof(String),"Ihr seid mit der %s offiziell verbündet!",frakname);
        SendClientMessage(playerid,COLOR_YELLOW,String);
    }
    return 1;
}

COMMAND:bg(playerid,params[]) {
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    if( isnull(params) ) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Bg [Nachricht]");
    }
    if(g_Faction[frak][F_iPartner] == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Gang bzw Mafia hat kein Bündnis");
    }
    new
        partner,
        frakname[50],
        String[128+36];
    partner = g_Faction[frak][F_iPartner];
    ReturnFraktionByID(frak,frakname);
    format(String,sizeof(String),"[BG](%s,%s):%s",frakname,GetName(playerid),params);
    SendFraktionMessage(frak, COLOR_WHITE, String);
    SendFraktionMessage(partner, COLOR_WHITE, String);
    return 1;
}

COMMAND:buendnisabbrechen(playerid,params[]) {
    new
        frak = GetPlayerFaction(playerid);
    if( !IsAFightFaction( frak ) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Gang bzw. Mafia.");
    }
    if( Spieler[playerid][pRank] < 6 ) {
        return SendClientMessage(playerid, COLOR_RED, "Diese Funktion kann der Leader ausführen");
    }
    if( g_Faction[frak][F_iPartner] == -1 ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Fraktion hat bereits kein Bündnis");
    }
    new
        partner,
        frakname[50],
        frakname2[50],
        String[128];
    partner = g_Faction[frak][F_iPartner];
    ReturnFraktionByID(partner,frakname);
    ReturnFraktionByID(frak,frakname2);

    format(String,sizeof(String),"Die %s hat offziell das Bündnis mit %s beendet!",frakname2,frakname);
    SendFraktionMessage(partner, COLOR_RED, String);
    SendFraktionMessage(frak, COLOR_RED, String);

    g_Faction[frak][F_iPartnerRequest] = -1;
    g_Faction[partner][F_iPartnerRequest] = -1;

    g_Faction[frak][F_iPartner] = -1;
    g_Faction[partner][F_iPartner] = -1;
    return 1;
}

COMMAND:nc(playerid,params[]) {
    if( gPlayerLogged[playerid] == 0 ) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht eingeloggt");
    if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
    if(Spieler[playerid][pLevel] >= 3 && Spieler[playerid][pAdmin] == 0) {
        return SendClientMessage(playerid, COLOR_RED, "Dieser Chat ist ausschließlich für Neulinge ( Bis Level 3 )");
    }
    if( isnull(params) ) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Nc [Nachricht]");
    }
    new
        String[128+32];
    if( Spieler[playerid][pAdmin] > 0 ) {
        format(String,sizeof(String),"* %s %s sagt: %s",GetPlayerAdminRang(playerid), GetName(playerid),params);
    }
    else {
        format(String,sizeof(String),"* Neuling %s (Lvl: %d) sagt: %s",GetName(playerid),Spieler[playerid][pLevel],params);
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pLevel] < 3 || Spieler[i][pAdmin] > 0 ) {
                SendClientMessage(i,COLOR_ORANGE,String);
            }
        }
    }
    return 1;
}

COMMAND:delveh(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid, COLOR_RED, "Du musst in dem Fahrzeug sitzen welches du löschen möchtest.");
    }
    if( aiVehicles[ vehicleid ] != VEH_CAR ) {
        return SendClientMessage(playerid, COLOR_RED, "Dieses Fahrzeug wurde nicht per /Veh erstellt.");
    }
    new
        String[100],
        driver = VehicleDriverID(vehicleid);
    if( IsPlayerConnected(driver) ) {
        RemovePlayerFromVehicle(driver);
        if(driver != playerid ) {
            SendClientMessage(driver,COLOR_RED,"Dein Fahrzeug wurde von einem Teammitglied gelöscht");
        }
    }
    format(String, sizeof(String), "%s %s hat ein Fahrzeug entfernt (CarID: %d)", GetPlayerAdminRang(playerid), GetName(playerid), vehicleid);
    SendAdminMessage(COLOR_YELLOW, String);

    DestroyVehicle(vehicleid);
    DestroyDynamicObject(vSirene[vehicleid]);
    aiVehicles[ vehicleid ] = VEH_INVALID;
    return 1;
}

stock SetRandomPoliceTask(playerid) {
    new
        police = INVALID_PLAYER_ID,
        count,
        r;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 1 ||
                    Spieler[i][pFraktion] == 16) {
                    if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                        count++;
                    }
                }
            }
        }
    }
    //printf("SetRandomPoliceTask(%d) count = %d",playerid,count);
    if(count) {
        r = random(count);
        count = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if(i != playerid ) {
                    if( Spieler[i][pFraktion] == 1 ||
                        Spieler[i][pFraktion] == 16) {
                        if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                            if(count == r ) {
                                police = i;
                                break;
                            }
                            count++;
                        }
                    }
                }
            }
        }
        //
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        SendClientMessage(police,COLOR_ORANGE,"[LEITZENTRALE] Ein Notruf ist eingegangen, fahren Sie dorthin!");
        //format(String,sizeof(String),"Anrufer: %s, meldet: %s.",GetName(playerid,("Text"));
        //SendClientMessage(playerid,COLOR_ORANGE,String);

        format(String,sizeof(String),"[LEITZENTRALE] Polizeibeamter %s wurde in ein Notruf zugeordnet und ist nicht verfügbar!",GetName(police));
        SendFraktionMessage(1, COLOR_RED, String);
        SendFraktionMessage(2, COLOR_RED, String);
        SendFraktionMessage(16, COLOR_RED, String);
        Spieler[police][pDutyTask] = 1;

        KillTimer(pBackupTimer[police]);
        SetPlayerCheckpointEx(police, x, y, z, 5.0, CP_BACKUP);
        pBackupTimer[police] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", police);
        //printf("SetRandomPoliceTask(%d) police = %d",playerid,police);
        return 1;
    }
    return 0;
}

stock SetRandomOAMTTask(playerid) {
    new
        oamt = INVALID_PLAYER_ID,
        count,
        r;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 5) {
                    if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                        count++;
                    }
                }
            }
        }
    }
    //printf("SetRandomPoliceTask(%d) count = %d",playerid,count);
    if(count) {
        r = random(count);
        count = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if(i != playerid ) {
                    if( Spieler[i][pFraktion] == 5) {
                        if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                            if(count == r ) {
                                oamt = i;
                                break;
                            }
                            count++;
                        }
                    }
                }
            }
        }
        //
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        SendClientMessage(oamt,COLOR_ORANGE,"[LEITZENTRALE] Ein Service-Ruf ist eingegangen, fahren Sie dorthin!");
        //format(String,sizeof(String),"Anrufer: %s, meldet: %s.",GetName(playerid,("Text"));
        //SendClientMessage(playerid,COLOR_ORANGE,String);

        format(String,sizeof(String),"[LEITZENTRALE] Ordnungsbeamter %s wurde in einem Service-Ruf zugeordnet und ist nicht verfügbar!",GetName(oamt));
        SendFraktionMessage(5, COLOR_RED, String);
        Spieler[oamt][pDutyTask] = 1;

        KillTimer(pBackupTimer[oamt]);
        SetPlayerCheckpointEx(oamt, x, y, z, 5.0, CP_BACKUP);
        pBackupTimer[oamt] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", oamt);
        //printf("SetRandomPoliceTask(%d) police = %d",playerid,police);
        return 1;
    }
    return 0;
}

stock SetRandomMedicTask(playerid) {
    new
        medic = INVALID_PLAYER_ID,
        count,
        r;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 3) {
                    if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                        count++;
                    }
                }
            }
        }
    }
    if(count) {
        r = random(count);
        count = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if(i != playerid ) {
                    if( Spieler[i][pFraktion] == 3) {
                        if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                            if(count == r ) {
                                medic = i;
                                break;
                            }
                            count++;
                        }
                    }
                }
            }
        }
        //
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        SendClientMessage(medic,COLOR_ORANGE,"[LEITZENTRALE] Ein Notruf ist eingegangen, fahren Sie dorthin!");

        format(String,sizeof(String),"[LEITZENTRALE] Notarzt %s wurde in ein Notruf zugeordnet und ist nicht verfügbar!",GetName(medic));
        SendFraktionMessage(3, COLOR_RED, String);
        Spieler[medic][pDutyTask] = 1;

        KillTimer(pBackupTimer[medic]);
        SetPlayerCheckpointEx(medic, x, y, z, 5.0, CP_BACKUP);
        pBackupTimer[medic] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", medic);
        return 1;
    }
    return 0;
}

COMMAND:ve(playerid,params[]) {
    #pragma unused params
    if( !IsPlayerExecutive(playerid)) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein LSPD/FBI Mitglied.");
    }
    if( Spieler[playerid][pDuty] == 0 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
        return 1;
    }
    new
        String[128];
    if( Spieler[playerid][pDutyTask] == 1 ) {
        format(String,sizeof(String),"[LEITZENTRALE] Polizeibeamter %s ist wieder verfügbar!",GetName(playerid));
        SendFraktionMessage(1, COLOR_GREEN, String);
        SendFraktionMessage(2, COLOR_GREEN, String);
        SendFraktionMessage(16, COLOR_GREEN, String);
        Spieler[playerid][pDutyTask] = 0;
    }
    else {
        format(String,sizeof(String),"[LEITZENTRALE] Polizeibeamter %s meldet sich als nicht verfügbar!",GetName(playerid));
        SendFraktionMessage(1, COLOR_ORANGE, String);
        SendFraktionMessage(2, COLOR_ORANGE, String);
        SendFraktionMessage(16, COLOR_ORANGE, String);
        Spieler[playerid][pDutyTask] = 1;
    }
    return 1;
}

COMMAND:ov(playerid,params[]) {
    #pragma unused params
    if (Spieler[playerid][pFraktion] != 5) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter.");
    }
    if( Spieler[playerid][pDuty] == 0 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
        return 1;
    }
    new String[128];
    if( Spieler[playerid][pDutyTask] == 1 ) {
        format(String,sizeof(String),"[LEITZENTRALE] Ordnungsbeamter %s ist wieder verfügbar!",GetName(playerid));
        SendFraktionMessage(5, COLOR_GREEN, String);
        Spieler[playerid][pDutyTask] = 0;
    }
    else {
        format(String,sizeof(String),"[LEITZENTRALE] Ordnungsbeamter %s meldet sich als nicht verfügbar!",GetName(playerid));
        SendFraktionMessage(5, COLOR_ORANGE, String);
        Spieler[playerid][pDutyTask] = 1;
    }
    return 1;
}

COMMAND:gotohaus(playerid,params[] ){
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        index,
        hausid;
    if(sscanf(params,"d",hausid)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Gotohaus [Hausnummer]");
    }
    if( hausid < 1 || hausid > 10000 ) {
        return SendClientMessage(playerid,COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Gotohaus [ID] ( 1 - 10000 )");
    }
    for(new i ; i < MAX_HOUSES ; i++) {
        if( Haus[i][hID] == hausid ) {
            index = i;
            break;
        }
    }
    if( index == -1 ) {
        return SendClientMessage(playerid,COLOR_RED,"Kein Haus mit der genannten ID gefunden");
    }
    new
        String[128];
    format(String,sizeof(String),"%s %s hat sich zu Hausnummer: %d teleportiert.", GetPlayerAdminRang(playerid), GetName(playerid), hausid);
    SendAdminMessage(COLOR_BLUE,String);
    SetPlayerPos(playerid, Haus[index][EnterX], Haus[index][EnterY], Haus[index][EnterZ] + 0.5 );
    Streamer_Update(playerid);
    return 1;
}

COMMAND:spielerinfo(playerid,params[]) {
    new
        Spielername[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",Spielername)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Spielerinfo [Spielername]");
    }
    mysql_real_escape_string(Spielername,Spielername);
    if(strcmp(Spielername,params)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Spielerinfo [Spielername (Keine Sonderzeichen)]");
    }
    new
        String[140];
    format(String,sizeof(String),"SELECT `Name`,DATE_FORMAT(`LastSeen`,'%%e.%%m.%%Y %%H:%%i'),`Banned` FROM `accounts` WHERE `Name` = '%s'",Spielername);
    mysql_pquery(String,THREAD_SPIELERINFO,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:gebannt(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 1)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        Spielername[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",Spielername)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Gebannt [Spielername]");
    }
    mysql_real_escape_string(Spielername,Spielername);
    if(strcmp(Spielername,params)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Gebannt [Spielername (Keine Sonderzeichen)]");
    }
    new
        String[200];
    format(String,sizeof(String),"SELECT `Name`,`Banned`,`TimeBan`,FROM_UNIXTIME(`TimeBan`,'%%d.%%m.%%Y %%H:%%i'),`GebanntVon`,`BanGrund` FROM `accounts` WHERE `Name` = '%s' LIMIT 1",Spielername);
    mysql_pquery(String,THREAD_GEBANNT,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:mv(playerid,params[]) {
    #pragma unused params
    if( Spieler[playerid][pFraktion] != 3) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist kein Sanitäter.");
    }
    if( Spieler[playerid][pDuty] == 0 ) {
        SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Dienst.");
        return 1;
    }
    new
        String[128];
    if( Spieler[playerid][pDutyTask] == 1 ) {
        format(String,sizeof(String),"[LEITZENTRALE] Notarzt %s ist wieder verfügbar!",GetName(playerid));
        SendFraktionMessage(3, COLOR_GREEN, String);
        Spieler[playerid][pDutyTask] = 0;
    }
    else {
        format(String,sizeof(String),"[LEITZENTRALE] Notarzt %s meldet sich als nicht verfügbar!",GetName(playerid));
        SendFraktionMessage(3, COLOR_ORANGE, String);
        Spieler[playerid][pDutyTask] = 1;
    }
    return 1;
}

stock InitZentralMeldung() {
    new Text:Textdraw0;
    Textdraw0 = TextDrawCreate(108.000000, 288.000000, "~y~ZENTRALE~w~: verfuegbar");
    TextDrawAlignment(Textdraw0, 2);
    TextDrawBackgroundColor(Textdraw0, 255);
    TextDrawFont(Textdraw0, 1);
    TextDrawLetterSize(Textdraw0, 0.250000, 1.600000);
    TextDrawColor(Textdraw0, -1);
    TextDrawSetOutline(Textdraw0, 0);
    TextDrawSetProportional(Textdraw0, 1);
    TextDrawSetShadow(Textdraw0, 1);
    TextDrawUseBox(Textdraw0, 1);
    TextDrawBoxColor(Textdraw0, 85);
    TextDrawTextSize(Textdraw0, 195.000000, 195.000000);
    g_Zentralmeldung[Z_tdVerfuegbar] = Textdraw0;

    Textdraw0 = TextDrawCreate(108.000000, 288.000000, "~y~ZENTRALE~r~: nicht verfuegbar");
    TextDrawAlignment(Textdraw0, 2);
    TextDrawBackgroundColor(Textdraw0, 255);
    TextDrawFont(Textdraw0, 1);
    TextDrawLetterSize(Textdraw0, 0.250000, 1.600000);
    TextDrawColor(Textdraw0, -1);
    TextDrawSetOutline(Textdraw0, 0);
    TextDrawSetProportional(Textdraw0, 1);
    TextDrawSetShadow(Textdraw0, 1);
    TextDrawUseBox(Textdraw0, 1);
    TextDrawBoxColor(Textdraw0, 85);
    TextDrawTextSize(Textdraw0, 195.000000, 195.000000);
    g_Zentralmeldung[Z_tdNichtVerfuegbar] = Textdraw0;
    return 1;
}

COMMAND:gebeclub(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 3)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        giveid,
        option,
        name[MAX_PLAYER_NAME],
        Spielername[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]d",Spielername,option)) {
        SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Gebeclub [Spielername] [Option]");
        SendClientMessage(playerid, COLOR_ORANGE, "1 = 1 Monat Club");
        SendClientMessage(playerid, COLOR_ORANGE, "2 = 3 Monate Club");
        SendClientMessage(playerid, COLOR_ORANGE, "3 = 6 Monate Club");
        SendClientMessage(playerid, COLOR_ORANGE, "4 = Life-Time Club");
        return 1;
    }
    if( !( 1 <= option <= 4) ) {
        SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Gebeclub [Spielername] [Option]");
        SendClientMessage(playerid, COLOR_ORANGE, "1 = 1 Monat Club");
        SendClientMessage(playerid, COLOR_ORANGE, "2 = 3 Monate Club");
        SendClientMessage(playerid, COLOR_ORANGE, "3 = 6 Monate Club");
        SendClientMessage(playerid, COLOR_ORANGE, "4 = Life-Time Club");
        return 1;
    }
    mysql_real_escape_string(Spielername,name);
    if(strcmp(Spielername,name)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Gebeclub [Spielername (Keine Sonderzeichen)] [Option]");
    }
    Spielername = name;
    sscanf(Spielername,"u",giveid);
    if( IsPlayerConnected(giveid) ) {
        new
            year,
            month,
            day,

            unix,
            m,
            d,
            h,
            minute,
            sec,
            timestr[16],
            String[200];
        getdate(year,month,day);
        switch(option) {
            case 1: {
                unix = gettime() + MonthTimes[ month - 1][0 + IsLeapYear(year)]*24*60*60;
            }
            case 2: {
                new
                    days = 0;
                for(new i = 0 ; i < 3 ; i++) {
                    days += MonthTimes[ month - 1 + i][0 + IsLeapYear(year)];
                }
                unix = gettime() + days*24*60*60;
            }
            case 3: {
                new
                    days = 0;
                for(new i = 0 ; i < 6 ; i++) {
                    days += MonthTimes[ month - 1 + i][0 + IsLeapYear(year)];
                }
                unix = gettime() + days*24*60*60;
            }
            case 4: {
                if( IsLeapYear(year) ) {
                    unix = gettime() + 1825*24*60*60;
                }
                else {
                    unix = gettime() + 1825*24*60*60;
                }
            }
        }
        TimestampToDate( unix , year,m,d,h,minute,sec,1,0);
        format(timestr, sizeof(timestr), "%d/%d/%d", d,m,year);
        format(String,sizeof(String),"Deine Clubmitgliedschaft wurde freigeschaltet und läuft am %s ab.",timestr);
        SendClientMessage(giveid,COLOR_YELLOW,String);
        format(String,sizeof(String),"Du hast die Clubmitgliedschaft für %s bis zum %s (Option %d) freigeschaltet.",GetName(giveid),timestr,option);
        SendClientMessage(playerid,COLOR_YELLOW,String);
        Spieler[giveid][pDonateRank] = 1;
        Spieler[giveid][pLevel] += 1;
        Spieler[giveid][pExp] += 10;
        Spieler[giveid][pCash] += 200000;
        format(String,sizeof(String),"%s %s hat die Clubmitgliedschaft für %s bis zum %s (Option %d) freigeschaltet.", GetPlayerAdminRang(playerid), GetName(playerid), GetName(giveid), timestr, option);
        ClubLog(String);
    }
    else {
        new
            String[70];
        PlayerSQLExtra(playerid,params);
        format(String,sizeof(String),"SELECT `Name` FROM `accounts` WHERE `Name` = '%s' LIMIT 1",Spielername);
        mysql_pquery(String,THREAD_GEBECLUB,playerid,gSQL,MySQLThreadOwner);

    }
    return 1;
}
stock InitWantedKillZones() {
    g_WantedKillZone[0] = CreateDynamicRectangle(-2973.0061,-621.8953,-1157.3384,1511.1029);
    g_WantedKillZone[1] = CreateDynamicRectangle(-7.6341,-2813.4910,2831.9990,-601.8278);
    g_WantedKillZone[2] = CreateDynamicRectangle(834.0367,617.2219,2823.6106,2833.2183);

    return 1;
}

stock IsPlayerInWantedKillZone(playerid) {
    if( IsPlayerInDynamicArea(playerid, g_WantedKillZone[0] ) ||
        IsPlayerInDynamicArea(playerid, g_WantedKillZone[1] ) ||
        IsPlayerInDynamicArea(playerid, g_WantedKillZone[2] ) ) {
        return 1;
    }
    return 0;
}
COMMAND:waffensperre(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        giveid,
        Spielername[MAX_PLAYER_NAME];
    if(sscanf(params,"s[24]",Spielername)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Waffensperre [Spielername]");
    }
    mysql_real_escape_string(Spielername,Spielername);
    if(strcmp(Spielername,params)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Waffensperre [Spielername (Keine Sonderzeichen)]");
    }
    new
        String[128];
    sscanf(Spielername,"u",giveid);
    if( IsPlayerConnected(giveid) ) {
        new
            query[256];
        format(String,sizeof(String),"Du hast Spieler %s eine Waffensperre für 2 Tage vergeben",GetName(giveid));
        SendClientMessage(playerid,COLOR_RED,String);
        format(String,sizeof(String),"%s %s hat dir eine Waffensperre für 2 Tage erteilt", GetPlayerAdminRang(playerid), GetName(playerid));
        SendClientMessage(giveid,COLOR_RED,String);
        Spieler[giveid][pWaffenSperre] = gettime() + 2*24*60*60;

        format(query,sizeof(query),"%s erhielt von %s %s eine Waffensperre, Dauer: 2 Tage", GetName(giveid), GetPlayerAdminRang(playerid), GetName(playerid));
        SendUCPAktenEintrag( playerid,GetName(playerid) , GetName(giveid) , query );
    }
    else {
        format(String,sizeof(String),"SELECT `Name` FROM `accounts` WHERE `Name` = '%s' LIMIT 1",Spielername);
        mysql_pquery(String,THREAD_WAFFENSPERRE,playerid,gSQL,MySQLThreadOwner);
    }

    format(String,sizeof(String),"%s %s hat Spieler %s eine Waffensperre erteilt, Dauer: 2 Tage", GetPlayerAdminRang(playerid), GetName(playerid),GetName(giveid));
    AdminLog(String);

    return 1;
}
stock HasWeaponBlock(playerid) {
    if( gettime() <= Spieler[playerid][pWaffenSperre]) {
        return 1;
    }
    return 0;
}
stock SendWeaponBlockInfo(playerid) {
    if( Spieler[playerid][pWaffenSperre] > 1 && Spieler[playerid][pWaffenSperre] > gettime() ) {
        new
            year,
            m,
            d,
            h,
            minute,
            sec,
            String[128];
        TimestampToDate( Spieler[playerid][pWaffenSperre] , year,m,d,h,minute,sec,1,0);
        SendClientMessage(playerid,COLOR_RED,"Du hast aufgrund eines Regelverstoßes eine Waffensperre erteilt bekommen!");
        format(String,sizeof(String),"Ablauf: %02d.%02d.%d - %d:%d",d,m,year,h,minute);
        SendClientMessage(playerid,COLOR_RED,String);
        return 1;
    }
    return 0;
}
COMMAND:tankshop(playerid,params[])
{
    #pragma unused params
    new t = IsPlayerAtTanke(playerid);
    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tanke!");
    if(strcmp(Tanke[t][tBesitzer], "Niemand", true) == 0)return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat keinen Besitzer.");
    new
        sTitle[64],
        sDialog[256];
    for(new i ; i < sizeof(g_SnackShop); i++) {
        format(sDialog,sizeof(sDialog),"%s%s - $%d (+%d HP)\n",sDialog,g_SnackShop[i][SS_sTitle],g_SnackShop[i][SS_iPrice],g_SnackShop[i][SS_iHP]);
    }
    format(sDialog, sizeof(sDialog), "%sKanister - $2.500 (10 Liter)", sDialog);
    format(sTitle,sizeof(sTitle),"%s - Tankstellenshop",Tanke[t][tName]);
    ShowPlayerDialog(playerid,DIALOG_SNACKSHOP,DIALOG_STYLE_LIST,sTitle,sDialog,"Kaufen","Abbruch");
    return 1;
}

COMMAND:ergeben(playerid,params[]) {
	#pragma unused params
	if( !IsPlayerInRangeOfPoint(playerid,3.0,LSPD_INTERIOR_SURRENDER_POINT))
	    return SendClientMessage(playerid, COLOR_RED, "Du kannst dich hier nicht ergeben");
	else
	if( Spieler[playerid][pJailed] )
		return SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht ergeben, wenn du schon im Knast bist!");
	else
	if( Spieler[playerid][pWanteds] < 1 )
	    return SendClientMessage(playerid, COLOR_RED, "Du hast keine Wanteds.");

	new
	    String[128];
	format(String,sizeof(String)," >> Straftäter %s hat sich der Polizei gestellt. <<",GetName(playerid));
	SendFraktionMessage(1, COLOR_RED, String);
	SendFraktionMessage(2, COLOR_RED, String);
	SendFraktionMessage(16, COLOR_RED, String);
	SendFraktionMessage(18, COLOR_RED, String);

    Spieler[playerid][pJailed] = 1;
    Spieler[playerid][pTot] = 0;
    Spieler[playerid][pJailTime] = 150 * Spieler[playerid][pWanteds];
    Spieler[playerid][pTotTime] = 0;
    Spieler[playerid][pTotX] = 0.0;
    Spieler[playerid][pTotY] = 0.0;
    Spieler[playerid][pTotZ] = 0.0;
    Spieler[playerid][pWanteds] = 0;
    Cuffed[playerid] = 0;
    SpawnPlayerEx(playerid);

    format(String, sizeof(String), "Du hast dich ergeben! Pro Wanted werden dir 150 Sekunden Haftstrafe angerechnet. (Summe: %d)", Spieler[playerid][pJailTime]);
    SendClientMessage(playerid, COLOR_ORANGE, String);
    return 1;
}

COMMAND:wpreis(playerid,params[]) {
    if (Spieler[playerid][pFraktion] != 17) return SendClientMessage(playerid, COLOR_RED, "Dieser Befehl ist nur für Wheelmen möglich.");

    new giveid, modus = 0, pruefung[16];

    if (sscanf(params,"us[38]",giveid,pruefung) || isnull(pruefung)) {
        SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /Wpreis [ID] [Nummer]");
        SendClientMessage(playerid, COLOR_RED, "1. Chauffeur - 8.000$");
        SendClientMessage(playerid, COLOR_RED, "2. Personenschutz - 25.000$");
        SendClientMessage(playerid, COLOR_RED, "3. Befreiung von Entführung - 20.000$");
        SendClientMessage(playerid, COLOR_RED, "4. Befreiung von Festnahmen - 25.000$");
        SendClientMessage(playerid, COLOR_RED, "5. Alcatraz Gefangenenbefreiung - 50.000$");
        SendClientMessage(playerid, COLOR_RED, "6. GangJail Gefangenenbefreiung - 15.000$");

        return 1;
    }

    if (!strcmp(pruefung, "1", true))
        modus = 1;
    else if (!strcmp(pruefung, "2", true))
        modus = 2;
    else if (!strcmp(pruefung, "3", true))
        modus = 3;
    else if (!strcmp(pruefung, "4", true))
        modus = 4;
    else if (!strcmp(pruefung, "5", true))
        modus = 5;
    else if (!strcmp(pruefung, "6", true))
        modus = 6;
    else if (!modus)
        cmd_wpreis(playerid, "");

    if (!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (giveid == playerid) return SendClientMessage(playerid, COLOR_RED, "Diese Aktion ist nicht möglich.");

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (!IsPlayerInRangeOfPoint(giveid, 5.0, x, y, z)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner Nähe.");

    new String[128];
    format(String, sizeof(String), "{FFFFFF}Wheelman: %s\nBetrag: $%s\nDienstleistung: %s", GetName(playerid), AddDelimiters(g_WheelmenD[modus][W_iPrice]), g_WheelmenD[modus][W_sName]);
    ShowPlayerDialog(giveid, DIALOG_WPREIS, DIALOG_STYLE_MSGBOX, "Rechnung", String, "Annehmen", "Ablehnen");
    Spieler[giveid][pFLehrer] = playerid;
    Spieler[giveid][pFModus] = modus;
    format(String, sizeof(String), "* Du hast %s ein Angebot unterbreitet. Leistung: %s", GetName(giveid), g_WheelmenD[modus][W_sName]);
    SendClientMessage(playerid, COLOR_YELLOW, String);
    return 1;
}

COMMAND:fpreis(playerid,params[]) {
    if( Spieler[playerid][pFraktion] != 8 ) {
        return SendClientMessage(playerid, COLOR_RED, "Dieser Befehl ist nur für Fahrlehrer");
    }
    new
        giveid,
        modus = 0,
        pruefung[16];
    if(sscanf(params,"us[16]",giveid,pruefung)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /fpreis [ID] [Prüfung]");
    }
    if( isnull(pruefung)) {
        return SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /fpreis [ID] [Prüfung]");
    }
    else if( !strcmp(pruefung,"autoschein",true)) {
        modus = 1;
        if(Spieler[giveid][pCarLic]!=0)
        {
            SendClientMessage(playerid,COLOR_RED,"Der Spieler besitzt bereits diesen Schein.");
        }
        if(Spieler[playerid][punixFSperre]!=0)
        {
            return SendClientMessage(playerid,COLOR_RED,"Der Spieler hat eine gültige Scheinsperre auf dem Schein.");
        }
    }
    else if( !strcmp(pruefung,"motorradschein",true)) {
        modus = 2;
        if(Spieler[giveid][pMotoLic]!=0)
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt bereits diesen Schein");
        }
        if(Spieler[playerid][punixMotoSperre]!=0)
        {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat eine gültige Scheinsperre auf dem Schein");
        }
    }
    else if( !strcmp(pruefung,"flugschein",true)) {
        modus = 3;
        if(Spieler[giveid][pFlyLic]!=0)
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt bereits diesen Schein");
        }
        if(Spieler[playerid][punixFlSperre]!=0)
        {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat eine gültige Scheinsperre auf dem Schein");
        }
    }
    else if( !strcmp(pruefung,"bootsschein",true)) {
        modus = 4;
        if(Spieler[giveid][pBoatLic]!=0)
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt bereits diesen Schein");
        }
    }
    else if( !strcmp(pruefung,"lkwschein",true)) {
        modus = 5;
        if(Spieler[giveid][pLKWLic]!=0)
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt bereits diesen Schein");
        }
        if(Spieler[playerid][punixLKWSperre]!=0)
        {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat eine gültige Scheinsperre auf dem Schein");
        }
    }
    else if( !strcmp(pruefung,"awaffenschein",true)) {
        modus = 6;
        if(Spieler[giveid][pGunLic]!=0)
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt bereits diesen Schein");
        }
        if(Spieler[playerid][punixGunSperre]!=0)
        {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat eine gültige Scheinsperre auf dem Schein");
        }
    }
    else if( !strcmp(pruefung,"bwaffenschein",true)) {
        modus = 7;
        if(Spieler[giveid][pGunLicB]!=0)
        {
            SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler besitzt bereits diesen Schein");
        }
        if(Spieler[playerid][punixGunSperre]!=0)
        {
            return SendClientMessage(playerid,COLOR_YELLOW,"Der Spieler hat eine gültige Scheinsperre auf dem Schein");
        }
    }
    if(!modus) {
        SendClientMessage(playerid, COLOR_RED, "* Benutze:"COLOR_HEX_GREENA" /fpreis [ID] [Prüfung]");
        SendClientMessage(playerid, COLOR_RED, "Autoschein - 8.000$");
        SendClientMessage(playerid, COLOR_RED, "Motorradschein - 11.000$");
        SendClientMessage(playerid, COLOR_RED, "Flugschein - 50.000$");
        SendClientMessage(playerid, COLOR_RED, "Bootsschein - 17.000$");
        SendClientMessage(playerid, COLOR_RED, "Lkwschein - 22.000$");
        SendClientMessage(playerid, COLOR_RED, "Awaffenschein - 65.000$");
        SendClientMessage(playerid, COLOR_RED, "Bwaffenschein - 85.000$");
        return 1;
    }
    if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if( giveid == playerid ) return SendClientMessage(playerid, COLOR_RED, "Diese Aktion ist nicht möglich.");
    new
        Float:x,
        Float:y,
        Float:z;
    GetPlayerPos(playerid,x,y,z);
    if( !IsPlayerInRangeOfPoint(giveid,5.0,x,y,z)) {
        return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht in deiner nähe");
    }
    /*
    printf("FP_iVar %d",_:g_FahrPruefung[modus][FP_iVar]);
    printf("Spieler %d", Spieler[giveid][ g_FahrPruefung[modus][FP_iVar] ]);
    if( Spieler[giveid][ g_FahrPruefung[modus][FP_iVar] ] ) {
        return SendClientMessage(playerid,COLOR_RED,"Der Spieler besitzt bereits die Lizenz");
    }
    */
    new
        String[128];
    format(String,sizeof(String),"{FFFFFF}Fahrlehrer: %s\nBetrag: $%s\nPrüfung: %s",GetName(playerid), AddDelimiters(g_FahrPruefung[modus][FP_iPrice]),g_FahrPruefung[modus][FP_sName]);
    ShowPlayerDialog(giveid,DIALOG_FPREIS,DIALOG_STYLE_MSGBOX,"Fahrprüfung",String,"Annehmen","Ablehnen");
    Spieler[giveid][pFLehrer] = playerid;
    Spieler[giveid][pFModus] = modus;
    format(String,sizeof(String),"* Du hast %s ein Angebot zur Prüfung %s unterbreitet",GetName(giveid),g_FahrPruefung[modus][FP_sName]);
    SendClientMessage(playerid,COLOR_YELLOW,String);
    return 1;
}
COMMAND:kfzversicherung(playerid,params[]) {
    if( !IsPlayerInRangeOfPoint(playerid,3.0,2309.3276,-8.2968,26.7422)) {
        return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keine KFZ-Versicherung abschließen.");
    }
    if( Spieler[playerid][pKFZVersicherung] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine KFZ-Versicherung läuft noch.");
    }
    if( Spieler[playerid][pCash] < 10000 ) {
        return SendClientMessage(playerid, COLOR_RED, "Die KFZ-Versicherung kostet $10.000. Du besitzt leider nicht so viel Geld.");
    }

    SendClientMessage(playerid,COLOR_YELLOW,"Glückwunsch! Du hast eine KFZ-Versicherung für 7 Tage für $10.000 abgeschlossen.");
    GivePlayerCash(playerid,-10000);
    Kasse[Staat] += 10000;
    Spieler[playerid][pKFZVersicherung] = gettime() + 7*24*60*60;
    return 1;
}

COMMAND:rechtsschutz(playerid,params[]) {
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, CITYHALL_INTERIOR_DESK2)) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keine Rechtsschutzversicherung abschließen.");
    
    if( Spieler[playerid][pExperte] > gettime() ) {
        return SendClientMessage(playerid, COLOR_RED, "Deine Rechtsschutz-Versicherung läuft noch");
    }

    ShowPlayerDialog(playerid, DIALOG_RECHTSSCHUTZ, DIALOG_STYLE_MSGBOX, "Rechtsschutz-Versicherung", "Eine Rechtsschutzversicherung deckt im Falle eines Rechtsstreits entstandene Kosten ab.\n\nDie entstandenen Prozesskosten werden bis zu 40% von der Rechtsschutzversicherung gedeckt.\nDie Kosten für einen Rechtsanwalt, welcher die Durchsetzung der rechtlichen Interesse vertritt,\nwerden bis zu 65% von der Rechtsschutzversicherung gedeckt.\n\nVersichert für: 62 Tage\nPreis: $87.000", "Abschließen", "Ablehnen");
    return 1;
}

stock InitSchilder() {
	new
	    modelid,
	    Float:Z,
	    Float:X,
	    Float:Y;
	// TODO: Peek schilder map file?
    /*LV und SF Schilder
	CreateDynamicObject(1324, -1753.73096, -619.88928, 17.60860, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -1768.81104, -619.88928, 17.60860, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, -2001.11462, 145.46530, 28.14950, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -2011.87463, 145.46530, 28.14950, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -2350.88452, -75.34860, 35.76590, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, -2350.88452, -65.20860, 35.78590, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, -2711.35205, 2.09120, 4.80350, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, -2701.61206, 2.09120, 4.78350, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -1564.04590, 482.17050, 7.65400, 0.10000, 0.00000, -130.00000);
	CreateDynamicObject(1324, -1576.31860, 490.28519, 7.65400, 0.10000, 0.00000, 60.00000);
	CreateDynamicObject(1324, 1798.60059, 679.34583, 16.93130, 0.00000, 0.00000, -97.30000);
	CreateDynamicObject(1324, 1769.11023, 684.26971, 17.29130, 0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1324, 1917.70923, 638.44830, 11.27390, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1917.70923, 628.00830, 11.27390, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1917.09058, 768.03497, 11.27390, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1917.09058, 778.45502, 11.27390, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 2152.63867, 692.86243, 11.27390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 2142.19873, 692.86243, 11.27390, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, 2077.63306, 1393.56421, 11.27390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 2037.17310, 1393.56421, 11.27390, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, 1812.34973, 1993.14111, 5.13390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 1782.38965, 1993.14111, 5.13390, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, 2732.60010, 1662.03870, 7.11390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 2702.70020, 1662.03870, 7.11390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 1927.11963, 2543.57422, 7.11390, 0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1324, 1927.11963, 7.11390, 7.11390, 0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1324, 1934.44995, 2514.51904, 7.11390, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1324, 2037.72705, 2649.45410, 11.29370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 2037.72705, 2639.03418, 11.29370, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 2027.75183, 2736.95947, 11.27110, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 2027.75183, 2747.41943, 11.25110, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1597.07214, 2728.07520, 11.23400, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1597.07214, 2738.41528, 11.23400, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1527.04846, 2584.65723, 11.24970, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1527.12854, 2594.97729, 11.24970, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1327.00073, 2594.97803, 11.27760, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1327.00073, 2584.61792, 11.27760, 0.00000, 0.00000, 180.00000);*/
	//LS Schilder und Autobahn
    CreateDynamicObject(1324, 2498.3999, -2303, 25.2, 0, 0, 134);
    CreateDynamicObject(1324, 2506.3999, -2295.8, 25.1, 0, 0, 314);
    CreateDynamicObject(1324, 1967, -2094.5, 14, 0, 0, 270);
    CreateDynamicObject(1324, 1956.3, -2094.7, 14, 0, 0, 89.5);
    CreateDynamicObject(1324, 2027.2, -1927.1, 14, 0, 0, 0);
    CreateDynamicObject(1324, 2026.7, -1942.6, 14, 0, 0, 178);
    CreateDynamicObject(1324, 2320, -1653.5, 14.6, 0, 0, 0);
    CreateDynamicObject(1324, 2320.2, -1664.4, 14.6, 0, 0, 182);
    CreateDynamicObject(1324, 2033.1, -1747, 14, 0, 0, 0);
    CreateDynamicObject(1324, 2032.5, -1757.5, 14, 0, 0, 180);
    CreateDynamicObject(1324, 2112.8999, -1295.5, 24.5, 0, 0, 0);
    CreateDynamicObject(1324, 2113, -1306.2, 24.5, 0, 0, 182);
    CreateDynamicObject(1324, 1773.4, -1727.1, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1773, -1737.4, 14, 0, 0, 180);
    CreateDynamicObject(1324, 1370.8, -1727, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1370.8, -1737.5, 14, 0, 0, 178);
    CreateDynamicObject(1324, 1524.6, -1954.2, 20.5, 0, 0, 86);
    CreateDynamicObject(1324, 1535.3, -1954, 20.3, 0, 0, 272);
    CreateDynamicObject(1324, 1156.3, -1846.9, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1156, -1857.5, 14, 0, 0, 178);
    CreateDynamicObject(1324, 1100.1, -1707, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1099.9, -1717.5, 14, 0, 0, 180);
    CreateDynamicObject(1324, 1043.7, -2302, 13.6, 0, 0, 118);
    CreateDynamicObject(1324, 1066.3, -2289.7, 13.6, 0, 0, 298);
    CreateDynamicObject(1324, 655.29999, -1730.4, 14.4, 0, 0, 350);
    CreateDynamicObject(1324, 648.70001, -1755.2, 13.9, 0, 0, 166);
    CreateDynamicObject(1324, 546.29999, -1508.9, 15, 0, 0, 272);
    CreateDynamicObject(1324, 524.29999, -1508.9, 15, 0, 0, 90);
    CreateDynamicObject(1324, 514.79999, -1255.2, 16.7, 0, 0, 38);
    CreateDynamicObject(1324, 526.5, -1272.1, 16.8, 0, 0, 216);
    CreateDynamicObject(1324, 1090.1, -1577.5, 14, 0, 0, 180);
    CreateDynamicObject(1324, 1090.3, -1567.1, 14, 0, 0, 2);
    CreateDynamicObject(1324, 1013.6, -1390.1, 13.8, 0, 0, 0);
    CreateDynamicObject(1324, 1013.5, -1411.1, 13.7, 0, 0, 180);
    CreateDynamicObject(1324, 1337.4, -1374.9, 14.1, 0, 0, 90);
    CreateDynamicObject(1324, 1362.9, -1375.1, 14.1, 0, 0, 270);
    CreateDynamicObject(1324, 1373.8, -1058.3, 27.3, 0, 0, 266);
    CreateDynamicObject(1324, 1347.9, -1056.4, 27.3, 0, 0, 84);
    CreateDynamicObject(1324, 1258, -721.59998, 94.6, 0, 0, 24);
    CreateDynamicObject(1324, 1261.2, -730.59998, 94.7, 0, 0, 202);
    CreateDynamicObject(1324, 1125.5, -940, 43.4, 0, 0, 0);
    CreateDynamicObject(1324, 1126.8, -961, 43.2, 0, 0, 184);
    CreateDynamicObject(1324, 1141.1, -1033.9, 32.5, 0, 0, 0);
    CreateDynamicObject(1324, 1140.7, -1044.7, 32.4, 0, 0, 178);
    CreateDynamicObject(1324, 1000, -1135.4, 24.3, 0, 0, 0);
    CreateDynamicObject(1324, 998.79999, -1154.8, 24.3, 0, 0, 182);
    CreateDynamicObject(1324, 791.79999, -1370.4, 14, 0, 0, 88);
    CreateDynamicObject(1324, 802.70001, -1370.7, 14, 0, 0, 272);
    CreateDynamicObject(1324, 2902.2, -856.79999, 11.5, 0, 0, 268);
    CreateDynamicObject(1324, 2866, -856.40002, 11.6, 0, 0, 88);
    CreateDynamicObject(1323, 1480.6, -967.70001, 37.1, 0, 0, 152);
    CreateDynamicObject(1323, 1717.5, -692, 46.3, 0, 0, 264);
    CreateDynamicObject(1323, 1692, -688.20001, 46.3, 0, 0, 80);
    CreateDynamicObject(1323, 1594.1, -1760.7, 28.3, 0, 0, 102);
    CreateDynamicObject(1323, 1624.6, -1756.2, 28.4, 0, 0, 280);
    CreateDynamicObject(1323, 1963.8, -1492.6, 4, 0, 0, 0);
    CreateDynamicObject(1323, 1963.7, -1522.6, 4, 0, 0, 182);
    //Verkehrsberuhigte Zone
    CreateDynamicObject(8548, 1558.15564, -1737.48230, 13.75410,   0.00000, 0.00000, 265.49109);
    CreateDynamicObject(8548, 1558.15564, -1726.94690, 13.75410,   0.00000, 0.00000, 85.52088);
    CreateDynamicObject(8548, 1434.65601, -1662.11084, 13.75410,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(8548, 1424.29236, -1662.36926, 13.75410,   0.00000, 0.00000, -178.00000);
    CreateDynamicObject(8548, 1447.63989, -1597.48877, 13.75410,   0.00000, 0.00000, 268.51483);
    CreateDynamicObject(8548, 1447.63989, -1587.06335, 13.75410,   0.00000, 0.00000, 85.34580);
    CreateDynamicObject(8548, 1543.63818, -1597.68958, 13.75410,   0.00000, 0.00000, 272.20981);
    CreateDynamicObject(8548, 1543.63818, -1586.82422, 13.75410,   0.00000, 0.00000, 85.25610);
    CreateDynamicObject(8548, 1418.56360, -1726.93066, 13.68501,   0.00000, 0.00000, 86.50762);
	//CreateDynamicObject(8548, 1418.56360, -1737.53503, 13.68500,   0.00000, 0.00000, 264.23343);

    for(new i , j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT) ; i < j ; i++) {
        if( IsValidDynamicObject(i) ) {
            modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID);
            if( modelid == 1324 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{FF0000}Geschwindigkeit:{FFA500}\n80 km/h",0xFFFFFFFF,X,Y,Z + 1.5,42.0, .testlos = 1);
            }
            else if( modelid == 1323 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{FF0000}Geschwindigkeit:{FFA500}\n130 km/h",0xFFFFFFFF,X,Y,Z + 1.5,45.0, .testlos = 1);
            }
            else if( modelid == 8548 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{0077FF}VERKEHRSBERUHIGTE ZONE\n{FF0000}Geschwindigkeit:{FFA500}\n40 km/h",0xFFFFFFFF,X,Y,Z + 1.5,42.0, .testlos = 1);
            }
            else if( modelid == 1350 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{FFFFFE}An dieser Ampel\n{FFFFFE}bei {FF0000}ROT{FFFFFE} halten!\nGilt von 15.00 bis 22.00 Uhr",0xFFFFFFFF,X,Y,Z + 1.5,20.0, .testlos = 1);
            }
        }
    }
    return 1;
}
stock IsPlayerAtParkautomat(playerid)
{
    for(new a=0;a<g_iParkscheinAutomat;a++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, g_ParkscheinAutomat[a][PA_fX], g_ParkscheinAutomat[a][PA_fY], g_ParkscheinAutomat[a][PA_fZ]))
        {
            return a;
        }
    }
    return 999;
}

stock InitParkscheibe() {
	new
	    modelid,
	    Float:Z,
	    Float:X,
	    Float:Y;
	// TODO: Peek parkscheiben map file?
    CreateDynamicObject(963, 1351.64575, -1270.84008, 13.41868, 90.00000, 0.00000, 0.00000); //Hauptammu Parkscheinautomat
	CreateDynamicObject(963, 1445.02282, -1772.52527, 13.57012, 90.00000, 90.00000, 0.00000); // Cityhall (Stadthalle) Parkscheinautomat
	CreateDynamicObject(963, 1429.53638, -1755.35925, 13.56855, 90.00000,   0.00000, 0.00000); // Cityhall (Stadthalle) Parkscheinautomat
	CreateDynamicObject(963, 929.452576, -1589.62305, 13.64268, 90.00000, 0.00000, 0.00000); // LSPD Parkscheinautomat
	for(new i , j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT) ; i < j ; i++) {
	    if( IsValidDynamicObject(i) ) {
	        modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID);
	        if( modelid == 963 ) {
	            if(g_iParkscheinAutomat >= sizeof(g_ParkscheinAutomat)) continue;
	            GetDynamicObjectPos(i,X,Y,Z);
	            CreateDynamic3DTextLabel("{FF0000}- PARKSCHEIN-AUTOMAT -{FFA500}\nBefehl: /Parkschein",0xFFFFFFFF,X,Y,Z + 1.2,35.0);
                g_ParkscheinAutomat[g_iParkscheinAutomat][PA_fX] = X;
                g_ParkscheinAutomat[g_iParkscheinAutomat][PA_fY] = Y;
                g_ParkscheinAutomat[g_iParkscheinAutomat][PA_fZ] = Z;
                g_iParkscheinAutomat++;

            }
        }
    }
    return 1;
}

COMMAND:parkschein(playerid,params[]) {
    #pragma unused params
    new automat = IsPlayerAtParkautomat(playerid);
    if(automat == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Parkschein Automat.");
    if(!PlayerHaveCar[playerid][PlayerKey[playerid]]) SendClientMessage(playerid, COLOR_RED, "Auf dem ausgewählten Schlüssel ist kein Fahrzeug.");
    new
        sInfo[512];
    sInfo = "{3333FF}STAATLICHER PARKSCHEINAUTOMAT\n\n\
        {FFFFFF}Ein Parkschein kostet 300$.\n\
        Damit haben Sie die Berechtigung für 3 Stunden Ihr Fahrzeug\n\
        auf den öffentlichen Parkplätzen der Stadthalle und am Hauptammunation abzustellen.\n\n\
        Fahrzeuge die auf den öffentlichen Parkplätzen der Stadthalle oder am Hauptammunation ohne\n\
        gültigem Parkschein abgestellt werden, erhalten ein Bußgeld in Höhe von 3,000$.\n\n\
        HINWEIS:\n\
        Wenn du dich ausloggst, erlischt die Gültigkeit von deinem Parkschein.";
    ShowPlayerDialog(playerid,DIALOG_PARKSCHEIN,DIALOG_STYLE_MSGBOX,"Parkschein Automat",sInfo,"Kaufen","Abbrechen");
    return 1;
}

COMMAND:parkscheinkontrolle(playerid,params[]) {
    #pragma unused params
    if( Spieler[playerid][pFraktion] != 1 &&
        Spieler[playerid][pFraktion] != 5 &&
        Spieler[playerid][pFraktion] != 16 ) {
        SendClientMessage(playerid, COLOR_RED, "Dieser Befehl ist nur für das Ordnungsamt und Polizisten möglich.");
        return 1;
    }
    new vehicleid = GetClosestVehicle(playerid,4.0);
    if( vehicleid == INVALID_VEHICLE_ID ) {
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht in der Nähe eines Fahrzeuges.");
        return 1;
    }

    new besitzer, slot, String[128];
    SendClientMessage(playerid,COLOR_BLUE,"=== PARKSCHEIN-KONTROLLE ===");
    besitzer = GetCarOwner(vehicleid);

    if( IsPlayerConnected(besitzer)) {
        slot = GetCarOwnerSlot(besitzer, vehicleid);
        format(String,sizeof(String),"Fahrzeug: %s", CarName[GetVehicleModel(vehicleid) - 400]);
        SendClientMessage(playerid,COLOR_WHITE,String);
        format(String,sizeof(String),"Fahrzeughalter: %s", GetName(besitzer) );
        SendClientMessage(playerid,COLOR_WHITE,String);
        if( HasVehicleLicence( besitzer,slot ) ) {
            format(String,sizeof(String),"Kennzeichen: {00FF00}%s", PlayerCar[besitzer][slot][CarNumberplate] );
        }
        else {
            format(String,sizeof(String),"Kennzeichen: {FF0000}Nicht zugelassen" );
        }
        SendClientMessage(playerid,COLOR_WHITE,String);
        if( g_Parkschein[vehicleid] > gettime() ) {
            format(String,sizeof(String),"Parkschein: {00FF00}Vorhanden", PlayerCar[besitzer][slot][CarNumberplate] );
        }
        else {
            format(String,sizeof(String),"Parkschein: {FF0000}Nicht vorhanden" );
        }
        SendClientMessage(playerid,COLOR_WHITE,String);
    }
    return 1;
}

COMMAND:strafzettel(playerid,params[]) {
    #pragma unused params
    if( Spieler[playerid][pFraktion] != 1 &&
        Spieler[playerid][pFraktion] != 5 &&
        Spieler[playerid][pFraktion] != 16 ) {
        SendClientMessage(playerid, COLOR_RED, "Dieser Befehl ist nur für das Ordnungsamt und Polizisten möglich");
        return 1;
    }
    new
        vehicleid = GetClosestVehicle(playerid,4.0);
    if( vehicleid == INVALID_VEHICLE_ID ) {
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht in der nähe eines Fahrzeuges");
        return 1;
    }
    new
        besitzer;
    besitzer = GetCarOwner(vehicleid);
    if( IsPlayerConnected(besitzer)) {
        new
            String[128];
        if( g_Parkschein[vehicleid] > gettime() ) {
            return SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat noch einen gültigen Parkschein");
        }
        format(String,sizeof(String),"Bußgeld wurde an Fahrzeughalter %s ausgestellt, wegen Parken auf Halteverbot.",GetName(besitzer));
        SendFraktionMessage(1, COLOR_YELLOW, String);
        SendFraktionMessage(16, COLOR_YELLOW, String);
        SendFraktionMessage(5, COLOR_YELLOW, String);
        SendClientMessage(playerid,COLOR_YELLOW, "* Strafzettel wurde ausgestellt");
        format(String,sizeof(String),"[BUßGELD] Sie haben ein Bußgeld in Höhe von 2.000$ von Beamten %s erhalten!",GetName(playerid));
        SendClientMessage(besitzer,COLOR_RED,String);
        format(String,sizeof(String),"Ihr Fahrzeug (%s) steht auf Halteverbot.", CarName[ GetVehicleModel(vehicleid) - 400]);
        SendClientMessage(besitzer,COLOR_RED,String);
        Spieler[besitzer][pBank] -= 2000;
        Kasse[Oamt] += 2000;
    }
    else {
        SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug hat keinen Besitzer");
    }
    return 1;
}

COMMAND:parkstrafe(playerid,params[]) {
    #pragma unused params
    if( Spieler[playerid][pFraktion] != 1 &&
        Spieler[playerid][pFraktion] != 5 &&
        Spieler[playerid][pFraktion] != 16 ) {
        SendClientMessage(playerid, COLOR_RED, "Dieser Befehl ist nur für das Ordnungsamt und Polizisten möglich");
        return 1;
    }
    new
        vehicleid = GetClosestVehicle(playerid,4.0);
    if( vehicleid == INVALID_VEHICLE_ID ) {
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht in der nähe eines Fahrzeuges");
        return 1;
    }
    new
        besitzer;
    besitzer = GetCarOwner(vehicleid);
    if( IsPlayerConnected(besitzer)) {
        new
            String[128];
        if( g_Parkschein[vehicleid] > gettime() ) {
            return SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat noch einen gültigen Parkschein");
        }
        format(String,sizeof(String),"Bußgeld wurde an Fahrzeughalter %s ausgestellt, wegen Parken ohne Parkschein.",GetName(besitzer));
        SendFraktionMessage(1, COLOR_YELLOW, String);
        SendFraktionMessage(16, COLOR_YELLOW, String);
        SendFraktionMessage(5, COLOR_YELLOW, String);
        SendClientMessage(playerid,COLOR_YELLOW, "* Parkstrafe wurde verhängt");
        format(String,sizeof(String),"[BUßGELD] Sie haben ein Bußgeld in Höhe von 3.000$ von Beamten %s erhalten!",GetName(playerid));
        SendClientMessage(besitzer,COLOR_RED,String);
        format(String,sizeof(String),"Ihr Fahrzeug (%s) war ohne gültigem Parkschein an der Stadthalle abgestellt.", CarName[ GetVehicleModel(vehicleid) - 400]);
        SendClientMessage(besitzer,COLOR_RED,String);
        Spieler[besitzer][pBank] -= 3000;
        Kasse[Oamt] += 3000;
    }
    else {
        SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug hat keinen Besitzer");
    }
    return 1;
}
// Now use GetWeaponNameExEx
stock GetWeaponNameEx(weaponid, weapon[], len = sizeof(weapon))
{
    switch (weaponid)
    {
        case 18:
        {
            return weapon[0] = 0, strcat(weapon, "Molotov Cocktail", len), true;
        }
        case 44:
        {
            return weapon[0] = 0, strcat(weapon, "Thermal Goggles", len), true;
        }
        case 45:
        {
            return weapon[0] = 0, strcat(weapon, "Night Vision Goggles", len), true;
        }
        default:
        {
            return GetWeaponName(weaponid, weapon, len);
        }
    }
    return false;
}

COMMAND:delallvehs(playerid,params[]) {
    #pragma unused params
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        String[128],
        c = 0;
    for(new i = 0 ; i < MAX_VEHICLES ; i++) {
        if( aiVehicles[i] == VEH_CAR ) {
            DestroyVehicle(i);
            aiVehicles[i] = VEH_INVALID;
            c++;
        }
    }
    format(String,sizeof(String),"%s %s hat alle /VEH Fahrzeuge entfernt (Anzahl: %d)", GetPlayerAdminRang(playerid), GetName(playerid),c);
    SendAdminMessage(COLOR_ORANGE,String);
    return 1;
}

COMMAND:hausmenu(playerid,params[]) {
    new h = GetPlayerHouse(playerid);
    if( h == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Haus!");
    /*
    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    */
    if( Spieler[playerid][pPlayerHouse] != h ) {
        return SendClientMessage(playerid,COLOR_RED,"Dieses Haus gehört nicht dir!");
    }
    if( !IsPlayerInHouse(playerid, Haus[h][hID]) ) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in deinem Haus");
    }
    /*
    if( h != GetPlayerHouse(playerid) ) {
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe deines Hauses.");
    }
    */
    ShowPlayerDialog(playerid,DIALOG_HAUSMENU,DIALOG_STYLE_LIST,"Hausmenu","\
    Haustuer AUF/ZU\n\
    Mietstatus: AN/AUS\n\
    Mieter anzeigen\n\
    Mieteranzahl ändern\n\
    Mietpreis ändern\n\
    Möbelkatalog\n\
    Möbel kaufen\n\
    Möbel bearbeiten\n\
    Möbel verkaufen\n","Weiter","Abbruch");
    return 1;
}


stock GZ_GetBestKiller(fraktion) {
    new
        tmp_kills = -1,
        tmp_playerid = INVALID_PLAYER_ID;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pFraktion] == fraktion ) {
                if( Spieler[i][pKillsGangFightSession] > tmp_kills ) {
                    tmp_kills = Spieler[i][pKillsGangFightSession];
                    tmp_playerid = i;
                }
            }
        }
    }
    return tmp_playerid;
}

forward PlayerLoginTimeout(playerid);
public PlayerLoginTimeout(playerid) {
    SendClientMessage(playerid,COLOR_RED,"Deine Anmeldungszeit (30 Sekunden) ist abgelaufen, deshalb wurdest du gekickt vom Server!");
    KickDelay(playerid);
    return 1;
}

forward PlayerRegsperreKick(playerid);
public PlayerRegsperreKick(playerid) {
    SendClientMessage(playerid,COLOR_RED,"Die Registration ist aus aktuellem Anlass deaktiviert, deshalb wurdest du gekickt vom Server!");
    KickDelay(playerid);
    return 1;
}

stock IsValidVorname(string[]) {
    new len = strlen(string);
    new forbiddenChars[64] = "0123456789!\"§$%&/()=?]}[{-:,;_#+*><|~@'";

    if (len < 3)
        return false;

    for (new i; i < len; i++)
        for (new j; j < strlen(forbiddenChars); j++)
            if (string[i] == forbiddenChars[j])
                return false;

    return true;
}

stock IsValidEmail(const email[]) //By Jan "DracoBlue" Schütze - Edited by Jeffry.
{
    new len=strlen(email);
    new cstate=0;
    for(new i=0;i<len;i++)
    {
        if ((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z') || (email[i]>='a' && email[i]<='z')  || (email[i]>='0' && email[i]<='9')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
        {
        }
        else
        {
            if ((cstate==0) &&(email[i]=='@'))
            {
                cstate=1;
            }
            else
            {
                return false;
            }
        }
    }
    if (cstate<1)
    {
        return false;
    }
    if (len<6)
    {
        return false;
    }
    if ((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.'))
    {
        return true;
    }
    return false;
}

stock GetHausMoebelIndex(itemid) {
    for(new i ; i < sizeof(g_HausMoebel); i++) {
        if( g_HausMoebel[i][HM_iID] == itemid ) {
            return i;
        }
    }
    return -1;
}
stock GetHausMoebelItemTitle(itemid) {
    new
        String[64] = "Fehler";
    for(new i ; i < sizeof(g_HausMoebel); i++) {
        if( g_HausMoebel[i][HM_iID] == itemid ) {
            String[0] = '\0';
            strcat(String,g_HausMoebel[i][HM_sTitel],sizeof(String));
            break;
        }
    }
    return String;
}

stock GetHausMoebelItemPrice(itemid) {
    for(new i ; i < sizeof(g_HausMoebel); i++) {
        if( g_HausMoebel[i][HM_iID] == itemid ) {
            return g_HausMoebel[i][HM_iPrice];
        }
    }
    return 0;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
stock Hausmoebel_ResetHausMoebel(haus,itemid) {
    g_HausMoebelObjekt[haus][itemid][HMO_iMoebelID] = 0;
    if( IsValidDynamicObject(g_HausMoebelObjekt[haus][itemid][HMO_iObjectID])) {
        DestroyDynamicObject(g_HausMoebelObjekt[haus][itemid][HMO_iObjectID]);
    }
    g_HausMoebelObjekt[haus][itemid][HMO_iObjectID] = INVALID_OBJECT_ID;
    // g_HausMoebelObjekt[haus][itemid][HMO_iHouseID] = 0;
    g_HausMoebelObjekt[haus][itemid][HMO_iID] = 0;
    return 1;
}
stock Hausmoebel_Init() {
    for(new i = 0 ; i < sizeof(g_HausMoebelObjekt);i++) {
        for(new j = 0 ; j < MAX_HAUS_MOEBEL ; j++) {
            Hausmoebel_ResetHausMoebel(i,j);
        }
    }
    mysql_oquery("SELECT * FROM `hausmoebel`",THREAD_LOADHAUSMOEBEL,INVALID_PLAYER_ID,gSQL);
    return 1;
}
stock GetMoebelKatalogMenuTitle(id) {
    new
        str[32] = "Error";
    for(new i = 0 ; i < sizeof(g_HausMoebelKategorie); i++) {
        if( g_HausMoebelKategorie[i][HMK_iID] == id ) {
            str[0] = '\0';
            strcat(str,g_HausMoebelKategorie[i][HMK_sTitel],sizeof(str));
            break;
        }
    }
    return str;
}
stock GetHausMoebelFreeSlot(hausid) { // hausid = index
    for(new i ; i < sizeof(g_HausMoebelObjekt[]);i++) {
        if( g_HausMoebelObjekt[hausid][i][HMO_iObjectID] == INVALID_OBJECT_ID ) {
            return i;
        }
    }
    return -1;
}
stock GetMoebelKategorieItem(kategorieid,item) {
    new
        c;
    for(new i ; i < sizeof(g_HausMoebel);i++) {
        if(g_HausMoebel[i][HM_iHMKID] == kategorieid) {
            if( c == item ) {
                return g_HausMoebel[i][HM_iID];
            }
            c++;
        }
    }
    return 0;
}

stock GetMoebelMoebelID(playerid,dbid) {
    new
        id,
        h;
    h = Spieler[playerid][pPlayerHouse];
    for(new i = 0 ; i < MAX_HAUS_MOEBEL ; i++) {
        id = g_HausMoebelObjekt[h][i][HMO_iID];
        if( dbid == id ) {
            return g_HausMoebelObjekt[h][i][HMO_iMoebelID];
        }
    }
    return 0;
}
stock IsPlayerInHouse(playerid,houseid) {
    new
        interior = GetPlayerInterior(playerid),
        vw = GetPlayerVirtualWorld(playerid),

        house_index,
        interior_id,
        interior_index;
    house_index = GetHouseIndexByID(houseid);
    interior_id = Haus[house_index][HouseInteriorID];
    interior_index = GetHouseInteriorIndexByID(interior_id);
    /*
    printf("interior %d",interior);
    printf("vw %d",vw);
    printf("house_index %d",house_index);
    printf("interior_id %d",interior_id);
    printf("interior_index %d",interior_index);
    */
    if( interior == g_HouseInterior[interior_index][HI_iInterior] &&
        vw == house_index &&
        IsPlayerInRangeOfPoint(playerid,25.0,g_HouseInterior[interior_index][HI_fExitX],g_HouseInterior[interior_index][HI_fExitY],g_HouseInterior[interior_index][HI_fExitZ])
        ) {
        return 1;
    }
    return 0;
}
/*
COMMAND:inmyhouse(playerid,params[]) {
    new
        house = Spieler[playerid][pPlayerHouse];
    if(house != 999) {
        if( IsPlayerInHouse(playerid, GetHouseIDByIndex(house) )) {
            SendClientMessage(playerid,COLOR_GREEN,"Jap! Dein Haus!");
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Nein,nicht dein Haus!");
        }
    }
    return 1;
}
COMMAND:myvw(playerid,params[]) {
    new
        vw;
    sscanf(params,"d",vw);
    SetPlayerVirtualWorld(playerid,vw);
    SendClientMessage(playerid,COLOR_YELLOW,"Ok");
    return 1;
}
*/
stock ShowPlayerHausMoebel(playerid,type = 0 ) {
    new
        h,
        String[1024],
        Header[44],
        dialogid = 0;
    h = Spieler[playerid][pPlayerHouse];
    // printf("ShowPlayerHausMoebel(%d,%d) h = %d",playerid,type,h);
    if(!type) {
        new
            item,
            price;
        Header = "Möbelübersicht - Verkaufen";
        dialogid = DIALOG_HAUSMENU_MOEBEL_SELL;
        for(new i = 0 ; i < MAX_HAUS_MOEBEL ; i++) {
            if( g_HausMoebelObjekt[h][i][HMO_iID] != 0 ) {
                item = g_HausMoebelObjekt[h][i][HMO_iMoebelID];
                price = GetHausMoebelItemPrice(item) / 2;
                format(String,sizeof(String),"%s%d) %s - +$%s\n",String,i,GetHausMoebelItemTitle(item), AddDelimiters(price));
            }
        }
        if( isnull(String)) {
            ShowPlayerDialog(playerid,DIALOG_HAUSMENU_EMPTY,DIALOG_STYLE_MSGBOX,Header,"Keine Möbel zum Verkauf vorhanden","Zurück","");
        }
        else {
            ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Weiter","Zurück");
        }
        return 1;
    }
    else if(type == 1) {
    }
    else if(type == 2 ) { // Kauf Menu
        Header = "Möbelübersicht - Kaufen";
        dialogid = DIALOG_HAUSMENU_MOEBEL_BUY_KAT;
        for(new i = 0 ; i < sizeof(g_HausMoebelKategorie) ; i++) {
            format(String,sizeof(String),"%s%s\n",String,g_HausMoebelKategorie[i][HMK_sTitel]);
        }
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Weiter","Zurück");
        return 1;
    }
    else if(type == 3 ) { // Verkaufen bestätigen
        new
            item,
            moebel_index,
            index,
            price;
        index = Spieler[playerid][pTempMoebelID];
        item = g_HausMoebelObjekt[h][index][HMO_iMoebelID];
        moebel_index = GetHausMoebelIndex(item);
        /*
        printf("item %d",item);
        printf("index %d",index);
        printf("moebel_index %d",moebel_index);
        */
        price = g_HausMoebel[moebel_index][HM_iPrice];

        Header = "Möbelübersicht - Verkauf bestätigen";
        dialogid = DIALOG_HAUSMENU_MOEBEL_SELL_CONFIRM;
        format(String,sizeof(String),"Willst du folgendes Möbelstück wirklich verkaufen?\nName: %s\nNeupreis: $%s\nVerkaufspreis: $%s\n",
            g_HausMoebel[moebel_index][HM_sTitel],
            AddDelimiters(price),
           AddDelimiters(price / 2));
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_MSGBOX,Header,String,"Verkaufen","Zurück");
        return 1;
    }
    else if(type == 4 ) { // Bearbeitungs Auswahl

    }
    else if(type == 5 ) { // Kauf Menu Item
        new
            kategorie = Spieler[playerid][pTempMoebelKategorie];
        format(Header,sizeof(Header),"Hausmöbel Kaufen - %s",GetMoebelKatalogMenuTitle(kategorie) );
        dialogid = DIALOG_HAUSMENU_MOEBEL_BUY_ITEM;
        for(new i = 0 ; i < sizeof(g_HausMoebel) ; i++) {
            if( g_HausMoebel[i][HM_iHMKID] == kategorie ) {
                format(String,sizeof(String),"%s%s - $%s\n",String,g_HausMoebel[i][HM_sTitel],AddDelimiters(g_HausMoebel[i][HM_iPrice]));
            }
        }
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Kaufen","Zurück");
        return 1;
    }
    else if(type == 6 ) { // Kauf Bestätigen
        new
            item = Spieler[playerid][pTempMoebelID];
        format(Header,sizeof(Header),"Hausmöbel Kaufen - %s",GetHausMoebelItemTitle(item) );
        dialogid = DIALOG_HAUSMENU_MOEBEL_BUY_ITEM_CONFIRM;
        format(String,sizeof(String),"Möchtest du wirklich folgendes Item für dein Haus kaufen?\nBezeichnung: %s\nPreis: $%s",GetHausMoebelItemTitle(item), AddDelimiters(GetHausMoebelItemPrice(item)));
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_MSGBOX,Header,String,"Kaufen","Zurück");
        return 1;
    }
    else if(type == 7 ) { // Bearbeiten Übersicht
        new
            item;
        Header = "Möbelübersicht - Bearbeiten";
        dialogid = DIALOG_HAUSMENU_MOEBEL_EDIT;
        for(new i = 0 ; i < MAX_HAUS_MOEBEL ; i++) {
            if( g_HausMoebelObjekt[h][i][HMO_iID] != 0 ) {
                item = g_HausMoebelObjekt[h][i][HMO_iMoebelID];
                format(String,sizeof(String),"%s%d) %s\n",String,i,GetHausMoebelItemTitle(item));
            }
        }
        if( isnull(String)) {
            ShowPlayerDialog(playerid,DIALOG_HAUSMENU_EMPTY,DIALOG_STYLE_MSGBOX,Header,"Keine Möbel zum Bearbeiten vorhanden","Zurück","");
        }
        else {
            ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Weiter","Zurück");
        }
        return 1;
    }
    ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Kaufen","Zurück");
    return 1;
}
stock ShowHausMoebelKatalog(playerid,menu = 0) {
    new
        String[512];
    if( !menu ) {
        for(new i = 0 ; i < sizeof(g_HausMoebelKategorie) ; i++) {
            format(String,sizeof(String),"%s%s\n",String,g_HausMoebelKategorie[i][HMK_sTitel]);
        }
        ShowPlayerDialog(playerid,DIALOG_HAUSMOEBEL_KATALOG,DIALOG_STYLE_LIST,"Hausmöbel Katalog",String,"Weiter","Zurück");
    }
    else {
        new
            Header[64];
        format(Header,sizeof(Header),"Möbelkatalog - %s", GetMoebelKatalogMenuTitle(menu) );
        for(new i = 0 ; i < sizeof(g_HausMoebel) ; i++) {
            if( g_HausMoebel[i][HM_iHMKID] == menu ) {
                format(String,sizeof(String),"%s%s - $%s\n",String,g_HausMoebel[i][HM_sTitel], AddDelimiters(g_HausMoebel[i][HM_iPrice]));
            }
        }
        ShowPlayerDialog(playerid,DIALOG_HAUSMOEBEL_KATALOG_EX,DIALOG_STYLE_LIST,"Hausmöbel Katalog",String,"Zurück","");
    }
    return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz) {
    if( Spieler[playerid][pEditObjectMode] == 1 ) { // Bearbeitung
        new
            String[180],
            slot,
            h = Spieler[playerid][pPlayerHouse];
        slot = Streamer_GetIntData(STREAMER_TYPE_OBJECT,objectid,E_STREAMER_EXTRA_ID);
        if(response == EDIT_RESPONSE_FINAL) {
            if(slot == -1) {
                printf("Etwas ist falsch gelaufen!");
                printf("h = %d slot %d",h,slot);
            }
            format(String,sizeof(String),"UPDATE `hausmoebel` SET \
                `x` = '%.3f',\
                `y` = '%.3f',\
                `z` = '%.3f',\
                `rx` = '%.3f',\
                `ry` = '%.3f',\
                `rz` = '%.3f' \
                WHERE `id` = %d",x,y,z,rx,ry,rz,g_HausMoebelObjekt[h][slot][HMO_iID]);
            mysql_oquery( String , THREAD_UPDATEHAUSMOEBEL , Hausmoebel_Compress(h,slot) ,gSQL);
            //print(String);
            Spieler[playerid][pTempMoebelKategorie] = 0;
            Spieler[playerid][pTempMoebelID] = 0;
            Spieler[playerid][pEditObjectMode] = 0;
            // Fix weil Position nicht gespeichert wird
            SetDynamicObjectPos(objectid,x,y,z);
            SetDynamicObjectRot(objectid,rx,ry,rz);
            PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
        }
        else if(response == EDIT_RESPONSE_CANCEL ) {
            new vw = GetPlayerVirtualWorld(playerid);
            SetPlayerVirtualWorld(playerid,0);
            Streamer_Update(playerid);
            SendClientMessage(playerid,COLOR_RED,"Die Änderungen am Möbelstück werden nicht gespeichert");
            Spieler[playerid][pTempMoebelKategorie] = 0;
            Spieler[playerid][pTempMoebelID] = 0;
            Spieler[playerid][pEditObjectMode] = 0;
            PlayerPlaySound(playerid,1055,0.0,0.0,0.0);
            SetPlayerVirtualWorld(playerid,vw);
            Streamer_Update(playerid);
        }
    }
    return 1;
}
stock Hausmoebel_Compress(house,slot) {
    new var = (house << 16 | slot);
    return var;
}
stock Hausmoebel_Uncompress(var,&house,&slot) {
    slot = (var & 0xFFFF);
    house = (( var >> 16 ) & 0xFFFF);
    return 1;
}
// - - - - - - - - - - - - - - - - - - - - -

CMD:fparken(playerid)
{
    if(!(Spieler[playerid][pFraktion] == 5))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter.");
    new
        vehicleid = GetPlayerVehicleID(playerid);
    if (GetVehicleModel( vehicleid ) == 525)
    {
        if(IsTrailerAttachedToVehicle(vehicleid))
        {
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
            {
                new trailerid = GetVehicleTrailer(vehicleid);
                new fraktion = GetVehicleFraktion(trailerid);
                new modelid = GetVehicleModel(trailerid);
                if( fraktion ) {
                    new Float:vX, Float:vY, Float:vZ,Float:vAngle;
                    GetVehiclePos(trailerid, vX, vY, vZ);
                    GetVehicleZAngle(trailerid,vAngle);
                    g_FraktionAbschleppen[trailerid][FA_fX] = vX;
                    g_FraktionAbschleppen[trailerid][FA_fY] = vY;
                    g_FraktionAbschleppen[trailerid][FA_fZ] = vZ;
                    g_FraktionAbschleppen[trailerid][FA_fFace] = vAngle;
                    g_FraktionAbschleppen[trailerid][FA_bAbgeschleppt] = true;
                    new str[128];
                    format(str, sizeof(str), "[OAMT] Euer %s wurde aufgrund einer Ordnungswidrigkeit durch Ordnungsbeamten %s abgeschleppt!", CarName[modelid-400],GetName(playerid));
                    SendFraktionMessage(fraktion, COLOR_RED, str);
                    Spieler[playerid][pPayCheck] += 700;
                    GameTextForPlayer(playerid, "~g~+$700", 2000, 1);
                    new
                        frakname[50];
                    ReturnFraktionByID( fraktion , frakname );
                    format(str,sizeof(str),"Ordnungsbeamter %s hat das Fahrzeug von der Fraktion %s abgeschleppt!",GetName(playerid),frakname);
                    SendFraktionMessage(5, COLOR_RED, str);

                    format(str,sizeof(str),"[OAMT] Ordnungsbeamter: %s , Fahrzeughalter: %s [%d]",GetName(playerid),frakname,fraktion);
                    OamtLog(str);
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_RED, "Der Wagen ist kein Fraktionsfahrzeug.");
                    return 1;
                }
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du hast kein Fahrzeug am Haken.");
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist in keinem Ordnungsamt-Fahrzeug.");
        return 1;
    }
    return 1;
}
CMD:fmparkkralle(playerid)
{
    if(Spieler[playerid][pFraktion] != 5)
    {
        SendClientMessage(playerid, COLOR_RED, "Du bist kein Ordnungsbeamter.");
    }
    else
    {
        for(new v;v<MAX_VEHICLES;v++)
        {
            if(IsABike(GetVehicleModel(v)))
            {
                new Float:vx,Float:vy,Float:vz;
                GetVehiclePos(v,vx,vy,vz);
                if(IsPlayerInRangeOfPoint(playerid,4,vx,vy,vz))
                {
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        new trailerid = v;
                        new fraktion = GetVehicleFraktion(trailerid);
                        new modelid = GetVehicleModel(trailerid);
                        if(fraktion)
                        {
                            if(g_FraktionAbschleppen[trailerid][FA_bAbgeschleppt] == true)return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug ist bereits abgeschleppt!");
                            new Float:vX, Float:vY, Float:vZ,Float:vAngle;
                            GetVehiclePos(trailerid, vX, vY, vZ);
                            GetVehicleZAngle(trailerid,vAngle);
                            g_FraktionAbschleppen[trailerid][FA_fX] = vX;
                            g_FraktionAbschleppen[trailerid][FA_fY] = vY;
                            g_FraktionAbschleppen[trailerid][FA_fZ] = vZ;
                            g_FraktionAbschleppen[trailerid][FA_fFace] = vAngle;
                            g_FraktionAbschleppen[trailerid][FA_bAbgeschleppt] = true;
                            new str[128];
                            format(str, sizeof(str), "[OAMT] Euer %s wurde aufgrund einer Ordnungswidrigkeit durch Ordnungsbeamten %s abgeschleppt!", CarName[modelid-400],GetName(playerid));
                            SendFraktionMessage(fraktion, COLOR_RED, str);
                            Spieler[playerid][pPayCheck] += 700;
                            GameTextForPlayer(playerid, "~g~+$700", 2000, 1);
                            new frakname[50];
                            ReturnFraktionByID( fraktion , frakname );
                            format(str,sizeof(str),"Ordnungsbeamter %s hat das Fahrzeug von der Fraktion %s abgeschleppt!",GetName(playerid),frakname);
                            SendFraktionMessage(5, COLOR_RED, str);
                            format(str,sizeof(str),"[OAMT] Ordnungsbeamter: %s , Fahrzeughalter: %s [%d]",GetName(playerid),frakname,fraktion);
                            OamtLog(str);
                            break;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Motorrad ist kein Fraktionsfahrzeug.");
                            break;
                        }
                    }
                }
            }
        }
    }
    return 1;
}
/*
COMMAND:respawnveh(playerid,params[]) {
    new
        vehicleid = GetPlayerVehicleID(playerid);
    SetVehicleToRespawn(vehicleid);
    return 1;
}

COMMAND:distanceveh(playerid,params[]) {
    new
        String[128],
        vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid) {
        format(String,sizeof(String),"Vehicle Distance %dm",g_VehicleDistance[vehicleid]);
        SendClientMessage(playerid,COLOR_BLUE,String);
    }
    return 1;
}
*/
forward SetVehicleZAngleEx(vehicleid,Float:angle);
public SetVehicleZAngleEx(vehicleid,Float:angle) {
    SetVehicleZAngle(vehicleid, angle);
    return 1;
}


// - - - - - - - - - -
stock IsPlayerTaxiCustomer(driverid,playerid) {
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        if( Spieler[driverid][pTaxiKunden][i] == playerid ) {
            return 1;
        }
    }
    return 0;
}

stock RemovePlayerFromTaxi(driverid,playerid) {
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        if( Spieler[driverid][pTaxiKunden][i] == playerid ) {
            Spieler[driverid][pTaxiKunden][i] = INVALID_PLAYER_ID;
            Spieler[driverid][pTaxiKundenStart][i] = 0;
            TextDrawHideForPlayer(playerid,Spieler[driverid][tdTaxi]);
            //RemovePlayerFromVehicle(playerid);
            return 1;
        }
    }
    return 0;
}
stock ClearPlayerTaxiSlots(playerid, cancel = 0) {
    if(cancel) {
        for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
            if( Spieler[playerid][pTaxiKunden][i] != INVALID_PLAYER_ID ) {
                RemovePlayerFromVehicle(Spieler[playerid][pTaxiKunden][i]);
            }
            TextDrawHideForPlayer( Spieler[playerid][pTaxiKunden][i] ,Spieler[playerid][tdTaxi]);
            Spieler[playerid][pTaxiKunden][i] = INVALID_PLAYER_ID;
            Spieler[playerid][pTaxiKundenStart][i] = 0;
        }
    }
    else {
        for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
            TextDrawHideForPlayer( Spieler[playerid][pTaxiKunden][i] ,Spieler[playerid][tdTaxi]);
            Spieler[playerid][pTaxiKunden][i] = INVALID_PLAYER_ID;
            Spieler[playerid][pTaxiKundenStart][i] = 0;
        }
    }
    return 1;
}

stock HasPlayerTaxiCustomers(playerid) {
    if( !IsPlayerNPC(playerid)) {
        for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
            if( Spieler[playerid][pTaxiKunden][i] != INVALID_PLAYER_ID ) {
                return 1;
            }
        }
    }
    return 0;
}
stock HasPlayerFreeTaxiSlot(playerid) {
    if( !IsPlayerNPC(playerid)) {
        for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
            if( Spieler[playerid][pTaxiKunden][i] == INVALID_PLAYER_ID ) {
                return 1;
            }
        }
    }
    return 0;
}

stock AddPlayerTaxiSlot(playerid,targetid) {
    //printf("AddPlayerTaxiSlot(%s,%s) %d %d",GetName(playerid),GetName(targetid),playerid,targetid);
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        if( Spieler[playerid][pTaxiKunden][i] == INVALID_PLAYER_ID ) {
            new
                vehicleid = GetPlayerVehicleID(playerid);
            Spieler[playerid][pTaxiKunden][i] = targetid;
            Spieler[playerid][pTaxiKundenStart][i] = g_VehicleDistance[vehicleid];
            TextDrawShowForPlayer(targetid,Spieler[playerid][tdTaxi]);
            TextDrawShowForPlayer(playerid,Spieler[playerid][tdTaxi]);
            //printf("AddPlayerTaxiSlot(%s,%s) %d %d slot %d",GetName(playerid),GetName(targetid),playerid,targetid,i);
            return 1;
        }
    }
    return 0;
}


stock GetTaxiDriverCustomerSlot(driver,playerid) {
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        if( Spieler[driver][pTaxiKunden][i] == playerid ) {
            return i;
        }
    }
    return -1;
}
stock GetPlayerTaxiDistance(driver,playerid) {
    new
        slot,
        vehicleid,
        distance;
    vehicleid = Spieler[driver][pTaxiVehicle];
    slot = GetTaxiDriverCustomerSlot(driver,playerid);
    if(slot != -1 ) {
        distance =  (g_VehicleDistance[vehicleid] - Spieler[driver][pTaxiKundenStart][slot]);
    }
    return distance;
}

stock GetPlayerTaxiCosts(driver,playerid) {
    new
        slot,
        vehicleid,
        distance,
        costs;
    vehicleid = Spieler[driver][pTaxiVehicle];
    slot = GetTaxiDriverCustomerSlot(driver,playerid);
    if(slot != -1 ) {
        distance =  (g_VehicleDistance[vehicleid] - Spieler[driver][pTaxiKundenStart][slot]);
        costs = (distance / 100) * Spieler[driver][pTaxiPreis];
    }
    return costs;
}
stock IsPlayerAnyTaxiCustomer(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) && playerid != i ) {
            for(new j ; j < MAX_TAXI_KUNDEN ; j++) {
                if( Spieler[i][pTaxiKunden][j] == playerid ) {
                    return i;
                }
            }
        }
    }
    return -1;
}
stock SendTaxiMessage(driver,color,msg[]) {
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        if( Spieler[driver][pTaxiKunden][i] != INVALID_PLAYER_ID ) {
            SendClientMessage(Spieler[driver][pTaxiKunden][i],color,msg);
        }
    }
    return 1;
}

COMMAND:hausverstaatlichen(playerid,params[]) {
    new pHouse = GetPlayerHouse(playerid);
    if( pHouse == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Haus!");
    }
    if( Spieler[playerid][pPlayerHouse] == 999 ) {
        return SendClientMessage(playerid, COLOR_RED, "Das Haus, dessen Schlüssel du besitzt, gehört nicht dir!");
    }
    new h = IsPlayerAtHouse(playerid);
    if(h == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
    if( h != pHouse ) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe deines Hauses.");
    ShowPlayerDialog(playerid,DIALOG_BESTAETIGEN,DIALOG_STYLE_MSGBOX,"Möchtest du diesen Befehl genauso ausführen?",
    "Um Fehleingaben zu vermeiden, wird bei diesem Befehl sicherheitshalber nochmal um Bestätigung gebeten.",
    "AUSFÜHREN","ABBRECHEN");
    sichervar[playerid][0]=1;
    return 1;
}

COMMAND:regsperre(playerid,params[]) {
    if (Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");

    new String[128];
    if(g_bRegSperre) {
        format(String,sizeof(String),"%s %s hat die Reg-Sperre deaktiviert.", GetPlayerAdminRang(playerid), GetName(playerid));
    }
    else {
        format(String,sizeof(String),"%s %s hat die Reg-Sperre aktiviert.", GetPlayerAdminRang(playerid), GetName(playerid));
    }
    SendAdminMessage(COLOR_RED, String);
    g_bRegSperre = !g_bRegSperre;
    return 1;
}

COMMAND:creategutschein(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 5)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new
        code[32],
        gutschein;
    if(sscanf(params,"s[32]d",code,gutschein)) {
        return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /Creategutschein [CODE] [GESCHENK]");
    }
    new
        String[80];
    if(gutschein < 1 || gutschein >= sizeof(g_Gutschein) ) {
        format(String,sizeof(String),"* Benutze:"COLOR_HEX_GREENA" /Creategutschein [CODE] [GESCHENK] (1 - %d )",sizeof(g_Gutschein) - 1);
        return SendClientMessage(playerid,COLOR_BLUE,String);
    }
    mysql_real_escape_string(code,code);
    PlayerSQLExtra(playerid,params);
    format(String,sizeof(String),"SELECT * FROM `gutschein` WHERE `code` = '%s' LIMIT 1", code );
    mysql_pquery( String , THREAD_CREATEGUTSCHEIN_CHECK , playerid, gSQL,MySQLThreadOwner);
    return 1;
}

COMMAND:gutscheincode(playerid,params[]) {
    #pragma unused params
    ShowPlayerDialog(playerid,DIALOG_GUTSCHEINCODE,DIALOG_STYLE_INPUT,"{4444FF}Gutscheincode","{FFFFFF}Bitte gib den Gutscheincode ein","Einlösen","Abbruch");
    return 1;
}

COMMAND:wartungen(playerid,params[]) {
    #pragma unused params
    new
        slot,
        besitzer,
        vehicleid;
    if( !IsPlayerInRangeOfPoint(playerid, 10, TUEV_AUTO_POINT) && !IsPlayerInRangeOfPoint(playerid, 10, TUEV_AIRCRAFT_POINT)) return SendClientMessage(playerid,COLOR_RED,"Du bist nicht an der TÜV-Werkstatt");
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du musst in deinem Fahrzeug sitzen!");
    }
    besitzer = GetCarOwner(vehicleid);
    if( besitzer == INVALID_PLAYER_ID || playerid != besitzer ) {
        return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht.");
    }
    slot = GetCarOwnerSlot(besitzer, vehicleid);
    if( slot == 555 || PlayerCar[besitzer][slot][TUV] == 0 || IsBicycle(GetVehicleModel(vehicleid))) {
        return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug benötigt keine Wartung vom TÜV.");
    }
    ShowPlayerDialog(playerid,DIALOG_WARTUNG,DIALOG_STYLE_MSGBOX,"{4444FF}Wartung","{FFFFFF}An Ihrem Fahrzeug stehen allgemeine Wartungen an!\n\
        Die Werkstatt wird die nötigen Wartungen durchführen, damit das Fahrzeug weiterhin\n\
        sicher auf den Straßen fahren kann.\n\
        Erneuert wird die Auspuffanlage, Zahnriemen, Bremsbelege, Reifen und Motoröl, \n\
        außerdem wird der Motor fachgerecht gereinigt!\n\n\
        Preis: $25.000","Bezahlen","Ablehnen");
    return 1;
}

CMD:offtban(playerid, params[])
{
    new sName[24], grund[64], time;
    if(sscanf(params, "s[24]is[64]", sName, time, grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /offtban [Name] [Zeit in Min.] [Grund]");
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    if(time < 1 || time > 14400)return SendClientMessage(playerid, COLOR_ORANGE, "Die Zeit sollte sich zwischen 1 und 14400 liegen. (1 Minute oder 10 Tage)");
    // -> THREADED
    new
        query[256],
        tBanTime = time * 60;
    tBanTime = tBanTime + gettime();

    mysql_real_escape_string(sName,sName);
    mysql_real_escape_string(grund,grund);

    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' ,`TimeBan` = %d WHERE `Name` = '%s'",
        GetName(playerid),grund,tBanTime,sName);
    mysql_pquery(query,THREAD_OFFTBAN,playerid,gSQL,MySQLThreadOwner);
    query[0] = '\0';
    format(query,sizeof(query),"[OFFLINE-TBAN] Spieler %s wurde von %s für %d Minuten vom Server gebannt! ( OFFLINE TBAN )",sName,GetName(playerid) ,time);
    SendAdminMessage(COLOR_RED, query);
    query[0] = '\0';
    format(query,sizeof(query),"%s wurde von %s %s offline für %d Minuten gebannt, Grund: %s", sName, GetPlayerAdminRang(playerid), GetName(playerid), time, grund);
    SendUCPAktenEintrag( playerid, GetName(playerid) , sName , query );
    return 1;
}

CMD:sinfo(playerid,params[]) {
    #pragma unused params
    if( Spieler[playerid][t3dSInfo] == Text3D:INVALID_3DTEXT_ID ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Über deinem Kopf werden nun für deine Mitspieler FPS und Ping angezeigt");
        Spieler[playerid][t3dSInfo] = Text3D:CreateDynamic3DTextLabel("Initialisierung...", COLOR_GREY, 0.0, 0.0, 0.0 , 14.0 , .attachedplayer = playerid);
        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][t3dSInfo] , E_STREAMER_ATTACH_OFFSET_X , 0.0 );
        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][t3dSInfo] , E_STREAMER_ATTACH_OFFSET_Y , 0.0 );
        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][t3dSInfo] , E_STREAMER_ATTACH_OFFSET_Z , 0.45 );
    }
    else {
        DestroyDynamic3DTextLabel(Spieler[playerid][t3dSInfo]);
        Spieler[playerid][t3dSInfo] = Text3D:INVALID_3DTEXT_ID;
        SendClientMessage(playerid,COLOR_ORANGE,"Über deinem Kopf werden FPS und Ping nicht mehr angezeigt");
    }
    return 1;
}
new pping[MAX_PLAYERS];
forward Pulse_SInfo();
public Pulse_SInfo()
{
    new String[200];
    for(new i ; i < MAX_PLAYERS ; i++)
    {
        if( IsPlayerConnected(i) )
        {
            if( !IsPlayerNPC(i) )
            {
                new pingg=GetPlayerPing(i);
                if(pingg>=1000)
                {
                    pping[i]++;
                }
                else if(pping[i]>=1)
                {
                    pping[i]--;
                }
                if(pping[i]>=3)
                {
                    format(String, sizeof(String), "[KICK]: Spieler %s wurde vom Server-System gekickt, Grund: zu hoher Ping (%i)", GetName(i), pingg);
                    SendAdminMessage(COLOR_RED,String);
                    KickDelay(i,1000);
                    pping[i]=0;
                }
                if( Spieler[i][t3dSInfo] != Text3D:INVALID_3DTEXT_ID )
                {
                    // Aktualisierung
                    format(String,sizeof(String),"Ping: %d\nFPS: %d", GetPlayerPing(i), pFPS[i] );
                    UpdateDynamic3DTextLabelText(Spieler[i][t3dSInfo], COLOR_GREY, String);
                }
            }
        }
    }
    return 1;
}

COMMAND:fahrzeuginfo(playerid,params[]) {
    #pragma unused params
    new
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich in keinem Fahrzeug");
    }
    new
        sNameUnpacked[MAX_PLAYER_NAME],
        String[128];
    SendClientMessage(playerid,COLOR_BLUE,"Die letzten "#MAX_PASSANGERS_TRACKER" Fahrer waren:");
    for(new i ; i < MAX_PASSANGERS_TRACKER ; i++) {
        strunpack(sNameUnpacked,g_aiLastPassengers[vehicleid][i]);
        if(!isnull(sNameUnpacked)) {
            format(String,sizeof(String),"%d) %s",(i+1),sNameUnpacked);
            SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    return 1;
}

stock AddVehiclePassenger(vehicleid,playerid) {
    new
        sName[MAX_PLAYER_NAME],
        sNameUnpacked[MAX_PLAYER_NAME];
    strunpack(sNameUnpacked,g_aiLastPassengers[vehicleid][0]);
    GetPlayerName(playerid,sName,sizeof(sName));
    if( isnull(sNameUnpacked) || strcmp(sNameUnpacked,sName) != 0) {
        for(new i = MAX_PASSANGERS_TRACKER - 1 ; i != 0 ; i--) {
            g_aiLastPassengers[vehicleid][i] = g_aiLastPassengers[vehicleid][i - 1];
        }
        strpack(g_aiLastPassengers[vehicleid][0], sName );
        return 1;
    }
    return 0;
}
stock ResetVehiclePassengers(vehicleid) {
    for(new j ; j < MAX_PASSANGERS_TRACKER ; j++) {
        g_aiLastPassengers[vehicleid][j][0] = '\0';
    }
    return 1;
}

COMMAND:fahrzeugreparieren(playerid,params[]) {
    #pragma unused params
    if(PlayerHaveCar[playerid][PlayerKey[playerid]])
    {
        new
            String[128],
            key;
        key = PlayerKey[playerid];
        if( PlayerCar[playerid][key][CarState] == e_Vehicle_Status_Destroyed ) {
            format(String,sizeof(String),"Du hast die Reparaturkosten in Höhe von 1.500$ für deinen %s bezahlt.", CarName[ PlayerCar[playerid][key][CarModel] - 400] );
            SendClientMessage(playerid,COLOR_ORANGE,String);
            Spieler[playerid][pBank] -= 1500;
            PlayerCar[playerid][key][CarState] = e_Vehicle_Status_Normal;
            PlayerHaveCar[playerid][key] = 0;//system
            PlayerCarSpawn(playerid,key);
        }
        else {
            SendClientMessage(playerid, COLOR_RED, "Das ausgewählte Fahrzeug muss nicht repariert werden.");
        }
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Auf dem ausgewählten Schlüssel ist kein Fahrzeug.");
    }
    return 1;
}
COMMAND:offcprison(playerid,params[]) {
    if(Spieler[playerid][pAdmin] < 2)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
    new sName[MAX_PLAYER_NAME], grund[64], anzahl;
    if(sscanf(params, "s[24]is[64]", sName, anzahl,grund))return SendClientMessage(playerid, COLOR_BLUE, "* Benutze:"COLOR_HEX_GREENA" /offcprison [Name] [Anzahl] [Grund]");

    new String[256];

    format(String,sizeof(String),"[OFFLINE-CPRISON] Spieler %s wurde von %s %s zum Checkpoint-Lauf verdonnert!", sName, GetPlayerAdminRang(playerid), GetName(playerid));
    SendAdminMessage(COLOR_RED,String);
    format(String,sizeof(String),"[OFFLINE-CPRISON] Checkpoints: %d, Grund: %s",anzahl,grund);
    SendAdminMessage(COLOR_RED,String);

    mysql_real_escape_string(sName,sName);
    mysql_real_escape_string(grund,grund);

    format(String,sizeof(String),"Spieler %s wurde von %s %s zum Checkpoint-Lauf verdonnert! Checkpoints: %d, Grund: %s", sName, GetPlayerAdminRang(playerid), GetName(playerid), anzahl, grund);
    SendUCPAktenEintrag( playerid, GetName(playerid) ,  sName , String );

    String[0] = '\0';
    format(String,sizeof(String),"UPDATE `accounts` SET `PrisonRunCount` = %d ,`PrisonRun` = %d WHERE `Name` = '%s'",
        0,anzahl,sName);

    mysql_pquery(String,THREAD_OFFCPRISON,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock GetPlayerDrogenSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pDrogenPoints];
    for(new i ; i < sizeof(g_DrogenSkills) ; i++) {
        if( points >= g_DrogenSkills[i][DS_iTour] ) {
            value = i + 1;
        }
    }
    return value;
}

stock GetPlayerDrogenSkillValue(playerid) {
    new
        value,
        points = Spieler[playerid][pDrogenPoints];
    for(new i ; i < sizeof(g_DrogenSkills) ; i++) {
        if( points >= g_DrogenSkills[i][DS_iTour] ) {
            value = g_DrogenSkills[i][DS_iPackets];
        }
    }
    return value;
}

stock GetPlayerWaffenteileSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pWaffenteilePoints];
    for(new i ; i < sizeof(g_WaffenteileSkills) ; i++) {
        if( points >= g_WaffenteileSkills[i][WS_iTour] ) {
            value = i + 1;
        }
    }
    return value;
}

stock GetPlayerWaffenteileSkillValue(playerid) {
    new
        value,
        points = Spieler[playerid][pWaffenteilePoints];
    for(new i ; i < sizeof(g_WaffenteileSkills) ; i++) {
        if( points >= g_WaffenteileSkills[i][WS_iTour] ) {
            value = g_WaffenteileSkills[i][WS_iPackets];
        }
    }
    return value;
}
stock CheckTeleHack(spielerid,zeitms)
{
    if (Spieler[spielerid][pAdmin] > 2) return 1;

    if(GetPlayerDistanceFromPoint(spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid])>=6)
    {
        printf("ID,x,y,z,distanz %i %f %f %f %f",spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid],
        GetPlayerDistanceFromPoint(spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid]));
        if(playertimestamp[spielerid]+zeitms/1000<gettime())
        {
            printf("timestamp ergebnis gettime %i %i %i",playertimestamp[spielerid],playertimestamp[spielerid]+zeitms/1000,gettime());
            playertimestamp[spielerid]=gettime();
        }
        else
        {
            SendClientMessage(spielerid, COLOR_RED, "[BANNED] Du wurdest soeben vom Server-System dauerhaft aus dem Server gebannt. Grund: Teleporthack");
            SendClientMessage(spielerid, COLOR_RED, "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf www.LyD-Roleplay.de ein Entbannantrag!");
            new query[256];
            format(query,sizeof(query),"Gebannt: %s von: System, Grund: Teleporthack, Dauer: Permanent",GetName(spielerid));
            BanLog(query);
            format(query,sizeof(query),"%s wurde von Server-System dauerhaft gebannt, Grund: Teleporthack",GetName(spielerid));
            SendUCPAktenEintrag(spielerid,"Server-System",GetName(spielerid),query);
            new String[256];
            format(String,sizeof(String),"System hat Spieler %s dauerhaft gebannt, Grund: Teleporthack",GetName(spielerid));
            AdminLog(String);
            format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = 'Server-System' ,`BanGrund` = 'Teleporthack', `Banned` = 1 WHERE `Name` = '%s'",GetName(spielerid));
            mysql_pquery(query,THREAD_BAN,spielerid,gSQL,MySQLThreadOwner);
            KickDelay(spielerid);
        }
    }
    GetPlayerPos(spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid]);
    return 1;
}

forward meslockrelease(playerid);
public meslockrelease(playerid)
{
    meslock[playerid]=0;
}
GetWeekDay(day=0, month=0, year=0)
{
  if (!day)
    getdate(year, month, day);

  new
    weekday_str[20],
    j,
    e
  ;

  if (month <= 2)
  {
    month += 12;
    --year;
  }

  j = year % 100;
  e = year / 100;

  switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
  {
    case 0: weekday_str = "Samstag";
    case 1: weekday_str = "Sonntag";
    case 2: weekday_str = "Montag";
    case 3: weekday_str = "Dienstag";
    case 4: weekday_str = "Mittwoch";
    case 5: weekday_str = "Donnerstag";
    case 6: weekday_str = "Freitag";
  }

  return weekday_str;
}

forward fraklabeltimer();
public fraklabeltimer()
{
    for(new i;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            new query[128];
            format(query,sizeof(query),"SELECT `fraktion` FROM `frakblacklist` WHERE `name` = '%s'",GetName(i));
            mysql_pquery(query,THREAD_FRAKBLACKLISTLABEL,i,gSQL,MySQLThreadOwner);
        }
    }
}
stock GetPlayerFPS(playerid)
{
    SetPVarInt(playerid, "DrunkL", GetPlayerDrunkLevel(playerid));
    if(GetPVarInt(playerid, "DrunkL") < 100) SetPlayerDrunkLevel(playerid, 2000);
        else{
            if(GetPVarInt(playerid, "LDrunkL") != GetPVarInt(playerid, "DrunkL"))
            {
                SetPVarInt(playerid, "FPS", (GetPVarInt(playerid, "LDrunkL") - GetPVarInt(playerid, "DrunkL")));
                SetPVarInt(playerid, "LDrunkL", GetPVarInt(playerid, "DrunkL"));
                if((GetPVarInt(playerid, "FPS") > 0) && (GetPVarInt(playerid, "FPS") < 256))
                {
                    return GetPVarInt(playerid, "FPS") - 1;
                }
            }
        }
    return 0;
}
forward miettimercheck(playerid);
public miettimercheck(playerid)
{
    if(miettimer[playerid]==1)
    {
        new vID = GetPlayerVehicleID(playerid);
        UnLockCar(vID);
        RemovePlayerFromVehicle(playerid);
        miettimer[playerid]=0;
        ShowPlayerDialog(playerid,DIALOG_PECH,DIALOG_STYLE_MSGBOX,"Abbruch","Da du nicht reagiert hast wurde das mieten abgebrochen","OK","");
    }
}

stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
        if(Roadblocks[i][sCreated] == 0)
        {
            Roadblocks[i][sCreated] = 1;
            Roadblocks[i][sX] = x;
            Roadblocks[i][sY] = y;
            Roadblocks[i][sZ] = z;
            Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z, 0, 0, Angle);
            return 1;
        }
    }
    return 0;
}

stock DeleteAllRoadblocks(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
            if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[i][sObject]);
            }
        }
    }
    return 0;
}

stock DeleteClosestRoadblock(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
            if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[i][sObject]);
                return 1;
            }
        }
    }
    return 0;
}
